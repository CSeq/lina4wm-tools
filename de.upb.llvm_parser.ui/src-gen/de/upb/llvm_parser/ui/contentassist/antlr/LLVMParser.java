/*
* generated by Xtext
*/
package de.upb.llvm_parser.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import de.upb.llvm_parser.services.LLVMGrammarAccess;

public class LLVMParser extends AbstractContentAssistParser {
	
	@Inject
	private LLVMGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected de.upb.llvm_parser.ui.contentassist.antlr.internal.InternalLLVMParser createParser() {
		de.upb.llvm_parser.ui.contentassist.antlr.internal.InternalLLVMParser result = new de.upb.llvm_parser.ui.contentassist.antlr.internal.InternalLLVMParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getToplevelentityAccess().getAlternatives(), "rule__Toplevelentity__Alternatives");
					put(grammarAccess.getGlobalTypeAccess().getAlternatives(), "rule__GlobalType__Alternatives");
					put(grammarAccess.getAliaseeAccess().getAlternatives(), "rule__Aliasee__Alternatives");
					put(grammarAccess.getGlobalAccess().getAlternatives(), "rule__Global__Alternatives");
					put(grammarAccess.getGlobalVarAccess().getAlternatives_5(), "rule__GlobalVar__Alternatives_5");
					put(grammarAccess.getTLSModelAccess().getAlternatives(), "rule__TLSModel__Alternatives");
					put(grammarAccess.getOptionalThreadLocalAccess().getAlternatives(), "rule__OptionalThreadLocal__Alternatives");
					put(grammarAccess.getOptionalLinkageAccess().getAlternatives(), "rule__OptionalLinkage__Alternatives");
					put(grammarAccess.getOptionalAddrSpaceAccess().getAlternatives(), "rule__OptionalAddrSpace__Alternatives");
					put(grammarAccess.getOptionalVisibilityAccess().getAlternatives(), "rule__OptionalVisibility__Alternatives");
					put(grammarAccess.getOptionalCallingConvAccess().getAlternatives(), "rule__OptionalCallingConv__Alternatives");
					put(grammarAccess.getOptionalAlignmentAccess().getAlternatives(), "rule__OptionalAlignment__Alternatives");
					put(grammarAccess.getOptionalCommaAlignAccess().getAlternatives(), "rule__OptionalCommaAlign__Alternatives");
					put(grammarAccess.getOptionalStackAlignmentAccess().getAlternatives(), "rule__OptionalStackAlignment__Alternatives");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getParameterListAccess().getAlternatives(), "rule__ParameterList__Alternatives");
					put(grammarAccess.getArgTypeListIAccess().getAlternatives(), "rule__ArgTypeListI__Alternatives");
					put(grammarAccess.getStructTypeAccess().getAlternatives(), "rule__StructType__Alternatives");
					put(grammarAccess.getValIDAccess().getAlternatives(), "rule__ValID__Alternatives");
					put(grammarAccess.getGlobalValueVectorAccess().getAlternatives(), "rule__GlobalValueVector__Alternatives");
					put(grammarAccess.getMetadataValueAccess().getAlternatives(), "rule__MetadataValue__Alternatives");
					put(grammarAccess.getRetAccess().getAlternatives(), "rule__Ret__Alternatives");
					put(grammarAccess.getBrAccess().getAlternatives(), "rule__Br__Alternatives");
					put(grammarAccess.getInstructionAccess().getAlternatives(), "rule__Instruction__Alternatives");
					put(grammarAccess.getElementAccess().getAlternatives(), "rule__Element__Alternatives");
					put(grammarAccess.getToplevelentityAccess().getGroup_0(), "rule__Toplevelentity__Group_0__0");
					put(grammarAccess.getToplevelentityAccess().getGroup_1(), "rule__Toplevelentity__Group_1__0");
					put(grammarAccess.getToplevelentityAccess().getGroup_2(), "rule__Toplevelentity__Group_2__0");
					put(grammarAccess.getToplevelentityAccess().getGroup_3(), "rule__Toplevelentity__Group_3__0");
					put(grammarAccess.getToplevelentityAccess().getGroup_4(), "rule__Toplevelentity__Group_4__0");
					put(grammarAccess.getToplevelentityAccess().getGroup_4_4(), "rule__Toplevelentity__Group_4_4__0");
					put(grammarAccess.getToplevelentityAccess().getGroup_5(), "rule__Toplevelentity__Group_5__0");
					put(grammarAccess.getToplevelentityAccess().getGroup_6(), "rule__Toplevelentity__Group_6__0");
					put(grammarAccess.getToplevelentityAccess().getGroup_7(), "rule__Toplevelentity__Group_7__0");
					put(grammarAccess.getTypeAndValueAccess().getGroup(), "rule__TypeAndValue__Group__0");
					put(grammarAccess.getMDStringAccess().getGroup(), "rule__MDString__Group__0");
					put(grammarAccess.getMDNodeAccess().getGroup(), "rule__MDNode__Group__0");
					put(grammarAccess.getUnnamedTypeAccess().getGroup(), "rule__UnnamedType__Group__0");
					put(grammarAccess.getAliasAccess().getGroup(), "rule__Alias__Group__0");
					put(grammarAccess.getAliaseeAccess().getGroup_1(), "rule__Aliasee__Group_1__0");
					put(grammarAccess.getAliaseeAccess().getGroup_2(), "rule__Aliasee__Group_2__0");
					put(grammarAccess.getGlobalAccess().getGroup_0(), "rule__Global__Group_0__0");
					put(grammarAccess.getGlobalAccess().getGroup_1(), "rule__Global__Group_1__0");
					put(grammarAccess.getGlobalVarAccess().getGroup(), "rule__GlobalVar__Group__0");
					put(grammarAccess.getOptionalThreadLocalAccess().getGroup_2(), "rule__OptionalThreadLocal__Group_2__0");
					put(grammarAccess.getOptionalAddrSpaceAccess().getGroup_1(), "rule__OptionalAddrSpace__Group_1__0");
					put(grammarAccess.getOptionalCallingConvAccess().getGroup_15(), "rule__OptionalCallingConv__Group_15__0");
					put(grammarAccess.getInstructionMetadataAccess().getGroup(), "rule__InstructionMetadata__Group__0");
					put(grammarAccess.getInstructionMetadataAccess().getGroup_1(), "rule__InstructionMetadata__Group_1__0");
					put(grammarAccess.getOptionalAlignmentAccess().getGroup_1(), "rule__OptionalAlignment__Group_1__0");
					put(grammarAccess.getOptionalCommaAlignAccess().getGroup_1(), "rule__OptionalCommaAlign__Group_1__0");
					put(grammarAccess.getOptionalStackAlignmentAccess().getGroup_1(), "rule__OptionalStackAlignment__Group_1__0");
					put(grammarAccess.getIndexListAccess().getGroup(), "rule__IndexList__Group__0");
					put(grammarAccess.getTypeAccess().getGroup_3(), "rule__Type__Group_3__0");
					put(grammarAccess.getTypeAccess().getGroup_4(), "rule__Type__Group_4__0");
					put(grammarAccess.getTypeAccess().getGroup_7(), "rule__Type__Group_7__0");
					put(grammarAccess.getTypeAccess().getGroup_8(), "rule__Type__Group_8__0");
					put(grammarAccess.getTypeAccess().getGroup_9(), "rule__Type__Group_9__0");
					put(grammarAccess.getParameterListAccess().getGroup_0(), "rule__ParameterList__Group_0__0");
					put(grammarAccess.getParameterListAccess().getGroup_1(), "rule__ParameterList__Group_1__0");
					put(grammarAccess.getParameterListAccess().getGroup_1_2(), "rule__ParameterList__Group_1_2__0");
					put(grammarAccess.getArgAccess().getGroup(), "rule__Arg__Group__0");
					put(grammarAccess.getArgumentListAccess().getGroup(), "rule__ArgumentList__Group__0");
					put(grammarAccess.getArgTypeListIAccess().getGroup_2(), "rule__ArgTypeListI__Group_2__0");
					put(grammarAccess.getArgTypeListIAccess().getGroup_3(), "rule__ArgTypeListI__Group_3__0");
					put(grammarAccess.getArgTypeListIAccess().getGroup_3_1(), "rule__ArgTypeListI__Group_3_1__0");
					put(grammarAccess.getFunctionTypeAccess().getGroup(), "rule__FunctionType__Group__0");
					put(grammarAccess.getStructTypeAccess().getGroup_0(), "rule__StructType__Group_0__0");
					put(grammarAccess.getStructTypeAccess().getGroup_1(), "rule__StructType__Group_1__0");
					put(grammarAccess.getStructTypeAccess().getGroup_1_2(), "rule__StructType__Group_1_2__0");
					put(grammarAccess.getStructTypeAccess().getGroup_2(), "rule__StructType__Group_2__0");
					put(grammarAccess.getStructTypeAccess().getGroup_3(), "rule__StructType__Group_3__0");
					put(grammarAccess.getStructTypeAccess().getGroup_3_3(), "rule__StructType__Group_3_3__0");
					put(grammarAccess.getValIDAccess().getGroup_0(), "rule__ValID__Group_0__0");
					put(grammarAccess.getValIDAccess().getGroup_1(), "rule__ValID__Group_1__0");
					put(grammarAccess.getValIDAccess().getGroup_2(), "rule__ValID__Group_2__0");
					put(grammarAccess.getValIDAccess().getGroup_3(), "rule__ValID__Group_3__0");
					put(grammarAccess.getValIDAccess().getGroup_4(), "rule__ValID__Group_4__0");
					put(grammarAccess.getGlobalValueVectorAccess().getGroup_1(), "rule__GlobalValueVector__Group_1__0");
					put(grammarAccess.getGlobalValueVectorAccess().getGroup_1_1(), "rule__GlobalValueVector__Group_1_1__0");
					put(grammarAccess.getFunctionHeaderAccess().getGroup(), "rule__FunctionHeader__Group__0");
					put(grammarAccess.getFunctionBodyAccess().getGroup(), "rule__FunctionBody__Group__0");
					put(grammarAccess.getBasicBlockAccess().getGroup(), "rule__BasicBlock__Group__0");
					put(grammarAccess.getRetAccess().getGroup_0(), "rule__Ret__Group_0__0");
					put(grammarAccess.getRetAccess().getGroup_0_2(), "rule__Ret__Group_0_2__0");
					put(grammarAccess.getRetAccess().getGroup_1(), "rule__Ret__Group_1__0");
					put(grammarAccess.getRetAccess().getGroup_1_2(), "rule__Ret__Group_1_2__0");
					put(grammarAccess.getBrAccess().getGroup_0(), "rule__Br__Group_0__0");
					put(grammarAccess.getBrAccess().getGroup_1(), "rule__Br__Group_1__0");
					put(grammarAccess.getInstructionAccess().getGroup_0(), "rule__Instruction__Group_0__0");
					put(grammarAccess.getInstructionAccess().getGroup_1(), "rule__Instruction__Group_1__0");
					put(grammarAccess.getJumpTableAccess().getGroup(), "rule__JumpTable__Group__0");
					put(grammarAccess.getInvokeAccess().getGroup(), "rule__Invoke__Group__0");
					put(grammarAccess.getResumeAccess().getGroup(), "rule__Resume__Group__0");
					put(grammarAccess.getArithmeticAccess().getGroup(), "rule__Arithmetic__Group__0");
					put(grammarAccess.getLogicalAccess().getGroup(), "rule__Logical__Group__0");
					put(grammarAccess.getCompareAccess().getGroup(), "rule__Compare__Group__0");
					put(grammarAccess.getCastAccess().getGroup(), "rule__Cast__Group__0");
					put(grammarAccess.getSelectAccess().getGroup(), "rule__Select__Group__0");
					put(grammarAccess.getVA_ArgAccess().getGroup(), "rule__VA_Arg__Group__0");
					put(grammarAccess.getExtractElementAccess().getGroup(), "rule__ExtractElement__Group__0");
					put(grammarAccess.getInsertElementAccess().getGroup(), "rule__InsertElement__Group__0");
					put(grammarAccess.getShuffleVectorAccess().getGroup(), "rule__ShuffleVector__Group__0");
					put(grammarAccess.getPHIAccess().getGroup(), "rule__PHI__Group__0");
					put(grammarAccess.getPHIAccess().getGroup_7(), "rule__PHI__Group_7__0");
					put(grammarAccess.getLandingPadAccess().getGroup(), "rule__LandingPad__Group__0");
					put(grammarAccess.getClauseAccess().getGroup(), "rule__Clause__Group__0");
					put(grammarAccess.getClauseAccess().getGroup_5(), "rule__Clause__Group_5__0");
					put(grammarAccess.getCallAccess().getGroup(), "rule__Call__Group__0");
					put(grammarAccess.getAllocAccess().getGroup(), "rule__Alloc__Group__0");
					put(grammarAccess.getAllocAccess().getGroup_2(), "rule__Alloc__Group_2__0");
					put(grammarAccess.getAllocAccess().getGroup_3(), "rule__Alloc__Group_3__0");
					put(grammarAccess.getLoadAccess().getGroup(), "rule__Load__Group__0");
					put(grammarAccess.getLoadAccess().getGroup_3(), "rule__Load__Group_3__0");
					put(grammarAccess.getLoadAccess().getGroup_10(), "rule__Load__Group_10__0");
					put(grammarAccess.getStoreAccess().getGroup(), "rule__Store__Group__0");
					put(grammarAccess.getStoreAccess().getGroup_5(), "rule__Store__Group_5__0");
					put(grammarAccess.getStoreAccess().getGroup_14(), "rule__Store__Group_14__0");
					put(grammarAccess.getCmpXchgAccess().getGroup(), "rule__CmpXchg__Group__0");
					put(grammarAccess.getAtomicRMWAccess().getGroup(), "rule__AtomicRMW__Group__0");
					put(grammarAccess.getFenceAccess().getGroup(), "rule__Fence__Group__0");
					put(grammarAccess.getGetElementPtrAccess().getGroup(), "rule__GetElementPtr__Group__0");
					put(grammarAccess.getGetElementPtrAccess().getGroup_3(), "rule__GetElementPtr__Group_3__0");
					put(grammarAccess.getExtractValueAccess().getGroup(), "rule__ExtractValue__Group__0");
					put(grammarAccess.getExtractValueAccess().getGroup_2(), "rule__ExtractValue__Group_2__0");
					put(grammarAccess.getInsertValueAccess().getGroup(), "rule__InsertValue__Group__0");
					put(grammarAccess.getInsertValueAccess().getGroup_4(), "rule__InsertValue__Group_4__0");
					put(grammarAccess.getMDNodeVectorAccess().getGroup(), "rule__MDNodeVector__Group__0");
					put(grammarAccess.getMDNodeVectorAccess().getGroup_1(), "rule__MDNodeVector__Group_1__0");
					put(grammarAccess.getLLVMAccess().getElementsAssignment(), "rule__LLVM__ElementsAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			de.upb.llvm_parser.ui.contentassist.antlr.internal.InternalLLVMParser typedParser = (de.upb.llvm_parser.ui.contentassist.antlr.internal.InternalLLVMParser) parser;
			typedParser.entryRuleLLVM();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public LLVMGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(LLVMGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
