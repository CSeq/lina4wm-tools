/*
* generated by Xtext
*/
grammar InternalLLVM;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package de.upb.llvm_parser.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.upb.llvm_parser.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.upb.llvm_parser.services.LLVMGrammarAccess;

}

@parser::members {

 	private LLVMGrammarAccess grammarAccess;
 	
    public InternalLLVMParser(TokenStream input, LLVMGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "LLVM";	
   	}
   	
   	@Override
   	protected LLVMGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleLLVM
entryRuleLLVM returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLLVMRule()); }
	 iv_ruleLLVM=ruleLLVM 
	 { $current=$iv_ruleLLVM.current; } 
	 EOF 
;

// Rule LLVM
ruleLLVM returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getLLVMAccess().getElementsAbstractElementParserRuleCall_0()); 
	    }
		lv_elements_0_0=ruleAbstractElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLLVMRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_0_0, 
        		"AbstractElement");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleID_FQN
entryRuleID_FQN returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getID_FQNRule()); } 
	 iv_ruleID_FQN=ruleID_FQN 
	 { $current=$iv_ruleID_FQN.current.getText(); }  
	 EOF 
;

// Rule ID_FQN
ruleID_FQN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((    this_INT_TYPE_0=RULE_INT_TYPE    {
		$current.merge(this_INT_TYPE_0);
    }

    { 
    newLeafNode(this_INT_TYPE_0, grammarAccess.getID_FQNAccess().getINT_TYPETerminalRuleCall_0_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getID_FQNAccess().getIDTerminalRuleCall_0_1()); 
    }

    |
	kw='catch' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getID_FQNAccess().getCatchKeyword_0_2()); 
    }

    |
	kw='invoke' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getID_FQNAccess().getInvokeKeyword_0_3()); 
    }

    |
	kw='resume' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getID_FQNAccess().getResumeKeyword_0_4()); 
    }

    |
	kw='switch' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getID_FQNAccess().getSwitchKeyword_0_5()); 
    }

    |
	kw='true' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getID_FQNAccess().getTrueKeyword_0_6()); 
    }

    |
	kw='false' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getID_FQNAccess().getFalseKeyword_0_7()); 
    }
)(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getID_FQNAccess().getFullStopKeyword_1_0()); 
    }
(    this_INT_TYPE_9=RULE_INT_TYPE    {
		$current.merge(this_INT_TYPE_9);
    }

    { 
    newLeafNode(this_INT_TYPE_9, grammarAccess.getID_FQNAccess().getINT_TYPETerminalRuleCall_1_1_0()); 
    }

    |    this_ID_10=RULE_ID    {
		$current.merge(this_ID_10);
    }

    { 
    newLeafNode(this_ID_10, grammarAccess.getID_FQNAccess().getIDTerminalRuleCall_1_1_1()); 
    }

    |
	kw='catch' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getID_FQNAccess().getCatchKeyword_1_1_2()); 
    }

    |
	kw='invoke' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getID_FQNAccess().getInvokeKeyword_1_1_3()); 
    }

    |
	kw='resume' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getID_FQNAccess().getResumeKeyword_1_1_4()); 
    }

    |
	kw='switch' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getID_FQNAccess().getSwitchKeyword_1_1_5()); 
    }

    |
	kw='true' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getID_FQNAccess().getTrueKeyword_1_1_6()); 
    }

    |
	kw='false' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getID_FQNAccess().getFalseKeyword_1_1_7()); 
    }
))*)
    ;





// Entry rule entryRuleAbstractElement
entryRuleAbstractElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractElementRule()); }
	 iv_ruleAbstractElement=ruleAbstractElement 
	 { $current=$iv_ruleAbstractElement.current; } 
	 EOF 
;

// Rule AbstractElement
ruleAbstractElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getAbstractElementAccess().getTopLevelEntityParserRuleCall_0_0()); 
    }
    this_TopLevelEntity_0=ruleTopLevelEntity
    { 
        $current = $this_TopLevelEntity_0.current; 
        afterParserOrEnumRuleCall();
    }
(this_SL_COMMENT_1=RULE_SL_COMMENT
    { 
    newLeafNode(this_SL_COMMENT_1, grammarAccess.getAbstractElementAccess().getSL_COMMENTTerminalRuleCall_0_1()); 
    }
)?)
    |(
    { 
        newCompositeNode(grammarAccess.getAbstractElementAccess().getMainLevelEntityParserRuleCall_1_0()); 
    }
    this_MainLevelEntity_2=ruleMainLevelEntity
    { 
        $current = $this_MainLevelEntity_2.current; 
        afterParserOrEnumRuleCall();
    }
(this_SL_COMMENT_3=RULE_SL_COMMENT
    { 
    newLeafNode(this_SL_COMMENT_3, grammarAccess.getAbstractElementAccess().getSL_COMMENTTerminalRuleCall_1_1()); 
    }
)?))
;





// Entry rule entryRuleTopLevelEntity
entryRuleTopLevelEntity returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTopLevelEntityRule()); }
	 iv_ruleTopLevelEntity=ruleTopLevelEntity 
	 { $current=$iv_ruleTopLevelEntity.current; } 
	 EOF 
;

// Rule TopLevelEntity
ruleTopLevelEntity returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='module' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTopLevelEntityAccess().getModuleKeyword_0_0());
    }
	otherlv_1='asm' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTopLevelEntityAccess().getAsmKeyword_0_1());
    }
(
(
		lv_module_2_0=RULE_STRING
		{
			newLeafNode(lv_module_2_0, grammarAccess.getTopLevelEntityAccess().getModuleSTRINGTerminalRuleCall_0_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTopLevelEntityRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"module",
        		lv_module_2_0, 
        		"STRING");
	    }

)
))
    |(	otherlv_3='target' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTopLevelEntityAccess().getTargetKeyword_1_0());
    }
(	otherlv_4='datalayout' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTopLevelEntityAccess().getDatalayoutKeyword_1_1_0());
    }

    |	otherlv_5='triple' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTopLevelEntityAccess().getTripleKeyword_1_1_1());
    }
)	otherlv_6='=' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTopLevelEntityAccess().getEqualsSignKeyword_1_2());
    }
(
(
		lv_target_7_0=RULE_STRING
		{
			newLeafNode(lv_target_7_0, grammarAccess.getTopLevelEntityAccess().getTargetSTRINGTerminalRuleCall_1_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTopLevelEntityRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"target",
        		lv_target_7_0, 
        		"STRING");
	    }

)
))
    |(	otherlv_8='deplibs' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getTopLevelEntityAccess().getDeplibsKeyword_2_0());
    }
	otherlv_9='=' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getTopLevelEntityAccess().getEqualsSignKeyword_2_1());
    }
	otherlv_10='[' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getTopLevelEntityAccess().getLeftSquareBracketKeyword_2_2());
    }
(
(
		lv_libs_11_0=RULE_STRING
		{
			newLeafNode(lv_libs_11_0, grammarAccess.getTopLevelEntityAccess().getLibsSTRINGTerminalRuleCall_2_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTopLevelEntityRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"libs",
        		lv_libs_11_0, 
        		"STRING");
	    }

)
)(	otherlv_12=',' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getTopLevelEntityAccess().getCommaKeyword_2_4_0());
    }
(
(
		lv_libs_13_0=RULE_STRING
		{
			newLeafNode(lv_libs_13_0, grammarAccess.getTopLevelEntityAccess().getLibsSTRINGTerminalRuleCall_2_4_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTopLevelEntityRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"libs",
        		lv_libs_13_0, 
        		"STRING");
	    }

)
))*	otherlv_14=']' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getTopLevelEntityAccess().getRightSquareBracketKeyword_2_5());
    }
))
;





// Entry rule entryRuleMainLevelEntity
entryRuleMainLevelEntity returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMainLevelEntityRule()); }
	 iv_ruleMainLevelEntity=ruleMainLevelEntity 
	 { $current=$iv_ruleMainLevelEntity.current; } 
	 EOF 
;

// Rule MainLevelEntity
ruleMainLevelEntity returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMainLevelEntityAccess().getTypeDefinitionParserRuleCall_0()); 
    }
    this_TypeDefinition_0=ruleTypeDefinition
    { 
        $current = $this_TypeDefinition_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMainLevelEntityAccess().getGlobalDefinitionParserRuleCall_1()); 
    }
    this_GlobalDefinition_1=ruleGlobalDefinition
    { 
        $current = $this_GlobalDefinition_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMainLevelEntityAccess().getFunctionDefinitionParserRuleCall_2()); 
    }
    this_FunctionDefinition_2=ruleFunctionDefinition
    { 
        $current = $this_FunctionDefinition_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMainLevelEntityAccess().getAliasDefinitionParserRuleCall_3()); 
    }
    this_AliasDefinition_3=ruleAliasDefinition
    { 
        $current = $this_AliasDefinition_3.current; 
        afterParserOrEnumRuleCall();
    }

    |(
(
		{ 
	        newCompositeNode(grammarAccess.getMainLevelEntityAccess().getMetaMetadataValueParserRuleCall_4_0()); 
	    }
		lv_meta_4_0=ruleMetadataValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMainLevelEntityRule());
	        }
       		add(
       			$current, 
       			"meta",
        		lv_meta_4_0, 
        		"MetadataValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTypeDefinition
entryRuleTypeDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeDefinitionRule()); }
	 iv_ruleTypeDefinition=ruleTypeDefinition 
	 { $current=$iv_ruleTypeDefinition.current; } 
	 EOF 
;

// Rule TypeDefinition
ruleTypeDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeDefinitionAccess().getAddressAddressParserRuleCall_0_0()); 
	    }
		lv_address_0_0=ruleAddress		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeDefinitionRule());
	        }
       		set(
       			$current, 
       			"address",
        		lv_address_0_0, 
        		"Address");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTypeDefinitionAccess().getEqualsSignKeyword_1());
    }
(	otherlv_2='type' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypeDefinitionAccess().getTypeKeyword_2_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeDefinitionAccess().getStructStructureParserRuleCall_2_1_0_0()); 
	    }
		lv_struct_3_0=ruleStructure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeDefinitionRule());
	        }
       		set(
       			$current, 
       			"struct",
        		lv_struct_3_0, 
        		"Structure");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |
    { 
        newCompositeNode(grammarAccess.getTypeDefinitionAccess().getOpaqueParserRuleCall_2_1_1()); 
    }
ruleOpaque
    { 
        afterParserOrEnumRuleCall();
    }
)))
;





// Entry rule entryRuleGlobalDefinition
entryRuleGlobalDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGlobalDefinitionRule()); }
	 iv_ruleGlobalDefinition=ruleGlobalDefinition 
	 { $current=$iv_ruleGlobalDefinition.current; } 
	 EOF 
;

// Rule GlobalDefinition
ruleGlobalDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getGlobalDefinitionAccess().getAdressAddressParserRuleCall_0_0()); 
	    }
		lv_adress_0_0=ruleAddress		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGlobalDefinitionRule());
	        }
       		set(
       			$current, 
       			"adress",
        		lv_adress_0_0, 
        		"Address");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getGlobalDefinitionAccess().getEqualsSignKeyword_1());
    }
(
    { 
        newCompositeNode(grammarAccess.getGlobalDefinitionAccess().getLINKAGEParserRuleCall_2_0()); 
    }
ruleLINKAGE
    { 
        afterParserOrEnumRuleCall();
    }

    |	otherlv_3='global' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getGlobalDefinitionAccess().getGlobalKeyword_2_1());
    }

    |	otherlv_4='unnamed_addr' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getGlobalDefinitionAccess().getUnnamed_addrKeyword_2_2());
    }

    |	otherlv_5='constant' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getGlobalDefinitionAccess().getConstantKeyword_2_3());
    }
)*(
(
(
		{ 
	        newCompositeNode(grammarAccess.getGlobalDefinitionAccess().getTypeTypeUseParserRuleCall_3_0_0()); 
	    }
		lv_type_6_1=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGlobalDefinitionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_6_1, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getGlobalDefinitionAccess().getTypeAggregate_TypesParserRuleCall_3_0_1()); 
	    }
		lv_type_6_2=ruleAggregate_Types		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGlobalDefinitionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_6_2, 
        		"Aggregate_Types");
	        afterParserOrEnumRuleCall();
	    }

)

)
)(
(
(
		{ 
	        newCompositeNode(grammarAccess.getGlobalDefinitionAccess().getValueValueStructParserRuleCall_4_0_0()); 
	    }
		lv_value_7_1=ruleValueStruct		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGlobalDefinitionRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_7_1, 
        		"ValueStruct");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getGlobalDefinitionAccess().getValueValueParserRuleCall_4_0_1()); 
	    }
		lv_value_7_2=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGlobalDefinitionRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_7_2, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)

)
)?(	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getGlobalDefinitionAccess().getCommaKeyword_5_0());
    }

    { 
        newCompositeNode(grammarAccess.getGlobalDefinitionAccess().getALIGNMENTParserRuleCall_5_1()); 
    }
ruleALIGNMENT
    { 
        afterParserOrEnumRuleCall();
    }
)?)
;





// Entry rule entryRuleFunctionDefinition
entryRuleFunctionDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionDefinitionRule()); }
	 iv_ruleFunctionDefinition=ruleFunctionDefinition 
	 { $current=$iv_ruleFunctionDefinition.current; } 
	 EOF 
;

// Rule FunctionDefinition
ruleFunctionDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='define' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFunctionDefinitionAccess().getDefineKeyword_0_0());
    }
(
    { 
        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getLINKAGEParserRuleCall_0_1()); 
    }
ruleLINKAGE
    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getVISIBILITYParserRuleCall_0_2()); 
    }
ruleVISIBILITY
    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getCallingConvParserRuleCall_0_3()); 
    }
ruleCallingConv
    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getRETURN_ATTRIBUTESParserRuleCall_0_4()); 
    }
ruleRETURN_ATTRIBUTES
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getReturnTypeTypeUseParserRuleCall_0_5_0()); 
	    }
		lv_returnType_5_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDefinitionRule());
	        }
       		set(
       			$current, 
       			"returnType",
        		lv_returnType_5_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getAddressAddressParserRuleCall_0_6_0()); 
	    }
		lv_address_6_0=ruleAddress		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDefinitionRule());
	        }
       		set(
       			$current, 
       			"address",
        		lv_address_6_0, 
        		"Address");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getPlParameterListParserRuleCall_0_7_0()); 
	    }
		lv_pl_7_0=ruleParameterList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDefinitionRule());
	        }
       		set(
       			$current, 
       			"pl",
        		lv_pl_7_0, 
        		"ParameterList");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_8='unnamed_addr' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getFunctionDefinitionAccess().getUnnamed_addrKeyword_0_8());
    }
)?(
    { 
        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getFUNCTION_ATTRIBUTESParserRuleCall_0_9()); 
    }
ruleFUNCTION_ATTRIBUTES
    { 
        afterParserOrEnumRuleCall();
    }
)*(	otherlv_10='section ' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getFunctionDefinitionAccess().getSectionKeyword_0_10_0());
    }
this_STRING_11=RULE_STRING
    { 
    newLeafNode(this_STRING_11, grammarAccess.getFunctionDefinitionAccess().getSTRINGTerminalRuleCall_0_10_1()); 
    }
)?(
    { 
        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getALIGNMENTParserRuleCall_0_11()); 
    }
ruleALIGNMENT
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getBodyFunctionBodyParserRuleCall_0_12_0()); 
	    }
		lv_body_13_0=ruleFunctionBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDefinitionRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_13_0, 
        		"FunctionBody");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_14='declare' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getFunctionDefinitionAccess().getDeclareKeyword_1_0());
    }
(
    { 
        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getLINKAGEParserRuleCall_1_1()); 
    }
ruleLINKAGE
    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getVISIBILITYParserRuleCall_1_2()); 
    }
ruleVISIBILITY
    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getCallingConvParserRuleCall_1_3()); 
    }
ruleCallingConv
    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getRETURN_ATTRIBUTESParserRuleCall_1_4()); 
    }
ruleRETURN_ATTRIBUTES
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getReturnTypeTypeUseParserRuleCall_1_5_0()); 
	    }
		lv_returnType_19_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDefinitionRule());
	        }
       		set(
       			$current, 
       			"returnType",
        		lv_returnType_19_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getAddressAddressParserRuleCall_1_6_0()); 
	    }
		lv_address_20_0=ruleAddress		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDefinitionRule());
	        }
       		set(
       			$current, 
       			"address",
        		lv_address_20_0, 
        		"Address");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getTListTypeListParserRuleCall_1_7_0_0()); 
	    }
		lv_tList_21_0=ruleTypeList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDefinitionRule());
	        }
       		set(
       			$current, 
       			"tList",
        		lv_tList_21_0, 
        		"TypeList");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |this_OREST_22=RULE_OREST
    { 
    newLeafNode(this_OREST_22, grammarAccess.getFunctionDefinitionAccess().getORESTTerminalRuleCall_1_7_1()); 
    }
)(	otherlv_23='unnamed_addr' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getFunctionDefinitionAccess().getUnnamed_addrKeyword_1_8());
    }
)?(
    { 
        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getFUNCTION_ATTRIBUTESParserRuleCall_1_9()); 
    }
ruleFUNCTION_ATTRIBUTES
    { 
        afterParserOrEnumRuleCall();
    }
)*(	otherlv_25='section ' 
    {
    	newLeafNode(otherlv_25, grammarAccess.getFunctionDefinitionAccess().getSectionKeyword_1_10_0());
    }
this_STRING_26=RULE_STRING
    { 
    newLeafNode(this_STRING_26, grammarAccess.getFunctionDefinitionAccess().getSTRINGTerminalRuleCall_1_10_1()); 
    }
)?(
    { 
        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getALIGNMENTParserRuleCall_1_11()); 
    }
ruleALIGNMENT
    { 
        afterParserOrEnumRuleCall();
    }
)?))
;





// Entry rule entryRuleAliasDefinition
entryRuleAliasDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAliasDefinitionRule()); }
	 iv_ruleAliasDefinition=ruleAliasDefinition 
	 { $current=$iv_ruleAliasDefinition.current; } 
	 EOF 
;

// Rule AliasDefinition
ruleAliasDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAliasDefinitionAccess().getAddressAddressParserRuleCall_0_0()); 
	    }
		lv_address_0_0=ruleAddress		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAliasDefinitionRule());
	        }
       		set(
       			$current, 
       			"address",
        		lv_address_0_0, 
        		"Address");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAliasDefinitionAccess().getEqualsSignKeyword_1());
    }
	otherlv_2='alias' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAliasDefinitionAccess().getAliasKeyword_2());
    }
(
    { 
        newCompositeNode(grammarAccess.getAliasDefinitionAccess().getALIAS_LINKAGEParserRuleCall_3()); 
    }
ruleALIAS_LINKAGE
    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getAliasDefinitionAccess().getVISIBILITYParserRuleCall_4()); 
    }
ruleVISIBILITY
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getAliasDefinitionAccess().getAliastypeTypeUseParserRuleCall_5_0()); 
	    }
		lv_aliastype_5_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAliasDefinitionRule());
	        }
       		set(
       			$current, 
       			"aliastype",
        		lv_aliastype_5_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAliasDefinitionAccess().getAliasvalueValueParserRuleCall_6_0()); 
	    }
		lv_aliasvalue_6_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAliasDefinitionRule());
	        }
       		set(
       			$current, 
       			"aliasvalue",
        		lv_aliasvalue_6_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAliasDefinitionAccess().getAliaseeTypeUseParserRuleCall_7_0()); 
	    }
		lv_aliasee_7_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAliasDefinitionRule());
	        }
       		set(
       			$current, 
       			"aliasee",
        		lv_aliasee_7_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTypeUse
entryRuleTypeUse returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeUseRule()); }
	 iv_ruleTypeUse=ruleTypeUse 
	 { $current=$iv_ruleTypeUse.current; } 
	 EOF 
;

// Rule TypeUse
ruleTypeUse returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getTypeUseAccess().getPredefinedParserRuleCall_0_0()); 
    }
    this_Predefined_0=rulePredefined
    { 
        $current = $this_Predefined_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeUseAccess().getAddressUseParserRuleCall_0_1()); 
    }
    this_AddressUse_1=ruleAddressUse
    { 
        $current = $this_AddressUse_1.current; 
        afterParserOrEnumRuleCall();
    }
)(	otherlv_2='()*' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypeUseAccess().getLeftParenthesisRightParenthesisAsteriskKeyword_1());
    }
)?(this_OREST_3=RULE_OREST
    { 
    newLeafNode(this_OREST_3, grammarAccess.getTypeUseAccess().getORESTTerminalRuleCall_2()); 
    }
)?)
;





// Entry rule entryRuleAddressUse
entryRuleAddressUse returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAddressUseRule()); }
	 iv_ruleAddressUse=ruleAddressUse 
	 { $current=$iv_ruleAddressUse.current; } 
	 EOF 
;

// Rule AddressUse
ruleAddressUse returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAddressUseRule());
	        }
        }
	otherlv_0=RULE_VALID_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getAddressUseAccess().getAddressAddressCrossReference_0_0()); 
	}

)
)(
(
		lv_pointer_1_0=RULE_POINTER
		{
			newLeafNode(lv_pointer_1_0, grammarAccess.getAddressUseAccess().getPointerPOINTERTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAddressUseRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"pointer",
        		lv_pointer_1_0, 
        		"POINTER");
	    }

)
)?)
;





// Entry rule entryRuleAddress
entryRuleAddress returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAddressRule()); }
	 iv_ruleAddress=ruleAddress 
	 { $current=$iv_ruleAddress.current; } 
	 EOF 
;

// Rule Address
ruleAddress returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_VALID_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getAddressAccess().getNameVALID_IDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAddressRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"VALID_ID");
	    }

)
)
;





// Entry rule entryRulePredefined
entryRulePredefined returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPredefinedRule()); }
	 iv_rulePredefined=rulePredefined 
	 { $current=$iv_rulePredefined.current; } 
	 EOF 
;

// Rule Predefined
rulePredefined returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPredefinedAccess().getTypePredefinedTypeParserRuleCall_0_0()); 
	    }
		lv_type_0_0=rulePredefinedType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredefinedRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"PredefinedType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_pointer_1_0=RULE_POINTER
		{
			newLeafNode(lv_pointer_1_0, grammarAccess.getPredefinedAccess().getPointerPOINTERTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPredefinedRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"pointer",
        		lv_pointer_1_0, 
        		"POINTER");
	    }

)
)?)
;





// Entry rule entryRulePrimitiveType
entryRulePrimitiveType returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimitiveTypeRule()); } 
	 iv_rulePrimitiveType=rulePrimitiveType 
	 { $current=$iv_rulePrimitiveType.current.getText(); }  
	 EOF 
;

// Rule PrimitiveType
rulePrimitiveType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='void' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitiveTypeAccess().getVoidKeyword_0()); 
    }

    |
	kw='null' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitiveTypeAccess().getNullKeyword_1()); 
    }

    |
	kw='label' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitiveTypeAccess().getLabelKeyword_2()); 
    }

    |
	kw='undef' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitiveTypeAccess().getUndefKeyword_3()); 
    }

    |
	kw='true' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitiveTypeAccess().getTrueKeyword_4()); 
    }

    |
	kw='false' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitiveTypeAccess().getFalseKeyword_5()); 
    }
)
    ;





// Entry rule entryRuleInitializers
entryRuleInitializers returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getInitializersRule()); } 
	 iv_ruleInitializers=ruleInitializers 
	 { $current=$iv_ruleInitializers.current.getText(); }  
	 EOF 
;

// Rule Initializers
ruleInitializers returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='zeroinitializer' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInitializersAccess().getZeroinitializerKeyword()); 
    }

    ;





// Entry rule entryRuleFloatingPoint_Type
entryRuleFloatingPoint_Type returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFloatingPoint_TypeRule()); } 
	 iv_ruleFloatingPoint_Type=ruleFloatingPoint_Type 
	 { $current=$iv_ruleFloatingPoint_Type.current.getText(); }  
	 EOF 
;

// Rule FloatingPoint_Type
ruleFloatingPoint_Type returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='half' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFloatingPoint_TypeAccess().getHalfKeyword_0()); 
    }

    |
	kw='float' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFloatingPoint_TypeAccess().getFloatKeyword_1()); 
    }

    |
	kw='double' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFloatingPoint_TypeAccess().getDoubleKeyword_2()); 
    }

    |
	kw='x86_fp80' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFloatingPoint_TypeAccess().getX86_fp80Keyword_3()); 
    }

    |
	kw='fp128' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFloatingPoint_TypeAccess().getFp128Keyword_4()); 
    }

    |
	kw='ppc_fp128' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFloatingPoint_TypeAccess().getPpc_fp128Keyword_5()); 
    }
)
    ;





// Entry rule entryRulePredefinedType
entryRulePredefinedType returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPredefinedTypeRule()); } 
	 iv_rulePredefinedType=rulePredefinedType 
	 { $current=$iv_rulePredefinedType.current.getText(); }  
	 EOF 
;

// Rule PredefinedType
rulePredefinedType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPredefinedTypeAccess().getPrimitiveTypeParserRuleCall_0()); 
    }
    this_PrimitiveType_0=rulePrimitiveType    {
		$current.merge(this_PrimitiveType_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_INT_TYPE_1=RULE_INT_TYPE    {
		$current.merge(this_INT_TYPE_1);
    }

    { 
    newLeafNode(this_INT_TYPE_1, grammarAccess.getPredefinedTypeAccess().getINT_TYPETerminalRuleCall_1()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getPredefinedTypeAccess().getFloatingPoint_TypeParserRuleCall_2()); 
    }
    this_FloatingPoint_Type_2=ruleFloatingPoint_Type    {
		$current.merge(this_FloatingPoint_Type_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleVector
entryRuleVector returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVectorRule()); }
	 iv_ruleVector=ruleVector 
	 { $current=$iv_ruleVector.current; } 
	 EOF 
;

// Rule Vector
ruleVector returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='<' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getVectorAccess().getLessThanSignKeyword_0());
    }
this_INT_1=RULE_INT
    { 
    newLeafNode(this_INT_1, grammarAccess.getVectorAccess().getINTTerminalRuleCall_1()); 
    }
	otherlv_2='x' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getVectorAccess().getXKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVectorAccess().getTypeTypeUseParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVectorRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='>' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getVectorAccess().getGreaterThanSignKeyword_4());
    }
)
;





// Entry rule entryRuleArray
entryRuleArray returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayRule()); }
	 iv_ruleArray=ruleArray 
	 { $current=$iv_ruleArray.current; } 
	 EOF 
;

// Rule Array
ruleArray returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getArrayAccess().getArrayAction_0(),
            $current);
    }
)((	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getArrayAccess().getLeftSquareBracketKeyword_1_0_0());
    }
this_INT_2=RULE_INT
    { 
    newLeafNode(this_INT_2, grammarAccess.getArrayAccess().getINTTerminalRuleCall_1_0_1()); 
    }
	otherlv_3='x' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getArrayAccess().getXKeyword_1_0_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayAccess().getTypeTypeUseParserRuleCall_1_0_3_0()); 
	    }
		lv_type_4_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_4_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getArrayAccess().getRightSquareBracketKeyword_1_0_4());
    }
)
    |	otherlv_6='[]' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getArrayAccess().getLeftSquareBracketRightSquareBracketKeyword_1_1());
    }

    |(	otherlv_7='[' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getArrayAccess().getLeftSquareBracketKeyword_1_2_0());
    }
	otherlv_8=']' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getArrayAccess().getRightSquareBracketKeyword_1_2_1());
    }
))(this_POINTER_9=RULE_POINTER
    { 
    newLeafNode(this_POINTER_9, grammarAccess.getArrayAccess().getPOINTERTerminalRuleCall_2()); 
    }
)?)
;





// Entry rule entryRuleAggregate_Types
entryRuleAggregate_Types returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAggregate_TypesRule()); }
	 iv_ruleAggregate_Types=ruleAggregate_Types 
	 { $current=$iv_ruleAggregate_Types.current; } 
	 EOF 
;

// Rule Aggregate_Types
ruleAggregate_Types returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAggregate_TypesAccess().getStructureParserRuleCall_0()); 
    }
    this_Structure_0=ruleStructure
    { 
        $current = $this_Structure_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAggregate_TypesAccess().getArrayParserRuleCall_1()); 
    }
    this_Array_1=ruleArray
    { 
        $current = $this_Array_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAggregate_TypesAccess().getVectorParserRuleCall_2()); 
    }
    this_Vector_2=ruleVector
    { 
        $current = $this_Vector_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleConstant
entryRuleConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	 iv_ruleConstant=ruleConstant 
	 { $current=$iv_ruleConstant.current; } 
	 EOF 
;

// Rule Constant
ruleConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_INT
		{
			newLeafNode(lv_value_0_0, grammarAccess.getConstantAccess().getValueINTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"INT");
	    }

)
)
;





// Entry rule entryRuleNonConstantValue
entryRuleNonConstantValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNonConstantValueRule()); }
	 iv_ruleNonConstantValue=ruleNonConstantValue 
	 { $current=$iv_ruleNonConstantValue.current; } 
	 EOF 
;

// Rule NonConstantValue
ruleNonConstantValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_VALID_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getNonConstantValueAccess().getNameVALID_IDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNonConstantValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"VALID_ID");
	    }

)
)(
(
		lv_pointer_1_0=RULE_POINTER
		{
			newLeafNode(lv_pointer_1_0, grammarAccess.getNonConstantValueAccess().getPointerPOINTERTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNonConstantValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"pointer",
        		lv_pointer_1_0, 
        		"POINTER");
	    }

)
)?)
;





// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	 iv_ruleValue=ruleValue 
	 { $current=$iv_ruleValue.current; } 
	 EOF 
;

// Rule Value
ruleValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getValueAccess().getValueAction_0_0(),
            $current);
    }
)(
(
(
		lv_name_1_1=RULE_STRING
		{
			newLeafNode(lv_name_1_1, grammarAccess.getValueAccess().getNameSTRINGTerminalRuleCall_0_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_1, 
        		"STRING");
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getValueAccess().getNamePrimitiveTypeParserRuleCall_0_1_0_1()); 
	    }
		lv_name_1_2=rulePrimitiveType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_2, 
        		"PrimitiveType");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getValueAccess().getNameInitializersParserRuleCall_0_1_0_2()); 
	    }
		lv_name_1_3=ruleInitializers		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_3, 
        		"Initializers");
	        afterParserOrEnumRuleCall();
	    }

)

)
))
    |
    { 
        newCompositeNode(grammarAccess.getValueAccess().getCastParserRuleCall_1()); 
    }
    this_Cast_2=ruleCast
    { 
        $current = $this_Cast_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueAccess().getNestedGetElementPtrParserRuleCall_2()); 
    }
    this_NestedGetElementPtr_3=ruleNestedGetElementPtr
    { 
        $current = $this_NestedGetElementPtr_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueAccess().getConstantParserRuleCall_3()); 
    }
    this_Constant_4=ruleConstant
    { 
        $current = $this_Constant_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueAccess().getNonConstantValueParserRuleCall_4()); 
    }
    this_NonConstantValue_5=ruleNonConstantValue
    { 
        $current = $this_NonConstantValue_5.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleValueStruct
entryRuleValueStruct returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueStructRule()); }
	 iv_ruleValueStruct=ruleValueStruct 
	 { $current=$iv_ruleValueStruct.current; } 
	 EOF 
;

// Rule ValueStruct
ruleValueStruct returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getValueStructAccess().getLeftCurlyBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getValueStructAccess().getTypesTypeUseParserRuleCall_1_0()); 
	    }
		lv_types_1_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueStructRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_1_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getValueStructAccess().getValueValueParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueStructRule());
	        }
       		add(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getValueStructAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getValueStructAccess().getTypesTypeUseParserRuleCall_3_1_0()); 
	    }
		lv_types_4_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueStructRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_4_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getValueStructAccess().getValueValueParserRuleCall_3_2_0()); 
	    }
		lv_value_5_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueStructRule());
	        }
       		add(
       			$current, 
       			"value",
        		lv_value_5_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getValueStructAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleStructure
entryRuleStructure returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStructureRule()); }
	 iv_ruleStructure=ruleStructure 
	 { $current=$iv_ruleStructure.current; } 
	 EOF 
;

// Rule Structure
ruleStructure returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStructureAccess().getStructureAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStructureAccess().getLeftCurlyBracketKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getStructureAccess().getTypesTypeUseParserRuleCall_2_0_0()); 
	    }
		lv_types_2_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStructureRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_2_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStructureAccess().getCommaKeyword_2_1_0());
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getStructureAccess().getTypesTypeUseParserRuleCall_2_1_1_0_0()); 
	    }
		lv_types_4_1=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStructureRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_4_1, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getStructureAccess().getTypesAggregate_TypesParserRuleCall_2_1_1_0_1()); 
	    }
		lv_types_4_2=ruleAggregate_Types		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStructureRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_4_2, 
        		"Aggregate_Types");
	        afterParserOrEnumRuleCall();
	    }

)

)
))*)?	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getStructureAccess().getRightCurlyBracketKeyword_3());
    }
(this_POINTER_6=RULE_POINTER
    { 
    newLeafNode(this_POINTER_6, grammarAccess.getStructureAccess().getPOINTERTerminalRuleCall_4()); 
    }
)?)
;





// Entry rule entryRuleOpaque
entryRuleOpaque returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpaqueRule()); } 
	 iv_ruleOpaque=ruleOpaque 
	 { $current=$iv_ruleOpaque.current.getText(); }  
	 EOF 
;

// Rule Opaque
ruleOpaque returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='opaque' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpaqueAccess().getOpaqueKeyword()); 
    }

    ;





// Entry rule entryRuleParameterList
entryRuleParameterList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterListRule()); }
	 iv_ruleParameterList=ruleParameterList 
	 { $current=$iv_ruleParameterList.current; } 
	 EOF 
;

// Rule ParameterList
ruleParameterList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getParameterListAccess().getParameterListAction_0(),
            $current);
    }
)(	otherlv_1='()' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParameterListAccess().getLeftParenthesisRightParenthesisKeyword_1_0());
    }

    |(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParameterListAccess().getLeftParenthesisKeyword_1_1_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getParameterListAccess().getTypesTypeUseParserRuleCall_1_1_1_0_0()); 
	    }
		lv_types_3_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterListRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_3_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterListAccess().getListsTypeListParserRuleCall_1_1_1_1_0()); 
	    }
		lv_Lists_4_0=ruleTypeList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterListRule());
	        }
       		add(
       			$current, 
       			"Lists",
        		lv_Lists_4_0, 
        		"TypeList");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
    { 
        newCompositeNode(grammarAccess.getParameterListAccess().getRETURN_ATTRIBUTESParserRuleCall_1_1_1_2()); 
    }
ruleRETURN_ATTRIBUTES
    { 
        afterParserOrEnumRuleCall();
    }
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterListAccess().getVariablesValueParserRuleCall_1_1_1_3_0()); 
	    }
		lv_variables_6_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterListRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_6_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getParameterListAccess().getCommaKeyword_1_1_1_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterListAccess().getTypesTypeUseParserRuleCall_1_1_1_4_1_0()); 
	    }
		lv_types_8_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterListRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_8_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterListAccess().getListsTypeListParserRuleCall_1_1_1_4_2_0()); 
	    }
		lv_Lists_9_0=ruleTypeList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterListRule());
	        }
       		add(
       			$current, 
       			"Lists",
        		lv_Lists_9_0, 
        		"TypeList");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
    { 
        newCompositeNode(grammarAccess.getParameterListAccess().getRETURN_ATTRIBUTESParserRuleCall_1_1_1_4_3()); 
    }
ruleRETURN_ATTRIBUTES
    { 
        afterParserOrEnumRuleCall();
    }
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterListAccess().getVariablesValueParserRuleCall_1_1_1_4_4_0()); 
	    }
		lv_variables_11_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterListRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_11_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_12=')' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getParameterListAccess().getRightParenthesisKeyword_1_1_2());
    }
)))
;





// Entry rule entryRuleTypeList
entryRuleTypeList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeListRule()); }
	 iv_ruleTypeList=ruleTypeList 
	 { $current=$iv_ruleTypeList.current; } 
	 EOF 
;

// Rule TypeList
ruleTypeList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeListAccess().getTypeListAction_0(),
            $current);
    }
)(	otherlv_1='()' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTypeListAccess().getLeftParenthesisRightParenthesisKeyword_1_0());
    }

    |(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypeListAccess().getLeftParenthesisKeyword_1_1_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeListAccess().getTypesTypeUseParserRuleCall_1_1_1_0_0()); 
	    }
		lv_types_3_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeListRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_3_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeListAccess().getTypelistsTypeListParserRuleCall_1_1_1_1_0()); 
	    }
		lv_typelists_4_0=ruleTypeList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeListRule());
	        }
       		add(
       			$current, 
       			"typelists",
        		lv_typelists_4_0, 
        		"TypeList");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
    { 
        newCompositeNode(grammarAccess.getTypeListAccess().getRETURN_ATTRIBUTESParserRuleCall_1_1_1_2()); 
    }
ruleRETURN_ATTRIBUTES
    { 
        afterParserOrEnumRuleCall();
    }
)?(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTypeListAccess().getCommaKeyword_1_1_1_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeListAccess().getTypesTypeUseParserRuleCall_1_1_1_3_1_0()); 
	    }
		lv_types_7_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeListRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_7_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeListAccess().getTypelistsTypeListParserRuleCall_1_1_1_3_2_0()); 
	    }
		lv_typelists_8_0=ruleTypeList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeListRule());
	        }
       		add(
       			$current, 
       			"typelists",
        		lv_typelists_8_0, 
        		"TypeList");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
    { 
        newCompositeNode(grammarAccess.getTypeListAccess().getRETURN_ATTRIBUTESParserRuleCall_1_1_1_3_3()); 
    }
ruleRETURN_ATTRIBUTES
    { 
        afterParserOrEnumRuleCall();
    }
)?)*)?(	otherlv_10=')' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getTypeListAccess().getRightParenthesisKeyword_1_1_2_0());
    }

    |	otherlv_11=')*' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getTypeListAccess().getRightParenthesisAsteriskKeyword_1_1_2_1());
    }

    |	otherlv_12=')**' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getTypeListAccess().getRightParenthesisAsteriskAsteriskKeyword_1_1_2_2());
    }

    |	otherlv_13=')***' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getTypeListAccess().getRightParenthesisAsteriskAsteriskAsteriskKeyword_1_1_2_3());
    }

    |	otherlv_14=')****' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getTypeListAccess().getRightParenthesisAsteriskAsteriskAsteriskAsteriskKeyword_1_1_2_4());
    }

    |	otherlv_15=')*****' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getTypeListAccess().getRightParenthesisAsteriskAsteriskAsteriskAsteriskAsteriskKeyword_1_1_2_5());
    }
))))
;





// Entry rule entryRuleFunctionBody
entryRuleFunctionBody returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionBodyRule()); }
	 iv_ruleFunctionBody=ruleFunctionBody 
	 { $current=$iv_ruleFunctionBody.current; } 
	 EOF 
;

// Rule FunctionBody
ruleFunctionBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionBodyAccess().getMetaMetadataValueParserRuleCall_0_0()); 
	    }
		lv_meta_0_0=ruleMetadataValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionBodyRule());
	        }
       		add(
       			$current, 
       			"meta",
        		lv_meta_0_0, 
        		"MetadataValue");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunctionBodyAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionBodyAccess().getBlocksBasicBlockParserRuleCall_2_0()); 
	    }
		lv_blocks_2_0=ruleBasicBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionBodyRule());
	        }
       		add(
       			$current, 
       			"blocks",
        		lv_blocks_2_0, 
        		"BasicBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunctionBodyAccess().getRightCurlyBracketKeyword_3());
    }
)
;







// Entry rule entryRuleBasicBlock
entryRuleBasicBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBasicBlockRule()); }
	 iv_ruleBasicBlock=ruleBasicBlock 
	 { $current=$iv_ruleBasicBlock.current; } 
	 EOF 
;

// Rule BasicBlock
ruleBasicBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getBasicBlockAccess().getLabelID_FQNParserRuleCall_0_0_0()); 
	    }
		lv_label_0_0=ruleID_FQN		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasicBlockRule());
	        }
       		set(
       			$current, 
       			"label",
        		lv_label_0_0, 
        		"ID_FQN");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBasicBlockAccess().getColonKeyword_0_1());
    }
)(
(
(
		{ 
	        newCompositeNode(grammarAccess.getBasicBlockAccess().getInstructionsInstructionUseParserRuleCall_1_0_0()); 
	    }
		lv_instructions_2_1=ruleInstructionUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasicBlockRule());
	        }
       		add(
       			$current, 
       			"instructions",
        		lv_instructions_2_1, 
        		"InstructionUse");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getBasicBlockAccess().getInstructionsStandartInstructionParserRuleCall_1_0_1()); 
	    }
		lv_instructions_2_2=ruleStandartInstruction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasicBlockRule());
	        }
       		add(
       			$current, 
       			"instructions",
        		lv_instructions_2_2, 
        		"StandartInstruction");
	        afterParserOrEnumRuleCall();
	    }

)

)
)*((
(
		lv_retadr_3_0=RULE_VALID_ID
		{
			newLeafNode(lv_retadr_3_0, grammarAccess.getBasicBlockAccess().getRetadrVALID_IDTerminalRuleCall_2_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBasicBlockRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"retadr",
        		lv_retadr_3_0, 
        		"VALID_ID");
	    }

)
)	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getBasicBlockAccess().getEqualsSignKeyword_2_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getBasicBlockAccess().getTerminatorReturnInstructionParserRuleCall_3_0()); 
	    }
		lv_terminator_5_0=ruleReturnInstruction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasicBlockRule());
	        }
       		set(
       			$current, 
       			"terminator",
        		lv_terminator_5_0, 
        		"ReturnInstruction");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleInstructionUse
entryRuleInstructionUse returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstructionUseRule()); }
	 iv_ruleInstructionUse=ruleInstructionUse 
	 { $current=$iv_ruleInstructionUse.current; } 
	 EOF 
;

// Rule InstructionUse
ruleInstructionUse returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_reg_or_var_0_0=RULE_VALID_ID
		{
			newLeafNode(lv_reg_or_var_0_0, grammarAccess.getInstructionUseAccess().getReg_or_varVALID_IDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInstructionUseRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"reg_or_var",
        		lv_reg_or_var_0_0, 
        		"VALID_ID");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInstructionUseAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInstructionUseAccess().getInstructionStandartInstructionParserRuleCall_2_0()); 
	    }
		lv_instruction_2_0=ruleStandartInstruction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstructionUseRule());
	        }
       		set(
       			$current, 
       			"instruction",
        		lv_instruction_2_0, 
        		"StandartInstruction");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleReturnInstruction
entryRuleReturnInstruction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReturnInstructionRule()); }
	 iv_ruleReturnInstruction=ruleReturnInstruction 
	 { $current=$iv_ruleReturnInstruction.current; } 
	 EOF 
;

// Rule ReturnInstruction
ruleReturnInstruction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getReturnInstructionAccess().getReturnParserRuleCall_0()); 
    }
    this_Return_0=ruleReturn
    { 
        $current = $this_Return_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getReturnInstructionAccess().getBranchParserRuleCall_1()); 
    }
    this_Branch_1=ruleBranch
    { 
        $current = $this_Branch_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getReturnInstructionAccess().getSwitchParserRuleCall_2()); 
    }
    this_Switch_2=ruleSwitch
    { 
        $current = $this_Switch_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getReturnInstructionAccess().getIndirectBranchParserRuleCall_3()); 
    }
    this_IndirectBranch_3=ruleIndirectBranch
    { 
        $current = $this_IndirectBranch_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getReturnInstructionAccess().getInvokeParserRuleCall_4()); 
    }
    this_Invoke_4=ruleInvoke
    { 
        $current = $this_Invoke_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getReturnInstructionAccess().getResumeParserRuleCall_5()); 
    }
    this_Resume_5=ruleResume
    { 
        $current = $this_Resume_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getReturnInstructionAccess().getUnreachableParserRuleCall_6()); 
    }
    this_Unreachable_6=ruleUnreachable
    { 
        $current = $this_Unreachable_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleStandartInstruction
entryRuleStandartInstruction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStandartInstructionRule()); }
	 iv_ruleStandartInstruction=ruleStandartInstruction 
	 { $current=$iv_ruleStandartInstruction.current; } 
	 EOF 
;

// Rule StandartInstruction
ruleStandartInstruction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((	otherlv_0='volatile' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStandartInstructionAccess().getVolatileKeyword_0_0());
    }
)?
    { 
        newCompositeNode(grammarAccess.getStandartInstructionAccess().getLoadParserRuleCall_0_1()); 
    }
    this_Load_1=ruleLoad
    { 
        $current = $this_Load_1.current; 
        afterParserOrEnumRuleCall();
    }
)
    |((	otherlv_2='volatile' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStandartInstructionAccess().getVolatileKeyword_1_0());
    }
)?
    { 
        newCompositeNode(grammarAccess.getStandartInstructionAccess().getStoreParserRuleCall_1_1()); 
    }
    this_Store_3=ruleStore
    { 
        $current = $this_Store_3.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getStandartInstructionAccess().getFenceParserRuleCall_2()); 
    }
    this_Fence_4=ruleFence
    { 
        $current = $this_Fence_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStandartInstructionAccess().getGetElementPtrParserRuleCall_3()); 
    }
    this_GetElementPtr_5=ruleGetElementPtr
    { 
        $current = $this_GetElementPtr_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStandartInstructionAccess().getLogicOperationParserRuleCall_4()); 
    }
    this_LogicOperation_6=ruleLogicOperation
    { 
        $current = $this_LogicOperation_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStandartInstructionAccess().getArithmeticOperationParserRuleCall_5()); 
    }
    this_ArithmeticOperation_7=ruleArithmeticOperation
    { 
        $current = $this_ArithmeticOperation_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStandartInstructionAccess().getCompareParserRuleCall_6()); 
    }
    this_Compare_8=ruleCompare
    { 
        $current = $this_Compare_8.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStandartInstructionAccess().getCastParserRuleCall_7()); 
    }
    this_Cast_9=ruleCast
    { 
        $current = $this_Cast_9.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStandartInstructionAccess().getShuffleVectorParserRuleCall_8()); 
    }
    this_ShuffleVector_10=ruleShuffleVector
    { 
        $current = $this_ShuffleVector_10.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStandartInstructionAccess().getInsertElementParserRuleCall_9()); 
    }
    this_InsertElement_11=ruleInsertElement
    { 
        $current = $this_InsertElement_11.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStandartInstructionAccess().getExtractElementParserRuleCall_10()); 
    }
    this_ExtractElement_12=ruleExtractElement
    { 
        $current = $this_ExtractElement_12.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStandartInstructionAccess().getInsertValueParserRuleCall_11()); 
    }
    this_InsertValue_13=ruleInsertValue
    { 
        $current = $this_InsertValue_13.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStandartInstructionAccess().getExtractValueParserRuleCall_12()); 
    }
    this_ExtractValue_14=ruleExtractValue
    { 
        $current = $this_ExtractValue_14.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStandartInstructionAccess().getAllocParserRuleCall_13()); 
    }
    this_Alloc_15=ruleAlloc
    { 
        $current = $this_Alloc_15.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStandartInstructionAccess().getCmpXchgParserRuleCall_14()); 
    }
    this_CmpXchg_16=ruleCmpXchg
    { 
        $current = $this_CmpXchg_16.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStandartInstructionAccess().getAtomicRMWParserRuleCall_15()); 
    }
    this_AtomicRMW_17=ruleAtomicRMW
    { 
        $current = $this_AtomicRMW_17.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStandartInstructionAccess().getPhiParserRuleCall_16()); 
    }
    this_Phi_18=rulePhi
    { 
        $current = $this_Phi_18.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStandartInstructionAccess().getSelectParserRuleCall_17()); 
    }
    this_Select_19=ruleSelect
    { 
        $current = $this_Select_19.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStandartInstructionAccess().getCallParserRuleCall_18()); 
    }
    this_Call_20=ruleCall
    { 
        $current = $this_Call_20.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStandartInstructionAccess().getVariableAttributeAccessParserRuleCall_19()); 
    }
    this_VariableAttributeAccess_21=ruleVariableAttributeAccess
    { 
        $current = $this_VariableAttributeAccess_21.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStandartInstructionAccess().getLandingPadParserRuleCall_20()); 
    }
    this_LandingPad_22=ruleLandingPad
    { 
        $current = $this_LandingPad_22.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleArithmeticOperation
entryRuleArithmeticOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArithmeticOperationRule()); }
	 iv_ruleArithmeticOperation=ruleArithmeticOperation 
	 { $current=$iv_ruleArithmeticOperation.current; } 
	 EOF 
;

// Rule ArithmeticOperation
ruleArithmeticOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		lv_operation_0_1=	'add' 
    {
        newLeafNode(lv_operation_0_1, grammarAccess.getArithmeticOperationAccess().getOperationAddKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArithmeticOperationRule());
	        }
       		setWithLastConsumed($current, "operation", lv_operation_0_1, null);
	    }

    |		lv_operation_0_2=	'fadd' 
    {
        newLeafNode(lv_operation_0_2, grammarAccess.getArithmeticOperationAccess().getOperationFaddKeyword_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArithmeticOperationRule());
	        }
       		setWithLastConsumed($current, "operation", lv_operation_0_2, null);
	    }

    |		lv_operation_0_3=	'sub' 
    {
        newLeafNode(lv_operation_0_3, grammarAccess.getArithmeticOperationAccess().getOperationSubKeyword_0_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArithmeticOperationRule());
	        }
       		setWithLastConsumed($current, "operation", lv_operation_0_3, null);
	    }

    |		lv_operation_0_4=	'fsub' 
    {
        newLeafNode(lv_operation_0_4, grammarAccess.getArithmeticOperationAccess().getOperationFsubKeyword_0_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArithmeticOperationRule());
	        }
       		setWithLastConsumed($current, "operation", lv_operation_0_4, null);
	    }

    |		lv_operation_0_5=	'mul' 
    {
        newLeafNode(lv_operation_0_5, grammarAccess.getArithmeticOperationAccess().getOperationMulKeyword_0_0_4());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArithmeticOperationRule());
	        }
       		setWithLastConsumed($current, "operation", lv_operation_0_5, null);
	    }

    |		lv_operation_0_6=	'fmul' 
    {
        newLeafNode(lv_operation_0_6, grammarAccess.getArithmeticOperationAccess().getOperationFmulKeyword_0_0_5());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArithmeticOperationRule());
	        }
       		setWithLastConsumed($current, "operation", lv_operation_0_6, null);
	    }

    |		lv_operation_0_7=	'udiv' 
    {
        newLeafNode(lv_operation_0_7, grammarAccess.getArithmeticOperationAccess().getOperationUdivKeyword_0_0_6());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArithmeticOperationRule());
	        }
       		setWithLastConsumed($current, "operation", lv_operation_0_7, null);
	    }

    |		lv_operation_0_8=	'sdiv' 
    {
        newLeafNode(lv_operation_0_8, grammarAccess.getArithmeticOperationAccess().getOperationSdivKeyword_0_0_7());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArithmeticOperationRule());
	        }
       		setWithLastConsumed($current, "operation", lv_operation_0_8, null);
	    }

    |		lv_operation_0_9=	'fdiv' 
    {
        newLeafNode(lv_operation_0_9, grammarAccess.getArithmeticOperationAccess().getOperationFdivKeyword_0_0_8());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArithmeticOperationRule());
	        }
       		setWithLastConsumed($current, "operation", lv_operation_0_9, null);
	    }

    |		lv_operation_0_10=	'urem' 
    {
        newLeafNode(lv_operation_0_10, grammarAccess.getArithmeticOperationAccess().getOperationUremKeyword_0_0_9());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArithmeticOperationRule());
	        }
       		setWithLastConsumed($current, "operation", lv_operation_0_10, null);
	    }

    |		lv_operation_0_11=	'srem' 
    {
        newLeafNode(lv_operation_0_11, grammarAccess.getArithmeticOperationAccess().getOperationSremKeyword_0_0_10());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArithmeticOperationRule());
	        }
       		setWithLastConsumed($current, "operation", lv_operation_0_11, null);
	    }

    |		lv_operation_0_12=	'frem' 
    {
        newLeafNode(lv_operation_0_12, grammarAccess.getArithmeticOperationAccess().getOperationFremKeyword_0_0_11());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArithmeticOperationRule());
	        }
       		setWithLastConsumed($current, "operation", lv_operation_0_12, null);
	    }

)

)
)((	otherlv_1='nsw' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getArithmeticOperationAccess().getNswKeyword_1_0_0());
    }

    |	otherlv_2='nuw' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getArithmeticOperationAccess().getNuwKeyword_1_0_1());
    }
)(	otherlv_3='nuw' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getArithmeticOperationAccess().getNuwKeyword_1_1_0());
    }

    |	otherlv_4='nsw' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getArithmeticOperationAccess().getNswKeyword_1_1_1());
    }
)?)?(
(
		{ 
	        newCompositeNode(grammarAccess.getArithmeticOperationAccess().getOptypeTypeUseParserRuleCall_2_0()); 
	    }
		lv_optype_5_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArithmeticOperationRule());
	        }
       		set(
       			$current, 
       			"optype",
        		lv_optype_5_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getArithmeticOperationAccess().getValue1ValueParserRuleCall_3_0()); 
	    }
		lv_value1_6_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArithmeticOperationRule());
	        }
       		set(
       			$current, 
       			"value1",
        		lv_value1_6_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getArithmeticOperationAccess().getCommaKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArithmeticOperationAccess().getValue2ValueParserRuleCall_5_0()); 
	    }
		lv_value2_8_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArithmeticOperationRule());
	        }
       		set(
       			$current, 
       			"value2",
        		lv_value2_8_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLogicOperation
entryRuleLogicOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicOperationRule()); }
	 iv_ruleLogicOperation=ruleLogicOperation 
	 { $current=$iv_ruleLogicOperation.current; } 
	 EOF 
;

// Rule LogicOperation
ruleLogicOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		lv_operation_0_1=	'shl' 
    {
        newLeafNode(lv_operation_0_1, grammarAccess.getLogicOperationAccess().getOperationShlKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLogicOperationRule());
	        }
       		setWithLastConsumed($current, "operation", lv_operation_0_1, null);
	    }

    |		lv_operation_0_2=	'lshr' 
    {
        newLeafNode(lv_operation_0_2, grammarAccess.getLogicOperationAccess().getOperationLshrKeyword_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLogicOperationRule());
	        }
       		setWithLastConsumed($current, "operation", lv_operation_0_2, null);
	    }

    |		lv_operation_0_3=	'ashr' 
    {
        newLeafNode(lv_operation_0_3, grammarAccess.getLogicOperationAccess().getOperationAshrKeyword_0_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLogicOperationRule());
	        }
       		setWithLastConsumed($current, "operation", lv_operation_0_3, null);
	    }

    |		lv_operation_0_4=	'and' 
    {
        newLeafNode(lv_operation_0_4, grammarAccess.getLogicOperationAccess().getOperationAndKeyword_0_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLogicOperationRule());
	        }
       		setWithLastConsumed($current, "operation", lv_operation_0_4, null);
	    }

    |		lv_operation_0_5=	'or' 
    {
        newLeafNode(lv_operation_0_5, grammarAccess.getLogicOperationAccess().getOperationOrKeyword_0_0_4());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLogicOperationRule());
	        }
       		setWithLastConsumed($current, "operation", lv_operation_0_5, null);
	    }

    |		lv_operation_0_6=	'xor' 
    {
        newLeafNode(lv_operation_0_6, grammarAccess.getLogicOperationAccess().getOperationXorKeyword_0_0_5());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLogicOperationRule());
	        }
       		setWithLastConsumed($current, "operation", lv_operation_0_6, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicOperationAccess().getOptypeTypeUseParserRuleCall_1_0()); 
	    }
		lv_optype_1_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicOperationRule());
	        }
       		set(
       			$current, 
       			"optype",
        		lv_optype_1_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicOperationAccess().getValue1ValueParserRuleCall_2_0()); 
	    }
		lv_value1_2_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicOperationRule());
	        }
       		set(
       			$current, 
       			"value1",
        		lv_value1_2_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLogicOperationAccess().getCommaKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicOperationAccess().getValue2ValueParserRuleCall_4_0()); 
	    }
		lv_value2_4_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicOperationRule());
	        }
       		set(
       			$current, 
       			"value2",
        		lv_value2_4_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleCast
entryRuleCast returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCastRule()); }
	 iv_ruleCast=ruleCast 
	 { $current=$iv_ruleCast.current; } 
	 EOF 
;

// Rule Cast
ruleCast returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getCastAccess().getOperationCast_OPParserRuleCall_0_0()); 
	    }
		lv_operation_0_0=ruleCast_OP		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCastRule());
	        }
       		set(
       			$current, 
       			"operation",
        		lv_operation_0_0, 
        		"Cast_OP");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCastAccess().getLeftParenthesisKeyword_1_0_0());
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getCastAccess().getFromTypeUseParserRuleCall_1_0_1_0_0()); 
	    }
		lv_from_2_1=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCastRule());
	        }
       		set(
       			$current, 
       			"from",
        		lv_from_2_1, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getCastAccess().getFromAggregate_TypesParserRuleCall_1_0_1_0_1()); 
	    }
		lv_from_2_2=ruleAggregate_Types		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCastRule());
	        }
       		set(
       			$current, 
       			"from",
        		lv_from_2_2, 
        		"Aggregate_Types");
	        afterParserOrEnumRuleCall();
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCastAccess().getValueValueParserRuleCall_1_0_2_0()); 
	    }
		lv_value_3_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCastRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='to' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getCastAccess().getToKeyword_1_0_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCastAccess().getToTypeUseParserRuleCall_1_0_4_0()); 
	    }
		lv_to_5_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCastRule());
	        }
       		set(
       			$current, 
       			"to",
        		lv_to_5_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getCastAccess().getRightParenthesisKeyword_1_0_5());
    }
)
    |((
(
(
		{ 
	        newCompositeNode(grammarAccess.getCastAccess().getFromTypeUseParserRuleCall_1_1_0_0_0()); 
	    }
		lv_from_7_1=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCastRule());
	        }
       		set(
       			$current, 
       			"from",
        		lv_from_7_1, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getCastAccess().getFromAggregate_TypesParserRuleCall_1_1_0_0_1()); 
	    }
		lv_from_7_2=ruleAggregate_Types		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCastRule());
	        }
       		set(
       			$current, 
       			"from",
        		lv_from_7_2, 
        		"Aggregate_Types");
	        afterParserOrEnumRuleCall();
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCastAccess().getValueValueParserRuleCall_1_1_1_0()); 
	    }
		lv_value_8_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCastRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_8_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9='to' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getCastAccess().getToKeyword_1_1_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCastAccess().getToTypeUseParserRuleCall_1_1_3_0()); 
	    }
		lv_to_10_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCastRule());
	        }
       		set(
       			$current, 
       			"to",
        		lv_to_10_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
))))
;





// Entry rule entryRuleMetadataValue
entryRuleMetadataValue returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMetadataValueRule()); } 
	 iv_ruleMetadataValue=ruleMetadataValue 
	 { $current=$iv_ruleMetadataValue.current.getText(); }  
	 EOF 
;

// Rule MetadataValue
ruleMetadataValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	kw='!' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMetadataValueAccess().getExclamationMarkKeyword_0_0_0()); 
    }
    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getMetadataValueAccess().getINTTerminalRuleCall_0_0_1()); 
    }
)
    |(
	kw='!{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMetadataValueAccess().getExclamationMarkLeftCurlyBracketKeyword_0_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getMetadataValueAccess().getID_FQNParserRuleCall_0_1_1()); 
    }
    this_ID_FQN_3=ruleID_FQN    {
		$current.merge(this_ID_FQN_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMetadataValueAccess().getRightCurlyBracketKeyword_0_1_2()); 
    }
)
    |(
	kw='!' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMetadataValueAccess().getExclamationMarkKeyword_0_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getMetadataValueAccess().getID_FQNParserRuleCall_0_2_1()); 
    }
    this_ID_FQN_6=ruleID_FQN    {
		$current.merge(this_ID_FQN_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))(
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMetadataValueAccess().getEqualsSignKeyword_1_0()); 
    }
((
	kw='!' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMetadataValueAccess().getExclamationMarkKeyword_1_1_0_0()); 
    }
    this_INT_9=RULE_INT    {
		$current.merge(this_INT_9);
    }

    { 
    newLeafNode(this_INT_9, grammarAccess.getMetadataValueAccess().getINTTerminalRuleCall_1_1_0_1()); 
    }
)
    |(
	kw='!{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMetadataValueAccess().getExclamationMarkLeftCurlyBracketKeyword_1_1_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getMetadataValueAccess().getID_FQNParserRuleCall_1_1_1_1()); 
    }
    this_ID_FQN_11=ruleID_FQN    {
		$current.merge(this_ID_FQN_11);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMetadataValueAccess().getRightCurlyBracketKeyword_1_1_1_2()); 
    }
)
    |(
	kw='!' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMetadataValueAccess().getExclamationMarkKeyword_1_1_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getMetadataValueAccess().getID_FQNParserRuleCall_1_1_2_1()); 
    }
    this_ID_FQN_14=ruleID_FQN    {
		$current.merge(this_ID_FQN_14);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
	kw='metadata' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMetadataValueAccess().getMetadataKeyword_1_1_3_0()); 
    }
(((
	kw='!' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMetadataValueAccess().getExclamationMarkKeyword_1_1_3_1_0_0_0()); 
    }

	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMetadataValueAccess().getLeftCurlyBracketKeyword_1_1_3_1_0_0_1()); 
    }
)
    |
	kw='!{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMetadataValueAccess().getExclamationMarkLeftCurlyBracketKeyword_1_1_3_1_0_1()); 
    }
)((
	kw='metadata' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMetadataValueAccess().getMetadataKeyword_1_1_3_1_1_0_0()); 
    }

	kw='!' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMetadataValueAccess().getExclamationMarkKeyword_1_1_3_1_1_0_1()); 
    }
    this_STRING_21=RULE_STRING    {
		$current.merge(this_STRING_21);
    }

    { 
    newLeafNode(this_STRING_21, grammarAccess.getMetadataValueAccess().getSTRINGTerminalRuleCall_1_1_3_1_1_0_2()); 
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMetadataValueAccess().getCommaKeyword_1_1_3_1_1_0_3_0()); 
    }
((
	kw='metadata' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMetadataValueAccess().getMetadataKeyword_1_1_3_1_1_0_3_1_0_0()); 
    }

	kw='!' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMetadataValueAccess().getExclamationMarkKeyword_1_1_3_1_1_0_3_1_0_1()); 
    }
    this_INT_25=RULE_INT    {
		$current.merge(this_INT_25);
    }

    { 
    newLeafNode(this_INT_25, grammarAccess.getMetadataValueAccess().getINTTerminalRuleCall_1_1_3_1_1_0_3_1_0_2()); 
    }
)
    |
	kw='null' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMetadataValueAccess().getNullKeyword_1_1_3_1_1_0_3_1_1()); 
    }
))?)
    |(    this_INT_TYPE_27=RULE_INT_TYPE    {
		$current.merge(this_INT_TYPE_27);
    }

    { 
    newLeafNode(this_INT_TYPE_27, grammarAccess.getMetadataValueAccess().getINT_TYPETerminalRuleCall_1_1_3_1_1_1_0()); 
    }
    this_INT_28=RULE_INT    {
		$current.merge(this_INT_28);
    }

    { 
    newLeafNode(this_INT_28, grammarAccess.getMetadataValueAccess().getINTTerminalRuleCall_1_1_3_1_1_1_1()); 
    }

	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMetadataValueAccess().getCommaKeyword_1_1_3_1_1_1_2()); 
    }
    this_INT_TYPE_30=RULE_INT_TYPE    {
		$current.merge(this_INT_TYPE_30);
    }

    { 
    newLeafNode(this_INT_TYPE_30, grammarAccess.getMetadataValueAccess().getINT_TYPETerminalRuleCall_1_1_3_1_1_1_3()); 
    }
    this_INT_31=RULE_INT    {
		$current.merge(this_INT_31);
    }

    { 
    newLeafNode(this_INT_31, grammarAccess.getMetadataValueAccess().getINTTerminalRuleCall_1_1_3_1_1_1_4()); 
    }
))
	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMetadataValueAccess().getRightCurlyBracketKeyword_1_1_3_1_2()); 
    }
)?)))?)
    ;





// Entry rule entryRuleALIGNMENT
entryRuleALIGNMENT returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getALIGNMENTRule()); } 
	 iv_ruleALIGNMENT=ruleALIGNMENT 
	 { $current=$iv_ruleALIGNMENT.current.getText(); }  
	 EOF 
;

// Rule ALIGNMENT
ruleALIGNMENT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='align' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getALIGNMENTAccess().getAlignKeyword_0()); 
    }
    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getALIGNMENTAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleGetElementPtr
entryRuleGetElementPtr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGetElementPtrRule()); }
	 iv_ruleGetElementPtr=ruleGetElementPtr 
	 { $current=$iv_ruleGetElementPtr.current; } 
	 EOF 
;

// Rule GetElementPtr
ruleGetElementPtr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='getelementptr' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGetElementPtrAccess().getGetelementptrKeyword_0());
    }
(	otherlv_1='inbounds' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getGetElementPtrAccess().getInboundsKeyword_1());
    }
)?((
(
(
		{ 
	        newCompositeNode(grammarAccess.getGetElementPtrAccess().getAggregateTypeUseParserRuleCall_2_0_0_0()); 
	    }
		lv_aggregate_2_1=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGetElementPtrRule());
	        }
       		set(
       			$current, 
       			"aggregate",
        		lv_aggregate_2_1, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getGetElementPtrAccess().getAggregateArrayParserRuleCall_2_0_0_1()); 
	    }
		lv_aggregate_2_2=ruleArray		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGetElementPtrRule());
	        }
       		set(
       			$current, 
       			"aggregate",
        		lv_aggregate_2_2, 
        		"Array");
	        afterParserOrEnumRuleCall();
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGetElementPtrAccess().getAggregatenameValueParserRuleCall_2_1_0()); 
	    }
		lv_aggregatename_3_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGetElementPtrRule());
	        }
       		set(
       			$current, 
       			"aggregatename",
        		lv_aggregatename_3_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getGetElementPtrAccess().getCommaKeyword_2_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGetElementPtrAccess().getIndTypesTypeUseParserRuleCall_2_2_1_0()); 
	    }
		lv_indTypes_5_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGetElementPtrRule());
	        }
       		add(
       			$current, 
       			"indTypes",
        		lv_indTypes_5_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGetElementPtrAccess().getIndiziesValueParserRuleCall_2_2_2_0()); 
	    }
		lv_indizies_6_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGetElementPtrRule());
	        }
       		add(
       			$current, 
       			"indizies",
        		lv_indizies_6_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
))*))
;





// Entry rule entryRuleNestedGetElementPtr
entryRuleNestedGetElementPtr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNestedGetElementPtrRule()); }
	 iv_ruleNestedGetElementPtr=ruleNestedGetElementPtr 
	 { $current=$iv_ruleNestedGetElementPtr.current; } 
	 EOF 
;

// Rule NestedGetElementPtr
ruleNestedGetElementPtr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='getelementptr' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNestedGetElementPtrAccess().getGetelementptrKeyword_0());
    }
(	otherlv_1='inbounds' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNestedGetElementPtrAccess().getInboundsKeyword_1());
    }
)?(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNestedGetElementPtrAccess().getLeftParenthesisKeyword_2_0());
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getNestedGetElementPtrAccess().getAggregateTypeUseParserRuleCall_2_1_0_0()); 
	    }
		lv_aggregate_3_1=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNestedGetElementPtrRule());
	        }
       		set(
       			$current, 
       			"aggregate",
        		lv_aggregate_3_1, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getNestedGetElementPtrAccess().getAggregateArrayParserRuleCall_2_1_0_1()); 
	    }
		lv_aggregate_3_2=ruleArray		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNestedGetElementPtrRule());
	        }
       		set(
       			$current, 
       			"aggregate",
        		lv_aggregate_3_2, 
        		"Array");
	        afterParserOrEnumRuleCall();
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNestedGetElementPtrAccess().getAggregatenameValueParserRuleCall_2_2_0()); 
	    }
		lv_aggregatename_4_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNestedGetElementPtrRule());
	        }
       		set(
       			$current, 
       			"aggregatename",
        		lv_aggregatename_4_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getNestedGetElementPtrAccess().getCommaKeyword_2_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNestedGetElementPtrAccess().getIndTypesTypeUseParserRuleCall_2_3_1_0()); 
	    }
		lv_indTypes_6_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNestedGetElementPtrRule());
	        }
       		add(
       			$current, 
       			"indTypes",
        		lv_indTypes_6_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNestedGetElementPtrAccess().getIndiziesValueParserRuleCall_2_3_2_0()); 
	    }
		lv_indizies_7_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNestedGetElementPtrRule());
	        }
       		add(
       			$current, 
       			"indizies",
        		lv_indizies_7_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getNestedGetElementPtrAccess().getRightParenthesisKeyword_2_4());
    }
))
;





// Entry rule entryRuleExtractValue
entryRuleExtractValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExtractValueRule()); }
	 iv_ruleExtractValue=ruleExtractValue 
	 { $current=$iv_ruleExtractValue.current; } 
	 EOF 
;

// Rule ExtractValue
ruleExtractValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='extractvalue' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExtractValueAccess().getExtractvalueKeyword_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getExtractValueAccess().getArrayArrayParserRuleCall_1_0_0()); 
	    }
		lv_array_1_0=ruleArray		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExtractValueRule());
	        }
       		set(
       			$current, 
       			"array",
        		lv_array_1_0, 
        		"Array");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getExtractValueAccess().getStructStructureParserRuleCall_1_1_0()); 
	    }
		lv_struct_2_0=ruleStructure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExtractValueRule());
	        }
       		set(
       			$current, 
       			"struct",
        		lv_struct_2_0, 
        		"Structure");
	        afterParserOrEnumRuleCall();
	    }

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getExtractValueAccess().getValueValueParserRuleCall_2_0()); 
	    }
		lv_value_3_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExtractValueRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getExtractValueAccess().getCommaKeyword_3_0());
    }
(
(
		lv_index_5_0=RULE_INT
		{
			newLeafNode(lv_index_5_0, grammarAccess.getExtractValueAccess().getIndexINTTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExtractValueRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"index",
        		lv_index_5_0, 
        		"INT");
	    }

)
))+)
;





// Entry rule entryRuleInsertValue
entryRuleInsertValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInsertValueRule()); }
	 iv_ruleInsertValue=ruleInsertValue 
	 { $current=$iv_ruleInsertValue.current; } 
	 EOF 
;

// Rule InsertValue
ruleInsertValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='insertvalue' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInsertValueAccess().getInsertvalueKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInsertValueAccess().getStructStructureParserRuleCall_1_0()); 
	    }
		lv_struct_1_0=ruleStructure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInsertValueRule());
	        }
       		set(
       			$current, 
       			"struct",
        		lv_struct_1_0, 
        		"Structure");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getInsertValueAccess().getValueValueParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInsertValueRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getInsertValueAccess().getCommaKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInsertValueAccess().getInserttypeTypeUseParserRuleCall_4_0()); 
	    }
		lv_inserttype_4_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInsertValueRule());
	        }
       		set(
       			$current, 
       			"inserttype",
        		lv_inserttype_4_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getInsertValueAccess().getInsertvalueValueParserRuleCall_5_0()); 
	    }
		lv_insertvalue_5_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInsertValueRule());
	        }
       		set(
       			$current, 
       			"insertvalue",
        		lv_insertvalue_5_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getInsertValueAccess().getCommaKeyword_6_0());
    }
(
(
		lv_index_7_0=RULE_INT
		{
			newLeafNode(lv_index_7_0, grammarAccess.getInsertValueAccess().getIndexINTTerminalRuleCall_6_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInsertValueRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"index",
        		lv_index_7_0, 
        		"INT");
	    }

)
))+)
;





// Entry rule entryRuleFence
entryRuleFence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFenceRule()); }
	 iv_ruleFence=ruleFence 
	 { $current=$iv_ruleFence.current; } 
	 EOF 
;

// Rule Fence
ruleFence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='fence' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFenceAccess().getFenceKeyword_0());
    }
(	otherlv_1='singlethread' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFenceAccess().getSinglethreadKeyword_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getFenceAccess().getOrderingATOMIC_ORDERINGParserRuleCall_2_0()); 
	    }
		lv_ordering_2_0=ruleATOMIC_ORDERING		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFenceRule());
	        }
       		set(
       			$current, 
       			"ordering",
        		lv_ordering_2_0, 
        		"ATOMIC_ORDERING");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleCmpXchg
entryRuleCmpXchg returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCmpXchgRule()); }
	 iv_ruleCmpXchg=ruleCmpXchg 
	 { $current=$iv_ruleCmpXchg.current; } 
	 EOF 
;

// Rule CmpXchg
ruleCmpXchg returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='cmpxchg' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCmpXchgAccess().getCmpxchgKeyword_0());
    }
(	otherlv_1='volatile' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCmpXchgAccess().getVolatileKeyword_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getCmpXchgAccess().getAdresstypeTypeUseParserRuleCall_2_0()); 
	    }
		lv_adresstype_2_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCmpXchgRule());
	        }
       		set(
       			$current, 
       			"adresstype",
        		lv_adresstype_2_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCmpXchgAccess().getAdressValueParserRuleCall_3_0()); 
	    }
		lv_adress_3_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCmpXchgRule());
	        }
       		set(
       			$current, 
       			"adress",
        		lv_adress_3_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getCmpXchgAccess().getCommaKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCmpXchgAccess().getComparetypeTypeUseParserRuleCall_5_0()); 
	    }
		lv_comparetype_5_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCmpXchgRule());
	        }
       		set(
       			$current, 
       			"comparetype",
        		lv_comparetype_5_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCmpXchgAccess().getComparevalueValueParserRuleCall_6_0()); 
	    }
		lv_comparevalue_6_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCmpXchgRule());
	        }
       		set(
       			$current, 
       			"comparevalue",
        		lv_comparevalue_6_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getCmpXchgAccess().getCommaKeyword_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCmpXchgAccess().getNewtypeTypeUseParserRuleCall_8_0()); 
	    }
		lv_newtype_8_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCmpXchgRule());
	        }
       		set(
       			$current, 
       			"newtype",
        		lv_newtype_8_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCmpXchgAccess().getNewvalueValueParserRuleCall_9_0()); 
	    }
		lv_newvalue_9_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCmpXchgRule());
	        }
       		set(
       			$current, 
       			"newvalue",
        		lv_newvalue_9_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_10='singlethread' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getCmpXchgAccess().getSinglethreadKeyword_10());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getCmpXchgAccess().getOrderingATOMIC_ORDERINGParserRuleCall_11_0()); 
	    }
		lv_ordering_11_0=ruleATOMIC_ORDERING		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCmpXchgRule());
	        }
       		set(
       			$current, 
       			"ordering",
        		lv_ordering_11_0, 
        		"ATOMIC_ORDERING");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAtomicRMW
entryRuleAtomicRMW returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtomicRMWRule()); }
	 iv_ruleAtomicRMW=ruleAtomicRMW 
	 { $current=$iv_ruleAtomicRMW.current; } 
	 EOF 
;

// Rule AtomicRMW
ruleAtomicRMW returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='atomicrmw' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAtomicRMWAccess().getAtomicrmwKeyword_0());
    }
(	otherlv_1='volatile' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAtomicRMWAccess().getVolatileKeyword_1());
    }
)?
    { 
        newCompositeNode(grammarAccess.getAtomicRMWAccess().getBIN_OPParserRuleCall_2()); 
    }
ruleBIN_OP
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicRMWAccess().getAdresstypeTypeUseParserRuleCall_3_0()); 
	    }
		lv_adresstype_3_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicRMWRule());
	        }
       		set(
       			$current, 
       			"adresstype",
        		lv_adresstype_3_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicRMWAccess().getAdressValueParserRuleCall_4_0()); 
	    }
		lv_adress_4_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicRMWRule());
	        }
       		set(
       			$current, 
       			"adress",
        		lv_adress_4_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAtomicRMWAccess().getCommaKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicRMWAccess().getOptypeTypeUseParserRuleCall_6_0()); 
	    }
		lv_optype_6_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicRMWRule());
	        }
       		set(
       			$current, 
       			"optype",
        		lv_optype_6_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicRMWAccess().getOpvalueValueParserRuleCall_7_0()); 
	    }
		lv_opvalue_7_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicRMWRule());
	        }
       		set(
       			$current, 
       			"opvalue",
        		lv_opvalue_7_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_8='singlethread' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getAtomicRMWAccess().getSinglethreadKeyword_8());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicRMWAccess().getOrderingATOMIC_ORDERINGParserRuleCall_9_0()); 
	    }
		lv_ordering_9_0=ruleATOMIC_ORDERING		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicRMWRule());
	        }
       		set(
       			$current, 
       			"ordering",
        		lv_ordering_9_0, 
        		"ATOMIC_ORDERING");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLoad
entryRuleLoad returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLoadRule()); }
	 iv_ruleLoad=ruleLoad 
	 { $current=$iv_ruleLoad.current; } 
	 EOF 
;

// Rule Load
ruleLoad returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='load' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLoadAccess().getLoadKeyword_0_0());
    }
(	otherlv_1='volatile' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLoadAccess().getVolatileKeyword_0_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getLoadAccess().getAdresstypeTypeUseParserRuleCall_0_2_0()); 
	    }
		lv_adresstype_2_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoadRule());
	        }
       		set(
       			$current, 
       			"adresstype",
        		lv_adresstype_2_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLoadAccess().getTypesTypeListParserRuleCall_0_3_0()); 
	    }
		lv_types_3_0=ruleTypeList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoadRule());
	        }
       		set(
       			$current, 
       			"types",
        		lv_types_3_0, 
        		"TypeList");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getLoadAccess().getAdressValueParserRuleCall_0_4_0()); 
	    }
		lv_adress_4_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoadRule());
	        }
       		set(
       			$current, 
       			"adress",
        		lv_adress_4_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getLoadAccess().getCommaKeyword_0_5_0());
    }
(
    { 
        newCompositeNode(grammarAccess.getLoadAccess().getALIGNMENTParserRuleCall_0_5_1_0()); 
    }
ruleALIGNMENT
    { 
        afterParserOrEnumRuleCall();
    }

    |(
    { 
        newCompositeNode(grammarAccess.getLoadAccess().getMetadataValueParserRuleCall_0_5_1_1()); 
    }
ruleMetadataValue
    { 
        afterParserOrEnumRuleCall();
    }
)+))*)
    |(	otherlv_8='load' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getLoadAccess().getLoadKeyword_1_0());
    }
	otherlv_9='atomic' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getLoadAccess().getAtomicKeyword_1_1());
    }
(	otherlv_10='volatile' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getLoadAccess().getVolatileKeyword_1_2());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getLoadAccess().getAdresstypeTypeUseParserRuleCall_1_3_0()); 
	    }
		lv_adresstype_11_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoadRule());
	        }
       		set(
       			$current, 
       			"adresstype",
        		lv_adresstype_11_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLoadAccess().getAdressValueParserRuleCall_1_4_0()); 
	    }
		lv_adress_12_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoadRule());
	        }
       		set(
       			$current, 
       			"adress",
        		lv_adress_12_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLoadAccess().getTypesTypeListParserRuleCall_1_5_0()); 
	    }
		lv_types_13_0=ruleTypeList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoadRule());
	        }
       		set(
       			$current, 
       			"types",
        		lv_types_13_0, 
        		"TypeList");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_14='singlethread' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getLoadAccess().getSinglethreadKeyword_1_6());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getLoadAccess().getOrderingATOMIC_ORDERINGParserRuleCall_1_7_0()); 
	    }
		lv_ordering_15_0=ruleATOMIC_ORDERING		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoadRule());
	        }
       		set(
       			$current, 
       			"ordering",
        		lv_ordering_15_0, 
        		"ATOMIC_ORDERING");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_16=',' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getLoadAccess().getCommaKeyword_1_8_0());
    }
	otherlv_17='align' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getLoadAccess().getAlignKeyword_1_8_1());
    }
(
(
		lv_index_18_0=RULE_INT
		{
			newLeafNode(lv_index_18_0, grammarAccess.getLoadAccess().getIndexINTTerminalRuleCall_1_8_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLoadRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"index",
        		lv_index_18_0, 
        		"INT");
	    }

)
))?))
;





// Entry rule entryRuleStore
entryRuleStore returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStoreRule()); }
	 iv_ruleStore=ruleStore 
	 { $current=$iv_ruleStore.current; } 
	 EOF 
;

// Rule Store
ruleStore returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='store' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStoreAccess().getStoreKeyword_0_0());
    }
(	otherlv_1='volatile' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStoreAccess().getVolatileKeyword_0_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getStoreAccess().getNewtypeTypeUseParserRuleCall_0_2_0()); 
	    }
		lv_newtype_2_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStoreRule());
	        }
       		set(
       			$current, 
       			"newtype",
        		lv_newtype_2_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStoreAccess().getTypesTypeListParserRuleCall_0_3_0()); 
	    }
		lv_types_3_0=ruleTypeList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStoreRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_3_0, 
        		"TypeList");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getStoreAccess().getNewvalueValueParserRuleCall_0_4_0()); 
	    }
		lv_newvalue_4_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStoreRule());
	        }
       		set(
       			$current, 
       			"newvalue",
        		lv_newvalue_4_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getStoreAccess().getCommaKeyword_0_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStoreAccess().getAdresstypeTypeUseParserRuleCall_0_6_0()); 
	    }
		lv_adresstype_6_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStoreRule());
	        }
       		set(
       			$current, 
       			"adresstype",
        		lv_adresstype_6_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStoreAccess().getTypesTypeListParserRuleCall_0_7_0()); 
	    }
		lv_types_7_0=ruleTypeList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStoreRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_7_0, 
        		"TypeList");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getStoreAccess().getAdressValueParserRuleCall_0_8_0()); 
	    }
		lv_adress_8_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStoreRule());
	        }
       		set(
       			$current, 
       			"adress",
        		lv_adress_8_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_9=',' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getStoreAccess().getCommaKeyword_0_9_0());
    }
(
    { 
        newCompositeNode(grammarAccess.getStoreAccess().getALIGNMENTParserRuleCall_0_9_1_0()); 
    }
ruleALIGNMENT
    { 
        afterParserOrEnumRuleCall();
    }

    |(
    { 
        newCompositeNode(grammarAccess.getStoreAccess().getMetadataValueParserRuleCall_0_9_1_1()); 
    }
ruleMetadataValue
    { 
        afterParserOrEnumRuleCall();
    }
)+))*)
    |(	otherlv_12='store' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getStoreAccess().getStoreKeyword_1_0());
    }
	otherlv_13='atomic' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getStoreAccess().getAtomicKeyword_1_1());
    }
(	otherlv_14='volatile' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getStoreAccess().getVolatileKeyword_1_2());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getStoreAccess().getNewtypeTypeUseParserRuleCall_1_3_0()); 
	    }
		lv_newtype_15_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStoreRule());
	        }
       		set(
       			$current, 
       			"newtype",
        		lv_newtype_15_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStoreAccess().getTypesTypeListParserRuleCall_1_4_0()); 
	    }
		lv_types_16_0=ruleTypeList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStoreRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_16_0, 
        		"TypeList");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getStoreAccess().getNewvalueValueParserRuleCall_1_5_0()); 
	    }
		lv_newvalue_17_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStoreRule());
	        }
       		set(
       			$current, 
       			"newvalue",
        		lv_newvalue_17_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_18=',' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getStoreAccess().getCommaKeyword_1_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStoreAccess().getAdresstypeTypeUseParserRuleCall_1_7_0()); 
	    }
		lv_adresstype_19_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStoreRule());
	        }
       		set(
       			$current, 
       			"adresstype",
        		lv_adresstype_19_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStoreAccess().getTypesTypeListParserRuleCall_1_8_0()); 
	    }
		lv_types_20_0=ruleTypeList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStoreRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_20_0, 
        		"TypeList");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getStoreAccess().getAdressValueParserRuleCall_1_9_0()); 
	    }
		lv_adress_21_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStoreRule());
	        }
       		set(
       			$current, 
       			"adress",
        		lv_adress_21_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_22='singlethread' 
    {
    	newLeafNode(otherlv_22, grammarAccess.getStoreAccess().getSinglethreadKeyword_1_10());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getStoreAccess().getOrderingATOMIC_ORDERINGParserRuleCall_1_11_0()); 
	    }
		lv_ordering_23_0=ruleATOMIC_ORDERING		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStoreRule());
	        }
       		set(
       			$current, 
       			"ordering",
        		lv_ordering_23_0, 
        		"ATOMIC_ORDERING");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_24=',' 
    {
    	newLeafNode(otherlv_24, grammarAccess.getStoreAccess().getCommaKeyword_1_12_0());
    }
	otherlv_25='align' 
    {
    	newLeafNode(otherlv_25, grammarAccess.getStoreAccess().getAlignKeyword_1_12_1());
    }
(
(
		lv_index_26_0=RULE_INT
		{
			newLeafNode(lv_index_26_0, grammarAccess.getStoreAccess().getIndexINTTerminalRuleCall_1_12_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStoreRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"index",
        		lv_index_26_0, 
        		"INT");
	    }

)
))?))
;





// Entry rule entryRuleCall
entryRuleCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCallRule()); }
	 iv_ruleCall=ruleCall 
	 { $current=$iv_ruleCall.current; } 
	 EOF 
;

// Rule Call
ruleCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='tail' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCallAccess().getTailKeyword_0());
    }
)?	otherlv_1='call' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCallAccess().getCallKeyword_1());
    }
(
    { 
        newCompositeNode(grammarAccess.getCallAccess().getCallingConvParserRuleCall_2()); 
    }
ruleCallingConv
    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getCallAccess().getRETURN_ATTRIBUTESParserRuleCall_3()); 
    }
ruleRETURN_ATTRIBUTES
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getCallAccess().getAdresstypeTypeUseParserRuleCall_4_0()); 
	    }
		lv_adresstype_4_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCallRule());
	        }
       		set(
       			$current, 
       			"adresstype",
        		lv_adresstype_4_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getCallAccess().getAdressValueParserRuleCall_5_0_0()); 
	    }
		lv_adress_5_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCallRule());
	        }
       		set(
       			$current, 
       			"adress",
        		lv_adress_5_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_6='asm' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getCallAccess().getAsmKeyword_5_1_0());
    }
(	otherlv_7='sideeffect' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getCallAccess().getSideeffectKeyword_5_1_1());
    }
)?this_STRING_8=RULE_STRING
    { 
    newLeafNode(this_STRING_8, grammarAccess.getCallAccess().getSTRINGTerminalRuleCall_5_1_2()); 
    }
	otherlv_9=',' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getCallAccess().getCommaKeyword_5_1_3());
    }
this_STRING_10=RULE_STRING
    { 
    newLeafNode(this_STRING_10, grammarAccess.getCallAccess().getSTRINGTerminalRuleCall_5_1_4()); 
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getCallAccess().getPListParameterListParserRuleCall_6_0()); 
	    }
		lv_pList_11_0=ruleParameterList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCallRule());
	        }
       		set(
       			$current, 
       			"pList",
        		lv_pList_11_0, 
        		"ParameterList");
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getCallAccess().getFUNCTION_ATTRIBUTESParserRuleCall_7()); 
    }
ruleFUNCTION_ATTRIBUTES
    { 
        afterParserOrEnumRuleCall();
    }
)*(	otherlv_13=',' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getCallAccess().getCommaKeyword_8_0());
    }
	otherlv_14='!srcloc' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getCallAccess().getSrclocKeyword_8_1());
    }
	otherlv_15='!' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getCallAccess().getExclamationMarkKeyword_8_2());
    }
this_INT_16=RULE_INT
    { 
    newLeafNode(this_INT_16, grammarAccess.getCallAccess().getINTTerminalRuleCall_8_3()); 
    }
)*)
;





// Entry rule entryRuleAlloc
entryRuleAlloc returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAllocRule()); }
	 iv_ruleAlloc=ruleAlloc 
	 { $current=$iv_ruleAlloc.current; } 
	 EOF 
;

// Rule Alloc
ruleAlloc returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='alloca' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAllocAccess().getAllocaKeyword_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getAllocAccess().getTypeTypeUseParserRuleCall_1_0_0()); 
	    }
		lv_type_1_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAllocRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAllocAccess().getTypelistTypeListParserRuleCall_1_1_0()); 
	    }
		lv_typelist_2_0=ruleTypeList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAllocRule());
	        }
       		set(
       			$current, 
       			"typelist",
        		lv_typelist_2_0, 
        		"TypeList");
	        afterParserOrEnumRuleCall();
	    }

)
)?)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAllocAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAllocAccess().getNumelementstypeTypeUseParserRuleCall_2_1_0()); 
	    }
		lv_numelementstype_4_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAllocRule());
	        }
       		set(
       			$current, 
       			"numelementstype",
        		lv_numelementstype_4_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAllocAccess().getNumelementsvalueValueParserRuleCall_2_2_0()); 
	    }
		lv_numelementsvalue_5_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAllocRule());
	        }
       		set(
       			$current, 
       			"numelementsvalue",
        		lv_numelementsvalue_5_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAllocAccess().getCommaKeyword_3_0());
    }

    { 
        newCompositeNode(grammarAccess.getAllocAccess().getALIGNMENTParserRuleCall_3_1()); 
    }
ruleALIGNMENT
    { 
        afterParserOrEnumRuleCall();
    }
)?)
;





// Entry rule entryRulePhi
entryRulePhi returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPhiRule()); }
	 iv_rulePhi=rulePhi 
	 { $current=$iv_rulePhi.current; } 
	 EOF 
;

// Rule Phi
rulePhi returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='phi' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPhiAccess().getPhiKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPhiAccess().getTypeTypeUseParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPhiRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPhiAccess().getLeftSquareBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPhiAccess().getFirstclassValueParserRuleCall_3_0()); 
	    }
		lv_firstclass_3_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPhiRule());
	        }
       		add(
       			$current, 
       			"firstclass",
        		lv_firstclass_3_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPhiAccess().getCommaKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPhiAccess().getValuesValueParserRuleCall_5_0()); 
	    }
		lv_values_5_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPhiRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_5_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=']' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getPhiAccess().getRightSquareBracketKeyword_6());
    }
(	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getPhiAccess().getCommaKeyword_7_0());
    }
	otherlv_8='[' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getPhiAccess().getLeftSquareBracketKeyword_7_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPhiAccess().getFirstclassValueParserRuleCall_7_2_0()); 
	    }
		lv_firstclass_9_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPhiRule());
	        }
       		add(
       			$current, 
       			"firstclass",
        		lv_firstclass_9_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_10=',' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getPhiAccess().getCommaKeyword_7_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPhiAccess().getValuesValueParserRuleCall_7_4_0()); 
	    }
		lv_values_11_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPhiRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_11_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_12=']' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getPhiAccess().getRightSquareBracketKeyword_7_5());
    }
)*)
;





// Entry rule entryRuleLandingPad
entryRuleLandingPad returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLandingPadRule()); }
	 iv_ruleLandingPad=ruleLandingPad 
	 { $current=$iv_ruleLandingPad.current; } 
	 EOF 
;

// Rule LandingPad
ruleLandingPad returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='landingpad' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLandingPadAccess().getLandingpadKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLandingPadAccess().getStructStructureParserRuleCall_1_0()); 
	    }
		lv_struct_1_0=ruleStructure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLandingPadRule());
	        }
       		set(
       			$current, 
       			"struct",
        		lv_struct_1_0, 
        		"Structure");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='personality' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLandingPadAccess().getPersonalityKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLandingPadAccess().getPersonalitytypeTypeUseParserRuleCall_3_0()); 
	    }
		lv_personalitytype_3_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLandingPadRule());
	        }
       		set(
       			$current, 
       			"personalitytype",
        		lv_personalitytype_3_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLandingPadAccess().getPersonalityvalueValueParserRuleCall_4_0()); 
	    }
		lv_personalityvalue_4_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLandingPadRule());
	        }
       		set(
       			$current, 
       			"personalityvalue",
        		lv_personalityvalue_4_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_5='cleanup' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getLandingPadAccess().getCleanupKeyword_5_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLandingPadAccess().getClauseClauseParserRuleCall_5_0_1_0()); 
	    }
		lv_clause_6_0=ruleClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLandingPadRule());
	        }
       		add(
       			$current, 
       			"clause",
        		lv_clause_6_0, 
        		"Clause");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getLandingPadAccess().getClauseClauseParserRuleCall_5_1_0()); 
	    }
		lv_clause_7_0=ruleClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLandingPadRule());
	        }
       		add(
       			$current, 
       			"clause",
        		lv_clause_7_0, 
        		"Clause");
	        afterParserOrEnumRuleCall();
	    }

)
)+))
;





// Entry rule entryRuleClause
entryRuleClause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClauseRule()); }
	 iv_ruleClause=ruleClause 
	 { $current=$iv_ruleClause.current; } 
	 EOF 
;

// Rule Clause
ruleClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='catch' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getClauseAccess().getCatchKeyword_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClauseAccess().getTypeTypeUseParserRuleCall_0_1_0()); 
	    }
		lv_type_1_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClauseRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getClauseAccess().getValueValueParserRuleCall_0_2_0()); 
	    }
		lv_value_2_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClauseRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_3='filter' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getClauseAccess().getFilterKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClauseAccess().getFilterarrayArrayParserRuleCall_1_1_0()); 
	    }
		lv_filterarray_4_0=ruleArray		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClauseRule());
	        }
       		set(
       			$current, 
       			"filterarray",
        		lv_filterarray_4_0, 
        		"Array");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getClauseAccess().getConstantValueParserRuleCall_1_2_0()); 
	    }
		lv_constant_5_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClauseRule());
	        }
       		set(
       			$current, 
       			"constant",
        		lv_constant_5_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleSelect
entryRuleSelect returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSelectRule()); }
	 iv_ruleSelect=ruleSelect 
	 { $current=$iv_ruleSelect.current; } 
	 EOF 
;

// Rule Select
ruleSelect returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='select' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSelectAccess().getSelectKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectAccess().getConditiontypeTypeUseParserRuleCall_1_0()); 
	    }
		lv_conditiontype_1_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectRule());
	        }
       		set(
       			$current, 
       			"conditiontype",
        		lv_conditiontype_1_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectAccess().getConditionvalueValueParserRuleCall_2_0()); 
	    }
		lv_conditionvalue_2_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectRule());
	        }
       		set(
       			$current, 
       			"conditionvalue",
        		lv_conditionvalue_2_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSelectAccess().getCommaKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectAccess().getVal1typeTypeUseParserRuleCall_4_0()); 
	    }
		lv_val1type_4_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectRule());
	        }
       		set(
       			$current, 
       			"val1type",
        		lv_val1type_4_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectAccess().getVal1valueValueParserRuleCall_5_0()); 
	    }
		lv_val1value_5_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectRule());
	        }
       		set(
       			$current, 
       			"val1value",
        		lv_val1value_5_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSelectAccess().getCommaKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectAccess().getVal2typeTypeUseParserRuleCall_7_0()); 
	    }
		lv_val2type_7_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectRule());
	        }
       		set(
       			$current, 
       			"val2type",
        		lv_val2type_7_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectAccess().getVal2valueValueParserRuleCall_8_0()); 
	    }
		lv_val2value_8_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectRule());
	        }
       		set(
       			$current, 
       			"val2value",
        		lv_val2value_8_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleVariableAttributeAccess
entryRuleVariableAttributeAccess returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableAttributeAccessRule()); }
	 iv_ruleVariableAttributeAccess=ruleVariableAttributeAccess 
	 { $current=$iv_ruleVariableAttributeAccess.current; } 
	 EOF 
;

// Rule VariableAttributeAccess
ruleVariableAttributeAccess returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='va_arg' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getVariableAttributeAccessAccess().getVa_argKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableAttributeAccessAccess().getListtypeTypeUseParserRuleCall_1_0()); 
	    }
		lv_listtype_1_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableAttributeAccessRule());
	        }
       		set(
       			$current, 
       			"listtype",
        		lv_listtype_1_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableAttributeAccessAccess().getListvalueValueParserRuleCall_2_0()); 
	    }
		lv_listvalue_2_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableAttributeAccessRule());
	        }
       		set(
       			$current, 
       			"listvalue",
        		lv_listvalue_2_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getVariableAttributeAccessAccess().getCommaKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableAttributeAccessAccess().getArgTypeTypeUseParserRuleCall_4_0()); 
	    }
		lv_argType_4_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableAttributeAccessRule());
	        }
       		set(
       			$current, 
       			"argType",
        		lv_argType_4_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleExtractElement
entryRuleExtractElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExtractElementRule()); }
	 iv_ruleExtractElement=ruleExtractElement 
	 { $current=$iv_ruleExtractElement.current; } 
	 EOF 
;

// Rule ExtractElement
ruleExtractElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='extractelement' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExtractElementAccess().getExtractelementKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExtractElementAccess().getVectortypeTypeUseParserRuleCall_1_0()); 
	    }
		lv_vectortype_1_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExtractElementRule());
	        }
       		set(
       			$current, 
       			"vectortype",
        		lv_vectortype_1_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExtractElementAccess().getVectorvalueValueParserRuleCall_2_0()); 
	    }
		lv_vectorvalue_2_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExtractElementRule());
	        }
       		set(
       			$current, 
       			"vectorvalue",
        		lv_vectorvalue_2_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getExtractElementAccess().getCommaKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExtractElementAccess().getIndextypeTypeUseParserRuleCall_4_0()); 
	    }
		lv_indextype_4_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExtractElementRule());
	        }
       		set(
       			$current, 
       			"indextype",
        		lv_indextype_4_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExtractElementAccess().getIndexValueParserRuleCall_5_0()); 
	    }
		lv_index_5_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExtractElementRule());
	        }
       		set(
       			$current, 
       			"index",
        		lv_index_5_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleInsertElement
entryRuleInsertElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInsertElementRule()); }
	 iv_ruleInsertElement=ruleInsertElement 
	 { $current=$iv_ruleInsertElement.current; } 
	 EOF 
;

// Rule InsertElement
ruleInsertElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='insertelement' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInsertElementAccess().getInsertelementKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInsertElementAccess().getVectortypeTypeUseParserRuleCall_1_0()); 
	    }
		lv_vectortype_1_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInsertElementRule());
	        }
       		set(
       			$current, 
       			"vectortype",
        		lv_vectortype_1_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getInsertElementAccess().getVectorvalueValueParserRuleCall_2_0()); 
	    }
		lv_vectorvalue_2_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInsertElementRule());
	        }
       		set(
       			$current, 
       			"vectorvalue",
        		lv_vectorvalue_2_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getInsertElementAccess().getCommaKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInsertElementAccess().getScalartypeTypeUseParserRuleCall_4_0()); 
	    }
		lv_scalartype_4_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInsertElementRule());
	        }
       		set(
       			$current, 
       			"scalartype",
        		lv_scalartype_4_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getInsertElementAccess().getScalarvalueValueParserRuleCall_5_0()); 
	    }
		lv_scalarvalue_5_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInsertElementRule());
	        }
       		set(
       			$current, 
       			"scalarvalue",
        		lv_scalarvalue_5_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getInsertElementAccess().getCommaKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInsertElementAccess().getIndextypeTypeUseParserRuleCall_7_0()); 
	    }
		lv_indextype_7_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInsertElementRule());
	        }
       		set(
       			$current, 
       			"indextype",
        		lv_indextype_7_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getInsertElementAccess().getIndexValueParserRuleCall_8_0()); 
	    }
		lv_index_8_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInsertElementRule());
	        }
       		set(
       			$current, 
       			"index",
        		lv_index_8_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleShuffleVector
entryRuleShuffleVector returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getShuffleVectorRule()); }
	 iv_ruleShuffleVector=ruleShuffleVector 
	 { $current=$iv_ruleShuffleVector.current; } 
	 EOF 
;

// Rule ShuffleVector
ruleShuffleVector returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='shufflevector' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getShuffleVectorAccess().getShufflevectorKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getShuffleVectorAccess().getVal1typeTypeUseParserRuleCall_1_0()); 
	    }
		lv_val1type_1_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getShuffleVectorRule());
	        }
       		set(
       			$current, 
       			"val1type",
        		lv_val1type_1_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getShuffleVectorAccess().getVal1valueValueParserRuleCall_2_0()); 
	    }
		lv_val1value_2_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getShuffleVectorRule());
	        }
       		set(
       			$current, 
       			"val1value",
        		lv_val1value_2_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getShuffleVectorAccess().getCommaKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getShuffleVectorAccess().getVal2typeTypeUseParserRuleCall_4_0()); 
	    }
		lv_val2type_4_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getShuffleVectorRule());
	        }
       		set(
       			$current, 
       			"val2type",
        		lv_val2type_4_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getShuffleVectorAccess().getVal2valueValueParserRuleCall_5_0()); 
	    }
		lv_val2value_5_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getShuffleVectorRule());
	        }
       		set(
       			$current, 
       			"val2value",
        		lv_val2value_5_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getShuffleVectorAccess().getCommaKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getShuffleVectorAccess().getMasktypeTypeUseParserRuleCall_7_0()); 
	    }
		lv_masktype_7_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getShuffleVectorRule());
	        }
       		set(
       			$current, 
       			"masktype",
        		lv_masktype_7_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getShuffleVectorAccess().getMaskvalueValueParserRuleCall_8_0()); 
	    }
		lv_maskvalue_8_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getShuffleVectorRule());
	        }
       		set(
       			$current, 
       			"maskvalue",
        		lv_maskvalue_8_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleCompare
entryRuleCompare returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompareRule()); }
	 iv_ruleCompare=ruleCompare 
	 { $current=$iv_ruleCompare.current; } 
	 EOF 
;

// Rule Compare
ruleCompare returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='icmp' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCompareAccess().getIcmpKeyword_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCompareAccess().getPredI_PREDICATESParserRuleCall_0_1_0()); 
	    }
		lv_pred_1_0=ruleI_PREDICATES		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompareRule());
	        }
       		set(
       			$current, 
       			"pred",
        		lv_pred_1_0, 
        		"I_PREDICATES");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCompareAccess().getComptypeTypeUseParserRuleCall_0_2_0()); 
	    }
		lv_comptype_2_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompareRule());
	        }
       		set(
       			$current, 
       			"comptype",
        		lv_comptype_2_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCompareAccess().getValue1ValueParserRuleCall_0_3_0()); 
	    }
		lv_value1_3_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompareRule());
	        }
       		set(
       			$current, 
       			"value1",
        		lv_value1_3_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getCompareAccess().getCommaKeyword_0_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCompareAccess().getValue2ValueParserRuleCall_0_5_0()); 
	    }
		lv_value2_5_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompareRule());
	        }
       		set(
       			$current, 
       			"value2",
        		lv_value2_5_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_6='fcmp' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getCompareAccess().getFcmpKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCompareAccess().getPredF_PREDICATESParserRuleCall_1_1_0()); 
	    }
		lv_pred_7_0=ruleF_PREDICATES		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompareRule());
	        }
       		set(
       			$current, 
       			"pred",
        		lv_pred_7_0, 
        		"F_PREDICATES");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCompareAccess().getComptypeTypeUseParserRuleCall_1_2_0()); 
	    }
		lv_comptype_8_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompareRule());
	        }
       		set(
       			$current, 
       			"comptype",
        		lv_comptype_8_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCompareAccess().getValue1ValueParserRuleCall_1_3_0()); 
	    }
		lv_value1_9_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompareRule());
	        }
       		set(
       			$current, 
       			"value1",
        		lv_value1_9_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_10=',' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getCompareAccess().getCommaKeyword_1_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCompareAccess().getValue2ValueParserRuleCall_1_5_0()); 
	    }
		lv_value2_11_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompareRule());
	        }
       		set(
       			$current, 
       			"value2",
        		lv_value2_11_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleIndirectBranch
entryRuleIndirectBranch returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIndirectBranchRule()); }
	 iv_ruleIndirectBranch=ruleIndirectBranch 
	 { $current=$iv_ruleIndirectBranch.current; } 
	 EOF 
;

// Rule IndirectBranch
ruleIndirectBranch returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='indirectbr' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIndirectBranchAccess().getIndirectbrKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIndirectBranchAccess().getAdresstypeTypeUseParserRuleCall_1_0()); 
	    }
		lv_adresstype_1_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIndirectBranchRule());
	        }
       		set(
       			$current, 
       			"adresstype",
        		lv_adresstype_1_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIndirectBranchAccess().getAdressValueParserRuleCall_2_0()); 
	    }
		lv_adress_2_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIndirectBranchRule());
	        }
       		set(
       			$current, 
       			"adress",
        		lv_adress_2_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIndirectBranchAccess().getCommaKeyword_3());
    }
	otherlv_4='[' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIndirectBranchAccess().getLeftSquareBracketKeyword_4());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getIndirectBranchAccess().getLabeltypeTypeUseParserRuleCall_5_0_0()); 
	    }
		lv_labeltype_5_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIndirectBranchRule());
	        }
       		add(
       			$current, 
       			"labeltype",
        		lv_labeltype_5_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIndirectBranchAccess().getLabelsValueParserRuleCall_5_1_0()); 
	    }
		lv_labels_6_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIndirectBranchRule());
	        }
       		add(
       			$current, 
       			"labels",
        		lv_labels_6_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getIndirectBranchAccess().getCommaKeyword_5_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIndirectBranchAccess().getLabeltypeTypeUseParserRuleCall_5_2_1_0()); 
	    }
		lv_labeltype_8_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIndirectBranchRule());
	        }
       		add(
       			$current, 
       			"labeltype",
        		lv_labeltype_8_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIndirectBranchAccess().getLabelsValueParserRuleCall_5_2_2_0()); 
	    }
		lv_labels_9_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIndirectBranchRule());
	        }
       		add(
       			$current, 
       			"labels",
        		lv_labels_9_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_10=']' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getIndirectBranchAccess().getRightSquareBracketKeyword_6());
    }
)
;





// Entry rule entryRuleSwitch
entryRuleSwitch returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSwitchRule()); }
	 iv_ruleSwitch=ruleSwitch 
	 { $current=$iv_ruleSwitch.current; } 
	 EOF 
;

// Rule Switch
ruleSwitch returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='switch' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSwitchAccess().getSwitchKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchAccess().getComptypeTypeUseParserRuleCall_1_0()); 
	    }
		lv_comptype_1_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchRule());
	        }
       		set(
       			$current, 
       			"comptype",
        		lv_comptype_1_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchAccess().getCompvalueValueParserRuleCall_2_0()); 
	    }
		lv_compvalue_2_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchRule());
	        }
       		set(
       			$current, 
       			"compvalue",
        		lv_compvalue_2_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSwitchAccess().getCommaKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchAccess().getDefaulttypeTypeUseParserRuleCall_4_0()); 
	    }
		lv_defaulttype_4_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchRule());
	        }
       		set(
       			$current, 
       			"defaulttype",
        		lv_defaulttype_4_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchAccess().getDefaultvalueValueParserRuleCall_5_0()); 
	    }
		lv_defaultvalue_5_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchRule());
	        }
       		set(
       			$current, 
       			"defaultvalue",
        		lv_defaultvalue_5_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='[' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSwitchAccess().getLeftSquareBracketKeyword_6());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchAccess().getJtypesTypeUseParserRuleCall_7_0_0()); 
	    }
		lv_jtypes_7_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchRule());
	        }
       		add(
       			$current, 
       			"jtypes",
        		lv_jtypes_7_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchAccess().getJvaluesValueParserRuleCall_7_1_0()); 
	    }
		lv_jvalues_8_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchRule());
	        }
       		add(
       			$current, 
       			"jvalues",
        		lv_jvalues_8_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9=',' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getSwitchAccess().getCommaKeyword_7_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchAccess().getDestinationtypesTypeUseParserRuleCall_7_3_0()); 
	    }
		lv_destinationtypes_10_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchRule());
	        }
       		add(
       			$current, 
       			"destinationtypes",
        		lv_destinationtypes_10_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchAccess().getDestinationsValueParserRuleCall_7_4_0()); 
	    }
		lv_destinations_11_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchRule());
	        }
       		add(
       			$current, 
       			"destinations",
        		lv_destinations_11_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
))+	otherlv_12=']' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getSwitchAccess().getRightSquareBracketKeyword_8());
    }
)
;





// Entry rule entryRuleInvoke
entryRuleInvoke returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInvokeRule()); }
	 iv_ruleInvoke=ruleInvoke 
	 { $current=$iv_ruleInvoke.current; } 
	 EOF 
;

// Rule Invoke
ruleInvoke returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='invoke' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInvokeAccess().getInvokeKeyword_0());
    }
(
    { 
        newCompositeNode(grammarAccess.getInvokeAccess().getCallingConvParserRuleCall_1()); 
    }
ruleCallingConv
    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getInvokeAccess().getRETURN_ATTRIBUTESParserRuleCall_2()); 
    }
ruleRETURN_ATTRIBUTES
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getInvokeAccess().getFunctiontypeTypeUseParserRuleCall_3_0()); 
	    }
		lv_functiontype_3_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInvokeRule());
	        }
       		set(
       			$current, 
       			"functiontype",
        		lv_functiontype_3_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getInvokeAccess().getNameAddressParserRuleCall_4_0()); 
	    }
		lv_name_4_0=ruleAddress		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInvokeRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"Address");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getInvokeAccess().getPListParameterListParserRuleCall_5_0()); 
	    }
		lv_pList_5_0=ruleParameterList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInvokeRule());
	        }
       		set(
       			$current, 
       			"pList",
        		lv_pList_5_0, 
        		"ParameterList");
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getInvokeAccess().getFUNCTION_ATTRIBUTESParserRuleCall_6()); 
    }
ruleFUNCTION_ATTRIBUTES
    { 
        afterParserOrEnumRuleCall();
    }
)*	otherlv_7='to' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getInvokeAccess().getToKeyword_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInvokeAccess().getTotypeTypeUseParserRuleCall_8_0()); 
	    }
		lv_totype_8_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInvokeRule());
	        }
       		set(
       			$current, 
       			"totype",
        		lv_totype_8_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getInvokeAccess().getTovalueValueParserRuleCall_9_0()); 
	    }
		lv_tovalue_9_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInvokeRule());
	        }
       		set(
       			$current, 
       			"tovalue",
        		lv_tovalue_9_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_10='unwind' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getInvokeAccess().getUnwindKeyword_10());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInvokeAccess().getUnwindtypeTypeUseParserRuleCall_11_0()); 
	    }
		lv_unwindtype_11_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInvokeRule());
	        }
       		set(
       			$current, 
       			"unwindtype",
        		lv_unwindtype_11_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getInvokeAccess().getUnwindvalueValueParserRuleCall_12_0()); 
	    }
		lv_unwindvalue_12_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInvokeRule());
	        }
       		set(
       			$current, 
       			"unwindvalue",
        		lv_unwindvalue_12_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleResume
entryRuleResume returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getResumeRule()); }
	 iv_ruleResume=ruleResume 
	 { $current=$iv_ruleResume.current; } 
	 EOF 
;

// Rule Resume
ruleResume returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='resume' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getResumeAccess().getResumeKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getResumeAccess().getResumestructStructureParserRuleCall_1_0()); 
	    }
		lv_resumestruct_1_0=ruleStructure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getResumeRule());
	        }
       		set(
       			$current, 
       			"resumestruct",
        		lv_resumestruct_1_0, 
        		"Structure");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getResumeAccess().getResumevalueValueParserRuleCall_2_0()); 
	    }
		lv_resumevalue_2_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getResumeRule());
	        }
       		set(
       			$current, 
       			"resumevalue",
        		lv_resumevalue_2_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleUnreachable
entryRuleUnreachable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnreachableRule()); }
	 iv_ruleUnreachable=ruleUnreachable 
	 { $current=$iv_ruleUnreachable.current; } 
	 EOF 
;

// Rule Unreachable
ruleUnreachable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnreachableAccess().getUnreachableAction_0(),
            $current);
    }
)	otherlv_1='unreachable' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUnreachableAccess().getUnreachableKeyword_1());
    }
)
;





// Entry rule entryRuleReturn
entryRuleReturn returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReturnRule()); }
	 iv_ruleReturn=ruleReturn 
	 { $current=$iv_ruleReturn.current; } 
	 EOF 
;

// Rule Return
ruleReturn returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getReturnAccess().getReturnAction_0_0(),
            $current);
    }
)	otherlv_1='ret' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getReturnAccess().getRetKeyword_0_1());
    }
	otherlv_2='void' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getReturnAccess().getVoidKeyword_0_2());
    }
(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getReturnAccess().getCommaKeyword_0_3_0());
    }
	otherlv_4='!dbg' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getReturnAccess().getDbgKeyword_0_3_1());
    }
	otherlv_5='!' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getReturnAccess().getExclamationMarkKeyword_0_3_2());
    }
this_INT_6=RULE_INT
    { 
    newLeafNode(this_INT_6, grammarAccess.getReturnAccess().getINTTerminalRuleCall_0_3_3()); 
    }
)?)
    |(	otherlv_7='ret' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getReturnAccess().getRetKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReturnAccess().getReturntypeTypeUseParserRuleCall_1_1_0()); 
	    }
		lv_returntype_8_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReturnRule());
	        }
       		set(
       			$current, 
       			"returntype",
        		lv_returntype_8_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getReturnAccess().getReturnvalueValueParserRuleCall_1_2_0()); 
	    }
		lv_returnvalue_9_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReturnRule());
	        }
       		set(
       			$current, 
       			"returnvalue",
        		lv_returnvalue_9_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_10=',' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getReturnAccess().getCommaKeyword_1_3_0());
    }
	otherlv_11='!dbg' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getReturnAccess().getDbgKeyword_1_3_1());
    }
	otherlv_12='!' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getReturnAccess().getExclamationMarkKeyword_1_3_2());
    }
this_INT_13=RULE_INT
    { 
    newLeafNode(this_INT_13, grammarAccess.getReturnAccess().getINTTerminalRuleCall_1_3_3()); 
    }
)?))
;





// Entry rule entryRuleBranch
entryRuleBranch returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBranchRule()); }
	 iv_ruleBranch=ruleBranch 
	 { $current=$iv_ruleBranch.current; } 
	 EOF 
;

// Rule Branch
ruleBranch returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='br' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBranchAccess().getBrKeyword_0_0());
    }
	otherlv_1='label' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBranchAccess().getLabelKeyword_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBranchAccess().getDestinationValueParserRuleCall_0_2_0()); 
	    }
		lv_destination_2_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBranchRule());
	        }
       		set(
       			$current, 
       			"destination",
        		lv_destination_2_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_3='br' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBranchAccess().getBrKeyword_1_0());
    }
this_INT_TYPE_4=RULE_INT_TYPE
    { 
    newLeafNode(this_INT_TYPE_4, grammarAccess.getBranchAccess().getINT_TYPETerminalRuleCall_1_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBranchAccess().getCondvalueValueParserRuleCall_1_2_0()); 
	    }
		lv_condvalue_5_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBranchRule());
	        }
       		set(
       			$current, 
       			"condvalue",
        		lv_condvalue_5_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getBranchAccess().getCommaKeyword_1_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBranchAccess().getLabelTruetypeTypeUseParserRuleCall_1_4_0()); 
	    }
		lv_labelTruetype_7_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBranchRule());
	        }
       		set(
       			$current, 
       			"labelTruetype",
        		lv_labelTruetype_7_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBranchAccess().getLabelTrueValueParserRuleCall_1_5_0()); 
	    }
		lv_labelTrue_8_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBranchRule());
	        }
       		set(
       			$current, 
       			"labelTrue",
        		lv_labelTrue_8_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9=',' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getBranchAccess().getCommaKeyword_1_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBranchAccess().getLabelFalsetypeTypeUseParserRuleCall_1_7_0()); 
	    }
		lv_labelFalsetype_10_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBranchRule());
	        }
       		set(
       			$current, 
       			"labelFalsetype",
        		lv_labelFalsetype_10_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBranchAccess().getLabelFalseValueParserRuleCall_1_8_0()); 
	    }
		lv_labelFalse_11_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBranchRule());
	        }
       		set(
       			$current, 
       			"labelFalse",
        		lv_labelFalse_11_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleATOMIC_ORDERING
entryRuleATOMIC_ORDERING returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getATOMIC_ORDERINGRule()); } 
	 iv_ruleATOMIC_ORDERING=ruleATOMIC_ORDERING 
	 { $current=$iv_ruleATOMIC_ORDERING.current.getText(); }  
	 EOF 
;

// Rule ATOMIC_ORDERING
ruleATOMIC_ORDERING returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='unordered' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getATOMIC_ORDERINGAccess().getUnorderedKeyword_0()); 
    }

    |
	kw='monotonic' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getATOMIC_ORDERINGAccess().getMonotonicKeyword_1()); 
    }

    |
	kw='aquire' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getATOMIC_ORDERINGAccess().getAquireKeyword_2()); 
    }

    |
	kw='release' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getATOMIC_ORDERINGAccess().getReleaseKeyword_3()); 
    }

    |
	kw='acq_rel' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getATOMIC_ORDERINGAccess().getAcq_relKeyword_4()); 
    }

    |
	kw='seq_cst' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getATOMIC_ORDERINGAccess().getSeq_cstKeyword_5()); 
    }
)
    ;





// Entry rule entryRuleBIN_OP
entryRuleBIN_OP returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBIN_OPRule()); } 
	 iv_ruleBIN_OP=ruleBIN_OP 
	 { $current=$iv_ruleBIN_OP.current.getText(); }  
	 EOF 
;

// Rule BIN_OP
ruleBIN_OP returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='xchg' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBIN_OPAccess().getXchgKeyword_0()); 
    }

    |
	kw='add' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBIN_OPAccess().getAddKeyword_1()); 
    }

    |
	kw='sub' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBIN_OPAccess().getSubKeyword_2()); 
    }

    |
	kw='and' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBIN_OPAccess().getAndKeyword_3()); 
    }

    |
	kw='nand' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBIN_OPAccess().getNandKeyword_4()); 
    }

    |
	kw='or' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBIN_OPAccess().getOrKeyword_5()); 
    }

    |
	kw='xor' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBIN_OPAccess().getXorKeyword_6()); 
    }

    |
	kw='max' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBIN_OPAccess().getMaxKeyword_7()); 
    }

    |
	kw='min' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBIN_OPAccess().getMinKeyword_8()); 
    }

    |
	kw='umax' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBIN_OPAccess().getUmaxKeyword_9()); 
    }

    |
	kw='umin' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBIN_OPAccess().getUminKeyword_10()); 
    }
)
    ;





// Entry rule entryRuleRETURN_ATTRIBUTES
entryRuleRETURN_ATTRIBUTES returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRETURN_ATTRIBUTESRule()); } 
	 iv_ruleRETURN_ATTRIBUTES=ruleRETURN_ATTRIBUTES 
	 { $current=$iv_ruleRETURN_ATTRIBUTES.current.getText(); }  
	 EOF 
;

// Rule RETURN_ATTRIBUTES
ruleRETURN_ATTRIBUTES returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='zeroext' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRETURN_ATTRIBUTESAccess().getZeroextKeyword_0()); 
    }

    |
	kw='signext' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRETURN_ATTRIBUTESAccess().getSignextKeyword_1()); 
    }

    |
	kw='inreg' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRETURN_ATTRIBUTESAccess().getInregKeyword_2()); 
    }

    |
	kw='byval' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRETURN_ATTRIBUTESAccess().getByvalKeyword_3()); 
    }

    |
	kw='sret' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRETURN_ATTRIBUTESAccess().getSretKeyword_4()); 
    }

    |
	kw='noalias' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRETURN_ATTRIBUTESAccess().getNoaliasKeyword_5()); 
    }

    |
	kw='nocapture' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRETURN_ATTRIBUTESAccess().getNocaptureKeyword_6()); 
    }

    |
	kw='nest' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRETURN_ATTRIBUTESAccess().getNestKeyword_7()); 
    }
)
    ;





// Entry rule entryRuleCallingConv
entryRuleCallingConv returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCallingConvRule()); } 
	 iv_ruleCallingConv=ruleCallingConv 
	 { $current=$iv_ruleCallingConv.current.getText(); }  
	 EOF 
;

// Rule CallingConv
ruleCallingConv returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='ccc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallingConvAccess().getCccKeyword_0()); 
    }

    |
	kw='fastcc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallingConvAccess().getFastccKeyword_1()); 
    }

    |
	kw='coldcc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallingConvAccess().getColdccKeyword_2()); 
    }

    |
	kw='x86_stdcallcc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallingConvAccess().getX86_stdcallccKeyword_3()); 
    }

    |
	kw='x86_fastcallcc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallingConvAccess().getX86_fastcallccKeyword_4()); 
    }

    |
	kw='x86_thiscallcc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallingConvAccess().getX86_thiscallccKeyword_5()); 
    }

    |
	kw='arm_apcscc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallingConvAccess().getArm_apcsccKeyword_6()); 
    }

    |
	kw='arm_aapcscc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallingConvAccess().getArm_aapcsccKeyword_7()); 
    }

    |
	kw='arm_aapcs_vfpcc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallingConvAccess().getArm_aapcs_vfpccKeyword_8()); 
    }

    |
	kw='msp430_intrcc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallingConvAccess().getMsp430_intrccKeyword_9()); 
    }

    |
	kw='ptx_kernel' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallingConvAccess().getPtx_kernelKeyword_10()); 
    }

    |
	kw='ptx_device' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallingConvAccess().getPtx_deviceKeyword_11()); 
    }

    |
	kw='spir_func' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallingConvAccess().getSpir_funcKeyword_12()); 
    }

    |
	kw='spir_kernel' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallingConvAccess().getSpir_kernelKeyword_13()); 
    }

    |(
	kw='cc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallingConvAccess().getCcKeyword_14_0()); 
    }

	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallingConvAccess().getLessThanSignKeyword_14_1()); 
    }
    this_INT_16=RULE_INT    {
		$current.merge(this_INT_16);
    }

    { 
    newLeafNode(this_INT_16, grammarAccess.getCallingConvAccess().getINTTerminalRuleCall_14_2()); 
    }

	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallingConvAccess().getGreaterThanSignKeyword_14_3()); 
    }
    this_INT_18=RULE_INT    {
		$current.merge(this_INT_18);
    }

    { 
    newLeafNode(this_INT_18, grammarAccess.getCallingConvAccess().getINTTerminalRuleCall_14_4()); 
    }
))
    ;





// Entry rule entryRuleFUNCTION_ATTRIBUTES
entryRuleFUNCTION_ATTRIBUTES returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFUNCTION_ATTRIBUTESRule()); } 
	 iv_ruleFUNCTION_ATTRIBUTES=ruleFUNCTION_ATTRIBUTES 
	 { $current=$iv_ruleFUNCTION_ATTRIBUTES.current.getText(); }  
	 EOF 
;

// Rule FUNCTION_ATTRIBUTES
ruleFUNCTION_ATTRIBUTES returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='address_safety' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getAddress_safetyKeyword_0()); 
    }

    |(
	kw='alignstack' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getAlignstackKeyword_1_0()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getLeftParenthesisKeyword_1_1()); 
    }

	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getLessThanSignKeyword_1_2()); 
    }
    this_INT_4=RULE_INT    {
		$current.merge(this_INT_4);
    }

    { 
    newLeafNode(this_INT_4, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getINTTerminalRuleCall_1_3()); 
    }

	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getGreaterThanSignKeyword_1_4()); 
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getRightParenthesisKeyword_1_5()); 
    }
)
    |
	kw='alwaysinline' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getAlwaysinlineKeyword_2()); 
    }

    |
	kw='nonlazybind' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getNonlazybindKeyword_3()); 
    }

    |
	kw='inlinehint' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getInlinehintKeyword_4()); 
    }

    |
	kw='naked' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getNakedKeyword_5()); 
    }

    |
	kw='noimplicitfloat' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getNoimplicitfloatKeyword_6()); 
    }

    |
	kw='noinline' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getNoinlineKeyword_7()); 
    }

    |
	kw='noredzone' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getNoredzoneKeyword_8()); 
    }

    |
	kw='noreturn' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getNoreturnKeyword_9()); 
    }

    |
	kw='nounwind' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getNounwindKeyword_10()); 
    }

    |
	kw='optsize' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getOptsizeKeyword_11()); 
    }

    |
	kw='readnone' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getReadnoneKeyword_12()); 
    }

    |
	kw='readonly' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getReadonlyKeyword_13()); 
    }

    |
	kw='returns_twice' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getReturns_twiceKeyword_14()); 
    }

    |
	kw='ssp' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getSspKeyword_15()); 
    }

    |
	kw='sspreq' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getSspreqKeyword_16()); 
    }

    |
	kw='uwtable' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getUwtableKeyword_17()); 
    }
)
    ;





// Entry rule entryRuleCast_OP
entryRuleCast_OP returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCast_OPRule()); } 
	 iv_ruleCast_OP=ruleCast_OP 
	 { $current=$iv_ruleCast_OP.current.getText(); }  
	 EOF 
;

// Rule Cast_OP
ruleCast_OP returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='trunc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCast_OPAccess().getTruncKeyword_0()); 
    }

    |
	kw='zext' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCast_OPAccess().getZextKeyword_1()); 
    }

    |
	kw='sext' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCast_OPAccess().getSextKeyword_2()); 
    }

    |
	kw='fptrunc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCast_OPAccess().getFptruncKeyword_3()); 
    }

    |
	kw='fpext' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCast_OPAccess().getFpextKeyword_4()); 
    }

    |
	kw='fptoui' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCast_OPAccess().getFptouiKeyword_5()); 
    }

    |
	kw='fptosi' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCast_OPAccess().getFptosiKeyword_6()); 
    }

    |
	kw='uitofp' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCast_OPAccess().getUitofpKeyword_7()); 
    }

    |
	kw='sitofp' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCast_OPAccess().getSitofpKeyword_8()); 
    }

    |
	kw='ptrtoint' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCast_OPAccess().getPtrtointKeyword_9()); 
    }

    |
	kw='inttoptr' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCast_OPAccess().getInttoptrKeyword_10()); 
    }

    |
	kw='bitcast' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCast_OPAccess().getBitcastKeyword_11()); 
    }
)
    ;





// Entry rule entryRuleI_PREDICATES
entryRuleI_PREDICATES returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getI_PREDICATESRule()); } 
	 iv_ruleI_PREDICATES=ruleI_PREDICATES 
	 { $current=$iv_ruleI_PREDICATES.current.getText(); }  
	 EOF 
;

// Rule I_PREDICATES
ruleI_PREDICATES returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='eq' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getI_PREDICATESAccess().getEqKeyword_0()); 
    }

    |
	kw='ne' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getI_PREDICATESAccess().getNeKeyword_1()); 
    }

    |
	kw='ugt' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getI_PREDICATESAccess().getUgtKeyword_2()); 
    }

    |
	kw='uge' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getI_PREDICATESAccess().getUgeKeyword_3()); 
    }

    |
	kw='ult' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getI_PREDICATESAccess().getUltKeyword_4()); 
    }

    |
	kw='ule' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getI_PREDICATESAccess().getUleKeyword_5()); 
    }

    |
	kw='sgt' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getI_PREDICATESAccess().getSgtKeyword_6()); 
    }

    |
	kw='sge' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getI_PREDICATESAccess().getSgeKeyword_7()); 
    }

    |
	kw='slt' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getI_PREDICATESAccess().getSltKeyword_8()); 
    }

    |
	kw='sle' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getI_PREDICATESAccess().getSleKeyword_9()); 
    }
)
    ;





// Entry rule entryRuleF_PREDICATES
entryRuleF_PREDICATES returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getF_PREDICATESRule()); } 
	 iv_ruleF_PREDICATES=ruleF_PREDICATES 
	 { $current=$iv_ruleF_PREDICATES.current.getText(); }  
	 EOF 
;

// Rule F_PREDICATES
ruleF_PREDICATES returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='false' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getF_PREDICATESAccess().getFalseKeyword_0()); 
    }

    |
	kw='oeq' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getF_PREDICATESAccess().getOeqKeyword_1()); 
    }

    |
	kw='ogt' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getF_PREDICATESAccess().getOgtKeyword_2()); 
    }

    |
	kw='oge' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getF_PREDICATESAccess().getOgeKeyword_3()); 
    }

    |
	kw='olt' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getF_PREDICATESAccess().getOltKeyword_4()); 
    }

    |
	kw='ole' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getF_PREDICATESAccess().getOleKeyword_5()); 
    }

    |
	kw='one' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getF_PREDICATESAccess().getOneKeyword_6()); 
    }

    |
	kw='ord' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getF_PREDICATESAccess().getOrdKeyword_7()); 
    }

    |
	kw='ueq' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getF_PREDICATESAccess().getUeqKeyword_8()); 
    }

    |
	kw='ugt' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getF_PREDICATESAccess().getUgtKeyword_9()); 
    }

    |
	kw='uge' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getF_PREDICATESAccess().getUgeKeyword_10()); 
    }

    |
	kw='ult' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getF_PREDICATESAccess().getUltKeyword_11()); 
    }

    |
	kw='ule' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getF_PREDICATESAccess().getUleKeyword_12()); 
    }

    |
	kw='une' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getF_PREDICATESAccess().getUneKeyword_13()); 
    }

    |
	kw='uno' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getF_PREDICATESAccess().getUnoKeyword_14()); 
    }

    |
	kw='true' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getF_PREDICATESAccess().getTrueKeyword_15()); 
    }
)
    ;





// Entry rule entryRuleVISIBILITY
entryRuleVISIBILITY returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVISIBILITYRule()); } 
	 iv_ruleVISIBILITY=ruleVISIBILITY 
	 { $current=$iv_ruleVISIBILITY.current.getText(); }  
	 EOF 
;

// Rule VISIBILITY
ruleVISIBILITY returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='default' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVISIBILITYAccess().getDefaultKeyword_0()); 
    }

    |
	kw='hidden' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVISIBILITYAccess().getHiddenKeyword_1()); 
    }

    |
	kw='protected' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVISIBILITYAccess().getProtectedKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleLINKAGE
entryRuleLINKAGE returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLINKAGERule()); } 
	 iv_ruleLINKAGE=ruleLINKAGE 
	 { $current=$iv_ruleLINKAGE.current.getText(); }  
	 EOF 
;

// Rule LINKAGE
ruleLINKAGE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='private' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLINKAGEAccess().getPrivateKeyword_0()); 
    }

    |
	kw='linker_private' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLINKAGEAccess().getLinker_privateKeyword_1()); 
    }

    |
	kw='linker_private_weak' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLINKAGEAccess().getLinker_private_weakKeyword_2()); 
    }

    |
	kw='available_externally' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLINKAGEAccess().getAvailable_externallyKeyword_3()); 
    }

    |
	kw='linkonce' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLINKAGEAccess().getLinkonceKeyword_4()); 
    }

    |
	kw='common' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLINKAGEAccess().getCommonKeyword_5()); 
    }

    |
	kw='appending' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLINKAGEAccess().getAppendingKeyword_6()); 
    }

    |
	kw='extern_weak' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLINKAGEAccess().getExtern_weakKeyword_7()); 
    }

    |
	kw='linkonce_odr' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLINKAGEAccess().getLinkonce_odrKeyword_8()); 
    }

    |
	kw='linkonce_odr_auto_hide' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLINKAGEAccess().getLinkonce_odr_auto_hideKeyword_9()); 
    }

    |
	kw='dllimport' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLINKAGEAccess().getDllimportKeyword_10()); 
    }

    |
	kw='dllexport' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLINKAGEAccess().getDllexportKeyword_11()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getLINKAGEAccess().getALIAS_LINKAGEParserRuleCall_12()); 
    }
    this_ALIAS_LINKAGE_12=ruleALIAS_LINKAGE    {
		$current.merge(this_ALIAS_LINKAGE_12);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleALIAS_LINKAGE
entryRuleALIAS_LINKAGE returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getALIAS_LINKAGERule()); } 
	 iv_ruleALIAS_LINKAGE=ruleALIAS_LINKAGE 
	 { $current=$iv_ruleALIAS_LINKAGE.current.getText(); }  
	 EOF 
;

// Rule ALIAS_LINKAGE
ruleALIAS_LINKAGE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='external' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getALIAS_LINKAGEAccess().getExternalKeyword_0()); 
    }

    |
	kw='internal' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getALIAS_LINKAGEAccess().getInternalKeyword_1()); 
    }

    |
	kw='weak' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getALIAS_LINKAGEAccess().getWeakKeyword_2()); 
    }

    |
	kw='weak_odr' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getALIAS_LINKAGEAccess().getWeak_odrKeyword_3()); 
    }
)
    ;





RULE_INT : '-'? ('0'..'9')+;

RULE_VALID_ID : (('%'|'@') '.'* (('a'..'z'|'A'..'Z'|'_'|'0'..'9')+|RULE_STRING)|'(' RULE_VALID_ID RULE_POINTER? ')') ('.' (('a'..'z'|'A'..'Z'|'_'|'0'..'9')+|'(' ('a'..'z'|'A'..'Z'|'_'|'0'..'9')+ RULE_POINTER? ')'))*;

RULE_INT_TYPE : 'i' ('0'..'9')+ RULE_POINTER?;

RULE_STRING : ('c'? '"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'0'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'c'? '\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'0'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_OREST : '(...)' RULE_POINTER?;

RULE_SL_COMMENT : ';' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_POINTER : '*'+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


