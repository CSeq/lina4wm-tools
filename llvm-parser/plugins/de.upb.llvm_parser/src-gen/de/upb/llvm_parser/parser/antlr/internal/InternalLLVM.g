/*
* generated by Xtext
*/
grammar InternalLLVM;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package de.upb.llvm_parser.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.upb.llvm_parser.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.upb.llvm_parser.services.LLVMGrammarAccess;

}

@parser::members {

 	private LLVMGrammarAccess grammarAccess;
 	
    public InternalLLVMParser(TokenStream input, LLVMGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "LLVM";	
   	}
   	
   	@Override
   	protected LLVMGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleLLVM
entryRuleLLVM returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLLVMRule()); }
	 iv_ruleLLVM=ruleLLVM 
	 { $current=$iv_ruleLLVM.current; } 
	 EOF 
;

// Rule LLVM
ruleLLVM returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getLLVMAccess().getElementsAbstractElementParserRuleCall_0()); 
	    }
		lv_elements_0_0=ruleAbstractElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLLVMRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_0_0, 
        		"AbstractElement");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleAbstractElement
entryRuleAbstractElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractElementRule()); }
	 iv_ruleAbstractElement=ruleAbstractElement 
	 { $current=$iv_ruleAbstractElement.current; } 
	 EOF 
;

// Rule AbstractElement
ruleAbstractElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getAbstractElementAccess().getTopLevelEntityParserRuleCall_0_0()); 
    }
    this_TopLevelEntity_0=ruleTopLevelEntity
    { 
        $current = $this_TopLevelEntity_0.current; 
        afterParserOrEnumRuleCall();
    }
(this_SL_COMMENT_1=RULE_SL_COMMENT
    { 
    newLeafNode(this_SL_COMMENT_1, grammarAccess.getAbstractElementAccess().getSL_COMMENTTerminalRuleCall_0_1()); 
    }
)?)
    |(
    { 
        newCompositeNode(grammarAccess.getAbstractElementAccess().getMainLevelEntityParserRuleCall_1_0()); 
    }
    this_MainLevelEntity_2=ruleMainLevelEntity
    { 
        $current = $this_MainLevelEntity_2.current; 
        afterParserOrEnumRuleCall();
    }
(this_SL_COMMENT_3=RULE_SL_COMMENT
    { 
    newLeafNode(this_SL_COMMENT_3, grammarAccess.getAbstractElementAccess().getSL_COMMENTTerminalRuleCall_1_1()); 
    }
)?))
;





// Entry rule entryRuleTopLevelEntity
entryRuleTopLevelEntity returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTopLevelEntityRule()); }
	 iv_ruleTopLevelEntity=ruleTopLevelEntity 
	 { $current=$iv_ruleTopLevelEntity.current; } 
	 EOF 
;

// Rule TopLevelEntity
ruleTopLevelEntity returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='module' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTopLevelEntityAccess().getModuleKeyword_0_0());
    }
	otherlv_1='asm' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTopLevelEntityAccess().getAsmKeyword_0_1());
    }
(
(
		lv_module_2_0=RULE_STRING
		{
			newLeafNode(lv_module_2_0, grammarAccess.getTopLevelEntityAccess().getModuleSTRINGTerminalRuleCall_0_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTopLevelEntityRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"module",
        		lv_module_2_0, 
        		"STRING");
	    }

)
))
    |(	otherlv_3='target' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTopLevelEntityAccess().getTargetKeyword_1_0());
    }
(	otherlv_4='datalayout' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTopLevelEntityAccess().getDatalayoutKeyword_1_1_0());
    }

    |	otherlv_5='triple' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTopLevelEntityAccess().getTripleKeyword_1_1_1());
    }
)	otherlv_6='=' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTopLevelEntityAccess().getEqualsSignKeyword_1_2());
    }
(
(
		lv_target_7_0=RULE_STRING
		{
			newLeafNode(lv_target_7_0, grammarAccess.getTopLevelEntityAccess().getTargetSTRINGTerminalRuleCall_1_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTopLevelEntityRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"target",
        		lv_target_7_0, 
        		"STRING");
	    }

)
))
    |(	otherlv_8='deplibs' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getTopLevelEntityAccess().getDeplibsKeyword_2_0());
    }
	otherlv_9='=' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getTopLevelEntityAccess().getEqualsSignKeyword_2_1());
    }
this_ARRAYL_10=RULE_ARRAYL
    { 
    newLeafNode(this_ARRAYL_10, grammarAccess.getTopLevelEntityAccess().getARRAYLTerminalRuleCall_2_2()); 
    }
(
(
		lv_libs_11_0=RULE_STRING
		{
			newLeafNode(lv_libs_11_0, grammarAccess.getTopLevelEntityAccess().getLibsSTRINGTerminalRuleCall_2_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTopLevelEntityRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"libs",
        		lv_libs_11_0, 
        		"STRING");
	    }

)
)(	otherlv_12=',' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getTopLevelEntityAccess().getCommaKeyword_2_4_0());
    }
(
(
		lv_libs_13_0=RULE_STRING
		{
			newLeafNode(lv_libs_13_0, grammarAccess.getTopLevelEntityAccess().getLibsSTRINGTerminalRuleCall_2_4_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTopLevelEntityRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"libs",
        		lv_libs_13_0, 
        		"STRING");
	    }

)
))*this_ARRAYR_14=RULE_ARRAYR
    { 
    newLeafNode(this_ARRAYR_14, grammarAccess.getTopLevelEntityAccess().getARRAYRTerminalRuleCall_2_5()); 
    }
))
;





// Entry rule entryRuleMainLevelEntity
entryRuleMainLevelEntity returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMainLevelEntityRule()); }
	 iv_ruleMainLevelEntity=ruleMainLevelEntity 
	 { $current=$iv_ruleMainLevelEntity.current; } 
	 EOF 
;

// Rule MainLevelEntity
ruleMainLevelEntity returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMainLevelEntityAccess().getTypeDefinitionParserRuleCall_0()); 
    }
    this_TypeDefinition_0=ruleTypeDefinition
    { 
        $current = $this_TypeDefinition_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMainLevelEntityAccess().getFunctionDefinitionParserRuleCall_1()); 
    }
    this_FunctionDefinition_1=ruleFunctionDefinition
    { 
        $current = $this_FunctionDefinition_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleTypeDefinition
entryRuleTypeDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeDefinitionRule()); }
	 iv_ruleTypeDefinition=ruleTypeDefinition 
	 { $current=$iv_ruleTypeDefinition.current; } 
	 EOF 
;

// Rule TypeDefinition
ruleTypeDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeDefinitionAccess().getAddressAddressParserRuleCall_0_0()); 
	    }
		lv_address_0_0=ruleAddress		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeDefinitionRule());
	        }
       		set(
       			$current, 
       			"address",
        		lv_address_0_0, 
        		"Address");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTypeDefinitionAccess().getEqualsSignKeyword_1());
    }
(
    { 
        newCompositeNode(grammarAccess.getTypeDefinitionAccess().getLINKAGEParserRuleCall_2_0()); 
    }
ruleLINKAGE
    { 
        afterParserOrEnumRuleCall();
    }

    |	otherlv_3='global' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTypeDefinitionAccess().getGlobalKeyword_2_1());
    }

    |	otherlv_4='unnamed_addr' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTypeDefinitionAccess().getUnnamed_addrKeyword_2_2());
    }

    |	otherlv_5='constant' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTypeDefinitionAccess().getConstantKeyword_2_3());
    }
)*(	otherlv_6='type' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTypeDefinitionAccess().getTypeKeyword_3_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeDefinitionAccess().getStructStructureParserRuleCall_3_1_0_0()); 
	    }
		lv_struct_7_0=ruleStructure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeDefinitionRule());
	        }
       		set(
       			$current, 
       			"struct",
        		lv_struct_7_0, 
        		"Structure");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |
    { 
        newCompositeNode(grammarAccess.getTypeDefinitionAccess().getOpaqueParserRuleCall_3_1_1()); 
    }
ruleOpaque
    { 
        afterParserOrEnumRuleCall();
    }
)))
;





// Entry rule entryRuleFunctionDefinition
entryRuleFunctionDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionDefinitionRule()); }
	 iv_ruleFunctionDefinition=ruleFunctionDefinition 
	 { $current=$iv_ruleFunctionDefinition.current; } 
	 EOF 
;

// Rule FunctionDefinition
ruleFunctionDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='define' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFunctionDefinitionAccess().getDefineKeyword_0_0());
    }
(
    { 
        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getLINKAGEParserRuleCall_0_1()); 
    }
ruleLINKAGE
    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getVISIBILITYParserRuleCall_0_2()); 
    }
ruleVISIBILITY
    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getCallingConvParserRuleCall_0_3()); 
    }
ruleCallingConv
    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getRETURN_ATTRIBUTESParserRuleCall_0_4()); 
    }
ruleRETURN_ATTRIBUTES
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getReturnTypeTypeUseParserRuleCall_0_5_0()); 
	    }
		lv_returnType_5_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDefinitionRule());
	        }
       		set(
       			$current, 
       			"returnType",
        		lv_returnType_5_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getAddressAddressParserRuleCall_0_6_0()); 
	    }
		lv_address_6_0=ruleAddress		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDefinitionRule());
	        }
       		set(
       			$current, 
       			"address",
        		lv_address_6_0, 
        		"Address");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getPlParameterListParserRuleCall_0_7_0()); 
	    }
		lv_pl_7_0=ruleParameterList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDefinitionRule());
	        }
       		set(
       			$current, 
       			"pl",
        		lv_pl_7_0, 
        		"ParameterList");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_8='unnamed_addr' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getFunctionDefinitionAccess().getUnnamed_addrKeyword_0_8());
    }
)?(
    { 
        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getFUNCTION_ATTRIBUTESParserRuleCall_0_9()); 
    }
ruleFUNCTION_ATTRIBUTES
    { 
        afterParserOrEnumRuleCall();
    }
)*(	otherlv_10='section ' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getFunctionDefinitionAccess().getSectionKeyword_0_10_0());
    }
this_STRING_11=RULE_STRING
    { 
    newLeafNode(this_STRING_11, grammarAccess.getFunctionDefinitionAccess().getSTRINGTerminalRuleCall_0_10_1()); 
    }
)?(
    { 
        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getALIGNMENTParserRuleCall_0_11()); 
    }
ruleALIGNMENT
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getBodyFunctionBodyParserRuleCall_0_12_0()); 
	    }
		lv_body_13_0=ruleFunctionBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDefinitionRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_13_0, 
        		"FunctionBody");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_14='declare' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getFunctionDefinitionAccess().getDeclareKeyword_1_0());
    }
(
    { 
        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getLINKAGEParserRuleCall_1_1()); 
    }
ruleLINKAGE
    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getVISIBILITYParserRuleCall_1_2()); 
    }
ruleVISIBILITY
    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getCallingConvParserRuleCall_1_3()); 
    }
ruleCallingConv
    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getRETURN_ATTRIBUTESParserRuleCall_1_4()); 
    }
ruleRETURN_ATTRIBUTES
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getReturnTypeTypeUseParserRuleCall_1_5_0()); 
	    }
		lv_returnType_19_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDefinitionRule());
	        }
       		set(
       			$current, 
       			"returnType",
        		lv_returnType_19_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getAddressAddressParserRuleCall_1_6_0()); 
	    }
		lv_address_20_0=ruleAddress		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDefinitionRule());
	        }
       		set(
       			$current, 
       			"address",
        		lv_address_20_0, 
        		"Address");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getTListTypeListParserRuleCall_1_7_0_0()); 
	    }
		lv_tList_21_0=ruleTypeList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDefinitionRule());
	        }
       		set(
       			$current, 
       			"tList",
        		lv_tList_21_0, 
        		"TypeList");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |this_OREST_22=RULE_OREST
    { 
    newLeafNode(this_OREST_22, grammarAccess.getFunctionDefinitionAccess().getORESTTerminalRuleCall_1_7_1()); 
    }
)(	otherlv_23='unnamed_addr' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getFunctionDefinitionAccess().getUnnamed_addrKeyword_1_8());
    }
)?(
    { 
        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getFUNCTION_ATTRIBUTESParserRuleCall_1_9()); 
    }
ruleFUNCTION_ATTRIBUTES
    { 
        afterParserOrEnumRuleCall();
    }
)*(	otherlv_25='section ' 
    {
    	newLeafNode(otherlv_25, grammarAccess.getFunctionDefinitionAccess().getSectionKeyword_1_10_0());
    }
this_STRING_26=RULE_STRING
    { 
    newLeafNode(this_STRING_26, grammarAccess.getFunctionDefinitionAccess().getSTRINGTerminalRuleCall_1_10_1()); 
    }
)?(
    { 
        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getALIGNMENTParserRuleCall_1_11()); 
    }
ruleALIGNMENT
    { 
        afterParserOrEnumRuleCall();
    }
)?))
;







// Entry rule entryRuleTypeUse
entryRuleTypeUse returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeUseRule()); }
	 iv_ruleTypeUse=ruleTypeUse 
	 { $current=$iv_ruleTypeUse.current; } 
	 EOF 
;

// Rule TypeUse
ruleTypeUse returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTypeUseAccess().getPredefinedParserRuleCall_0()); 
    }
    this_Predefined_0=rulePredefined
    { 
        $current = $this_Predefined_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeUseAccess().getAddressUseParserRuleCall_1()); 
    }
    this_AddressUse_1=ruleAddressUse
    { 
        $current = $this_AddressUse_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAddressUse
entryRuleAddressUse returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAddressUseRule()); }
	 iv_ruleAddressUse=ruleAddressUse 
	 { $current=$iv_ruleAddressUse.current; } 
	 EOF 
;

// Rule AddressUse
ruleAddressUse returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAddressUseRule());
	        }
        }
	otherlv_0=RULE_VALID_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getAddressUseAccess().getAddressAddressCrossReference_0_0()); 
	}

)
)(
(
		lv_pointer_1_0=RULE_POINTER
		{
			newLeafNode(lv_pointer_1_0, grammarAccess.getAddressUseAccess().getPointerPOINTERTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAddressUseRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"pointer",
        		lv_pointer_1_0, 
        		"POINTER");
	    }

)
)?)
;





// Entry rule entryRuleAddress
entryRuleAddress returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAddressRule()); }
	 iv_ruleAddress=ruleAddress 
	 { $current=$iv_ruleAddress.current; } 
	 EOF 
;

// Rule Address
ruleAddress returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_VALID_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getAddressAccess().getNameVALID_IDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAddressRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"VALID_ID");
	    }

)
)
;





// Entry rule entryRulePredefined
entryRulePredefined returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPredefinedRule()); }
	 iv_rulePredefined=rulePredefined 
	 { $current=$iv_rulePredefined.current; } 
	 EOF 
;

// Rule Predefined
rulePredefined returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPredefinedAccess().getTypePredefined_TypesParserRuleCall_0_0()); 
	    }
		lv_type_0_0=rulePredefined_Types		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredefinedRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"Predefined_Types");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_pointer_1_0=RULE_POINTER
		{
			newLeafNode(lv_pointer_1_0, grammarAccess.getPredefinedAccess().getPointerPOINTERTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPredefinedRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"pointer",
        		lv_pointer_1_0, 
        		"POINTER");
	    }

)
)?)
;





// Entry rule entryRulePrimitive_Type
entryRulePrimitive_Type returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimitive_TypeRule()); } 
	 iv_rulePrimitive_Type=rulePrimitive_Type 
	 { $current=$iv_rulePrimitive_Type.current.getText(); }  
	 EOF 
;

// Rule Primitive_Type
rulePrimitive_Type returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='void' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitive_TypeAccess().getVoidKeyword_0()); 
    }

    |
	kw='null' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitive_TypeAccess().getNullKeyword_1()); 
    }

    |
	kw='label' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitive_TypeAccess().getLabelKeyword_2()); 
    }

    |
	kw='undef' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitive_TypeAccess().getUndefKeyword_3()); 
    }

    |
	kw='true' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitive_TypeAccess().getTrueKeyword_4()); 
    }

    |
	kw='false' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitive_TypeAccess().getFalseKeyword_5()); 
    }
)
    ;





// Entry rule entryRuleFloatingPoint_Type
entryRuleFloatingPoint_Type returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFloatingPoint_TypeRule()); } 
	 iv_ruleFloatingPoint_Type=ruleFloatingPoint_Type 
	 { $current=$iv_ruleFloatingPoint_Type.current.getText(); }  
	 EOF 
;

// Rule FloatingPoint_Type
ruleFloatingPoint_Type returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='half' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFloatingPoint_TypeAccess().getHalfKeyword_0()); 
    }

    |
	kw='float' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFloatingPoint_TypeAccess().getFloatKeyword_1()); 
    }

    |
	kw='double' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFloatingPoint_TypeAccess().getDoubleKeyword_2()); 
    }

    |
	kw='x86_fp80' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFloatingPoint_TypeAccess().getX86_fp80Keyword_3()); 
    }

    |
	kw='fp128' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFloatingPoint_TypeAccess().getFp128Keyword_4()); 
    }

    |
	kw='ppc_fp128' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFloatingPoint_TypeAccess().getPpc_fp128Keyword_5()); 
    }
)
    ;





// Entry rule entryRulePredefined_Types
entryRulePredefined_Types returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPredefined_TypesRule()); } 
	 iv_rulePredefined_Types=rulePredefined_Types 
	 { $current=$iv_rulePredefined_Types.current.getText(); }  
	 EOF 
;

// Rule Predefined_Types
rulePredefined_Types returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPredefined_TypesAccess().getPrimitive_TypeParserRuleCall_0()); 
    }
    this_Primitive_Type_0=rulePrimitive_Type    {
		$current.merge(this_Primitive_Type_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_INT_TYPE_1=RULE_INT_TYPE    {
		$current.merge(this_INT_TYPE_1);
    }

    { 
    newLeafNode(this_INT_TYPE_1, grammarAccess.getPredefined_TypesAccess().getINT_TYPETerminalRuleCall_1()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getPredefined_TypesAccess().getFloatingPoint_TypeParserRuleCall_2()); 
    }
    this_FloatingPoint_Type_2=ruleFloatingPoint_Type    {
		$current.merge(this_FloatingPoint_Type_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleVector
entryRuleVector returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVectorRule()); }
	 iv_ruleVector=ruleVector 
	 { $current=$iv_ruleVector.current; } 
	 EOF 
;

// Rule Vector
ruleVector returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='<' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getVectorAccess().getLessThanSignKeyword_0());
    }
this_INT_1=RULE_INT
    { 
    newLeafNode(this_INT_1, grammarAccess.getVectorAccess().getINTTerminalRuleCall_1()); 
    }
	otherlv_2='x' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getVectorAccess().getXKeyword_2());
    }

    { 
        newCompositeNode(grammarAccess.getVectorAccess().getTypeUseParserRuleCall_3()); 
    }
    this_TypeUse_3=ruleTypeUse
    { 
        $current = $this_TypeUse_3.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_4='>' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getVectorAccess().getGreaterThanSignKeyword_4());
    }
)
;





// Entry rule entryRuleArray
entryRuleArray returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayRule()); }
	 iv_ruleArray=ruleArray 
	 { $current=$iv_ruleArray.current; } 
	 EOF 
;

// Rule Array
ruleArray returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_ARRAYL_0=RULE_ARRAYL
    { 
    newLeafNode(this_ARRAYL_0, grammarAccess.getArrayAccess().getARRAYLTerminalRuleCall_0()); 
    }
this_INT_1=RULE_INT
    { 
    newLeafNode(this_INT_1, grammarAccess.getArrayAccess().getINTTerminalRuleCall_1()); 
    }
	otherlv_2='x' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getArrayAccess().getXKeyword_2());
    }

    { 
        newCompositeNode(grammarAccess.getArrayAccess().getTypeUseParserRuleCall_3()); 
    }
    this_TypeUse_3=ruleTypeUse
    { 
        $current = $this_TypeUse_3.current; 
        afterParserOrEnumRuleCall();
    }
this_ARRAYR_4=RULE_ARRAYR
    { 
    newLeafNode(this_ARRAYR_4, grammarAccess.getArrayAccess().getARRAYRTerminalRuleCall_4()); 
    }
)
;









// Entry rule entryRuleConstant
entryRuleConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	 iv_ruleConstant=ruleConstant 
	 { $current=$iv_ruleConstant.current; } 
	 EOF 
;

// Rule Constant
ruleConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_INT
		{
			newLeafNode(lv_value_0_0, grammarAccess.getConstantAccess().getValueINTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"INT");
	    }

)
)
;





// Entry rule entryRuleNonConstantValue
entryRuleNonConstantValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNonConstantValueRule()); }
	 iv_ruleNonConstantValue=ruleNonConstantValue 
	 { $current=$iv_ruleNonConstantValue.current; } 
	 EOF 
;

// Rule NonConstantValue
ruleNonConstantValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_VALID_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getNonConstantValueAccess().getNameVALID_IDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNonConstantValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"VALID_ID");
	    }

)
)(
(
		lv_pointer_1_0=RULE_POINTER
		{
			newLeafNode(lv_pointer_1_0, grammarAccess.getNonConstantValueAccess().getPointerPOINTERTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNonConstantValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"pointer",
        		lv_pointer_1_0, 
        		"POINTER");
	    }

)
)?)
;





// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	 iv_ruleValue=ruleValue 
	 { $current=$iv_ruleValue.current; } 
	 EOF 
;

// Rule Value
ruleValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getValueAccess().getConstantParserRuleCall_0()); 
    }
    this_Constant_0=ruleConstant
    { 
        $current = $this_Constant_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueAccess().getNonConstantValueParserRuleCall_1()); 
    }
    this_NonConstantValue_1=ruleNonConstantValue
    { 
        $current = $this_NonConstantValue_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleStructure
entryRuleStructure returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStructureRule()); }
	 iv_ruleStructure=ruleStructure 
	 { $current=$iv_ruleStructure.current; } 
	 EOF 
;

// Rule Structure
ruleStructure returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStructureAccess().getStructureAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStructureAccess().getLeftCurlyBracketKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getStructureAccess().getTypesTypeUseParserRuleCall_2_0_0()); 
	    }
		lv_types_2_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStructureRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_2_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStructureAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStructureAccess().getTypesTypeUseParserRuleCall_2_1_1_0()); 
	    }
		lv_types_4_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStructureRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_4_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getStructureAccess().getRightCurlyBracketKeyword_3());
    }
(this_POINTER_6=RULE_POINTER
    { 
    newLeafNode(this_POINTER_6, grammarAccess.getStructureAccess().getPOINTERTerminalRuleCall_4()); 
    }
)?)
;





// Entry rule entryRuleOpaque
entryRuleOpaque returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpaqueRule()); } 
	 iv_ruleOpaque=ruleOpaque 
	 { $current=$iv_ruleOpaque.current.getText(); }  
	 EOF 
;

// Rule Opaque
ruleOpaque returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='opaque' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpaqueAccess().getOpaqueKeyword()); 
    }

    ;





// Entry rule entryRuleParameterList
entryRuleParameterList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterListRule()); }
	 iv_ruleParameterList=ruleParameterList 
	 { $current=$iv_ruleParameterList.current; } 
	 EOF 
;

// Rule ParameterList
ruleParameterList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getParameterListAccess().getParameterListAction_0(),
            $current);
    }
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParameterListAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getParameterListAccess().getTypesTypeUseParserRuleCall_2_0_0()); 
	    }
		lv_types_2_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterListRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_2_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterListAccess().getListsTypeListParserRuleCall_2_1_0()); 
	    }
		lv_Lists_3_0=ruleTypeList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterListRule());
	        }
       		add(
       			$current, 
       			"Lists",
        		lv_Lists_3_0, 
        		"TypeList");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
    { 
        newCompositeNode(grammarAccess.getParameterListAccess().getRETURN_ATTRIBUTESParserRuleCall_2_2()); 
    }
ruleRETURN_ATTRIBUTES
    { 
        afterParserOrEnumRuleCall();
    }
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterListAccess().getVariablesValueParserRuleCall_2_3_0()); 
	    }
		lv_variables_5_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterListRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_5_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getParameterListAccess().getCommaKeyword_2_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterListAccess().getTypesTypeUseParserRuleCall_2_4_1_0()); 
	    }
		lv_types_7_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterListRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_7_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterListAccess().getListsTypeListParserRuleCall_2_4_2_0()); 
	    }
		lv_Lists_8_0=ruleTypeList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterListRule());
	        }
       		add(
       			$current, 
       			"Lists",
        		lv_Lists_8_0, 
        		"TypeList");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
    { 
        newCompositeNode(grammarAccess.getParameterListAccess().getRETURN_ATTRIBUTESParserRuleCall_2_4_3()); 
    }
ruleRETURN_ATTRIBUTES
    { 
        afterParserOrEnumRuleCall();
    }
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterListAccess().getVariablesValueParserRuleCall_2_4_4_0()); 
	    }
		lv_variables_10_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterListRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_10_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_11=')' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getParameterListAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleFunctionBody
entryRuleFunctionBody returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionBodyRule()); }
	 iv_ruleFunctionBody=ruleFunctionBody 
	 { $current=$iv_ruleFunctionBody.current; } 
	 EOF 
;

// Rule FunctionBody
ruleFunctionBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFunctionBodyAccess().getLeftCurlyBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionBodyAccess().getBlocksBasicBlockParserRuleCall_1_0()); 
	    }
		lv_blocks_1_0=ruleBasicBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionBodyRule());
	        }
       		add(
       			$current, 
       			"blocks",
        		lv_blocks_1_0, 
        		"BasicBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_2='}' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFunctionBodyAccess().getRightCurlyBracketKeyword_2());
    }
)
;





// Entry rule entryRuleBasicBlock
entryRuleBasicBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBasicBlockRule()); }
	 iv_ruleBasicBlock=ruleBasicBlock 
	 { $current=$iv_ruleBasicBlock.current; } 
	 EOF 
;

// Rule BasicBlock
ruleBasicBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_label_0_0=RULE_ID
		{
			newLeafNode(lv_label_0_0, grammarAccess.getBasicBlockAccess().getLabelIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBasicBlockRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"label",
        		lv_label_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBasicBlockAccess().getColonKeyword_1());
    }
)
;





// Entry rule entryRuleTypeList
entryRuleTypeList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeListRule()); }
	 iv_ruleTypeList=ruleTypeList 
	 { $current=$iv_ruleTypeList.current; } 
	 EOF 
;

// Rule TypeList
ruleTypeList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeListAccess().getTypeListAction_0(),
            $current);
    }
)(	otherlv_1='()' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTypeListAccess().getLeftParenthesisRightParenthesisKeyword_1_0());
    }

    |(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypeListAccess().getLeftParenthesisKeyword_1_1_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeListAccess().getTypesTypeUseParserRuleCall_1_1_1_0_0()); 
	    }
		lv_types_3_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeListRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_3_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeListAccess().getTypelistsTypeListParserRuleCall_1_1_1_1_0()); 
	    }
		lv_typelists_4_0=ruleTypeList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeListRule());
	        }
       		add(
       			$current, 
       			"typelists",
        		lv_typelists_4_0, 
        		"TypeList");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
    { 
        newCompositeNode(grammarAccess.getTypeListAccess().getRETURN_ATTRIBUTESParserRuleCall_1_1_1_2()); 
    }
ruleRETURN_ATTRIBUTES
    { 
        afterParserOrEnumRuleCall();
    }
)?(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTypeListAccess().getCommaKeyword_1_1_1_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeListAccess().getTypesTypeUseParserRuleCall_1_1_1_3_1_0()); 
	    }
		lv_types_7_0=ruleTypeUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeListRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_7_0, 
        		"TypeUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeListAccess().getTypelistsTypeListParserRuleCall_1_1_1_3_2_0()); 
	    }
		lv_typelists_8_0=ruleTypeList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeListRule());
	        }
       		add(
       			$current, 
       			"typelists",
        		lv_typelists_8_0, 
        		"TypeList");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
    { 
        newCompositeNode(grammarAccess.getTypeListAccess().getRETURN_ATTRIBUTESParserRuleCall_1_1_1_3_3()); 
    }
ruleRETURN_ATTRIBUTES
    { 
        afterParserOrEnumRuleCall();
    }
)?)*)?(	otherlv_10=')' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getTypeListAccess().getRightParenthesisKeyword_1_1_2_0());
    }

    |	otherlv_11=')*' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getTypeListAccess().getRightParenthesisAsteriskKeyword_1_1_2_1());
    }

    |	otherlv_12=')**' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getTypeListAccess().getRightParenthesisAsteriskAsteriskKeyword_1_1_2_2());
    }

    |	otherlv_13=')***' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getTypeListAccess().getRightParenthesisAsteriskAsteriskAsteriskKeyword_1_1_2_3());
    }

    |	otherlv_14=')****' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getTypeListAccess().getRightParenthesisAsteriskAsteriskAsteriskAsteriskKeyword_1_1_2_4());
    }

    |	otherlv_15=')*****' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getTypeListAccess().getRightParenthesisAsteriskAsteriskAsteriskAsteriskAsteriskKeyword_1_1_2_5());
    }
))))
;





// Entry rule entryRuleRETURN_ATTRIBUTES
entryRuleRETURN_ATTRIBUTES returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRETURN_ATTRIBUTESRule()); } 
	 iv_ruleRETURN_ATTRIBUTES=ruleRETURN_ATTRIBUTES 
	 { $current=$iv_ruleRETURN_ATTRIBUTES.current.getText(); }  
	 EOF 
;

// Rule RETURN_ATTRIBUTES
ruleRETURN_ATTRIBUTES returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='zeroext' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRETURN_ATTRIBUTESAccess().getZeroextKeyword_0()); 
    }

    |
	kw='signext' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRETURN_ATTRIBUTESAccess().getSignextKeyword_1()); 
    }

    |
	kw='inreg' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRETURN_ATTRIBUTESAccess().getInregKeyword_2()); 
    }

    |
	kw='byval' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRETURN_ATTRIBUTESAccess().getByvalKeyword_3()); 
    }

    |
	kw='sret' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRETURN_ATTRIBUTESAccess().getSretKeyword_4()); 
    }

    |
	kw='noalias' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRETURN_ATTRIBUTESAccess().getNoaliasKeyword_5()); 
    }

    |
	kw='nocapture' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRETURN_ATTRIBUTESAccess().getNocaptureKeyword_6()); 
    }

    |
	kw='nest' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRETURN_ATTRIBUTESAccess().getNestKeyword_7()); 
    }
)
    ;





// Entry rule entryRuleCallingConv
entryRuleCallingConv returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCallingConvRule()); } 
	 iv_ruleCallingConv=ruleCallingConv 
	 { $current=$iv_ruleCallingConv.current.getText(); }  
	 EOF 
;

// Rule CallingConv
ruleCallingConv returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='ccc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallingConvAccess().getCccKeyword_0()); 
    }

    |
	kw='fastcc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallingConvAccess().getFastccKeyword_1()); 
    }

    |
	kw='coldcc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallingConvAccess().getColdccKeyword_2()); 
    }

    |
	kw='x86_stdcallcc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallingConvAccess().getX86_stdcallccKeyword_3()); 
    }

    |
	kw='x86_fastcallcc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallingConvAccess().getX86_fastcallccKeyword_4()); 
    }

    |
	kw='x86_thiscallcc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallingConvAccess().getX86_thiscallccKeyword_5()); 
    }

    |
	kw='arm_apcscc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallingConvAccess().getArm_apcsccKeyword_6()); 
    }

    |
	kw='arm_aapcscc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallingConvAccess().getArm_aapcsccKeyword_7()); 
    }

    |
	kw='arm_aapcs_vfpcc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallingConvAccess().getArm_aapcs_vfpccKeyword_8()); 
    }

    |
	kw='msp430_intrcc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallingConvAccess().getMsp430_intrccKeyword_9()); 
    }

    |
	kw='ptx_kernel' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallingConvAccess().getPtx_kernelKeyword_10()); 
    }

    |
	kw='ptx_device' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallingConvAccess().getPtx_deviceKeyword_11()); 
    }

    |
	kw='spir_func' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallingConvAccess().getSpir_funcKeyword_12()); 
    }

    |
	kw='spir_kernel' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallingConvAccess().getSpir_kernelKeyword_13()); 
    }

    |(
	kw='cc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallingConvAccess().getCcKeyword_14_0()); 
    }

	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallingConvAccess().getLessThanSignKeyword_14_1()); 
    }
    this_INT_16=RULE_INT    {
		$current.merge(this_INT_16);
    }

    { 
    newLeafNode(this_INT_16, grammarAccess.getCallingConvAccess().getINTTerminalRuleCall_14_2()); 
    }

	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallingConvAccess().getGreaterThanSignKeyword_14_3()); 
    }
    this_INT_18=RULE_INT    {
		$current.merge(this_INT_18);
    }

    { 
    newLeafNode(this_INT_18, grammarAccess.getCallingConvAccess().getINTTerminalRuleCall_14_4()); 
    }
))
    ;





// Entry rule entryRuleFUNCTION_ATTRIBUTES
entryRuleFUNCTION_ATTRIBUTES returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFUNCTION_ATTRIBUTESRule()); } 
	 iv_ruleFUNCTION_ATTRIBUTES=ruleFUNCTION_ATTRIBUTES 
	 { $current=$iv_ruleFUNCTION_ATTRIBUTES.current.getText(); }  
	 EOF 
;

// Rule FUNCTION_ATTRIBUTES
ruleFUNCTION_ATTRIBUTES returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='address_safety' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getAddress_safetyKeyword_0()); 
    }

    |(
	kw='alignstack' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getAlignstackKeyword_1_0()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getLeftParenthesisKeyword_1_1()); 
    }

	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getLessThanSignKeyword_1_2()); 
    }
    this_INT_4=RULE_INT    {
		$current.merge(this_INT_4);
    }

    { 
    newLeafNode(this_INT_4, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getINTTerminalRuleCall_1_3()); 
    }

	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getGreaterThanSignKeyword_1_4()); 
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getRightParenthesisKeyword_1_5()); 
    }
)
    |
	kw='alwaysinline' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getAlwaysinlineKeyword_2()); 
    }

    |
	kw='nonlazybind' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getNonlazybindKeyword_3()); 
    }

    |
	kw='inlinehint' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getInlinehintKeyword_4()); 
    }

    |
	kw='naked' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getNakedKeyword_5()); 
    }

    |
	kw='noimplicitfloat' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getNoimplicitfloatKeyword_6()); 
    }

    |
	kw='noinline' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getNoinlineKeyword_7()); 
    }

    |
	kw='noredzone' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getNoredzoneKeyword_8()); 
    }

    |
	kw='noreturn' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getNoreturnKeyword_9()); 
    }

    |
	kw='nounwind' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getNounwindKeyword_10()); 
    }

    |
	kw='optsize' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getOptsizeKeyword_11()); 
    }

    |
	kw='readnone' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getReadnoneKeyword_12()); 
    }

    |
	kw='readonly' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getReadonlyKeyword_13()); 
    }

    |
	kw='returns_twice' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getReturns_twiceKeyword_14()); 
    }

    |
	kw='ssp' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getSspKeyword_15()); 
    }

    |
	kw='sspreq' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getSspreqKeyword_16()); 
    }

    |
	kw='uwtable' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getUwtableKeyword_17()); 
    }
)
    ;





// Entry rule entryRuleVISIBILITY
entryRuleVISIBILITY returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVISIBILITYRule()); } 
	 iv_ruleVISIBILITY=ruleVISIBILITY 
	 { $current=$iv_ruleVISIBILITY.current.getText(); }  
	 EOF 
;

// Rule VISIBILITY
ruleVISIBILITY returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='default' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVISIBILITYAccess().getDefaultKeyword_0()); 
    }

    |
	kw='hidden' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVISIBILITYAccess().getHiddenKeyword_1()); 
    }

    |
	kw='protected' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVISIBILITYAccess().getProtectedKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleLINKAGE
entryRuleLINKAGE returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLINKAGERule()); } 
	 iv_ruleLINKAGE=ruleLINKAGE 
	 { $current=$iv_ruleLINKAGE.current.getText(); }  
	 EOF 
;

// Rule LINKAGE
ruleLINKAGE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='private' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLINKAGEAccess().getPrivateKeyword_0()); 
    }

    |
	kw='linker_private' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLINKAGEAccess().getLinker_privateKeyword_1()); 
    }

    |
	kw='linker_private_weak' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLINKAGEAccess().getLinker_private_weakKeyword_2()); 
    }

    |
	kw='available_externally' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLINKAGEAccess().getAvailable_externallyKeyword_3()); 
    }

    |
	kw='linkonce' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLINKAGEAccess().getLinkonceKeyword_4()); 
    }

    |
	kw='common' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLINKAGEAccess().getCommonKeyword_5()); 
    }

    |
	kw='appending' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLINKAGEAccess().getAppendingKeyword_6()); 
    }

    |
	kw='extern_weak' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLINKAGEAccess().getExtern_weakKeyword_7()); 
    }

    |
	kw='linkonce_odr' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLINKAGEAccess().getLinkonce_odrKeyword_8()); 
    }

    |
	kw='linkonce_odr_auto_hide' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLINKAGEAccess().getLinkonce_odr_auto_hideKeyword_9()); 
    }

    |
	kw='dllimport' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLINKAGEAccess().getDllimportKeyword_10()); 
    }

    |
	kw='dllexport' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLINKAGEAccess().getDllexportKeyword_11()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getLINKAGEAccess().getALIAS_LINKAGEParserRuleCall_12()); 
    }
    this_ALIAS_LINKAGE_12=ruleALIAS_LINKAGE    {
		$current.merge(this_ALIAS_LINKAGE_12);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleALIAS_LINKAGE
entryRuleALIAS_LINKAGE returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getALIAS_LINKAGERule()); } 
	 iv_ruleALIAS_LINKAGE=ruleALIAS_LINKAGE 
	 { $current=$iv_ruleALIAS_LINKAGE.current.getText(); }  
	 EOF 
;

// Rule ALIAS_LINKAGE
ruleALIAS_LINKAGE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='external' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getALIAS_LINKAGEAccess().getExternalKeyword_0()); 
    }

    |
	kw='internal' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getALIAS_LINKAGEAccess().getInternalKeyword_1()); 
    }

    |
	kw='weak' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getALIAS_LINKAGEAccess().getWeakKeyword_2()); 
    }

    |
	kw='weak_odr' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getALIAS_LINKAGEAccess().getWeak_odrKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleALIGNMENT
entryRuleALIGNMENT returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getALIGNMENTRule()); } 
	 iv_ruleALIGNMENT=ruleALIGNMENT 
	 { $current=$iv_ruleALIGNMENT.current.getText(); }  
	 EOF 
;

// Rule ALIGNMENT
ruleALIGNMENT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='align' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getALIGNMENTAccess().getAlignKeyword_0()); 
    }
    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getALIGNMENTAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;





RULE_INT : '-'? ('0'..'9')+;

RULE_VALID_ID : (('%'|'@') '.'* (('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*|RULE_INT|RULE_STRING)|'(' RULE_VALID_ID RULE_POINTER? ')') ('.' (('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*|'(' ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')* RULE_POINTER? ')'))*;

RULE_INT_TYPE : 'i' ('0'..'9')+ RULE_POINTER?;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'0'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'0'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_CSTRING : 'c' RULE_STRING;

RULE_OREST : '(...)' RULE_POINTER?;

RULE_ARRAYL : '[';

RULE_ARRAYR : ']' RULE_POINTER?;

RULE_SL_COMMENT : ';' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_POINTER : '*'+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


