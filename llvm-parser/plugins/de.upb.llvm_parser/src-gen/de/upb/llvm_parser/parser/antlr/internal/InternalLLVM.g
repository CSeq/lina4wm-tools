/*
* generated by Xtext
*/
grammar InternalLLVM;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package de.upb.llvm_parser.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.upb.llvm_parser.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.upb.llvm_parser.services.LLVMGrammarAccess;

}

@parser::members {

 	private LLVMGrammarAccess grammarAccess;
 	
    public InternalLLVMParser(TokenStream input, LLVMGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "LLVM";	
   	}
   	
   	@Override
   	protected LLVMGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleLLVM
entryRuleLLVM returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLLVMRule()); }
	 iv_ruleLLVM=ruleLLVM 
	 { $current=$iv_ruleLLVM.current; } 
	 EOF 
;

// Rule LLVM
ruleLLVM returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getLLVMAccess().getElementsAbstractElementParserRuleCall_0()); 
	    }
		lv_elements_0_0=ruleAbstractElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLLVMRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_0_0, 
        		"AbstractElement");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleAbstractElement
entryRuleAbstractElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractElementRule()); }
	 iv_ruleAbstractElement=ruleAbstractElement 
	 { $current=$iv_ruleAbstractElement.current; } 
	 EOF 
;

// Rule AbstractElement
ruleAbstractElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getAbstractElementAccess().getTopLevelEntityParserRuleCall_0_0()); 
    }
    this_TopLevelEntity_0=ruleTopLevelEntity
    { 
        $current = $this_TopLevelEntity_0.current; 
        afterParserOrEnumRuleCall();
    }
(this_SL_COMMENT_1=RULE_SL_COMMENT
    { 
    newLeafNode(this_SL_COMMENT_1, grammarAccess.getAbstractElementAccess().getSL_COMMENTTerminalRuleCall_0_1()); 
    }
)?)
    |(
    { 
        newCompositeNode(grammarAccess.getAbstractElementAccess().getMainLevelEntityParserRuleCall_1_0()); 
    }
    this_MainLevelEntity_2=ruleMainLevelEntity
    { 
        $current = $this_MainLevelEntity_2.current; 
        afterParserOrEnumRuleCall();
    }
(this_SL_COMMENT_3=RULE_SL_COMMENT
    { 
    newLeafNode(this_SL_COMMENT_3, grammarAccess.getAbstractElementAccess().getSL_COMMENTTerminalRuleCall_1_1()); 
    }
)?))
;





// Entry rule entryRuleTopLevelEntity
entryRuleTopLevelEntity returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTopLevelEntityRule()); }
	 iv_ruleTopLevelEntity=ruleTopLevelEntity 
	 { $current=$iv_ruleTopLevelEntity.current; } 
	 EOF 
;

// Rule TopLevelEntity
ruleTopLevelEntity returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='module' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTopLevelEntityAccess().getModuleKeyword_0_0());
    }
	otherlv_1='asm' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTopLevelEntityAccess().getAsmKeyword_0_1());
    }
(
(
		lv_module_2_0=RULE_STRING
		{
			newLeafNode(lv_module_2_0, grammarAccess.getTopLevelEntityAccess().getModuleSTRINGTerminalRuleCall_0_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTopLevelEntityRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"module",
        		lv_module_2_0, 
        		"STRING");
	    }

)
))
    |(	otherlv_3='target' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTopLevelEntityAccess().getTargetKeyword_1_0());
    }
(	otherlv_4='datalayout' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTopLevelEntityAccess().getDatalayoutKeyword_1_1_0());
    }

    |	otherlv_5='triple' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTopLevelEntityAccess().getTripleKeyword_1_1_1());
    }
)	otherlv_6='=' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTopLevelEntityAccess().getEqualsSignKeyword_1_2());
    }
(
(
		lv_target_7_0=RULE_STRING
		{
			newLeafNode(lv_target_7_0, grammarAccess.getTopLevelEntityAccess().getTargetSTRINGTerminalRuleCall_1_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTopLevelEntityRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"target",
        		lv_target_7_0, 
        		"STRING");
	    }

)
))
    |(	otherlv_8='deplibs' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getTopLevelEntityAccess().getDeplibsKeyword_2_0());
    }
	otherlv_9='=' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getTopLevelEntityAccess().getEqualsSignKeyword_2_1());
    }
	otherlv_10='[' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getTopLevelEntityAccess().getLeftSquareBracketKeyword_2_2());
    }
(
(
		lv_libs_11_0=RULE_STRING
		{
			newLeafNode(lv_libs_11_0, grammarAccess.getTopLevelEntityAccess().getLibsSTRINGTerminalRuleCall_2_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTopLevelEntityRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"libs",
        		lv_libs_11_0, 
        		"STRING");
	    }

)
)(	otherlv_12=',' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getTopLevelEntityAccess().getCommaKeyword_2_4_0());
    }
(
(
		lv_libs_13_0=RULE_STRING
		{
			newLeafNode(lv_libs_13_0, grammarAccess.getTopLevelEntityAccess().getLibsSTRINGTerminalRuleCall_2_4_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTopLevelEntityRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"libs",
        		lv_libs_13_0, 
        		"STRING");
	    }

)
))*	otherlv_14=']' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getTopLevelEntityAccess().getRightSquareBracketKeyword_2_5());
    }
))
;





// Entry rule entryRuleMainLevelEntity
entryRuleMainLevelEntity returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMainLevelEntityRule()); }
	 iv_ruleMainLevelEntity=ruleMainLevelEntity 
	 { $current=$iv_ruleMainLevelEntity.current; } 
	 EOF 
;

// Rule MainLevelEntity
ruleMainLevelEntity returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMainLevelEntityAccess().getFunctionHeaderParserRuleCall_0()); 
    }
    this_FunctionHeader_0=ruleFunctionHeader
    { 
        $current = $this_FunctionHeader_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMainLevelEntityAccess().getLocalVarParserRuleCall_1()); 
    }
    this_LocalVar_1=ruleLocalVar
    { 
        $current = $this_LocalVar_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFunctionHeader
entryRuleFunctionHeader returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionHeaderRule()); }
	 iv_ruleFunctionHeader=ruleFunctionHeader 
	 { $current=$iv_ruleFunctionHeader.current; } 
	 EOF 
;

// Rule FunctionHeader
ruleFunctionHeader returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='define' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFunctionHeaderAccess().getDefineKeyword_0_0());
    }
(
    { 
        newCompositeNode(grammarAccess.getFunctionHeaderAccess().getLINKAGEParserRuleCall_0_1()); 
    }
ruleLINKAGE
    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getFunctionHeaderAccess().getVISIBILITYParserRuleCall_0_2()); 
    }
ruleVISIBILITY
    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getFunctionHeaderAccess().getCallingConvParserRuleCall_0_3()); 
    }
ruleCallingConv
    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getFunctionHeaderAccess().getRETURN_ATTRIBUTESParserRuleCall_0_4()); 
    }
ruleRETURN_ATTRIBUTES
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionHeaderAccess().getReturnTypeTypeParserRuleCall_0_5_0()); 
	    }
		lv_returnType_5_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionHeaderRule());
	        }
       		set(
       			$current, 
       			"returnType",
        		lv_returnType_5_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_6_0=RULE_VAR_TYPE
		{
			newLeafNode(lv_name_6_0, grammarAccess.getFunctionHeaderAccess().getNameVAR_TYPETerminalRuleCall_0_6_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionHeaderRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_6_0, 
        		"VAR_TYPE");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionHeaderAccess().getPlParameterListParserRuleCall_0_7_0()); 
	    }
		lv_pl_7_0=ruleParameterList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionHeaderRule());
	        }
       		set(
       			$current, 
       			"pl",
        		lv_pl_7_0, 
        		"ParameterList");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_8='unnamed_addr' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getFunctionHeaderAccess().getUnnamed_addrKeyword_0_8());
    }
)?(
    { 
        newCompositeNode(grammarAccess.getFunctionHeaderAccess().getFUNCTION_ATTRIBUTESParserRuleCall_0_9()); 
    }
ruleFUNCTION_ATTRIBUTES
    { 
        afterParserOrEnumRuleCall();
    }
)*(	otherlv_10='section ' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getFunctionHeaderAccess().getSectionKeyword_0_10_0());
    }
this_STRING_11=RULE_STRING
    { 
    newLeafNode(this_STRING_11, grammarAccess.getFunctionHeaderAccess().getSTRINGTerminalRuleCall_0_10_1()); 
    }
)?(
    { 
        newCompositeNode(grammarAccess.getFunctionHeaderAccess().getALIGNMENTParserRuleCall_0_11()); 
    }
ruleALIGNMENT
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionHeaderAccess().getBodyFunctionBodyParserRuleCall_0_12_0()); 
	    }
		lv_body_13_0=ruleFunctionBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionHeaderRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_13_0, 
        		"FunctionBody");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_14='declare' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getFunctionHeaderAccess().getDeclareKeyword_1_0());
    }
(
    { 
        newCompositeNode(grammarAccess.getFunctionHeaderAccess().getLINKAGEParserRuleCall_1_1()); 
    }
ruleLINKAGE
    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getFunctionHeaderAccess().getVISIBILITYParserRuleCall_1_2()); 
    }
ruleVISIBILITY
    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getFunctionHeaderAccess().getCallingConvParserRuleCall_1_3()); 
    }
ruleCallingConv
    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getFunctionHeaderAccess().getRETURN_ATTRIBUTESParserRuleCall_1_4()); 
    }
ruleRETURN_ATTRIBUTES
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionHeaderAccess().getReturnTypeTypeParserRuleCall_1_5_0()); 
	    }
		lv_returnType_19_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionHeaderRule());
	        }
       		set(
       			$current, 
       			"returnType",
        		lv_returnType_19_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_20_0=RULE_VAR_TYPE
		{
			newLeafNode(lv_name_20_0, grammarAccess.getFunctionHeaderAccess().getNameVAR_TYPETerminalRuleCall_1_6_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionHeaderRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_20_0, 
        		"VAR_TYPE");
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionHeaderAccess().getTListTypeListParserRuleCall_1_7_0_0()); 
	    }
		lv_tList_21_0=ruleTypeList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionHeaderRule());
	        }
       		set(
       			$current, 
       			"tList",
        		lv_tList_21_0, 
        		"TypeList");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |	otherlv_22='(...)' 
    {
    	newLeafNode(otherlv_22, grammarAccess.getFunctionHeaderAccess().getLeftParenthesisFullStopFullStopFullStopRightParenthesisKeyword_1_7_1());
    }
)(	otherlv_23='unnamed_addr' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getFunctionHeaderAccess().getUnnamed_addrKeyword_1_8());
    }
)?(
    { 
        newCompositeNode(grammarAccess.getFunctionHeaderAccess().getFUNCTION_ATTRIBUTESParserRuleCall_1_9()); 
    }
ruleFUNCTION_ATTRIBUTES
    { 
        afterParserOrEnumRuleCall();
    }
)*(	otherlv_25='section ' 
    {
    	newLeafNode(otherlv_25, grammarAccess.getFunctionHeaderAccess().getSectionKeyword_1_10_0());
    }
this_STRING_26=RULE_STRING
    { 
    newLeafNode(this_STRING_26, grammarAccess.getFunctionHeaderAccess().getSTRINGTerminalRuleCall_1_10_1()); 
    }
)?(
    { 
        newCompositeNode(grammarAccess.getFunctionHeaderAccess().getALIGNMENTParserRuleCall_1_11()); 
    }
ruleALIGNMENT
    { 
        afterParserOrEnumRuleCall();
    }
)?))
;





// Entry rule entryRuleParameterList
entryRuleParameterList returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterListRule()); } 
	 iv_ruleParameterList=ruleParameterList 
	 { $current=$iv_ruleParameterList.current.getText(); }  
	 EOF 
;

// Rule ParameterList
ruleParameterList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getParameterListAccess().getLeftParenthesisKeyword_0()); 
    }
(((    this_VAR_TYPE_1=RULE_VAR_TYPE    {
		$current.merge(this_VAR_TYPE_1);
    }

    { 
    newLeafNode(this_VAR_TYPE_1, grammarAccess.getParameterListAccess().getVAR_TYPETerminalRuleCall_1_0_0_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getParameterListAccess().getB_TYPEParserRuleCall_1_0_0_1()); 
    }
    this_B_TYPE_2=ruleB_TYPE    {
		$current.merge(this_B_TYPE_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)(
    { 
        newCompositeNode(grammarAccess.getParameterListAccess().getRETURN_ATTRIBUTESParserRuleCall_1_0_1()); 
    }
    this_RETURN_ATTRIBUTES_3=ruleRETURN_ATTRIBUTES    {
		$current.merge(this_RETURN_ATTRIBUTES_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
    { 
        newCompositeNode(grammarAccess.getParameterListAccess().getTypeParserRuleCall_1_0_2()); 
    }
    this_Type_4=ruleType    {
		$current.merge(this_Type_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getParameterListAccess().getCommaKeyword_1_1_0()); 
    }
((    this_VAR_TYPE_6=RULE_VAR_TYPE    {
		$current.merge(this_VAR_TYPE_6);
    }

    { 
    newLeafNode(this_VAR_TYPE_6, grammarAccess.getParameterListAccess().getVAR_TYPETerminalRuleCall_1_1_1_0_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getParameterListAccess().getB_TYPEParserRuleCall_1_1_1_0_1()); 
    }
    this_B_TYPE_7=ruleB_TYPE    {
		$current.merge(this_B_TYPE_7);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)(
    { 
        newCompositeNode(grammarAccess.getParameterListAccess().getRETURN_ATTRIBUTESParserRuleCall_1_1_1_1()); 
    }
    this_RETURN_ATTRIBUTES_8=ruleRETURN_ATTRIBUTES    {
		$current.merge(this_RETURN_ATTRIBUTES_8);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
    { 
        newCompositeNode(grammarAccess.getParameterListAccess().getTypeParserRuleCall_1_1_1_2()); 
    }
    this_Type_9=ruleType    {
		$current.merge(this_Type_9);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))*)?
	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getParameterListAccess().getRightParenthesisKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleTypeList
entryRuleTypeList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeListRule()); }
	 iv_ruleTypeList=ruleTypeList 
	 { $current=$iv_ruleTypeList.current; } 
	 EOF 
;

// Rule TypeList
ruleTypeList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeListAccess().getTypeListAction_0(),
            $current);
    }
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTypeListAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeListAccess().getTypesTypeParserRuleCall_2_0_0()); 
	    }
		lv_types_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeListRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_2_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTypeListAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeListAccess().getTypesTypeParserRuleCall_2_1_1_0()); 
	    }
		lv_types_4_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeListRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_4_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTypeListAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleAggregate
entryRuleAggregate returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAggregateRule()); }
	 iv_ruleAggregate=ruleAggregate 
	 { $current=$iv_ruleAggregate.current; } 
	 EOF 
;

// Rule Aggregate
ruleAggregate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAggregateAccess().getLeftCurlyBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAggregateAccess().getAggTypeParserRuleCall_1_0()); 
	    }
		lv_agg_1_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAggregateRule());
	        }
       		add(
       			$current, 
       			"agg",
        		lv_agg_1_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAggregateAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAggregateAccess().getAggTypeParserRuleCall_2_1_0()); 
	    }
		lv_agg_3_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAggregateRule());
	        }
       		add(
       			$current, 
       			"agg",
        		lv_agg_3_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
))	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAggregateAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleLocalVar
entryRuleLocalVar returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocalVarRule()); }
	 iv_ruleLocalVar=ruleLocalVar 
	 { $current=$iv_ruleLocalVar.current; } 
	 EOF 
;

// Rule LocalVar
ruleLocalVar returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLocalVarAccess().getNameTypeParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalVarRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLocalVarAccess().getEqualsSignKeyword_1());
    }
((	otherlv_2='type' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLocalVarAccess().getTypeKeyword_2_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalVarAccess().getTypeTypeParserRuleCall_2_0_1_0()); 
	    }
		lv_type_3_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalVarRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalVarAccess().getInstrInstructionParserRuleCall_2_1_0()); 
	    }
		lv_instr_4_0=ruleInstruction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalVarRule());
	        }
       		set(
       			$current, 
       			"instr",
        		lv_instr_4_0, 
        		"Instruction");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalVarAccess().getAliasAliasParserRuleCall_2_2_0()); 
	    }
		lv_alias_5_0=ruleAlias		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalVarRule());
	        }
       		set(
       			$current, 
       			"alias",
        		lv_alias_5_0, 
        		"Alias");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleAlias
entryRuleAlias returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAliasRule()); }
	 iv_ruleAlias=ruleAlias 
	 { $current=$iv_ruleAlias.current; } 
	 EOF 
;

// Rule Alias
ruleAlias returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='alias' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAliasAccess().getAliasKeyword_0());
    }
(
    { 
        newCompositeNode(grammarAccess.getAliasAccess().getALIAS_LINKAGEParserRuleCall_1()); 
    }
ruleALIAS_LINKAGE
    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getAliasAccess().getVISIBILITYParserRuleCall_2()); 
    }
ruleVISIBILITY
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getAliasAccess().getTypeTypeAndValueParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleTypeAndValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAliasRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"TypeAndValue");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAliasAccess().getAliaseeTypeParserRuleCall_4_0()); 
	    }
		lv_aliasee_4_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAliasRule());
	        }
       		set(
       			$current, 
       			"aliasee",
        		lv_aliasee_4_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleType
entryRuleType returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); } 
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current.getText(); }  
	 EOF 
;

// Rule Type
ruleType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getStructTypeParserRuleCall_0_0()); 
    }
    this_StructType_0=ruleStructType    {
		$current.merge(this_StructType_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_VAR_TYPE_1=RULE_VAR_TYPE    {
		$current.merge(this_VAR_TYPE_1);
    }

    { 
    newLeafNode(this_VAR_TYPE_1, grammarAccess.getTypeAccess().getVAR_TYPETerminalRuleCall_0_1()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getB_TYPEParserRuleCall_0_2()); 
    }
    this_B_TYPE_2=ruleB_TYPE    {
		$current.merge(this_B_TYPE_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)(
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getRETURN_ATTRIBUTESParserRuleCall_1()); 
    }
    this_RETURN_ATTRIBUTES_3=ruleRETURN_ATTRIBUTES    {
		$current.merge(this_RETURN_ATTRIBUTES_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    ;





// Entry rule entryRuleTypeAndValue
entryRuleTypeAndValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeAndValueRule()); }
	 iv_ruleTypeAndValue=ruleTypeAndValue 
	 { $current=$iv_ruleTypeAndValue.current; } 
	 EOF 
;

// Rule TypeAndValue
ruleTypeAndValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
(
		lv_type_0_1=RULE_VAR_TYPE
		{
			newLeafNode(lv_type_0_1, grammarAccess.getTypeAndValueAccess().getTypeVAR_TYPETerminalRuleCall_0_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeAndValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"type",
        		lv_type_0_1, 
        		"VAR_TYPE");
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getTypeAndValueAccess().getTypeB_TYPEParserRuleCall_0_0_0_1()); 
	    }
		lv_type_0_2=ruleB_TYPE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeAndValueRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_2, 
        		"B_TYPE");
	        afterParserOrEnumRuleCall();
	    }

)

)
)(
    { 
        newCompositeNode(grammarAccess.getTypeAndValueAccess().getRETURN_ATTRIBUTESParserRuleCall_0_1()); 
    }
ruleRETURN_ATTRIBUTES
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAndValueAccess().getValueTypeParserRuleCall_0_2_0()); 
	    }
		lv_value_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeAndValueRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAndValueAccess().getAggregateAggregateParserRuleCall_1_0_0()); 
	    }
		lv_aggregate_3_0=ruleAggregate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeAndValueRule());
	        }
       		set(
       			$current, 
       			"aggregate",
        		lv_aggregate_3_0, 
        		"Aggregate");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAndValueAccess().getValueTypeParserRuleCall_1_1_0()); 
	    }
		lv_value_4_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeAndValueRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleStructType
entryRuleStructType returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStructTypeRule()); } 
	 iv_ruleStructType=ruleStructType 
	 { $current=$iv_ruleStructType.current.getText(); }  
	 EOF 
;

// Rule StructType
ruleStructType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStructTypeAccess().getLeftCurlyBracketKeyword_0_0()); 
    }
((    this_VAR_TYPE_1=RULE_VAR_TYPE    {
		$current.merge(this_VAR_TYPE_1);
    }

    { 
    newLeafNode(this_VAR_TYPE_1, grammarAccess.getStructTypeAccess().getVAR_TYPETerminalRuleCall_0_1_0_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getStructTypeAccess().getB_TYPEParserRuleCall_0_1_0_1()); 
    }
    this_B_TYPE_2=ruleB_TYPE    {
		$current.merge(this_B_TYPE_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStructTypeAccess().getCommaKeyword_0_1_1_0()); 
    }
(    this_VAR_TYPE_4=RULE_VAR_TYPE    {
		$current.merge(this_VAR_TYPE_4);
    }

    { 
    newLeafNode(this_VAR_TYPE_4, grammarAccess.getStructTypeAccess().getVAR_TYPETerminalRuleCall_0_1_1_1_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getStructTypeAccess().getB_TYPEParserRuleCall_0_1_1_1_1()); 
    }
    this_B_TYPE_5=ruleB_TYPE    {
		$current.merge(this_B_TYPE_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))*)?
	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStructTypeAccess().getRightCurlyBracketKeyword_0_2()); 
    }
)
    |(
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStructTypeAccess().getLessThanSignKeyword_1_0()); 
    }

	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStructTypeAccess().getLeftCurlyBracketKeyword_1_1()); 
    }
((    this_VAR_TYPE_9=RULE_VAR_TYPE    {
		$current.merge(this_VAR_TYPE_9);
    }

    { 
    newLeafNode(this_VAR_TYPE_9, grammarAccess.getStructTypeAccess().getVAR_TYPETerminalRuleCall_1_2_0_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getStructTypeAccess().getB_TYPEParserRuleCall_1_2_0_1()); 
    }
    this_B_TYPE_10=ruleB_TYPE    {
		$current.merge(this_B_TYPE_10);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStructTypeAccess().getCommaKeyword_1_2_1_0()); 
    }
(    this_VAR_TYPE_12=RULE_VAR_TYPE    {
		$current.merge(this_VAR_TYPE_12);
    }

    { 
    newLeafNode(this_VAR_TYPE_12, grammarAccess.getStructTypeAccess().getVAR_TYPETerminalRuleCall_1_2_1_1_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getStructTypeAccess().getB_TYPEParserRuleCall_1_2_1_1_1()); 
    }
    this_B_TYPE_13=ruleB_TYPE    {
		$current.merge(this_B_TYPE_13);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))*)?
	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStructTypeAccess().getRightCurlyBracketKeyword_1_3()); 
    }

	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStructTypeAccess().getGreaterThanSignKeyword_1_4()); 
    }
))
    ;





// Entry rule entryRuleB_TYPE
entryRuleB_TYPE returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getB_TYPERule()); } 
	 iv_ruleB_TYPE=ruleB_TYPE 
	 { $current=$iv_ruleB_TYPE.current.getText(); }  
	 EOF 
;

// Rule B_TYPE
ruleB_TYPE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INTEGER_0=RULE_INTEGER    {
		$current.merge(this_INTEGER_0);
    }

    { 
    newLeafNode(this_INTEGER_0, grammarAccess.getB_TYPEAccess().getINTEGERTerminalRuleCall_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getB_TYPEAccess().getF_POINTParserRuleCall_1()); 
    }
    this_F_POINT_1=ruleF_POINT    {
		$current.merge(this_F_POINT_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getB_TYPEAccess().getBASIC_TYPEParserRuleCall_2()); 
    }
    this_BASIC_TYPE_2=ruleBASIC_TYPE    {
		$current.merge(this_BASIC_TYPE_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_INT_3=RULE_INT    {
		$current.merge(this_INT_3);
    }

    { 
    newLeafNode(this_INT_3, grammarAccess.getB_TYPEAccess().getINTTerminalRuleCall_3()); 
    }
)
    ;





// Entry rule entryRuleBASIC_TYPE
entryRuleBASIC_TYPE returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBASIC_TYPERule()); } 
	 iv_ruleBASIC_TYPE=ruleBASIC_TYPE 
	 { $current=$iv_ruleBASIC_TYPE.current.getText(); }  
	 EOF 
;

// Rule BASIC_TYPE
ruleBASIC_TYPE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='void' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBASIC_TYPEAccess().getVoidKeyword_0()); 
    }

    |
	kw='null' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBASIC_TYPEAccess().getNullKeyword_1()); 
    }

    |
	kw='label' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBASIC_TYPEAccess().getLabelKeyword_2()); 
    }

    |
	kw='undef' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBASIC_TYPEAccess().getUndefKeyword_3()); 
    }

    |
	kw='true' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBASIC_TYPEAccess().getTrueKeyword_4()); 
    }

    |
	kw='false' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBASIC_TYPEAccess().getFalseKeyword_5()); 
    }
)
    ;





// Entry rule entryRuleF_POINT
entryRuleF_POINT returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getF_POINTRule()); } 
	 iv_ruleF_POINT=ruleF_POINT 
	 { $current=$iv_ruleF_POINT.current.getText(); }  
	 EOF 
;

// Rule F_POINT
ruleF_POINT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='half' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getF_POINTAccess().getHalfKeyword_0()); 
    }

    |
	kw='float' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getF_POINTAccess().getFloatKeyword_1()); 
    }

    |
	kw='double' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getF_POINTAccess().getDoubleKeyword_2()); 
    }

    |
	kw='x86_fp80' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getF_POINTAccess().getX86_fp80Keyword_3()); 
    }

    |
	kw='fp128' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getF_POINTAccess().getFp128Keyword_4()); 
    }

    |
	kw='ppc_fp128' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getF_POINTAccess().getPpc_fp128Keyword_5()); 
    }
)
    ;





// Entry rule entryRuleGetElementPtr
entryRuleGetElementPtr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGetElementPtrRule()); }
	 iv_ruleGetElementPtr=ruleGetElementPtr 
	 { $current=$iv_ruleGetElementPtr.current; } 
	 EOF 
;

// Rule GetElementPtr
ruleGetElementPtr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='getelementptr' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGetElementPtrAccess().getGetelementptrKeyword_0());
    }
(	otherlv_1='inbounds' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getGetElementPtrAccess().getInboundsKeyword_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getGetElementPtrAccess().getPointerTypeAndValueParserRuleCall_2_0()); 
	    }
		lv_pointer_2_0=ruleTypeAndValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGetElementPtrRule());
	        }
       		add(
       			$current, 
       			"pointer",
        		lv_pointer_2_0, 
        		"TypeAndValue");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getGetElementPtrAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGetElementPtrAccess().getParamsTypeAndValueParserRuleCall_3_1_0()); 
	    }
		lv_params_4_0=ruleTypeAndValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGetElementPtrRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_4_0, 
        		"TypeAndValue");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExtractValue
entryRuleExtractValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExtractValueRule()); }
	 iv_ruleExtractValue=ruleExtractValue 
	 { $current=$iv_ruleExtractValue.current; } 
	 EOF 
;

// Rule ExtractValue
ruleExtractValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='extractvalue' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExtractValueAccess().getExtractvalueKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExtractValueAccess().getAggregateAggregateParserRuleCall_1_0()); 
	    }
		lv_aggregate_1_0=ruleAggregate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExtractValueRule());
	        }
       		set(
       			$current, 
       			"aggregate",
        		lv_aggregate_1_0, 
        		"Aggregate");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExtractValueAccess().getTypeTypeParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExtractValueRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getExtractValueAccess().getCommaKeyword_3_0());
    }
(
(
		lv_index_4_0=RULE_INT
		{
			newLeafNode(lv_index_4_0, grammarAccess.getExtractValueAccess().getIndexINTTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExtractValueRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"index",
        		lv_index_4_0, 
        		"INT");
	    }

)
))+)
;





// Entry rule entryRuleInsertValue
entryRuleInsertValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInsertValueRule()); }
	 iv_ruleInsertValue=ruleInsertValue 
	 { $current=$iv_ruleInsertValue.current; } 
	 EOF 
;

// Rule InsertValue
ruleInsertValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='insertvalue' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInsertValueAccess().getInsertvalueKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInsertValueAccess().getAggregateAggregateParserRuleCall_1_0()); 
	    }
		lv_aggregate_1_0=ruleAggregate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInsertValueRule());
	        }
       		set(
       			$current, 
       			"aggregate",
        		lv_aggregate_1_0, 
        		"Aggregate");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getInsertValueAccess().getTypeTypeParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInsertValueRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getInsertValueAccess().getCommaKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInsertValueAccess().getValueTypeAndValueParserRuleCall_4_0()); 
	    }
		lv_value_4_0=ruleTypeAndValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInsertValueRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"TypeAndValue");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getInsertValueAccess().getCommaKeyword_5_0());
    }
(
(
		lv_index_6_0=RULE_INT
		{
			newLeafNode(lv_index_6_0, grammarAccess.getInsertValueAccess().getIndexINTTerminalRuleCall_5_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInsertValueRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"index",
        		lv_index_6_0, 
        		"INT");
	    }

)
))+)
;





// Entry rule entryRuleFence
entryRuleFence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFenceRule()); }
	 iv_ruleFence=ruleFence 
	 { $current=$iv_ruleFence.current; } 
	 EOF 
;

// Rule Fence
ruleFence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='fence' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFenceAccess().getFenceKeyword_0());
    }
(	otherlv_1='singlethread' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFenceAccess().getSinglethreadKeyword_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getFenceAccess().getOrderingATOMIC_ORDERINGParserRuleCall_2_0()); 
	    }
		lv_ordering_2_0=ruleATOMIC_ORDERING		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFenceRule());
	        }
       		set(
       			$current, 
       			"ordering",
        		lv_ordering_2_0, 
        		"ATOMIC_ORDERING");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleATOMIC_ORDERING
entryRuleATOMIC_ORDERING returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getATOMIC_ORDERINGRule()); } 
	 iv_ruleATOMIC_ORDERING=ruleATOMIC_ORDERING 
	 { $current=$iv_ruleATOMIC_ORDERING.current.getText(); }  
	 EOF 
;

// Rule ATOMIC_ORDERING
ruleATOMIC_ORDERING returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='unordered' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getATOMIC_ORDERINGAccess().getUnorderedKeyword_0()); 
    }

    |
	kw='monotonic' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getATOMIC_ORDERINGAccess().getMonotonicKeyword_1()); 
    }

    |
	kw='aquire' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getATOMIC_ORDERINGAccess().getAquireKeyword_2()); 
    }

    |
	kw='release' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getATOMIC_ORDERINGAccess().getReleaseKeyword_3()); 
    }

    |
	kw='acq_rel' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getATOMIC_ORDERINGAccess().getAcq_relKeyword_4()); 
    }

    |
	kw='seq_cst' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getATOMIC_ORDERINGAccess().getSeq_cstKeyword_5()); 
    }
)
    ;





// Entry rule entryRuleCmpXchg
entryRuleCmpXchg returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCmpXchgRule()); }
	 iv_ruleCmpXchg=ruleCmpXchg 
	 { $current=$iv_ruleCmpXchg.current; } 
	 EOF 
;

// Rule CmpXchg
ruleCmpXchg returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='cmpxchg' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCmpXchgAccess().getCmpxchgKeyword_0());
    }
(	otherlv_1='volatile' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCmpXchgAccess().getVolatileKeyword_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getCmpXchgAccess().getAdressTypeAndValueParserRuleCall_2_0()); 
	    }
		lv_adress_2_0=ruleTypeAndValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCmpXchgRule());
	        }
       		set(
       			$current, 
       			"adress",
        		lv_adress_2_0, 
        		"TypeAndValue");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCmpXchgAccess().getCommaKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCmpXchgAccess().getCompare_valTypeAndValueParserRuleCall_4_0()); 
	    }
		lv_compare_val_4_0=ruleTypeAndValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCmpXchgRule());
	        }
       		set(
       			$current, 
       			"compare_val",
        		lv_compare_val_4_0, 
        		"TypeAndValue");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getCmpXchgAccess().getCommaKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCmpXchgAccess().getNew_valTypeAndValueParserRuleCall_6_0()); 
	    }
		lv_new_val_6_0=ruleTypeAndValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCmpXchgRule());
	        }
       		set(
       			$current, 
       			"new_val",
        		lv_new_val_6_0, 
        		"TypeAndValue");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_7='singlethread' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getCmpXchgAccess().getSinglethreadKeyword_7());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getCmpXchgAccess().getOrderingATOMIC_ORDERINGParserRuleCall_8_0()); 
	    }
		lv_ordering_8_0=ruleATOMIC_ORDERING		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCmpXchgRule());
	        }
       		set(
       			$current, 
       			"ordering",
        		lv_ordering_8_0, 
        		"ATOMIC_ORDERING");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAtomicRMW
entryRuleAtomicRMW returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtomicRMWRule()); }
	 iv_ruleAtomicRMW=ruleAtomicRMW 
	 { $current=$iv_ruleAtomicRMW.current; } 
	 EOF 
;

// Rule AtomicRMW
ruleAtomicRMW returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='atomicrmw' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAtomicRMWAccess().getAtomicrmwKeyword_0());
    }
(	otherlv_1='volatile' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAtomicRMWAccess().getVolatileKeyword_1());
    }
)?
    { 
        newCompositeNode(grammarAccess.getAtomicRMWAccess().getBIN_OPParserRuleCall_2()); 
    }
ruleBIN_OP
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicRMWAccess().getAdressTypeAndValueParserRuleCall_3_0()); 
	    }
		lv_adress_3_0=ruleTypeAndValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicRMWRule());
	        }
       		set(
       			$current, 
       			"adress",
        		lv_adress_3_0, 
        		"TypeAndValue");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAtomicRMWAccess().getCommaKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicRMWAccess().getValueTypeAndValueParserRuleCall_5_0()); 
	    }
		lv_value_5_0=ruleTypeAndValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicRMWRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_5_0, 
        		"TypeAndValue");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6='singlethread' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAtomicRMWAccess().getSinglethreadKeyword_6());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicRMWAccess().getOrderingATOMIC_ORDERINGParserRuleCall_7_0()); 
	    }
		lv_ordering_7_0=ruleATOMIC_ORDERING		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicRMWRule());
	        }
       		set(
       			$current, 
       			"ordering",
        		lv_ordering_7_0, 
        		"ATOMIC_ORDERING");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBIN_OP
entryRuleBIN_OP returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBIN_OPRule()); } 
	 iv_ruleBIN_OP=ruleBIN_OP 
	 { $current=$iv_ruleBIN_OP.current.getText(); }  
	 EOF 
;

// Rule BIN_OP
ruleBIN_OP returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='xchg' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBIN_OPAccess().getXchgKeyword_0()); 
    }

    |
	kw='add' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBIN_OPAccess().getAddKeyword_1()); 
    }

    |
	kw='sub' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBIN_OPAccess().getSubKeyword_2()); 
    }

    |
	kw='and' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBIN_OPAccess().getAndKeyword_3()); 
    }

    |
	kw='nand' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBIN_OPAccess().getNandKeyword_4()); 
    }

    |
	kw='or' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBIN_OPAccess().getOrKeyword_5()); 
    }

    |
	kw='xor' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBIN_OPAccess().getXorKeyword_6()); 
    }

    |
	kw='max' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBIN_OPAccess().getMaxKeyword_7()); 
    }

    |
	kw='min' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBIN_OPAccess().getMinKeyword_8()); 
    }

    |
	kw='umax' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBIN_OPAccess().getUmaxKeyword_9()); 
    }

    |
	kw='umin' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBIN_OPAccess().getUminKeyword_10()); 
    }
)
    ;





// Entry rule entryRuleLoad
entryRuleLoad returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLoadRule()); }
	 iv_ruleLoad=ruleLoad 
	 { $current=$iv_ruleLoad.current; } 
	 EOF 
;

// Rule Load
ruleLoad returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='load' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLoadAccess().getLoadKeyword_0_0());
    }
(	otherlv_1='volatile' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLoadAccess().getVolatileKeyword_0_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getLoadAccess().getAdressTypeAndValueParserRuleCall_0_2_0()); 
	    }
		lv_adress_2_0=ruleTypeAndValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoadRule());
	        }
       		set(
       			$current, 
       			"adress",
        		lv_adress_2_0, 
        		"TypeAndValue");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLoadAccess().getCommaKeyword_0_3_0());
    }
(
    { 
        newCompositeNode(grammarAccess.getLoadAccess().getALIGNMENTParserRuleCall_0_3_1_0()); 
    }
ruleALIGNMENT
    { 
        afterParserOrEnumRuleCall();
    }

    |(
    { 
        newCompositeNode(grammarAccess.getLoadAccess().getMetadataValueParserRuleCall_0_3_1_1()); 
    }
ruleMetadataValue
    { 
        afterParserOrEnumRuleCall();
    }
)+))*)
    |(	otherlv_6='load' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getLoadAccess().getLoadKeyword_1_0());
    }
	otherlv_7='atomic' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getLoadAccess().getAtomicKeyword_1_1());
    }
(	otherlv_8='volatile' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getLoadAccess().getVolatileKeyword_1_2());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getLoadAccess().getAdressTypeAndValueParserRuleCall_1_3_0()); 
	    }
		lv_adress_9_0=ruleTypeAndValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoadRule());
	        }
       		set(
       			$current, 
       			"adress",
        		lv_adress_9_0, 
        		"TypeAndValue");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_10='singlethread' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getLoadAccess().getSinglethreadKeyword_1_4());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getLoadAccess().getOrderingATOMIC_ORDERINGParserRuleCall_1_5_0()); 
	    }
		lv_ordering_11_0=ruleATOMIC_ORDERING		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoadRule());
	        }
       		set(
       			$current, 
       			"ordering",
        		lv_ordering_11_0, 
        		"ATOMIC_ORDERING");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_12=',' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getLoadAccess().getCommaKeyword_1_6_0());
    }
	otherlv_13='align' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getLoadAccess().getAlignKeyword_1_6_1());
    }
(
(
		lv_index_14_0=RULE_INT
		{
			newLeafNode(lv_index_14_0, grammarAccess.getLoadAccess().getIndexINTTerminalRuleCall_1_6_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLoadRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"index",
        		lv_index_14_0, 
        		"INT");
	    }

)
))?))
;





// Entry rule entryRuleStore
entryRuleStore returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStoreRule()); }
	 iv_ruleStore=ruleStore 
	 { $current=$iv_ruleStore.current; } 
	 EOF 
;

// Rule Store
ruleStore returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='store' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStoreAccess().getStoreKeyword_0_0());
    }
(	otherlv_1='volatile' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStoreAccess().getVolatileKeyword_0_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getStoreAccess().getValueTypeAndValueParserRuleCall_0_2_0()); 
	    }
		lv_value_2_0=ruleTypeAndValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStoreRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"TypeAndValue");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStoreAccess().getCommaKeyword_0_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStoreAccess().getAdressTypeAndValueParserRuleCall_0_4_0()); 
	    }
		lv_adress_4_0=ruleTypeAndValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStoreRule());
	        }
       		set(
       			$current, 
       			"adress",
        		lv_adress_4_0, 
        		"TypeAndValue");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getStoreAccess().getCommaKeyword_0_5_0());
    }
(
    { 
        newCompositeNode(grammarAccess.getStoreAccess().getALIGNMENTParserRuleCall_0_5_1_0()); 
    }
ruleALIGNMENT
    { 
        afterParserOrEnumRuleCall();
    }

    |(
    { 
        newCompositeNode(grammarAccess.getStoreAccess().getMetadataValueParserRuleCall_0_5_1_1()); 
    }
ruleMetadataValue
    { 
        afterParserOrEnumRuleCall();
    }
)+))*)
    |(	otherlv_8='store' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getStoreAccess().getStoreKeyword_1_0());
    }
	otherlv_9='atomic' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getStoreAccess().getAtomicKeyword_1_1());
    }
(	otherlv_10='volatile' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getStoreAccess().getVolatileKeyword_1_2());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getStoreAccess().getValueTypeAndValueParserRuleCall_1_3_0()); 
	    }
		lv_value_11_0=ruleTypeAndValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStoreRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_11_0, 
        		"TypeAndValue");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_12=',' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getStoreAccess().getCommaKeyword_1_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStoreAccess().getAdressTypeAndValueParserRuleCall_1_5_0()); 
	    }
		lv_adress_13_0=ruleTypeAndValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStoreRule());
	        }
       		set(
       			$current, 
       			"adress",
        		lv_adress_13_0, 
        		"TypeAndValue");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_14='singlethread' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getStoreAccess().getSinglethreadKeyword_1_6());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getStoreAccess().getOrderingATOMIC_ORDERINGParserRuleCall_1_7_0()); 
	    }
		lv_ordering_15_0=ruleATOMIC_ORDERING		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStoreRule());
	        }
       		set(
       			$current, 
       			"ordering",
        		lv_ordering_15_0, 
        		"ATOMIC_ORDERING");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_16=',' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getStoreAccess().getCommaKeyword_1_8_0());
    }
	otherlv_17='align' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getStoreAccess().getAlignKeyword_1_8_1());
    }
(
(
		lv_index_18_0=RULE_INT
		{
			newLeafNode(lv_index_18_0, grammarAccess.getStoreAccess().getIndexINTTerminalRuleCall_1_8_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStoreRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"index",
        		lv_index_18_0, 
        		"INT");
	    }

)
))?))
;





// Entry rule entryRuleCall
entryRuleCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCallRule()); }
	 iv_ruleCall=ruleCall 
	 { $current=$iv_ruleCall.current; } 
	 EOF 
;

// Rule Call
ruleCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='tail' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCallAccess().getTailKeyword_0());
    }
)?	otherlv_1='call' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCallAccess().getCallKeyword_1());
    }
(
    { 
        newCompositeNode(grammarAccess.getCallAccess().getCallingConvParserRuleCall_2()); 
    }
ruleCallingConv
    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getCallAccess().getRETURN_ATTRIBUTESParserRuleCall_3()); 
    }
ruleRETURN_ATTRIBUTES
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getCallAccess().getPointerTypeAndValueParserRuleCall_4_0()); 
	    }
		lv_pointer_4_0=ruleTypeAndValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCallRule());
	        }
       		set(
       			$current, 
       			"pointer",
        		lv_pointer_4_0, 
        		"TypeAndValue");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCallAccess().getPListParameterListParserRuleCall_5_0()); 
	    }
		lv_pList_5_0=ruleParameterList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCallRule());
	        }
       		set(
       			$current, 
       			"pList",
        		lv_pList_5_0, 
        		"ParameterList");
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getCallAccess().getFUNCTION_ATTRIBUTESParserRuleCall_6()); 
    }
ruleFUNCTION_ATTRIBUTES
    { 
        afterParserOrEnumRuleCall();
    }
)*)
;





// Entry rule entryRuleRETURN_ATTRIBUTES
entryRuleRETURN_ATTRIBUTES returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRETURN_ATTRIBUTESRule()); } 
	 iv_ruleRETURN_ATTRIBUTES=ruleRETURN_ATTRIBUTES 
	 { $current=$iv_ruleRETURN_ATTRIBUTES.current.getText(); }  
	 EOF 
;

// Rule RETURN_ATTRIBUTES
ruleRETURN_ATTRIBUTES returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='zeroext' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRETURN_ATTRIBUTESAccess().getZeroextKeyword_0()); 
    }

    |
	kw='signext' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRETURN_ATTRIBUTESAccess().getSignextKeyword_1()); 
    }

    |
	kw='inreg' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRETURN_ATTRIBUTESAccess().getInregKeyword_2()); 
    }

    |
	kw='byval' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRETURN_ATTRIBUTESAccess().getByvalKeyword_3()); 
    }

    |
	kw='sret' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRETURN_ATTRIBUTESAccess().getSretKeyword_4()); 
    }

    |
	kw='noalias' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRETURN_ATTRIBUTESAccess().getNoaliasKeyword_5()); 
    }

    |
	kw='nocapture' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRETURN_ATTRIBUTESAccess().getNocaptureKeyword_6()); 
    }

    |
	kw='nest' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRETURN_ATTRIBUTESAccess().getNestKeyword_7()); 
    }
)
    ;





// Entry rule entryRuleAlloc
entryRuleAlloc returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAllocRule()); }
	 iv_ruleAlloc=ruleAlloc 
	 { $current=$iv_ruleAlloc.current; } 
	 EOF 
;

// Rule Alloc
ruleAlloc returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='alloca' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAllocAccess().getAllocaKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAllocAccess().getTypeTypeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAllocRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAllocAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAllocAccess().getNumElementsTypeAndValueParserRuleCall_2_1_0()); 
	    }
		lv_numElements_3_0=ruleTypeAndValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAllocRule());
	        }
       		set(
       			$current, 
       			"numElements",
        		lv_numElements_3_0, 
        		"TypeAndValue");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAllocAccess().getCommaKeyword_3_0());
    }

    { 
        newCompositeNode(grammarAccess.getAllocAccess().getALIGNMENTParserRuleCall_3_1()); 
    }
ruleALIGNMENT
    { 
        afterParserOrEnumRuleCall();
    }
)?)
;





// Entry rule entryRuleCallingConv
entryRuleCallingConv returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCallingConvRule()); } 
	 iv_ruleCallingConv=ruleCallingConv 
	 { $current=$iv_ruleCallingConv.current.getText(); }  
	 EOF 
;

// Rule CallingConv
ruleCallingConv returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='ccc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallingConvAccess().getCccKeyword_0()); 
    }

    |
	kw='fastcc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallingConvAccess().getFastccKeyword_1()); 
    }

    |
	kw='coldcc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallingConvAccess().getColdccKeyword_2()); 
    }

    |
	kw='x86_stdcallcc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallingConvAccess().getX86_stdcallccKeyword_3()); 
    }

    |
	kw='x86_fastcallcc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallingConvAccess().getX86_fastcallccKeyword_4()); 
    }

    |
	kw='x86_thiscallcc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallingConvAccess().getX86_thiscallccKeyword_5()); 
    }

    |
	kw='arm_apcscc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallingConvAccess().getArm_apcsccKeyword_6()); 
    }

    |
	kw='arm_aapcscc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallingConvAccess().getArm_aapcsccKeyword_7()); 
    }

    |
	kw='arm_aapcs_vfpcc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallingConvAccess().getArm_aapcs_vfpccKeyword_8()); 
    }

    |
	kw='msp430_intrcc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallingConvAccess().getMsp430_intrccKeyword_9()); 
    }

    |
	kw='ptx_kernel' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallingConvAccess().getPtx_kernelKeyword_10()); 
    }

    |
	kw='ptx_device' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallingConvAccess().getPtx_deviceKeyword_11()); 
    }

    |
	kw='spir_func' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallingConvAccess().getSpir_funcKeyword_12()); 
    }

    |
	kw='spir_kernel' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallingConvAccess().getSpir_kernelKeyword_13()); 
    }

    |(
	kw='cc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallingConvAccess().getCcKeyword_14_0()); 
    }

	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallingConvAccess().getLessThanSignKeyword_14_1()); 
    }
    this_INT_16=RULE_INT    {
		$current.merge(this_INT_16);
    }

    { 
    newLeafNode(this_INT_16, grammarAccess.getCallingConvAccess().getINTTerminalRuleCall_14_2()); 
    }

	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCallingConvAccess().getGreaterThanSignKeyword_14_3()); 
    }
    this_INT_18=RULE_INT    {
		$current.merge(this_INT_18);
    }

    { 
    newLeafNode(this_INT_18, grammarAccess.getCallingConvAccess().getINTTerminalRuleCall_14_4()); 
    }
))
    ;





// Entry rule entryRuleFUNCTION_ATTRIBUTES
entryRuleFUNCTION_ATTRIBUTES returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFUNCTION_ATTRIBUTESRule()); } 
	 iv_ruleFUNCTION_ATTRIBUTES=ruleFUNCTION_ATTRIBUTES 
	 { $current=$iv_ruleFUNCTION_ATTRIBUTES.current.getText(); }  
	 EOF 
;

// Rule FUNCTION_ATTRIBUTES
ruleFUNCTION_ATTRIBUTES returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='address_safety' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getAddress_safetyKeyword_0()); 
    }

    |(
	kw='alignstack' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getAlignstackKeyword_1_0()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getLeftParenthesisKeyword_1_1()); 
    }

	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getLessThanSignKeyword_1_2()); 
    }
    this_INT_4=RULE_INT    {
		$current.merge(this_INT_4);
    }

    { 
    newLeafNode(this_INT_4, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getINTTerminalRuleCall_1_3()); 
    }

	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getGreaterThanSignKeyword_1_4()); 
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getRightParenthesisKeyword_1_5()); 
    }
)
    |
	kw='alwaysinline' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getAlwaysinlineKeyword_2()); 
    }

    |
	kw='nonlazybind' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getNonlazybindKeyword_3()); 
    }

    |
	kw='inlinehint' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getInlinehintKeyword_4()); 
    }

    |
	kw='naked' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getNakedKeyword_5()); 
    }

    |
	kw='noimplicitfloat' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getNoimplicitfloatKeyword_6()); 
    }

    |
	kw='noinline' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getNoinlineKeyword_7()); 
    }

    |
	kw='noredzone' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getNoredzoneKeyword_8()); 
    }

    |
	kw='noreturn' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getNoreturnKeyword_9()); 
    }

    |
	kw='nounwind' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getNounwindKeyword_10()); 
    }

    |
	kw='optsize' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getOptsizeKeyword_11()); 
    }

    |
	kw='readnone' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getReadnoneKeyword_12()); 
    }

    |
	kw='readonly' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getReadonlyKeyword_13()); 
    }

    |
	kw='returns_twice' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getReturns_twiceKeyword_14()); 
    }

    |
	kw='ssp' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getSspKeyword_15()); 
    }

    |
	kw='sspreq' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getSspreqKeyword_16()); 
    }

    |
	kw='uwtable' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFUNCTION_ATTRIBUTESAccess().getUwtableKeyword_17()); 
    }
)
    ;





// Entry rule entryRulePHI
entryRulePHI returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPHIRule()); }
	 iv_rulePHI=rulePHI 
	 { $current=$iv_rulePHI.current; } 
	 EOF 
;

// Rule PHI
rulePHI returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='phi' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPHIAccess().getPhiKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getPHIAccess().getTypeParserRuleCall_1()); 
    }
ruleType
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPHIAccess().getLeftSquareBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPHIAccess().getValuesValuePairParserRuleCall_3_0()); 
	    }
		lv_values_3_0=ruleValuePair		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPHIRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_3_0, 
        		"ValuePair");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPHIAccess().getRightSquareBracketKeyword_4());
    }
(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPHIAccess().getCommaKeyword_5_0());
    }
	otherlv_6='[' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getPHIAccess().getLeftSquareBracketKeyword_5_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPHIAccess().getValuesValuePairParserRuleCall_5_2_0()); 
	    }
		lv_values_7_0=ruleValuePair		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPHIRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_7_0, 
        		"ValuePair");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8=']' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getPHIAccess().getRightSquareBracketKeyword_5_3());
    }
)*)
;





// Entry rule entryRuleValuePair
entryRuleValuePair returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValuePairRule()); }
	 iv_ruleValuePair=ruleValuePair 
	 { $current=$iv_ruleValuePair.current; } 
	 EOF 
;

// Rule ValuePair
ruleValuePair returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getValuePairAccess().getValue1TypeParserRuleCall_0_0()); 
	    }
		lv_value1_0_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValuePairRule());
	        }
       		set(
       			$current, 
       			"value1",
        		lv_value1_0_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getValuePairAccess().getCommaKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getValuePairAccess().getValue2TypeParserRuleCall_2_0()); 
	    }
		lv_value2_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValuePairRule());
	        }
       		set(
       			$current, 
       			"value2",
        		lv_value2_2_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLandingPad
entryRuleLandingPad returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLandingPadRule()); }
	 iv_ruleLandingPad=ruleLandingPad 
	 { $current=$iv_ruleLandingPad.current; } 
	 EOF 
;

// Rule LandingPad
ruleLandingPad returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='landingpad' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLandingPadAccess().getLandingpadKeyword_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLandingPadAccess().getTypeTypeParserRuleCall_0_1_0()); 
	    }
		lv_type_1_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLandingPadRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='personality' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLandingPadAccess().getPersonalityKeyword_0_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLandingPadAccess().getPersonalityTypeAndValueParserRuleCall_0_3_0()); 
	    }
		lv_personality_3_0=ruleTypeAndValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLandingPadRule());
	        }
       		set(
       			$current, 
       			"personality",
        		lv_personality_3_0, 
        		"TypeAndValue");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_4='cleanup' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getLandingPadAccess().getCleanupKeyword_0_4_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLandingPadAccess().getClauseClauseParserRuleCall_0_4_0_1_0()); 
	    }
		lv_clause_5_0=ruleClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLandingPadRule());
	        }
       		add(
       			$current, 
       			"clause",
        		lv_clause_5_0, 
        		"Clause");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getLandingPadAccess().getClauseClauseParserRuleCall_0_4_1_0()); 
	    }
		lv_clause_6_0=ruleClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLandingPadRule());
	        }
       		add(
       			$current, 
       			"clause",
        		lv_clause_6_0, 
        		"Clause");
	        afterParserOrEnumRuleCall();
	    }

)
)+))
    |(	otherlv_7='landingpad' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getLandingPadAccess().getLandingpadKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLandingPadAccess().getTypeTypeParserRuleCall_1_1_0()); 
	    }
		lv_type_8_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLandingPadRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_8_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9='personality' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getLandingPadAccess().getPersonalityKeyword_1_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLandingPadAccess().getPersonalitytypeTypeParserRuleCall_1_3_0()); 
	    }
		lv_personalitytype_10_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLandingPadRule());
	        }
       		set(
       			$current, 
       			"personalitytype",
        		lv_personalitytype_10_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLandingPadAccess().getPersonalityfunctionCAST_TYPEParserRuleCall_1_4_0()); 
	    }
		lv_personalityfunction_11_0=ruleCAST_TYPE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLandingPadRule());
	        }
       		set(
       			$current, 
       			"personalityfunction",
        		lv_personalityfunction_11_0, 
        		"CAST_TYPE");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_12='(' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getLandingPadAccess().getLeftParenthesisKeyword_1_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLandingPadAccess().getValueTypeParserRuleCall_1_6_0()); 
	    }
		lv_value_13_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLandingPadRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_13_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_14='(...)*' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getLandingPadAccess().getLeftParenthesisFullStopFullStopFullStopRightParenthesisAsteriskKeyword_1_7());
    }
this_VAR_TYPE_15=RULE_VAR_TYPE
    { 
    newLeafNode(this_VAR_TYPE_15, grammarAccess.getLandingPadAccess().getVAR_TYPETerminalRuleCall_1_8()); 
    }
	otherlv_16='to' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getLandingPadAccess().getToKeyword_1_9());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLandingPadAccess().getCasttoTypeParserRuleCall_1_10_0()); 
	    }
		lv_castto_17_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLandingPadRule());
	        }
       		set(
       			$current, 
       			"castto",
        		lv_castto_17_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_18=')' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getLandingPadAccess().getRightParenthesisKeyword_1_11());
    }
((	otherlv_19='cleanup' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getLandingPadAccess().getCleanupKeyword_1_12_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLandingPadAccess().getClauseClauseParserRuleCall_1_12_0_1_0()); 
	    }
		lv_clause_20_0=ruleClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLandingPadRule());
	        }
       		add(
       			$current, 
       			"clause",
        		lv_clause_20_0, 
        		"Clause");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getLandingPadAccess().getClauseClauseParserRuleCall_1_12_1_0()); 
	    }
		lv_clause_21_0=ruleClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLandingPadRule());
	        }
       		add(
       			$current, 
       			"clause",
        		lv_clause_21_0, 
        		"Clause");
	        afterParserOrEnumRuleCall();
	    }

)
)+)))
;





// Entry rule entryRuleClause
entryRuleClause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClauseRule()); }
	 iv_ruleClause=ruleClause 
	 { $current=$iv_ruleClause.current; } 
	 EOF 
;

// Rule Clause
ruleClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='catch' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getClauseAccess().getCatchKeyword_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getClauseAccess().getTypeAndValueParserRuleCall_0_1()); 
    }
    this_TypeAndValue_1=ruleTypeAndValue
    { 
        $current = $this_TypeAndValue_1.current; 
        afterParserOrEnumRuleCall();
    }
)
    |(	otherlv_2='filter' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getClauseAccess().getFilterKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClauseAccess().getFilterTypeAndValueParserRuleCall_1_1_0()); 
	    }
		lv_filter_3_0=ruleTypeAndValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClauseRule());
	        }
       		add(
       			$current, 
       			"filter",
        		lv_filter_3_0, 
        		"TypeAndValue");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getClauseAccess().getCommaKeyword_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClauseAccess().getFilterTypeAndValueParserRuleCall_1_2_1_0()); 
	    }
		lv_filter_5_0=ruleTypeAndValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClauseRule());
	        }
       		add(
       			$current, 
       			"filter",
        		lv_filter_5_0, 
        		"TypeAndValue");
	        afterParserOrEnumRuleCall();
	    }

)
))*))
;





// Entry rule entryRuleSelect
entryRuleSelect returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSelectRule()); }
	 iv_ruleSelect=ruleSelect 
	 { $current=$iv_ruleSelect.current; } 
	 EOF 
;

// Rule Select
ruleSelect returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='select' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSelectAccess().getSelectKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectAccess().getConditionTypeAndValueParserRuleCall_1_0()); 
	    }
		lv_condition_1_0=ruleTypeAndValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_1_0, 
        		"TypeAndValue");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSelectAccess().getCommaKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectAccess().getVal1TypeAndValueParserRuleCall_3_0()); 
	    }
		lv_val1_3_0=ruleTypeAndValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectRule());
	        }
       		set(
       			$current, 
       			"val1",
        		lv_val1_3_0, 
        		"TypeAndValue");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSelectAccess().getCommaKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectAccess().getVal2TypeAndValueParserRuleCall_5_0()); 
	    }
		lv_val2_5_0=ruleTypeAndValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectRule());
	        }
       		set(
       			$current, 
       			"val2",
        		lv_val2_5_0, 
        		"TypeAndValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleVA_Arg
entryRuleVA_Arg returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVA_ArgRule()); }
	 iv_ruleVA_Arg=ruleVA_Arg 
	 { $current=$iv_ruleVA_Arg.current; } 
	 EOF 
;

// Rule VA_Arg
ruleVA_Arg returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='va_arg' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getVA_ArgAccess().getVa_argKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVA_ArgAccess().getListTypeAndValueParserRuleCall_1_0()); 
	    }
		lv_list_1_0=ruleTypeAndValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVA_ArgRule());
	        }
       		set(
       			$current, 
       			"list",
        		lv_list_1_0, 
        		"TypeAndValue");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getVA_ArgAccess().getCommaKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVA_ArgAccess().getArgTypeTypeParserRuleCall_3_0()); 
	    }
		lv_argType_3_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVA_ArgRule());
	        }
       		set(
       			$current, 
       			"argType",
        		lv_argType_3_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleExtractElement
entryRuleExtractElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExtractElementRule()); }
	 iv_ruleExtractElement=ruleExtractElement 
	 { $current=$iv_ruleExtractElement.current; } 
	 EOF 
;

// Rule ExtractElement
ruleExtractElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='extractelement' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExtractElementAccess().getExtractelementKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExtractElementAccess().getVectorTypeAndValueParserRuleCall_1_0()); 
	    }
		lv_vector_1_0=ruleTypeAndValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExtractElementRule());
	        }
       		set(
       			$current, 
       			"vector",
        		lv_vector_1_0, 
        		"TypeAndValue");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExtractElementAccess().getCommaKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExtractElementAccess().getIndexTypeAndValueParserRuleCall_3_0()); 
	    }
		lv_index_3_0=ruleTypeAndValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExtractElementRule());
	        }
       		set(
       			$current, 
       			"index",
        		lv_index_3_0, 
        		"TypeAndValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleInsertElement
entryRuleInsertElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInsertElementRule()); }
	 iv_ruleInsertElement=ruleInsertElement 
	 { $current=$iv_ruleInsertElement.current; } 
	 EOF 
;

// Rule InsertElement
ruleInsertElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='insertelement' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInsertElementAccess().getInsertelementKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInsertElementAccess().getVectorTypeAndValueParserRuleCall_1_0()); 
	    }
		lv_vector_1_0=ruleTypeAndValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInsertElementRule());
	        }
       		set(
       			$current, 
       			"vector",
        		lv_vector_1_0, 
        		"TypeAndValue");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInsertElementAccess().getCommaKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInsertElementAccess().getScalarTypeAndValueParserRuleCall_3_0()); 
	    }
		lv_scalar_3_0=ruleTypeAndValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInsertElementRule());
	        }
       		set(
       			$current, 
       			"scalar",
        		lv_scalar_3_0, 
        		"TypeAndValue");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getInsertElementAccess().getCommaKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInsertElementAccess().getIndexTypeAndValueParserRuleCall_5_0()); 
	    }
		lv_index_5_0=ruleTypeAndValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInsertElementRule());
	        }
       		set(
       			$current, 
       			"index",
        		lv_index_5_0, 
        		"TypeAndValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleShuffleVector
entryRuleShuffleVector returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getShuffleVectorRule()); }
	 iv_ruleShuffleVector=ruleShuffleVector 
	 { $current=$iv_ruleShuffleVector.current; } 
	 EOF 
;

// Rule ShuffleVector
ruleShuffleVector returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='shufflevector' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getShuffleVectorAccess().getShufflevectorKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getShuffleVectorAccess().getVector1TypeAndValueParserRuleCall_1_0()); 
	    }
		lv_vector1_1_0=ruleTypeAndValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getShuffleVectorRule());
	        }
       		set(
       			$current, 
       			"vector1",
        		lv_vector1_1_0, 
        		"TypeAndValue");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getShuffleVectorAccess().getCommaKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getShuffleVectorAccess().getVector2TypeAndValueParserRuleCall_3_0()); 
	    }
		lv_vector2_3_0=ruleTypeAndValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getShuffleVectorRule());
	        }
       		set(
       			$current, 
       			"vector2",
        		lv_vector2_3_0, 
        		"TypeAndValue");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getShuffleVectorAccess().getCommaKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getShuffleVectorAccess().getMaskTypeAndValueParserRuleCall_5_0()); 
	    }
		lv_mask_5_0=ruleTypeAndValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getShuffleVectorRule());
	        }
       		set(
       			$current, 
       			"mask",
        		lv_mask_5_0, 
        		"TypeAndValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleCast
entryRuleCast returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCastRule()); }
	 iv_ruleCast=ruleCast 
	 { $current=$iv_ruleCast.current; } 
	 EOF 
;

// Rule Cast
ruleCast returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCastAccess().getCAST_TYPEParserRuleCall_0()); 
    }
ruleCAST_TYPE
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCastAccess().getValueTypeAndValueParserRuleCall_1_0()); 
	    }
		lv_value_1_0=ruleTypeAndValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCastRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"TypeAndValue");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='to' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCastAccess().getToKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCastAccess().getCasttoTypeParserRuleCall_3_0()); 
	    }
		lv_castto_3_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCastRule());
	        }
       		set(
       			$current, 
       			"castto",
        		lv_castto_3_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleCAST_TYPE
entryRuleCAST_TYPE returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCAST_TYPERule()); } 
	 iv_ruleCAST_TYPE=ruleCAST_TYPE 
	 { $current=$iv_ruleCAST_TYPE.current.getText(); }  
	 EOF 
;

// Rule CAST_TYPE
ruleCAST_TYPE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='trunc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCAST_TYPEAccess().getTruncKeyword_0()); 
    }

    |
	kw='zext' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCAST_TYPEAccess().getZextKeyword_1()); 
    }

    |
	kw='sext' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCAST_TYPEAccess().getSextKeyword_2()); 
    }

    |
	kw='fptrunc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCAST_TYPEAccess().getFptruncKeyword_3()); 
    }

    |
	kw='fpext' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCAST_TYPEAccess().getFpextKeyword_4()); 
    }

    |
	kw='fptoui' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCAST_TYPEAccess().getFptouiKeyword_5()); 
    }

    |
	kw='fptosi' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCAST_TYPEAccess().getFptosiKeyword_6()); 
    }

    |
	kw='uitofp' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCAST_TYPEAccess().getUitofpKeyword_7()); 
    }

    |
	kw='sitofp' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCAST_TYPEAccess().getSitofpKeyword_8()); 
    }

    |
	kw='ptrtoint' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCAST_TYPEAccess().getPtrtointKeyword_9()); 
    }

    |
	kw='inttoptr' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCAST_TYPEAccess().getInttoptrKeyword_10()); 
    }

    |
	kw='bitcast' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCAST_TYPEAccess().getBitcastKeyword_11()); 
    }
)
    ;





// Entry rule entryRuleCompare
entryRuleCompare returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompareRule()); }
	 iv_ruleCompare=ruleCompare 
	 { $current=$iv_ruleCompare.current; } 
	 EOF 
;

// Rule Compare
ruleCompare returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='icmp' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCompareAccess().getIcmpKeyword_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getCompareAccess().getI_PREDICATESParserRuleCall_0_1()); 
    }
ruleI_PREDICATES
    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getCompareAccess().getTypeParserRuleCall_0_2()); 
    }
ruleType
    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getCompareAccess().getValuePairParserRuleCall_0_3()); 
    }
    this_ValuePair_3=ruleValuePair
    { 
        $current = $this_ValuePair_3.current; 
        afterParserOrEnumRuleCall();
    }
)
    |(	otherlv_4='fcmp' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getCompareAccess().getFcmpKeyword_1_0());
    }

    { 
        newCompositeNode(grammarAccess.getCompareAccess().getF_PREDICATESParserRuleCall_1_1()); 
    }
ruleF_PREDICATES
    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getCompareAccess().getTypeParserRuleCall_1_2()); 
    }
ruleType
    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getCompareAccess().getValuePairParserRuleCall_1_3()); 
    }
    this_ValuePair_7=ruleValuePair
    { 
        $current = $this_ValuePair_7.current; 
        afterParserOrEnumRuleCall();
    }
))
;





// Entry rule entryRuleI_PREDICATES
entryRuleI_PREDICATES returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getI_PREDICATESRule()); } 
	 iv_ruleI_PREDICATES=ruleI_PREDICATES 
	 { $current=$iv_ruleI_PREDICATES.current.getText(); }  
	 EOF 
;

// Rule I_PREDICATES
ruleI_PREDICATES returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='eq' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getI_PREDICATESAccess().getEqKeyword_0()); 
    }

    |
	kw='ne' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getI_PREDICATESAccess().getNeKeyword_1()); 
    }

    |
	kw='ugt' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getI_PREDICATESAccess().getUgtKeyword_2()); 
    }

    |
	kw='uge' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getI_PREDICATESAccess().getUgeKeyword_3()); 
    }

    |
	kw='ult' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getI_PREDICATESAccess().getUltKeyword_4()); 
    }

    |
	kw='ule' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getI_PREDICATESAccess().getUleKeyword_5()); 
    }

    |
	kw='sgt' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getI_PREDICATESAccess().getSgtKeyword_6()); 
    }

    |
	kw='sge' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getI_PREDICATESAccess().getSgeKeyword_7()); 
    }

    |
	kw='slt' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getI_PREDICATESAccess().getSltKeyword_8()); 
    }

    |
	kw='sle' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getI_PREDICATESAccess().getSleKeyword_9()); 
    }
)
    ;





// Entry rule entryRuleF_PREDICATES
entryRuleF_PREDICATES returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getF_PREDICATESRule()); } 
	 iv_ruleF_PREDICATES=ruleF_PREDICATES 
	 { $current=$iv_ruleF_PREDICATES.current.getText(); }  
	 EOF 
;

// Rule F_PREDICATES
ruleF_PREDICATES returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='false' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getF_PREDICATESAccess().getFalseKeyword_0()); 
    }

    |
	kw='oeq' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getF_PREDICATESAccess().getOeqKeyword_1()); 
    }

    |
	kw='ogt' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getF_PREDICATESAccess().getOgtKeyword_2()); 
    }

    |
	kw='oge' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getF_PREDICATESAccess().getOgeKeyword_3()); 
    }

    |
	kw='olt' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getF_PREDICATESAccess().getOltKeyword_4()); 
    }

    |
	kw='ole' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getF_PREDICATESAccess().getOleKeyword_5()); 
    }

    |
	kw='one' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getF_PREDICATESAccess().getOneKeyword_6()); 
    }

    |
	kw='ord' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getF_PREDICATESAccess().getOrdKeyword_7()); 
    }

    |
	kw='ueq' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getF_PREDICATESAccess().getUeqKeyword_8()); 
    }

    |
	kw='ugt' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getF_PREDICATESAccess().getUgtKeyword_9()); 
    }

    |
	kw='uge' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getF_PREDICATESAccess().getUgeKeyword_10()); 
    }

    |
	kw='ult' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getF_PREDICATESAccess().getUltKeyword_11()); 
    }

    |
	kw='ule' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getF_PREDICATESAccess().getUleKeyword_12()); 
    }

    |
	kw='une' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getF_PREDICATESAccess().getUneKeyword_13()); 
    }

    |
	kw='uno' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getF_PREDICATESAccess().getUnoKeyword_14()); 
    }

    |
	kw='true' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getF_PREDICATESAccess().getTrueKeyword_15()); 
    }
)
    ;





// Entry rule entryRuleARITHMETIC_OP
entryRuleARITHMETIC_OP returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getARITHMETIC_OPRule()); }
	 iv_ruleARITHMETIC_OP=ruleARITHMETIC_OP 
	 { $current=$iv_ruleARITHMETIC_OP.current; } 
	 EOF 
;

// Rule ARITHMETIC_OP
ruleARITHMETIC_OP returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='add' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getARITHMETIC_OPAccess().getAddKeyword_0_0());
    }

    |	otherlv_1='fadd' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getARITHMETIC_OPAccess().getFaddKeyword_0_1());
    }

    |	otherlv_2='sub' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getARITHMETIC_OPAccess().getSubKeyword_0_2());
    }

    |	otherlv_3='fsub' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getARITHMETIC_OPAccess().getFsubKeyword_0_3());
    }

    |	otherlv_4='mul' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getARITHMETIC_OPAccess().getMulKeyword_0_4());
    }

    |	otherlv_5='fmul' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getARITHMETIC_OPAccess().getFmulKeyword_0_5());
    }

    |	otherlv_6='udiv' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getARITHMETIC_OPAccess().getUdivKeyword_0_6());
    }

    |	otherlv_7='sdiv' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getARITHMETIC_OPAccess().getSdivKeyword_0_7());
    }

    |	otherlv_8='fdiv' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getARITHMETIC_OPAccess().getFdivKeyword_0_8());
    }

    |	otherlv_9='urem' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getARITHMETIC_OPAccess().getUremKeyword_0_9());
    }

    |	otherlv_10='srem' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getARITHMETIC_OPAccess().getSremKeyword_0_10());
    }

    |	otherlv_11='frem' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getARITHMETIC_OPAccess().getFremKeyword_0_11());
    }
)
    { 
        newCompositeNode(grammarAccess.getARITHMETIC_OPAccess().getTypeParserRuleCall_1()); 
    }
ruleType
    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getARITHMETIC_OPAccess().getValuePairParserRuleCall_2()); 
    }
    this_ValuePair_13=ruleValuePair
    { 
        $current = $this_ValuePair_13.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLOGICAL_OP
entryRuleLOGICAL_OP returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLOGICAL_OPRule()); }
	 iv_ruleLOGICAL_OP=ruleLOGICAL_OP 
	 { $current=$iv_ruleLOGICAL_OP.current; } 
	 EOF 
;

// Rule LOGICAL_OP
ruleLOGICAL_OP returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='shl' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLOGICAL_OPAccess().getShlKeyword_0_0());
    }

    |	otherlv_1='lshr' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLOGICAL_OPAccess().getLshrKeyword_0_1());
    }

    |	otherlv_2='ashr' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLOGICAL_OPAccess().getAshrKeyword_0_2());
    }

    |	otherlv_3='and' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLOGICAL_OPAccess().getAndKeyword_0_3());
    }

    |	otherlv_4='or' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getLOGICAL_OPAccess().getOrKeyword_0_4());
    }

    |	otherlv_5='xor' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getLOGICAL_OPAccess().getXorKeyword_0_5());
    }
)
    { 
        newCompositeNode(grammarAccess.getLOGICAL_OPAccess().getTypeParserRuleCall_1()); 
    }
ruleType
    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getLOGICAL_OPAccess().getValuePairParserRuleCall_2()); 
    }
    this_ValuePair_7=ruleValuePair
    { 
        $current = $this_ValuePair_7.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleInstruction
entryRuleInstruction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstructionRule()); }
	 iv_ruleInstruction=ruleInstruction 
	 { $current=$iv_ruleInstruction.current; } 
	 EOF 
;

// Rule Instruction
ruleInstruction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((	otherlv_0='volatile' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInstructionAccess().getVolatileKeyword_0_0());
    }
)?
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getLoadParserRuleCall_0_1()); 
    }
    this_Load_1=ruleLoad
    { 
        $current = $this_Load_1.current; 
        afterParserOrEnumRuleCall();
    }
)
    |((	otherlv_2='volatile' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInstructionAccess().getVolatileKeyword_1_0());
    }
)?
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getStoreParserRuleCall_1_1()); 
    }
    this_Store_3=ruleStore
    { 
        $current = $this_Store_3.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getFenceParserRuleCall_2()); 
    }
    this_Fence_4=ruleFence
    { 
        $current = $this_Fence_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getGetElementPtrParserRuleCall_3()); 
    }
    this_GetElementPtr_5=ruleGetElementPtr
    { 
        $current = $this_GetElementPtr_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getLOGICAL_OPParserRuleCall_4()); 
    }
    this_LOGICAL_OP_6=ruleLOGICAL_OP
    { 
        $current = $this_LOGICAL_OP_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getARITHMETIC_OPParserRuleCall_5()); 
    }
    this_ARITHMETIC_OP_7=ruleARITHMETIC_OP
    { 
        $current = $this_ARITHMETIC_OP_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getCompareParserRuleCall_6()); 
    }
    this_Compare_8=ruleCompare
    { 
        $current = $this_Compare_8.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getCastParserRuleCall_7()); 
    }
    this_Cast_9=ruleCast
    { 
        $current = $this_Cast_9.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getShuffleVectorParserRuleCall_8()); 
    }
    this_ShuffleVector_10=ruleShuffleVector
    { 
        $current = $this_ShuffleVector_10.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getInsertElementParserRuleCall_9()); 
    }
    this_InsertElement_11=ruleInsertElement
    { 
        $current = $this_InsertElement_11.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getExtractElementParserRuleCall_10()); 
    }
    this_ExtractElement_12=ruleExtractElement
    { 
        $current = $this_ExtractElement_12.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getInsertValueParserRuleCall_11()); 
    }
    this_InsertValue_13=ruleInsertValue
    { 
        $current = $this_InsertValue_13.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getExtractValueParserRuleCall_12()); 
    }
    this_ExtractValue_14=ruleExtractValue
    { 
        $current = $this_ExtractValue_14.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getAllocParserRuleCall_13()); 
    }
    this_Alloc_15=ruleAlloc
    { 
        $current = $this_Alloc_15.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getCmpXchgParserRuleCall_14()); 
    }
    this_CmpXchg_16=ruleCmpXchg
    { 
        $current = $this_CmpXchg_16.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getAtomicRMWParserRuleCall_15()); 
    }
    this_AtomicRMW_17=ruleAtomicRMW
    { 
        $current = $this_AtomicRMW_17.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getPHIParserRuleCall_16()); 
    }
    this_PHI_18=rulePHI
    { 
        $current = $this_PHI_18.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getSelectParserRuleCall_17()); 
    }
    this_Select_19=ruleSelect
    { 
        $current = $this_Select_19.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getCallParserRuleCall_18()); 
    }
    this_Call_20=ruleCall
    { 
        $current = $this_Call_20.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getVA_ArgParserRuleCall_19()); 
    }
    this_VA_Arg_21=ruleVA_Arg
    { 
        $current = $this_VA_Arg_21.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getLandingPadParserRuleCall_20()); 
    }
    this_LandingPad_22=ruleLandingPad
    { 
        $current = $this_LandingPad_22.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getLocalVarParserRuleCall_21()); 
    }
    this_LocalVar_23=ruleLocalVar
    { 
        $current = $this_LocalVar_23.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleIndirectBranch
entryRuleIndirectBranch returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIndirectBranchRule()); }
	 iv_ruleIndirectBranch=ruleIndirectBranch 
	 { $current=$iv_ruleIndirectBranch.current; } 
	 EOF 
;

// Rule IndirectBranch
ruleIndirectBranch returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='indirectbr' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIndirectBranchAccess().getIndirectbrKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIndirectBranchAccess().getAdressTypeAndValueParserRuleCall_1_0()); 
	    }
		lv_adress_1_0=ruleTypeAndValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIndirectBranchRule());
	        }
       		set(
       			$current, 
       			"adress",
        		lv_adress_1_0, 
        		"TypeAndValue");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIndirectBranchAccess().getCommaKeyword_2());
    }
	otherlv_3='[' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIndirectBranchAccess().getLeftSquareBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIndirectBranchAccess().getLListLabelListParserRuleCall_4_0()); 
	    }
		lv_lList_4_0=ruleLabelList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIndirectBranchRule());
	        }
       		set(
       			$current, 
       			"lList",
        		lv_lList_4_0, 
        		"LabelList");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getIndirectBranchAccess().getRightSquareBracketKeyword_5());
    }
)
;





// Entry rule entryRuleLabelList
entryRuleLabelList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLabelListRule()); }
	 iv_ruleLabelList=ruleLabelList 
	 { $current=$iv_ruleLabelList.current; } 
	 EOF 
;

// Rule LabelList
ruleLabelList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getLabelListAccess().getLabelsTypeAndValueParserRuleCall_0()); 
	    }
		lv_labels_0_0=ruleTypeAndValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLabelListRule());
	        }
       		add(
       			$current, 
       			"labels",
        		lv_labels_0_0, 
        		"TypeAndValue");
	        afterParserOrEnumRuleCall();
	    }

)
)+
;





// Entry rule entryRuleSwitch
entryRuleSwitch returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSwitchRule()); }
	 iv_ruleSwitch=ruleSwitch 
	 { $current=$iv_ruleSwitch.current; } 
	 EOF 
;

// Rule Switch
ruleSwitch returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='switch' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSwitchAccess().getSwitchKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchAccess().getValueTypeAndValueParserRuleCall_1_0()); 
	    }
		lv_value_1_0=ruleTypeAndValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"TypeAndValue");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSwitchAccess().getCommaKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchAccess().getDefaultTypeAndValueParserRuleCall_3_0()); 
	    }
		lv_default_3_0=ruleTypeAndValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchRule());
	        }
       		set(
       			$current, 
       			"default",
        		lv_default_3_0, 
        		"TypeAndValue");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='[' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSwitchAccess().getLeftSquareBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchAccess().getJTableJumpTableParserRuleCall_5_0()); 
	    }
		lv_jTable_5_0=ruleJumpTable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchRule());
	        }
       		set(
       			$current, 
       			"jTable",
        		lv_jTable_5_0, 
        		"JumpTable");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_6=']' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSwitchAccess().getRightSquareBracketKeyword_6());
    }
)
;





// Entry rule entryRuleJumpTable
entryRuleJumpTable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJumpTableRule()); }
	 iv_ruleJumpTable=ruleJumpTable 
	 { $current=$iv_ruleJumpTable.current; } 
	 EOF 
;

// Rule JumpTable
ruleJumpTable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getJumpTableAccess().getValuesTypeAndValueParserRuleCall_0_0()); 
	    }
		lv_values_0_0=ruleTypeAndValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJumpTableRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_0_0, 
        		"TypeAndValue");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getJumpTableAccess().getCommaKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJumpTableAccess().getDestinationsTypeAndValueParserRuleCall_2_0()); 
	    }
		lv_destinations_2_0=ruleTypeAndValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJumpTableRule());
	        }
       		add(
       			$current, 
       			"destinations",
        		lv_destinations_2_0, 
        		"TypeAndValue");
	        afterParserOrEnumRuleCall();
	    }

)
))+
;





// Entry rule entryRuleInvoke
entryRuleInvoke returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInvokeRule()); }
	 iv_ruleInvoke=ruleInvoke 
	 { $current=$iv_ruleInvoke.current; } 
	 EOF 
;

// Rule Invoke
ruleInvoke returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='invoke' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInvokeAccess().getInvokeKeyword_0());
    }
(
    { 
        newCompositeNode(grammarAccess.getInvokeAccess().getCallingConvParserRuleCall_1()); 
    }
ruleCallingConv
    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getInvokeAccess().getRETURN_ATTRIBUTESParserRuleCall_2()); 
    }
ruleRETURN_ATTRIBUTES
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getInvokeAccess().getFunctionTypeAndValueParserRuleCall_3_0()); 
	    }
		lv_function_3_0=ruleTypeAndValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInvokeRule());
	        }
       		set(
       			$current, 
       			"function",
        		lv_function_3_0, 
        		"TypeAndValue");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getInvokeAccess().getPListParameterListParserRuleCall_4_0()); 
	    }
		lv_pList_4_0=ruleParameterList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInvokeRule());
	        }
       		set(
       			$current, 
       			"pList",
        		lv_pList_4_0, 
        		"ParameterList");
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getInvokeAccess().getFUNCTION_ATTRIBUTESParserRuleCall_5()); 
    }
ruleFUNCTION_ATTRIBUTES
    { 
        afterParserOrEnumRuleCall();
    }
)*	otherlv_6='to' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getInvokeAccess().getToKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInvokeAccess().getToTypeAndValueParserRuleCall_7_0()); 
	    }
		lv_to_7_0=ruleTypeAndValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInvokeRule());
	        }
       		set(
       			$current, 
       			"to",
        		lv_to_7_0, 
        		"TypeAndValue");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8='unwind' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getInvokeAccess().getUnwindKeyword_8());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInvokeAccess().getUnwindTypeAndValueParserRuleCall_9_0()); 
	    }
		lv_unwind_9_0=ruleTypeAndValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInvokeRule());
	        }
       		set(
       			$current, 
       			"unwind",
        		lv_unwind_9_0, 
        		"TypeAndValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleResume
entryRuleResume returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getResumeRule()); }
	 iv_ruleResume=ruleResume 
	 { $current=$iv_ruleResume.current; } 
	 EOF 
;

// Rule Resume
ruleResume returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='resume' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getResumeAccess().getResumeKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getResumeAccess().getTypeAndValueParserRuleCall_1()); 
    }
    this_TypeAndValue_1=ruleTypeAndValue
    { 
        $current = $this_TypeAndValue_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleUnreachable
entryRuleUnreachable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnreachableRule()); }
	 iv_ruleUnreachable=ruleUnreachable 
	 { $current=$iv_ruleUnreachable.current; } 
	 EOF 
;

// Rule Unreachable
ruleUnreachable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnreachableAccess().getUnreachableAction_0(),
            $current);
    }
)	otherlv_1='unreachable' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUnreachableAccess().getUnreachableKeyword_1());
    }
)
;





// Entry rule entryRuleReturn
entryRuleReturn returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReturnRule()); }
	 iv_ruleReturn=ruleReturn 
	 { $current=$iv_ruleReturn.current; } 
	 EOF 
;

// Rule Return
ruleReturn returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getReturnAccess().getReturnAction_0_0(),
            $current);
    }
)	otherlv_1='ret' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getReturnAccess().getRetKeyword_0_1());
    }
	otherlv_2='void' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getReturnAccess().getVoidKeyword_0_2());
    }
(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getReturnAccess().getCommaKeyword_0_3_0());
    }
	otherlv_4='!dbg' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getReturnAccess().getDbgKeyword_0_3_1());
    }
	otherlv_5='!' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getReturnAccess().getExclamationMarkKeyword_0_3_2());
    }
this_INT_6=RULE_INT
    { 
    newLeafNode(this_INT_6, grammarAccess.getReturnAccess().getINTTerminalRuleCall_0_3_3()); 
    }
)?)
    |(	otherlv_7='ret' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getReturnAccess().getRetKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReturnAccess().getValueTypeAndValueParserRuleCall_1_1_0()); 
	    }
		lv_value_8_0=ruleTypeAndValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReturnRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_8_0, 
        		"TypeAndValue");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_9=',' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getReturnAccess().getCommaKeyword_1_2_0());
    }
	otherlv_10='!dbg' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getReturnAccess().getDbgKeyword_1_2_1());
    }
	otherlv_11='!' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getReturnAccess().getExclamationMarkKeyword_1_2_2());
    }
this_INT_12=RULE_INT
    { 
    newLeafNode(this_INT_12, grammarAccess.getReturnAccess().getINTTerminalRuleCall_1_2_3()); 
    }
)?))
;





// Entry rule entryRuleBranch
entryRuleBranch returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBranchRule()); }
	 iv_ruleBranch=ruleBranch 
	 { $current=$iv_ruleBranch.current; } 
	 EOF 
;

// Rule Branch
ruleBranch returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='br' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBranchAccess().getBrKeyword_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBranchAccess().getDestinationTypeAndValueParserRuleCall_0_1_0()); 
	    }
		lv_destination_1_0=ruleTypeAndValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBranchRule());
	        }
       		set(
       			$current, 
       			"destination",
        		lv_destination_1_0, 
        		"TypeAndValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_2='br' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBranchAccess().getBrKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBranchAccess().getCondTypeAndValueParserRuleCall_1_1_0()); 
	    }
		lv_cond_3_0=ruleTypeAndValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBranchRule());
	        }
       		set(
       			$current, 
       			"cond",
        		lv_cond_3_0, 
        		"TypeAndValue");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getBranchAccess().getCommaKeyword_1_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBranchAccess().getLabelTrueTypeAndValueParserRuleCall_1_3_0()); 
	    }
		lv_labelTrue_5_0=ruleTypeAndValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBranchRule());
	        }
       		set(
       			$current, 
       			"labelTrue",
        		lv_labelTrue_5_0, 
        		"TypeAndValue");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getBranchAccess().getCommaKeyword_1_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBranchAccess().getLabelFalseTypeAndValueParserRuleCall_1_5_0()); 
	    }
		lv_labelFalse_7_0=ruleTypeAndValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBranchRule());
	        }
       		set(
       			$current, 
       			"labelFalse",
        		lv_labelFalse_7_0, 
        		"TypeAndValue");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleFunctionBody
entryRuleFunctionBody returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionBodyRule()); }
	 iv_ruleFunctionBody=ruleFunctionBody 
	 { $current=$iv_ruleFunctionBody.current; } 
	 EOF 
;

// Rule FunctionBody
ruleFunctionBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionBodyAccess().getMetaMetadataValueParserRuleCall_0_0()); 
	    }
		lv_meta_0_0=ruleMetadataValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionBodyRule());
	        }
       		add(
       			$current, 
       			"meta",
        		lv_meta_0_0, 
        		"MetadataValue");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunctionBodyAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionBodyAccess().getBlocksBasicBlockParserRuleCall_2_0()); 
	    }
		lv_blocks_2_0=ruleBasicBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionBodyRule());
	        }
       		add(
       			$current, 
       			"blocks",
        		lv_blocks_2_0, 
        		"BasicBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunctionBodyAccess().getRightCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionBodyAccess().getMetaMetadataValueParserRuleCall_4_0()); 
	    }
		lv_meta_4_0=ruleMetadataValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionBodyRule());
	        }
       		add(
       			$current, 
       			"meta",
        		lv_meta_4_0, 
        		"MetadataValue");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleBasicBlock
entryRuleBasicBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBasicBlockRule()); }
	 iv_ruleBasicBlock=ruleBasicBlock 
	 { $current=$iv_ruleBasicBlock.current; } 
	 EOF 
;

// Rule BasicBlock
ruleBasicBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_label_0_0=RULE_DOTS
		{
			newLeafNode(lv_label_0_0, grammarAccess.getBasicBlockAccess().getLabelDOTSTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBasicBlockRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"label",
        		lv_label_0_0, 
        		"DOTS");
	    }

)
)?this_NOBRACKET_1=RULE_NOBRACKET
    { 
    newLeafNode(this_NOBRACKET_1, grammarAccess.getBasicBlockAccess().getNOBRACKETTerminalRuleCall_0_1()); 
    }
	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBasicBlockAccess().getColonKeyword_0_2());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getBasicBlockAccess().getInstructionsInstructionParserRuleCall_1_0()); 
	    }
		lv_instructions_3_0=ruleInstruction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasicBlockRule());
	        }
       		add(
       			$current, 
       			"instructions",
        		lv_instructions_3_0, 
        		"Instruction");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getBasicBlockAccess().getTerminatorRet_InstrParserRuleCall_2_0()); 
	    }
		lv_terminator_4_0=ruleRet_Instr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasicBlockRule());
	        }
       		set(
       			$current, 
       			"terminator",
        		lv_terminator_4_0, 
        		"Ret_Instr");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleRet_Instr
entryRuleRet_Instr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRet_InstrRule()); }
	 iv_ruleRet_Instr=ruleRet_Instr 
	 { $current=$iv_ruleRet_Instr.current; } 
	 EOF 
;

// Rule Ret_Instr
ruleRet_Instr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRet_InstrAccess().getReturnParserRuleCall_0()); 
    }
    this_Return_0=ruleReturn
    { 
        $current = $this_Return_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getRet_InstrAccess().getBranchParserRuleCall_1()); 
    }
    this_Branch_1=ruleBranch
    { 
        $current = $this_Branch_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getRet_InstrAccess().getSwitchParserRuleCall_2()); 
    }
    this_Switch_2=ruleSwitch
    { 
        $current = $this_Switch_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getRet_InstrAccess().getIndirectBranchParserRuleCall_3()); 
    }
    this_IndirectBranch_3=ruleIndirectBranch
    { 
        $current = $this_IndirectBranch_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getRet_InstrAccess().getInvokeParserRuleCall_4()); 
    }
    this_Invoke_4=ruleInvoke
    { 
        $current = $this_Invoke_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getRet_InstrAccess().getResumeParserRuleCall_5()); 
    }
    this_Resume_5=ruleResume
    { 
        $current = $this_Resume_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getRet_InstrAccess().getUnreachableParserRuleCall_6()); 
    }
    this_Unreachable_6=ruleUnreachable
    { 
        $current = $this_Unreachable_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleVISIBILITY
entryRuleVISIBILITY returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVISIBILITYRule()); } 
	 iv_ruleVISIBILITY=ruleVISIBILITY 
	 { $current=$iv_ruleVISIBILITY.current.getText(); }  
	 EOF 
;

// Rule VISIBILITY
ruleVISIBILITY returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='default' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVISIBILITYAccess().getDefaultKeyword_0()); 
    }

    |
	kw='hidden' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVISIBILITYAccess().getHiddenKeyword_1()); 
    }

    |
	kw='protected' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVISIBILITYAccess().getProtectedKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleLINKAGE
entryRuleLINKAGE returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLINKAGERule()); } 
	 iv_ruleLINKAGE=ruleLINKAGE 
	 { $current=$iv_ruleLINKAGE.current.getText(); }  
	 EOF 
;

// Rule LINKAGE
ruleLINKAGE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='private' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLINKAGEAccess().getPrivateKeyword_0()); 
    }

    |
	kw='linker_private' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLINKAGEAccess().getLinker_privateKeyword_1()); 
    }

    |
	kw='linker_private_weak' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLINKAGEAccess().getLinker_private_weakKeyword_2()); 
    }

    |
	kw='available_externally' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLINKAGEAccess().getAvailable_externallyKeyword_3()); 
    }

    |
	kw='linkonce' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLINKAGEAccess().getLinkonceKeyword_4()); 
    }

    |
	kw='common' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLINKAGEAccess().getCommonKeyword_5()); 
    }

    |
	kw='appending' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLINKAGEAccess().getAppendingKeyword_6()); 
    }

    |
	kw='extern_weak' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLINKAGEAccess().getExtern_weakKeyword_7()); 
    }

    |
	kw='linkonce_odr' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLINKAGEAccess().getLinkonce_odrKeyword_8()); 
    }

    |
	kw='linkonce_odr_auto_hide' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLINKAGEAccess().getLinkonce_odr_auto_hideKeyword_9()); 
    }

    |
	kw='dllimport' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLINKAGEAccess().getDllimportKeyword_10()); 
    }

    |
	kw='dllexport' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLINKAGEAccess().getDllexportKeyword_11()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getLINKAGEAccess().getALIAS_LINKAGEParserRuleCall_12()); 
    }
    this_ALIAS_LINKAGE_12=ruleALIAS_LINKAGE    {
		$current.merge(this_ALIAS_LINKAGE_12);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleALIAS_LINKAGE
entryRuleALIAS_LINKAGE returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getALIAS_LINKAGERule()); } 
	 iv_ruleALIAS_LINKAGE=ruleALIAS_LINKAGE 
	 { $current=$iv_ruleALIAS_LINKAGE.current.getText(); }  
	 EOF 
;

// Rule ALIAS_LINKAGE
ruleALIAS_LINKAGE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='external' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getALIAS_LINKAGEAccess().getExternalKeyword_0()); 
    }

    |
	kw='internal' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getALIAS_LINKAGEAccess().getInternalKeyword_1()); 
    }

    |
	kw='weak' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getALIAS_LINKAGEAccess().getWeakKeyword_2()); 
    }

    |
	kw='weak_odr' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getALIAS_LINKAGEAccess().getWeak_odrKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleMetadataValue
entryRuleMetadataValue returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMetadataValueRule()); } 
	 iv_ruleMetadataValue=ruleMetadataValue 
	 { $current=$iv_ruleMetadataValue.current.getText(); }  
	 EOF 
;

// Rule MetadataValue
ruleMetadataValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	kw='!' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMetadataValueAccess().getExclamationMarkKeyword_0_0_0()); 
    }
    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getMetadataValueAccess().getINTTerminalRuleCall_0_0_1()); 
    }
)
    |(
	kw='!{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMetadataValueAccess().getExclamationMarkLeftCurlyBracketKeyword_0_1_0()); 
    }
    this_NOBRACKET_3=RULE_NOBRACKET    {
		$current.merge(this_NOBRACKET_3);
    }

    { 
    newLeafNode(this_NOBRACKET_3, grammarAccess.getMetadataValueAccess().getNOBRACKETTerminalRuleCall_0_1_1()); 
    }

	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMetadataValueAccess().getRightCurlyBracketKeyword_0_1_2()); 
    }
)
    |(
	kw='!' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMetadataValueAccess().getExclamationMarkKeyword_0_2_0()); 
    }
    this_NOBRACKET_6=RULE_NOBRACKET    {
		$current.merge(this_NOBRACKET_6);
    }

    { 
    newLeafNode(this_NOBRACKET_6, grammarAccess.getMetadataValueAccess().getNOBRACKETTerminalRuleCall_0_2_1()); 
    }
))(
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMetadataValueAccess().getEqualsSignKeyword_1_0()); 
    }
((
	kw='!' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMetadataValueAccess().getExclamationMarkKeyword_1_1_0_0()); 
    }
    this_INT_9=RULE_INT    {
		$current.merge(this_INT_9);
    }

    { 
    newLeafNode(this_INT_9, grammarAccess.getMetadataValueAccess().getINTTerminalRuleCall_1_1_0_1()); 
    }
)
    |(
	kw='!{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMetadataValueAccess().getExclamationMarkLeftCurlyBracketKeyword_1_1_1_0()); 
    }
    this_NOBRACKET_11=RULE_NOBRACKET    {
		$current.merge(this_NOBRACKET_11);
    }

    { 
    newLeafNode(this_NOBRACKET_11, grammarAccess.getMetadataValueAccess().getNOBRACKETTerminalRuleCall_1_1_1_1()); 
    }

	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMetadataValueAccess().getRightCurlyBracketKeyword_1_1_1_2()); 
    }
)
    |(
	kw='!' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMetadataValueAccess().getExclamationMarkKeyword_1_1_2_0()); 
    }
    this_NOBRACKET_14=RULE_NOBRACKET    {
		$current.merge(this_NOBRACKET_14);
    }

    { 
    newLeafNode(this_NOBRACKET_14, grammarAccess.getMetadataValueAccess().getNOBRACKETTerminalRuleCall_1_1_2_1()); 
    }
)
    |(
	kw='metadata' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMetadataValueAccess().getMetadataKeyword_1_1_3_0()); 
    }
(((
	kw='!' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMetadataValueAccess().getExclamationMarkKeyword_1_1_3_1_0_0_0()); 
    }

	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMetadataValueAccess().getLeftCurlyBracketKeyword_1_1_3_1_0_0_1()); 
    }
)
    |
	kw='!{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMetadataValueAccess().getExclamationMarkLeftCurlyBracketKeyword_1_1_3_1_0_1()); 
    }
)
	kw='metadata' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMetadataValueAccess().getMetadataKeyword_1_1_3_1_1()); 
    }

	kw='!' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMetadataValueAccess().getExclamationMarkKeyword_1_1_3_1_2()); 
    }
    this_STRING_21=RULE_STRING    {
		$current.merge(this_STRING_21);
    }

    { 
    newLeafNode(this_STRING_21, grammarAccess.getMetadataValueAccess().getSTRINGTerminalRuleCall_1_1_3_1_3()); 
    }

	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMetadataValueAccess().getCommaKeyword_1_1_3_1_4()); 
    }
((
	kw='metadata' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMetadataValueAccess().getMetadataKeyword_1_1_3_1_5_0_0()); 
    }

	kw='!' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMetadataValueAccess().getExclamationMarkKeyword_1_1_3_1_5_0_1()); 
    }
    this_INT_25=RULE_INT    {
		$current.merge(this_INT_25);
    }

    { 
    newLeafNode(this_INT_25, grammarAccess.getMetadataValueAccess().getINTTerminalRuleCall_1_1_3_1_5_0_2()); 
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getMetadataValueAccess().getBASIC_TYPEParserRuleCall_1_1_3_1_5_1()); 
    }
    this_BASIC_TYPE_26=ruleBASIC_TYPE    {
		$current.merge(this_BASIC_TYPE_26);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMetadataValueAccess().getRightCurlyBracketKeyword_1_1_3_1_6()); 
    }
)?)))?)
    ;





// Entry rule entryRuleALIGNMENT
entryRuleALIGNMENT returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getALIGNMENTRule()); } 
	 iv_ruleALIGNMENT=ruleALIGNMENT 
	 { $current=$iv_ruleALIGNMENT.current.getText(); }  
	 EOF 
;

// Rule ALIGNMENT
ruleALIGNMENT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='align' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getALIGNMENTAccess().getAlignKeyword_0()); 
    }
    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getALIGNMENTAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;





RULE_DOTS : '.'*;

RULE_INTEGER : 'i' ('0'..'9')+ '*'*;

RULE_SL_COMMENT : ';' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_VAR_TYPE : (('%'|'@') '.'* (RULE_NOBRACKET|'(' RULE_NOBRACKET ')'|RULE_INT) '*'*|'('+ ('%'|'@') '.'* (RULE_NOBRACKET|'(' RULE_NOBRACKET ')'|'%' RULE_INT) '*'* ')'+ '*'*);

RULE_NOBRACKET : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')* RULE_POINT?;

RULE_POINT : '.' (RULE_NOBRACKET|'(' RULE_NOBRACKET ')');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


