/*
* generated by Xtext
*/

package de.upb.llvm_parser.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class LLVMGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class LLVMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LLVM");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsAbstractElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//LLVM:
		//
		//	elements+=AbstractElement*;
		public ParserRule getRule() { return rule; }

		//elements+=AbstractElement*
		public Assignment getElementsAssignment() { return cElementsAssignment; }

		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_0() { return cElementsAbstractElementParserRuleCall_0; }
	}

	public class NUMBERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NUMBER");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//NUMBER returns EBigDecimal:
		//
		//	"-"? INT ("." INT)?;
		public ParserRule getRule() { return rule; }

		//"-"? INT ("." INT)?
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//("." INT)?
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
	}

	public class CallingConvElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CallingConv");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCccKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFastccKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cColdccKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cX86_stdcallccKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cX86_fastcallccKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cX86_thiscallccKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cArm_apcsccKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cArm_aapcsccKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cArm_aapcs_vfpccKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cMsp430_intrccKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cPtx_kernelKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cPtx_deviceKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cSpir_funcKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cSpir_kernelKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Group cGroup_14 = (Group)cAlternatives.eContents().get(14);
		private final Keyword cCcKeyword_14_0 = (Keyword)cGroup_14.eContents().get(0);
		private final Keyword cLessThanSignKeyword_14_1 = (Keyword)cGroup_14.eContents().get(1);
		private final RuleCall cNUMBERParserRuleCall_14_2 = (RuleCall)cGroup_14.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_14_3 = (Keyword)cGroup_14.eContents().get(3);
		private final RuleCall cNUMBERParserRuleCall_14_4 = (RuleCall)cGroup_14.eContents().get(4);
		
		//CallingConv:
		//
		//	"ccc" | "fastcc" | "coldcc" | "x86_stdcallcc" | "x86_fastcallcc" | "x86_thiscallcc" | "arm_apcscc" | "arm_aapcscc" |
		//
		//	"arm_aapcs_vfpcc" | "msp430_intrcc" | "ptx_kernel" | "ptx_device" | "spir_func" | "spir_kernel" | "cc" "<" NUMBER ">"
		//
		//	NUMBER;
		public ParserRule getRule() { return rule; }

		//"ccc" | "fastcc" | "coldcc" | "x86_stdcallcc" | "x86_fastcallcc" | "x86_thiscallcc" | "arm_apcscc" | "arm_aapcscc" |
		//
		//"arm_aapcs_vfpcc" | "msp430_intrcc" | "ptx_kernel" | "ptx_device" | "spir_func" | "spir_kernel" | "cc" "<" NUMBER ">"
		//
		//NUMBER
		public Alternatives getAlternatives() { return cAlternatives; }

		//"ccc"
		public Keyword getCccKeyword_0() { return cCccKeyword_0; }

		//"fastcc"
		public Keyword getFastccKeyword_1() { return cFastccKeyword_1; }

		//"coldcc"
		public Keyword getColdccKeyword_2() { return cColdccKeyword_2; }

		//"x86_stdcallcc"
		public Keyword getX86_stdcallccKeyword_3() { return cX86_stdcallccKeyword_3; }

		//"x86_fastcallcc"
		public Keyword getX86_fastcallccKeyword_4() { return cX86_fastcallccKeyword_4; }

		//"x86_thiscallcc"
		public Keyword getX86_thiscallccKeyword_5() { return cX86_thiscallccKeyword_5; }

		//"arm_apcscc"
		public Keyword getArm_apcsccKeyword_6() { return cArm_apcsccKeyword_6; }

		//"arm_aapcscc"
		public Keyword getArm_aapcsccKeyword_7() { return cArm_aapcsccKeyword_7; }

		//"arm_aapcs_vfpcc"
		public Keyword getArm_aapcs_vfpccKeyword_8() { return cArm_aapcs_vfpccKeyword_8; }

		//"msp430_intrcc"
		public Keyword getMsp430_intrccKeyword_9() { return cMsp430_intrccKeyword_9; }

		//"ptx_kernel"
		public Keyword getPtx_kernelKeyword_10() { return cPtx_kernelKeyword_10; }

		//"ptx_device"
		public Keyword getPtx_deviceKeyword_11() { return cPtx_deviceKeyword_11; }

		//"spir_func"
		public Keyword getSpir_funcKeyword_12() { return cSpir_funcKeyword_12; }

		//"spir_kernel"
		public Keyword getSpir_kernelKeyword_13() { return cSpir_kernelKeyword_13; }

		//"cc" "<" NUMBER ">" NUMBER
		public Group getGroup_14() { return cGroup_14; }

		//"cc"
		public Keyword getCcKeyword_14_0() { return cCcKeyword_14_0; }

		//"<"
		public Keyword getLessThanSignKeyword_14_1() { return cLessThanSignKeyword_14_1; }

		//NUMBER
		public RuleCall getNUMBERParserRuleCall_14_2() { return cNUMBERParserRuleCall_14_2; }

		//">"
		public Keyword getGreaterThanSignKeyword_14_3() { return cGreaterThanSignKeyword_14_3; }

		//NUMBER
		public RuleCall getNUMBERParserRuleCall_14_4() { return cNUMBERParserRuleCall_14_4; }
	}

	public class FUNCTION_ATTRIBUTESElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FUNCTION_ATTRIBUTES");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAddress_safetyKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cAlignstackKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cNUMBERParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Keyword cGreaterThanSignKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Keyword cAlwaysinlineKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cNonlazybindKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cInlinehintKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cNakedKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cNoimplicitfloatKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cNoinlineKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cNoredzoneKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cNoreturnKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cNounwindKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cOptsizeKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cReadnoneKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cReadonlyKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cReturns_twiceKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cSspKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cSspreqKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cUwtableKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		
		//FUNCTION_ATTRIBUTES:
		//
		//	"address_safety" | "alignstack" "(" "<" NUMBER ">" ")" | "alwaysinline" | "nonlazybind" | "inlinehint" | "naked" |
		//
		//	"noimplicitfloat" | "noinline" | "noredzone" | "noreturn" | "nounwind" | "optsize" | "readnone" | "readonly" |
		//
		//	"returns_twice" | "ssp" | "sspreq" | "uwtable";
		public ParserRule getRule() { return rule; }

		//"address_safety" | "alignstack" "(" "<" NUMBER ">" ")" | "alwaysinline" | "nonlazybind" | "inlinehint" | "naked" |
		//
		//"noimplicitfloat" | "noinline" | "noredzone" | "noreturn" | "nounwind" | "optsize" | "readnone" | "readonly" |
		//
		//"returns_twice" | "ssp" | "sspreq" | "uwtable"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"address_safety"
		public Keyword getAddress_safetyKeyword_0() { return cAddress_safetyKeyword_0; }

		//"alignstack" "(" "<" NUMBER ">" ")"
		public Group getGroup_1() { return cGroup_1; }

		//"alignstack"
		public Keyword getAlignstackKeyword_1_0() { return cAlignstackKeyword_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//"<"
		public Keyword getLessThanSignKeyword_1_2() { return cLessThanSignKeyword_1_2; }

		//NUMBER
		public RuleCall getNUMBERParserRuleCall_1_3() { return cNUMBERParserRuleCall_1_3; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_4() { return cGreaterThanSignKeyword_1_4; }

		//")"
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }

		//"alwaysinline"
		public Keyword getAlwaysinlineKeyword_2() { return cAlwaysinlineKeyword_2; }

		//"nonlazybind"
		public Keyword getNonlazybindKeyword_3() { return cNonlazybindKeyword_3; }

		//"inlinehint"
		public Keyword getInlinehintKeyword_4() { return cInlinehintKeyword_4; }

		//"naked"
		public Keyword getNakedKeyword_5() { return cNakedKeyword_5; }

		//"noimplicitfloat"
		public Keyword getNoimplicitfloatKeyword_6() { return cNoimplicitfloatKeyword_6; }

		//"noinline"
		public Keyword getNoinlineKeyword_7() { return cNoinlineKeyword_7; }

		//"noredzone"
		public Keyword getNoredzoneKeyword_8() { return cNoredzoneKeyword_8; }

		//"noreturn"
		public Keyword getNoreturnKeyword_9() { return cNoreturnKeyword_9; }

		//"nounwind"
		public Keyword getNounwindKeyword_10() { return cNounwindKeyword_10; }

		//"optsize"
		public Keyword getOptsizeKeyword_11() { return cOptsizeKeyword_11; }

		//"readnone"
		public Keyword getReadnoneKeyword_12() { return cReadnoneKeyword_12; }

		//"readonly"
		public Keyword getReadonlyKeyword_13() { return cReadonlyKeyword_13; }

		//"returns_twice"
		public Keyword getReturns_twiceKeyword_14() { return cReturns_twiceKeyword_14; }

		//"ssp"
		public Keyword getSspKeyword_15() { return cSspKeyword_15; }

		//"sspreq"
		public Keyword getSspreqKeyword_16() { return cSspreqKeyword_16; }

		//"uwtable"
		public Keyword getUwtableKeyword_17() { return cUwtableKeyword_17; }
	}

	public class KEYWORDSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "KEYWORDS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cALIAS_LINKAGETerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cATOMIC_ORDERINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBIN_OPTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRETURN_ATTRIBUTESTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCAST_OPTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cI_PREDICATESTerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cVISIBILITYTerminalRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cLINKAGETerminalRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//KEYWORDS:
		//
		//	ALIAS_LINKAGE | ATOMIC_ORDERING | BIN_OP | RETURN_ATTRIBUTES | CAST_OP | I_PREDICATES | VISIBILITY | LINKAGE;
		public ParserRule getRule() { return rule; }

		//ALIAS_LINKAGE | ATOMIC_ORDERING | BIN_OP | RETURN_ATTRIBUTES | CAST_OP | I_PREDICATES | VISIBILITY | LINKAGE
		public Alternatives getAlternatives() { return cAlternatives; }

		//ALIAS_LINKAGE
		public RuleCall getALIAS_LINKAGETerminalRuleCall_0() { return cALIAS_LINKAGETerminalRuleCall_0; }

		//ATOMIC_ORDERING
		public RuleCall getATOMIC_ORDERINGTerminalRuleCall_1() { return cATOMIC_ORDERINGTerminalRuleCall_1; }

		//BIN_OP
		public RuleCall getBIN_OPTerminalRuleCall_2() { return cBIN_OPTerminalRuleCall_2; }

		//RETURN_ATTRIBUTES
		public RuleCall getRETURN_ATTRIBUTESTerminalRuleCall_3() { return cRETURN_ATTRIBUTESTerminalRuleCall_3; }

		//CAST_OP
		public RuleCall getCAST_OPTerminalRuleCall_4() { return cCAST_OPTerminalRuleCall_4; }

		//I_PREDICATES
		public RuleCall getI_PREDICATESTerminalRuleCall_5() { return cI_PREDICATESTerminalRuleCall_5; }

		//VISIBILITY
		public RuleCall getVISIBILITYTerminalRuleCall_6() { return cVISIBILITYTerminalRuleCall_6; }

		//LINKAGE
		public RuleCall getLINKAGETerminalRuleCall_7() { return cLINKAGETerminalRuleCall_7; }
	}

	public class LABEL_IDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LABEL_ID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cKEYWORDSParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cINT_TYPETerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cBOOLTerminalRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final Keyword cCatchKeyword_0_4 = (Keyword)cAlternatives_0.eContents().get(4);
		private final Keyword cInvokeKeyword_0_5 = (Keyword)cAlternatives_0.eContents().get(5);
		private final Keyword cResumeKeyword_0_6 = (Keyword)cAlternatives_0.eContents().get(6);
		private final Keyword cSwitchKeyword_0_7 = (Keyword)cAlternatives_0.eContents().get(7);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final RuleCall cKEYWORDSParserRuleCall_1_1_0 = (RuleCall)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cINT_TYPETerminalRuleCall_1_1_1 = (RuleCall)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_1_2 = (RuleCall)cAlternatives_1_1.eContents().get(2);
		private final RuleCall cBOOLTerminalRuleCall_1_1_3 = (RuleCall)cAlternatives_1_1.eContents().get(3);
		private final Keyword cCatchKeyword_1_1_4 = (Keyword)cAlternatives_1_1.eContents().get(4);
		private final Keyword cInvokeKeyword_1_1_5 = (Keyword)cAlternatives_1_1.eContents().get(5);
		private final Keyword cResumeKeyword_1_1_6 = (Keyword)cAlternatives_1_1.eContents().get(6);
		private final Keyword cSwitchKeyword_1_1_7 = (Keyword)cAlternatives_1_1.eContents().get(7);
		
		//LABEL_ID:
		//
		//	(KEYWORDS | INT_TYPE | ID | BOOL | "catch" | "invoke" | "resume" | "switch") ("." (KEYWORDS | INT_TYPE | ID | BOOL |
		//
		//	"catch" | "invoke" | "resume" | "switch"))*;
		public ParserRule getRule() { return rule; }

		//(KEYWORDS | INT_TYPE | ID | BOOL | "catch" | "invoke" | "resume" | "switch") ("." (KEYWORDS | INT_TYPE | ID | BOOL |
		//
		//"catch" | "invoke" | "resume" | "switch"))*
		public Group getGroup() { return cGroup; }

		//KEYWORDS | INT_TYPE | ID | BOOL | "catch" | "invoke" | "resume" | "switch"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//KEYWORDS
		public RuleCall getKEYWORDSParserRuleCall_0_0() { return cKEYWORDSParserRuleCall_0_0; }

		//INT_TYPE
		public RuleCall getINT_TYPETerminalRuleCall_0_1() { return cINT_TYPETerminalRuleCall_0_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_0_2() { return cIDTerminalRuleCall_0_2; }

		//BOOL
		public RuleCall getBOOLTerminalRuleCall_0_3() { return cBOOLTerminalRuleCall_0_3; }

		//"catch"
		public Keyword getCatchKeyword_0_4() { return cCatchKeyword_0_4; }

		//"invoke"
		public Keyword getInvokeKeyword_0_5() { return cInvokeKeyword_0_5; }

		//"resume"
		public Keyword getResumeKeyword_0_6() { return cResumeKeyword_0_6; }

		//"switch"
		public Keyword getSwitchKeyword_0_7() { return cSwitchKeyword_0_7; }

		//("." (KEYWORDS | INT_TYPE | ID | BOOL | "catch" | "invoke" | "resume" | "switch"))*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//KEYWORDS | INT_TYPE | ID | BOOL | "catch" | "invoke" | "resume" | "switch"
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//KEYWORDS
		public RuleCall getKEYWORDSParserRuleCall_1_1_0() { return cKEYWORDSParserRuleCall_1_1_0; }

		//INT_TYPE
		public RuleCall getINT_TYPETerminalRuleCall_1_1_1() { return cINT_TYPETerminalRuleCall_1_1_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1_2() { return cIDTerminalRuleCall_1_1_2; }

		//BOOL
		public RuleCall getBOOLTerminalRuleCall_1_1_3() { return cBOOLTerminalRuleCall_1_1_3; }

		//"catch"
		public Keyword getCatchKeyword_1_1_4() { return cCatchKeyword_1_1_4; }

		//"invoke"
		public Keyword getInvokeKeyword_1_1_5() { return cInvokeKeyword_1_1_5; }

		//"resume"
		public Keyword getResumeKeyword_1_1_6() { return cResumeKeyword_1_1_6; }

		//"switch"
		public Keyword getSwitchKeyword_1_1_7() { return cSwitchKeyword_1_1_7; }
	}

	public class AbstractElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cTopLevelEntityParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cSL_COMMENTTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cMainLevelEntityParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cSL_COMMENTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//AbstractElement:
		//
		//	TopLevelEntity SL_COMMENT? | MainLevelEntity SL_COMMENT?;
		public ParserRule getRule() { return rule; }

		//TopLevelEntity SL_COMMENT? | MainLevelEntity SL_COMMENT?
		public Alternatives getAlternatives() { return cAlternatives; }

		//TopLevelEntity SL_COMMENT?
		public Group getGroup_0() { return cGroup_0; }

		//TopLevelEntity
		public RuleCall getTopLevelEntityParserRuleCall_0_0() { return cTopLevelEntityParserRuleCall_0_0; }

		//SL_COMMENT?
		public RuleCall getSL_COMMENTTerminalRuleCall_0_1() { return cSL_COMMENTTerminalRuleCall_0_1; }

		//MainLevelEntity SL_COMMENT?
		public Group getGroup_1() { return cGroup_1; }

		//MainLevelEntity
		public RuleCall getMainLevelEntityParserRuleCall_1_0() { return cMainLevelEntityParserRuleCall_1_0; }

		//SL_COMMENT?
		public RuleCall getSL_COMMENTTerminalRuleCall_1_1() { return cSL_COMMENTTerminalRuleCall_1_1; }
	}

	public class TopLevelEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TopLevelEntity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cModuleKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cAsmKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cModuleAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cModuleSTRINGTerminalRuleCall_0_2_0 = (RuleCall)cModuleAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cTargetKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cDatalayoutKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cTripleKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cTargetAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cTargetSTRINGTerminalRuleCall_1_3_0 = (RuleCall)cTargetAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cDeplibsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cLibsAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cLibsSTRINGTerminalRuleCall_2_3_0 = (RuleCall)cLibsAssignment_2_3.eContents().get(0);
		private final Group cGroup_2_4 = (Group)cGroup_2.eContents().get(4);
		private final Keyword cCommaKeyword_2_4_0 = (Keyword)cGroup_2_4.eContents().get(0);
		private final Assignment cLibsAssignment_2_4_1 = (Assignment)cGroup_2_4.eContents().get(1);
		private final RuleCall cLibsSTRINGTerminalRuleCall_2_4_1_0 = (RuleCall)cLibsAssignment_2_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		
		//TopLevelEntity:
		//
		//	"module" "asm" module=STRING | "target" ("datalayout" | "triple") "=" target=STRING | "deplibs" "=" "[" libs+=STRING
		//
		//	("," libs+=STRING)* "]";
		public ParserRule getRule() { return rule; }

		//"module" "asm" module=STRING | "target" ("datalayout" | "triple") "=" target=STRING | "deplibs" "=" "[" libs+=STRING
		//
		//("," libs+=STRING)* "]"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"module" "asm" module=STRING
		public Group getGroup_0() { return cGroup_0; }

		//"module"
		public Keyword getModuleKeyword_0_0() { return cModuleKeyword_0_0; }

		//"asm"
		public Keyword getAsmKeyword_0_1() { return cAsmKeyword_0_1; }

		//module=STRING
		public Assignment getModuleAssignment_0_2() { return cModuleAssignment_0_2; }

		//STRING
		public RuleCall getModuleSTRINGTerminalRuleCall_0_2_0() { return cModuleSTRINGTerminalRuleCall_0_2_0; }

		//"target" ("datalayout" | "triple") "=" target=STRING
		public Group getGroup_1() { return cGroup_1; }

		//"target"
		public Keyword getTargetKeyword_1_0() { return cTargetKeyword_1_0; }

		//"datalayout" | "triple"
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//"datalayout"
		public Keyword getDatalayoutKeyword_1_1_0() { return cDatalayoutKeyword_1_1_0; }

		//"triple"
		public Keyword getTripleKeyword_1_1_1() { return cTripleKeyword_1_1_1; }

		//"="
		public Keyword getEqualsSignKeyword_1_2() { return cEqualsSignKeyword_1_2; }

		//target=STRING
		public Assignment getTargetAssignment_1_3() { return cTargetAssignment_1_3; }

		//STRING
		public RuleCall getTargetSTRINGTerminalRuleCall_1_3_0() { return cTargetSTRINGTerminalRuleCall_1_3_0; }

		//"deplibs" "=" "[" libs+=STRING ("," libs+=STRING)* "]"
		public Group getGroup_2() { return cGroup_2; }

		//"deplibs"
		public Keyword getDeplibsKeyword_2_0() { return cDeplibsKeyword_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1() { return cEqualsSignKeyword_2_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_2() { return cLeftSquareBracketKeyword_2_2; }

		//libs+=STRING
		public Assignment getLibsAssignment_2_3() { return cLibsAssignment_2_3; }

		//STRING
		public RuleCall getLibsSTRINGTerminalRuleCall_2_3_0() { return cLibsSTRINGTerminalRuleCall_2_3_0; }

		//("," libs+=STRING)*
		public Group getGroup_2_4() { return cGroup_2_4; }

		//","
		public Keyword getCommaKeyword_2_4_0() { return cCommaKeyword_2_4_0; }

		//libs+=STRING
		public Assignment getLibsAssignment_2_4_1() { return cLibsAssignment_2_4_1; }

		//STRING
		public RuleCall getLibsSTRINGTerminalRuleCall_2_4_1_0() { return cLibsSTRINGTerminalRuleCall_2_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_5() { return cRightSquareBracketKeyword_2_5; }
	}

	public class MainLevelEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MainLevelEntity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGlobalDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFunctionDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAliasDefinitionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMetadataValueParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		/// *
		//
		// * This rule is used to devide the Function Definitions form the Variable Definitions.
		//
		// * / MainLevelEntity:
		//
		//	TypeDefinition | GlobalDefinition | FunctionDefinition | AliasDefinition | MetadataValue;
		public ParserRule getRule() { return rule; }

		//TypeDefinition | GlobalDefinition | FunctionDefinition | AliasDefinition | MetadataValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//TypeDefinition
		public RuleCall getTypeDefinitionParserRuleCall_0() { return cTypeDefinitionParserRuleCall_0; }

		//GlobalDefinition
		public RuleCall getGlobalDefinitionParserRuleCall_1() { return cGlobalDefinitionParserRuleCall_1; }

		//FunctionDefinition
		public RuleCall getFunctionDefinitionParserRuleCall_2() { return cFunctionDefinitionParserRuleCall_2; }

		//AliasDefinition
		public RuleCall getAliasDefinitionParserRuleCall_3() { return cAliasDefinitionParserRuleCall_3; }

		//MetadataValue
		public RuleCall getMetadataValueParserRuleCall_4() { return cMetadataValueParserRuleCall_4; }
	}

	public class TypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAddressAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAddressAddressParserRuleCall_0_0 = (RuleCall)cAddressAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cTypeKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Assignment cStructAssignment_2_1_0 = (Assignment)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cStructStructureParserRuleCall_2_1_0_0 = (RuleCall)cStructAssignment_2_1_0.eContents().get(0);
		private final Keyword cOpaqueKeyword_2_1_1 = (Keyword)cAlternatives_2_1.eContents().get(1);
		
		////| METADATA;
		//
		//TypeDefinition:
		//
		//	address=Address "=" ("type" (struct=Structure | "opaque"));
		public ParserRule getRule() { return rule; }

		//address=Address "=" ("type" (struct=Structure | "opaque"))
		public Group getGroup() { return cGroup; }

		//address=Address
		public Assignment getAddressAssignment_0() { return cAddressAssignment_0; }

		//Address
		public RuleCall getAddressAddressParserRuleCall_0_0() { return cAddressAddressParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"type" (struct=Structure | "opaque")
		public Group getGroup_2() { return cGroup_2; }

		//"type"
		public Keyword getTypeKeyword_2_0() { return cTypeKeyword_2_0; }

		//struct=Structure | "opaque"
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }

		//struct=Structure
		public Assignment getStructAssignment_2_1_0() { return cStructAssignment_2_1_0; }

		//Structure
		public RuleCall getStructStructureParserRuleCall_2_1_0_0() { return cStructStructureParserRuleCall_2_1_0_0; }

		//"opaque"
		public Keyword getOpaqueKeyword_2_1_1() { return cOpaqueKeyword_2_1_1; }
	}

	public class GlobalDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GlobalDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAdressAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAdressAddressParserRuleCall_0_0 = (RuleCall)cAdressAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cLINKAGETerminalRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cALIAS_LINKAGETerminalRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		private final Keyword cGlobalKeyword_2_2 = (Keyword)cAlternatives_2.eContents().get(2);
		private final Keyword cUnnamed_addrKeyword_2_3 = (Keyword)cAlternatives_2.eContents().get(3);
		private final Keyword cConstantKeyword_2_4 = (Keyword)cAlternatives_2.eContents().get(4);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cTypeAlternatives_3_0 = (Alternatives)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeTypeUseParserRuleCall_3_0_0 = (RuleCall)cTypeAlternatives_3_0.eContents().get(0);
		private final RuleCall cTypeAggregate_TypesParserRuleCall_3_0_1 = (RuleCall)cTypeAlternatives_3_0.eContents().get(1);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cValueAlternatives_4_0 = (Alternatives)cValueAssignment_4.eContents().get(0);
		private final RuleCall cValueValueStructParserRuleCall_4_0_0 = (RuleCall)cValueAlternatives_4_0.eContents().get(0);
		private final RuleCall cValueValueParserRuleCall_4_0_1 = (RuleCall)cValueAlternatives_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cAlignKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cAlignAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cAlignNUMBERParserRuleCall_5_2_0 = (RuleCall)cAlignAssignment_5_2.eContents().get(0);
		
		//GlobalDefinition:
		//
		//	adress=Address "=" (LINKAGE | ALIAS_LINKAGE | "global" | "unnamed_addr" | "constant")* type=(TypeUse |
		//
		//	Aggregate_Types) value=(ValueStruct | Value)? ("," "align" align=NUMBER)?;
		public ParserRule getRule() { return rule; }

		//adress=Address "=" (LINKAGE | ALIAS_LINKAGE | "global" | "unnamed_addr" | "constant")* type=(TypeUse | Aggregate_Types)
		//
		//value=(ValueStruct | Value)? ("," "align" align=NUMBER)?
		public Group getGroup() { return cGroup; }

		//adress=Address
		public Assignment getAdressAssignment_0() { return cAdressAssignment_0; }

		//Address
		public RuleCall getAdressAddressParserRuleCall_0_0() { return cAdressAddressParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//(LINKAGE | ALIAS_LINKAGE | "global" | "unnamed_addr" | "constant")*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//LINKAGE
		public RuleCall getLINKAGETerminalRuleCall_2_0() { return cLINKAGETerminalRuleCall_2_0; }

		//ALIAS_LINKAGE
		public RuleCall getALIAS_LINKAGETerminalRuleCall_2_1() { return cALIAS_LINKAGETerminalRuleCall_2_1; }

		//"global"
		public Keyword getGlobalKeyword_2_2() { return cGlobalKeyword_2_2; }

		//"unnamed_addr"
		public Keyword getUnnamed_addrKeyword_2_3() { return cUnnamed_addrKeyword_2_3; }

		//"constant"
		public Keyword getConstantKeyword_2_4() { return cConstantKeyword_2_4; }

		//type=(TypeUse | Aggregate_Types)
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//TypeUse | Aggregate_Types
		public Alternatives getTypeAlternatives_3_0() { return cTypeAlternatives_3_0; }

		//TypeUse
		public RuleCall getTypeTypeUseParserRuleCall_3_0_0() { return cTypeTypeUseParserRuleCall_3_0_0; }

		//Aggregate_Types
		public RuleCall getTypeAggregate_TypesParserRuleCall_3_0_1() { return cTypeAggregate_TypesParserRuleCall_3_0_1; }

		//value=(ValueStruct | Value)?
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }

		//ValueStruct | Value
		public Alternatives getValueAlternatives_4_0() { return cValueAlternatives_4_0; }

		//ValueStruct
		public RuleCall getValueValueStructParserRuleCall_4_0_0() { return cValueValueStructParserRuleCall_4_0_0; }

		//Value
		public RuleCall getValueValueParserRuleCall_4_0_1() { return cValueValueParserRuleCall_4_0_1; }

		//("," "align" align=NUMBER)?
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//"align"
		public Keyword getAlignKeyword_5_1() { return cAlignKeyword_5_1; }

		//align=NUMBER
		public Assignment getAlignAssignment_5_2() { return cAlignAssignment_5_2; }

		//NUMBER
		public RuleCall getAlignNUMBERParserRuleCall_5_2_0() { return cAlignNUMBERParserRuleCall_5_2_0; }
	}

	public class FunctionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cDefineKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final RuleCall cLINKAGETerminalRuleCall_0_1_0 = (RuleCall)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cALIAS_LINKAGETerminalRuleCall_0_1_1 = (RuleCall)cAlternatives_0_1.eContents().get(1);
		private final RuleCall cVISIBILITYTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cCallingConvParserRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final RuleCall cRETURN_ATTRIBUTESTerminalRuleCall_0_4 = (RuleCall)cGroup_0.eContents().get(4);
		private final Assignment cReturnTypeAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cReturnTypeTypeUseParserRuleCall_0_5_0 = (RuleCall)cReturnTypeAssignment_0_5.eContents().get(0);
		private final Assignment cAddressAssignment_0_6 = (Assignment)cGroup_0.eContents().get(6);
		private final RuleCall cAddressAddressParserRuleCall_0_6_0 = (RuleCall)cAddressAssignment_0_6.eContents().get(0);
		private final Assignment cParameterAssignment_0_7 = (Assignment)cGroup_0.eContents().get(7);
		private final RuleCall cParameterFunctionParameterListParserRuleCall_0_7_0 = (RuleCall)cParameterAssignment_0_7.eContents().get(0);
		private final Keyword cUnnamed_addrKeyword_0_8 = (Keyword)cGroup_0.eContents().get(8);
		private final RuleCall cFUNCTION_ATTRIBUTESParserRuleCall_0_9 = (RuleCall)cGroup_0.eContents().get(9);
		private final Group cGroup_0_10 = (Group)cGroup_0.eContents().get(10);
		private final Keyword cSectionKeyword_0_10_0 = (Keyword)cGroup_0_10.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_0_10_1 = (RuleCall)cGroup_0_10.eContents().get(1);
		private final Group cGroup_0_11 = (Group)cGroup_0.eContents().get(11);
		private final Keyword cAlignKeyword_0_11_0 = (Keyword)cGroup_0_11.eContents().get(0);
		private final Assignment cAlignAssignment_0_11_1 = (Assignment)cGroup_0_11.eContents().get(1);
		private final RuleCall cAlignNUMBERParserRuleCall_0_11_1_0 = (RuleCall)cAlignAssignment_0_11_1.eContents().get(0);
		private final Assignment cBodyAssignment_0_12 = (Assignment)cGroup_0.eContents().get(12);
		private final RuleCall cBodyFunctionBodyParserRuleCall_0_12_0 = (RuleCall)cBodyAssignment_0_12.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cDeclareKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final RuleCall cLINKAGETerminalRuleCall_1_1_0 = (RuleCall)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cALIAS_LINKAGETerminalRuleCall_1_1_1 = (RuleCall)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cVISIBILITYTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final RuleCall cCallingConvParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final RuleCall cRETURN_ATTRIBUTESTerminalRuleCall_1_4 = (RuleCall)cGroup_1.eContents().get(4);
		private final Assignment cReturnTypeAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cReturnTypeTypeUseParserRuleCall_1_5_0 = (RuleCall)cReturnTypeAssignment_1_5.eContents().get(0);
		private final Assignment cAddressAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cAddressAddressParserRuleCall_1_6_0 = (RuleCall)cAddressAssignment_1_6.eContents().get(0);
		private final Assignment cParameterAssignment_1_7 = (Assignment)cGroup_1.eContents().get(7);
		private final RuleCall cParameterFunctionParameterListParserRuleCall_1_7_0 = (RuleCall)cParameterAssignment_1_7.eContents().get(0);
		private final Keyword cUnnamed_addrKeyword_1_8 = (Keyword)cGroup_1.eContents().get(8);
		private final RuleCall cFUNCTION_ATTRIBUTESParserRuleCall_1_9 = (RuleCall)cGroup_1.eContents().get(9);
		private final Group cGroup_1_10 = (Group)cGroup_1.eContents().get(10);
		private final Keyword cSectionKeyword_1_10_0 = (Keyword)cGroup_1_10.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1_10_1 = (RuleCall)cGroup_1_10.eContents().get(1);
		private final Group cGroup_1_11 = (Group)cGroup_1.eContents().get(11);
		private final Keyword cAlignKeyword_1_11_0 = (Keyword)cGroup_1_11.eContents().get(0);
		private final Assignment cAlignAssignment_1_11_1 = (Assignment)cGroup_1_11.eContents().get(1);
		private final RuleCall cAlignNUMBERParserRuleCall_1_11_1_0 = (RuleCall)cAlignAssignment_1_11_1.eContents().get(0);
		
		//FunctionDefinition:
		//
		//	"define" (LINKAGE | ALIAS_LINKAGE)? VISIBILITY? CallingConv? RETURN_ATTRIBUTES? returnType=TypeUse address=Address
		//
		//	parameter=FunctionParameterList "unnamed_addr"? FUNCTION_ATTRIBUTES* ("section " STRING)? ("align" align=NUMBER)?
		//
		//	body=FunctionBody | "declare" (LINKAGE | ALIAS_LINKAGE)? VISIBILITY? CallingConv? RETURN_ATTRIBUTES?
		//
		//	returnType=TypeUse address=Address parameter=FunctionParameterList "unnamed_addr"? FUNCTION_ATTRIBUTES* ("section "
		//
		//	STRING)? ("align" align=NUMBER)?;
		public ParserRule getRule() { return rule; }

		//"define" (LINKAGE | ALIAS_LINKAGE)? VISIBILITY? CallingConv? RETURN_ATTRIBUTES? returnType=TypeUse address=Address
		//
		//parameter=FunctionParameterList "unnamed_addr"? FUNCTION_ATTRIBUTES* ("section " STRING)? ("align" align=NUMBER)?
		//
		//body=FunctionBody | "declare" (LINKAGE | ALIAS_LINKAGE)? VISIBILITY? CallingConv? RETURN_ATTRIBUTES?
		//
		//returnType=TypeUse address=Address parameter=FunctionParameterList "unnamed_addr"? FUNCTION_ATTRIBUTES* ("section "
		//
		//STRING)? ("align" align=NUMBER)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//"define" (LINKAGE | ALIAS_LINKAGE)? VISIBILITY? CallingConv? RETURN_ATTRIBUTES? returnType=TypeUse address=Address
		//
		//parameter=FunctionParameterList "unnamed_addr"? FUNCTION_ATTRIBUTES* ("section " STRING)? ("align" align=NUMBER)?
		//
		//body=FunctionBody
		public Group getGroup_0() { return cGroup_0; }

		//"define"
		public Keyword getDefineKeyword_0_0() { return cDefineKeyword_0_0; }

		//(LINKAGE | ALIAS_LINKAGE)?
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }

		//LINKAGE
		public RuleCall getLINKAGETerminalRuleCall_0_1_0() { return cLINKAGETerminalRuleCall_0_1_0; }

		//ALIAS_LINKAGE
		public RuleCall getALIAS_LINKAGETerminalRuleCall_0_1_1() { return cALIAS_LINKAGETerminalRuleCall_0_1_1; }

		//VISIBILITY?
		public RuleCall getVISIBILITYTerminalRuleCall_0_2() { return cVISIBILITYTerminalRuleCall_0_2; }

		//CallingConv?
		public RuleCall getCallingConvParserRuleCall_0_3() { return cCallingConvParserRuleCall_0_3; }

		//RETURN_ATTRIBUTES?
		public RuleCall getRETURN_ATTRIBUTESTerminalRuleCall_0_4() { return cRETURN_ATTRIBUTESTerminalRuleCall_0_4; }

		//returnType=TypeUse
		public Assignment getReturnTypeAssignment_0_5() { return cReturnTypeAssignment_0_5; }

		//TypeUse
		public RuleCall getReturnTypeTypeUseParserRuleCall_0_5_0() { return cReturnTypeTypeUseParserRuleCall_0_5_0; }

		//address=Address
		public Assignment getAddressAssignment_0_6() { return cAddressAssignment_0_6; }

		//Address
		public RuleCall getAddressAddressParserRuleCall_0_6_0() { return cAddressAddressParserRuleCall_0_6_0; }

		//parameter=FunctionParameterList
		public Assignment getParameterAssignment_0_7() { return cParameterAssignment_0_7; }

		//FunctionParameterList
		public RuleCall getParameterFunctionParameterListParserRuleCall_0_7_0() { return cParameterFunctionParameterListParserRuleCall_0_7_0; }

		//"unnamed_addr"?
		public Keyword getUnnamed_addrKeyword_0_8() { return cUnnamed_addrKeyword_0_8; }

		//FUNCTION_ATTRIBUTES*
		public RuleCall getFUNCTION_ATTRIBUTESParserRuleCall_0_9() { return cFUNCTION_ATTRIBUTESParserRuleCall_0_9; }

		//("section " STRING)?
		public Group getGroup_0_10() { return cGroup_0_10; }

		//"section "
		public Keyword getSectionKeyword_0_10_0() { return cSectionKeyword_0_10_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0_10_1() { return cSTRINGTerminalRuleCall_0_10_1; }

		//("align" align=NUMBER)?
		public Group getGroup_0_11() { return cGroup_0_11; }

		//"align"
		public Keyword getAlignKeyword_0_11_0() { return cAlignKeyword_0_11_0; }

		//align=NUMBER
		public Assignment getAlignAssignment_0_11_1() { return cAlignAssignment_0_11_1; }

		//NUMBER
		public RuleCall getAlignNUMBERParserRuleCall_0_11_1_0() { return cAlignNUMBERParserRuleCall_0_11_1_0; }

		//body=FunctionBody
		public Assignment getBodyAssignment_0_12() { return cBodyAssignment_0_12; }

		//FunctionBody
		public RuleCall getBodyFunctionBodyParserRuleCall_0_12_0() { return cBodyFunctionBodyParserRuleCall_0_12_0; }

		//"declare" (LINKAGE | ALIAS_LINKAGE)? VISIBILITY? CallingConv? RETURN_ATTRIBUTES? returnType=TypeUse address=Address
		//
		//parameter=FunctionParameterList "unnamed_addr"? FUNCTION_ATTRIBUTES* ("section " STRING)? ("align" align=NUMBER)?
		public Group getGroup_1() { return cGroup_1; }

		//"declare"
		public Keyword getDeclareKeyword_1_0() { return cDeclareKeyword_1_0; }

		//(LINKAGE | ALIAS_LINKAGE)?
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//LINKAGE
		public RuleCall getLINKAGETerminalRuleCall_1_1_0() { return cLINKAGETerminalRuleCall_1_1_0; }

		//ALIAS_LINKAGE
		public RuleCall getALIAS_LINKAGETerminalRuleCall_1_1_1() { return cALIAS_LINKAGETerminalRuleCall_1_1_1; }

		//VISIBILITY?
		public RuleCall getVISIBILITYTerminalRuleCall_1_2() { return cVISIBILITYTerminalRuleCall_1_2; }

		//CallingConv?
		public RuleCall getCallingConvParserRuleCall_1_3() { return cCallingConvParserRuleCall_1_3; }

		//RETURN_ATTRIBUTES?
		public RuleCall getRETURN_ATTRIBUTESTerminalRuleCall_1_4() { return cRETURN_ATTRIBUTESTerminalRuleCall_1_4; }

		//returnType=TypeUse
		public Assignment getReturnTypeAssignment_1_5() { return cReturnTypeAssignment_1_5; }

		//TypeUse
		public RuleCall getReturnTypeTypeUseParserRuleCall_1_5_0() { return cReturnTypeTypeUseParserRuleCall_1_5_0; }

		//address=Address
		public Assignment getAddressAssignment_1_6() { return cAddressAssignment_1_6; }

		//Address
		public RuleCall getAddressAddressParserRuleCall_1_6_0() { return cAddressAddressParserRuleCall_1_6_0; }

		//parameter=FunctionParameterList
		public Assignment getParameterAssignment_1_7() { return cParameterAssignment_1_7; }

		//FunctionParameterList
		public RuleCall getParameterFunctionParameterListParserRuleCall_1_7_0() { return cParameterFunctionParameterListParserRuleCall_1_7_0; }

		//"unnamed_addr"?
		public Keyword getUnnamed_addrKeyword_1_8() { return cUnnamed_addrKeyword_1_8; }

		//FUNCTION_ATTRIBUTES*
		public RuleCall getFUNCTION_ATTRIBUTESParserRuleCall_1_9() { return cFUNCTION_ATTRIBUTESParserRuleCall_1_9; }

		//("section " STRING)?
		public Group getGroup_1_10() { return cGroup_1_10; }

		//"section "
		public Keyword getSectionKeyword_1_10_0() { return cSectionKeyword_1_10_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_10_1() { return cSTRINGTerminalRuleCall_1_10_1; }

		//("align" align=NUMBER)?
		public Group getGroup_1_11() { return cGroup_1_11; }

		//"align"
		public Keyword getAlignKeyword_1_11_0() { return cAlignKeyword_1_11_0; }

		//align=NUMBER
		public Assignment getAlignAssignment_1_11_1() { return cAlignAssignment_1_11_1; }

		//NUMBER
		public RuleCall getAlignNUMBERParserRuleCall_1_11_1_0() { return cAlignNUMBERParserRuleCall_1_11_1_0; }
	}

	public class AliasDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AliasDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAddressAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAddressAddressParserRuleCall_0_0 = (RuleCall)cAddressAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAliasKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cALIAS_LINKAGETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cVISIBILITYTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cAliastypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAliastypeTypeUseParserRuleCall_5_0 = (RuleCall)cAliastypeAssignment_5.eContents().get(0);
		private final Assignment cAliasvalueAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAliasvalueValueParserRuleCall_6_0 = (RuleCall)cAliasvalueAssignment_6.eContents().get(0);
		private final Assignment cAliaseeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cAliaseeTypeUseParserRuleCall_7_0 = (RuleCall)cAliaseeAssignment_7.eContents().get(0);
		
		//AliasDefinition:
		//
		//	address=Address "=" "alias" ALIAS_LINKAGE? VISIBILITY? aliastype=TypeUse aliasvalue=Value aliasee=TypeUse;
		public ParserRule getRule() { return rule; }

		//address=Address "=" "alias" ALIAS_LINKAGE? VISIBILITY? aliastype=TypeUse aliasvalue=Value aliasee=TypeUse
		public Group getGroup() { return cGroup; }

		//address=Address
		public Assignment getAddressAssignment_0() { return cAddressAssignment_0; }

		//Address
		public RuleCall getAddressAddressParserRuleCall_0_0() { return cAddressAddressParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"alias"
		public Keyword getAliasKeyword_2() { return cAliasKeyword_2; }

		//ALIAS_LINKAGE?
		public RuleCall getALIAS_LINKAGETerminalRuleCall_3() { return cALIAS_LINKAGETerminalRuleCall_3; }

		//VISIBILITY?
		public RuleCall getVISIBILITYTerminalRuleCall_4() { return cVISIBILITYTerminalRuleCall_4; }

		//aliastype=TypeUse
		public Assignment getAliastypeAssignment_5() { return cAliastypeAssignment_5; }

		//TypeUse
		public RuleCall getAliastypeTypeUseParserRuleCall_5_0() { return cAliastypeTypeUseParserRuleCall_5_0; }

		//aliasvalue=Value
		public Assignment getAliasvalueAssignment_6() { return cAliasvalueAssignment_6; }

		//Value
		public RuleCall getAliasvalueValueParserRuleCall_6_0() { return cAliasvalueValueParserRuleCall_6_0; }

		//aliasee=TypeUse
		public Assignment getAliaseeAssignment_7() { return cAliaseeAssignment_7; }

		//TypeUse
		public RuleCall getAliaseeTypeUseParserRuleCall_7_0() { return cAliaseeTypeUseParserRuleCall_7_0; }
	}

	public class TypeUseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeUse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cPredefinedParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cAddressUseParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Assignment cFunctionInputAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunctionInputUNKNOWN_TYPETerminalRuleCall_1_0 = (RuleCall)cFunctionInputAssignment_1.eContents().get(0);
		
		//TypeUse:
		//
		//	(Predefined | AddressUse) / *('()*')? OREST?)* / functionInput=UNKNOWN_TYPE?;
		public ParserRule getRule() { return rule; }

		//(Predefined | AddressUse) / *('()*')? OREST?)* / functionInput=UNKNOWN_TYPE?
		public Group getGroup() { return cGroup; }

		//Predefined | AddressUse
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//Predefined
		public RuleCall getPredefinedParserRuleCall_0_0() { return cPredefinedParserRuleCall_0_0; }

		//AddressUse
		public RuleCall getAddressUseParserRuleCall_0_1() { return cAddressUseParserRuleCall_0_1; }

		/// *('()*')? OREST?)* / functionInput=UNKNOWN_TYPE?
		public Assignment getFunctionInputAssignment_1() { return cFunctionInputAssignment_1; }

		//UNKNOWN_TYPE
		public RuleCall getFunctionInputUNKNOWN_TYPETerminalRuleCall_1_0() { return cFunctionInputUNKNOWN_TYPETerminalRuleCall_1_0; }
	}

	public class AddressUseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AddressUse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAddressAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cAddressAddressCrossReference_0_0 = (CrossReference)cAddressAssignment_0.eContents().get(0);
		private final RuleCall cAddressAddressVALID_IDTerminalRuleCall_0_0_1 = (RuleCall)cAddressAddressCrossReference_0_0.eContents().get(1);
		private final Assignment cPointerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPointerPOINTERTerminalRuleCall_1_0 = (RuleCall)cPointerAssignment_1.eContents().get(0);
		
		//AddressUse:
		//
		//	address=[Address|VALID_ID] pointer=POINTER?;
		public ParserRule getRule() { return rule; }

		//address=[Address|VALID_ID] pointer=POINTER?
		public Group getGroup() { return cGroup; }

		//address=[Address|VALID_ID]
		public Assignment getAddressAssignment_0() { return cAddressAssignment_0; }

		//[Address|VALID_ID]
		public CrossReference getAddressAddressCrossReference_0_0() { return cAddressAddressCrossReference_0_0; }

		//VALID_ID
		public RuleCall getAddressAddressVALID_IDTerminalRuleCall_0_0_1() { return cAddressAddressVALID_IDTerminalRuleCall_0_0_1; }

		//pointer=POINTER?
		public Assignment getPointerAssignment_1() { return cPointerAssignment_1; }

		//POINTER
		public RuleCall getPointerPOINTERTerminalRuleCall_1_0() { return cPointerPOINTERTerminalRuleCall_1_0; }
	}

	public class AddressElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Address");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameVALID_IDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Address:
		//
		//	name=VALID_ID;
		public ParserRule getRule() { return rule; }

		//name=VALID_ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//VALID_ID
		public RuleCall getNameVALID_IDTerminalRuleCall_0() { return cNameVALID_IDTerminalRuleCall_0; }
	}

	public class PredefinedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Predefined");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cTypeAlternatives_0_0 = (Alternatives)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypePRIMITIVE_VALUETerminalRuleCall_0_0_0 = (RuleCall)cTypeAlternatives_0_0.eContents().get(0);
		private final RuleCall cTypeINT_TYPETerminalRuleCall_0_0_1 = (RuleCall)cTypeAlternatives_0_0.eContents().get(1);
		private final RuleCall cTypeFLOATING_POINT_TYPETerminalRuleCall_0_0_2 = (RuleCall)cTypeAlternatives_0_0.eContents().get(2);
		private final Assignment cPointerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPointerPOINTERTerminalRuleCall_1_0 = (RuleCall)cPointerAssignment_1.eContents().get(0);
		
		//Predefined:
		//
		//	type=(PRIMITIVE_VALUE | INT_TYPE | FLOATING_POINT_TYPE) pointer=POINTER?;
		public ParserRule getRule() { return rule; }

		//type=(PRIMITIVE_VALUE | INT_TYPE | FLOATING_POINT_TYPE) pointer=POINTER?
		public Group getGroup() { return cGroup; }

		//type=(PRIMITIVE_VALUE | INT_TYPE | FLOATING_POINT_TYPE)
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//PRIMITIVE_VALUE | INT_TYPE | FLOATING_POINT_TYPE
		public Alternatives getTypeAlternatives_0_0() { return cTypeAlternatives_0_0; }

		//PRIMITIVE_VALUE
		public RuleCall getTypePRIMITIVE_VALUETerminalRuleCall_0_0_0() { return cTypePRIMITIVE_VALUETerminalRuleCall_0_0_0; }

		//INT_TYPE
		public RuleCall getTypeINT_TYPETerminalRuleCall_0_0_1() { return cTypeINT_TYPETerminalRuleCall_0_0_1; }

		//FLOATING_POINT_TYPE
		public RuleCall getTypeFLOATING_POINT_TYPETerminalRuleCall_0_0_2() { return cTypeFLOATING_POINT_TYPETerminalRuleCall_0_0_2; }

		//pointer=POINTER?
		public Assignment getPointerAssignment_1() { return cPointerAssignment_1; }

		//POINTER
		public RuleCall getPointerPOINTERTerminalRuleCall_1_0() { return cPointerPOINTERTerminalRuleCall_1_0; }
	}

	public class VectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Vector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLengthAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLengthNUMBERParserRuleCall_1_0 = (RuleCall)cLengthAssignment_1.eContents().get(0);
		private final Keyword cXKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeUseParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Vector:
		//
		//	"<" length=NUMBER "x" type=TypeUse ">";
		public ParserRule getRule() { return rule; }

		//"<" length=NUMBER "x" type=TypeUse ">"
		public Group getGroup() { return cGroup; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//length=NUMBER
		public Assignment getLengthAssignment_1() { return cLengthAssignment_1; }

		//NUMBER
		public RuleCall getLengthNUMBERParserRuleCall_1_0() { return cLengthNUMBERParserRuleCall_1_0; }

		//"x"
		public Keyword getXKeyword_2() { return cXKeyword_2; }

		//type=TypeUse
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//TypeUse
		public RuleCall getTypeTypeUseParserRuleCall_3_0() { return cTypeTypeUseParserRuleCall_3_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
	}

	public class ArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Array");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArrayAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cLengthAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cLengthNUMBERParserRuleCall_1_0_1_0 = (RuleCall)cLengthAssignment_1_0_1.eContents().get(0);
		private final Keyword cXKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Assignment cTypeAssignment_1_0_3 = (Assignment)cGroup_1_0.eContents().get(3);
		private final RuleCall cTypeTypeUseParserRuleCall_1_0_3_0 = (RuleCall)cTypeAssignment_1_0_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_0_4 = (Keyword)cGroup_1_0.eContents().get(4);
		private final Keyword cLeftSquareBracketRightSquareBracketKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final RuleCall cPOINTERTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Array:
		//
		//	{Array} ("[" length=NUMBER "x" type=TypeUse "]" | "[]" | "[" "]") POINTER?;
		public ParserRule getRule() { return rule; }

		//{Array} ("[" length=NUMBER "x" type=TypeUse "]" | "[]" | "[" "]") POINTER?
		public Group getGroup() { return cGroup; }

		//{Array}
		public Action getArrayAction_0() { return cArrayAction_0; }

		//"[" length=NUMBER "x" type=TypeUse "]" | "[]" | "[" "]"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"[" length=NUMBER "x" type=TypeUse "]"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0_0() { return cLeftSquareBracketKeyword_1_0_0; }

		//length=NUMBER
		public Assignment getLengthAssignment_1_0_1() { return cLengthAssignment_1_0_1; }

		//NUMBER
		public RuleCall getLengthNUMBERParserRuleCall_1_0_1_0() { return cLengthNUMBERParserRuleCall_1_0_1_0; }

		//"x"
		public Keyword getXKeyword_1_0_2() { return cXKeyword_1_0_2; }

		//type=TypeUse
		public Assignment getTypeAssignment_1_0_3() { return cTypeAssignment_1_0_3; }

		//TypeUse
		public RuleCall getTypeTypeUseParserRuleCall_1_0_3_0() { return cTypeTypeUseParserRuleCall_1_0_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_0_4() { return cRightSquareBracketKeyword_1_0_4; }

		//"[]"
		public Keyword getLeftSquareBracketRightSquareBracketKeyword_1_1() { return cLeftSquareBracketRightSquareBracketKeyword_1_1; }

		//"[" "]"
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_2_0() { return cLeftSquareBracketKeyword_1_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2_1() { return cRightSquareBracketKeyword_1_2_1; }

		//POINTER?
		public RuleCall getPOINTERTerminalRuleCall_2() { return cPOINTERTerminalRuleCall_2; }
	}

	public class Aggregate_TypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Aggregate_Types");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStructureParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArrayParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVectorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Aggregate_Types:
		//
		//	Structure | Array | Vector;
		public ParserRule getRule() { return rule; }

		//Structure | Array | Vector
		public Alternatives getAlternatives() { return cAlternatives; }

		//Structure
		public RuleCall getStructureParserRuleCall_0() { return cStructureParserRuleCall_0; }

		//Array
		public RuleCall getArrayParserRuleCall_1() { return cArrayParserRuleCall_1; }

		//Vector
		public RuleCall getVectorParserRuleCall_2() { return cVectorParserRuleCall_2; }
	}

	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constant");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueNUMBERParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Constant:
		//
		//	value=NUMBER;
		public ParserRule getRule() { return rule; }

		//value=NUMBER
		public Assignment getValueAssignment() { return cValueAssignment; }

		//NUMBER
		public RuleCall getValueNUMBERParserRuleCall_0() { return cValueNUMBERParserRuleCall_0; }
	}

	public class PrimitiveValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_0 = (RuleCall)cValueAlternatives_0.eContents().get(0);
		private final RuleCall cValuePRIMITIVE_VALUETerminalRuleCall_0_1 = (RuleCall)cValueAlternatives_0.eContents().get(1);
		private final RuleCall cValueINITIALIZERTerminalRuleCall_0_2 = (RuleCall)cValueAlternatives_0.eContents().get(2);
		private final RuleCall cValueBOOLTerminalRuleCall_0_3 = (RuleCall)cValueAlternatives_0.eContents().get(3);
		
		//PrimitiveValue:
		//
		//	value=(STRING | PRIMITIVE_VALUE | INITIALIZER | BOOL);
		public ParserRule getRule() { return rule; }

		//value=(STRING | PRIMITIVE_VALUE | INITIALIZER | BOOL)
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING | PRIMITIVE_VALUE | INITIALIZER | BOOL
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_0() { return cValueSTRINGTerminalRuleCall_0_0; }

		//PRIMITIVE_VALUE
		public RuleCall getValuePRIMITIVE_VALUETerminalRuleCall_0_1() { return cValuePRIMITIVE_VALUETerminalRuleCall_0_1; }

		//INITIALIZER
		public RuleCall getValueINITIALIZERTerminalRuleCall_0_2() { return cValueINITIALIZERTerminalRuleCall_0_2; }

		//BOOL
		public RuleCall getValueBOOLTerminalRuleCall_0_3() { return cValueBOOLTerminalRuleCall_0_3; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNestedCastParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNestedGetElementPtrParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConstantParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAddressUseParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPrimitiveValueParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Value:
		//
		//	NestedCast | NestedGetElementPtr | Constant | AddressUse | PrimitiveValue;
		public ParserRule getRule() { return rule; }

		//NestedCast | NestedGetElementPtr | Constant | AddressUse | PrimitiveValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//NestedCast
		public RuleCall getNestedCastParserRuleCall_0() { return cNestedCastParserRuleCall_0; }

		//NestedGetElementPtr
		public RuleCall getNestedGetElementPtrParserRuleCall_1() { return cNestedGetElementPtrParserRuleCall_1; }

		//Constant
		public RuleCall getConstantParserRuleCall_2() { return cConstantParserRuleCall_2; }

		//AddressUse
		public RuleCall getAddressUseParserRuleCall_3() { return cAddressUseParserRuleCall_3; }

		//PrimitiveValue
		public RuleCall getPrimitiveValueParserRuleCall_4() { return cPrimitiveValueParserRuleCall_4; }
	}

	public class ValueStructElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueStruct");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypesTypeUseParserRuleCall_1_0 = (RuleCall)cTypesAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypesTypeUseParserRuleCall_3_1_0 = (RuleCall)cTypesAssignment_3_1.eContents().get(0);
		private final Assignment cValueAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_3_2_0 = (RuleCall)cValueAssignment_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ValueStruct:
		//
		//	"{" types+=TypeUse value+=Value ("," types+=TypeUse value+=Value)* "}";
		public ParserRule getRule() { return rule; }

		//"{" types+=TypeUse value+=Value ("," types+=TypeUse value+=Value)* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//types+=TypeUse
		public Assignment getTypesAssignment_1() { return cTypesAssignment_1; }

		//TypeUse
		public RuleCall getTypesTypeUseParserRuleCall_1_0() { return cTypesTypeUseParserRuleCall_1_0; }

		//value+=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }

		//("," types+=TypeUse value+=Value)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//types+=TypeUse
		public Assignment getTypesAssignment_3_1() { return cTypesAssignment_3_1; }

		//TypeUse
		public RuleCall getTypesTypeUseParserRuleCall_3_1_0() { return cTypesTypeUseParserRuleCall_3_1_0; }

		//value+=Value
		public Assignment getValueAssignment_3_2() { return cValueAssignment_3_2; }

		//Value
		public RuleCall getValueValueParserRuleCall_3_2_0() { return cValueValueParserRuleCall_3_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class StructureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Structure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStructureAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cTypesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cTypesTypeUseParserRuleCall_2_0_0 = (RuleCall)cTypesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cTypesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final Alternatives cTypesAlternatives_2_1_1_0 = (Alternatives)cTypesAssignment_2_1_1.eContents().get(0);
		private final RuleCall cTypesTypeUseParserRuleCall_2_1_1_0_0 = (RuleCall)cTypesAlternatives_2_1_1_0.eContents().get(0);
		private final RuleCall cTypesAggregate_TypesParserRuleCall_2_1_1_0_1 = (RuleCall)cTypesAlternatives_2_1_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cPOINTERTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Structure:
		//
		//	{Structure} "{" (types+=TypeUse ("," types+=(TypeUse | Aggregate_Types))*)? "}" POINTER?;
		public ParserRule getRule() { return rule; }

		//{Structure} "{" (types+=TypeUse ("," types+=(TypeUse | Aggregate_Types))*)? "}" POINTER?
		public Group getGroup() { return cGroup; }

		//{Structure}
		public Action getStructureAction_0() { return cStructureAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(types+=TypeUse ("," types+=(TypeUse | Aggregate_Types))*)?
		public Group getGroup_2() { return cGroup_2; }

		//types+=TypeUse
		public Assignment getTypesAssignment_2_0() { return cTypesAssignment_2_0; }

		//TypeUse
		public RuleCall getTypesTypeUseParserRuleCall_2_0_0() { return cTypesTypeUseParserRuleCall_2_0_0; }

		//("," types+=(TypeUse | Aggregate_Types))*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//types+=(TypeUse | Aggregate_Types)
		public Assignment getTypesAssignment_2_1_1() { return cTypesAssignment_2_1_1; }

		//TypeUse | Aggregate_Types
		public Alternatives getTypesAlternatives_2_1_1_0() { return cTypesAlternatives_2_1_1_0; }

		//TypeUse
		public RuleCall getTypesTypeUseParserRuleCall_2_1_1_0_0() { return cTypesTypeUseParserRuleCall_2_1_1_0_0; }

		//Aggregate_Types
		public RuleCall getTypesAggregate_TypesParserRuleCall_2_1_1_0_1() { return cTypesAggregate_TypesParserRuleCall_2_1_1_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }

		//POINTER?
		public RuleCall getPOINTERTerminalRuleCall_4() { return cPOINTERTerminalRuleCall_4; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeUseParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cRETURN_ATTRIBUTESTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Parameter:
		//
		//	type=TypeUse RETURN_ATTRIBUTES* value=Value?;
		public ParserRule getRule() { return rule; }

		//type=TypeUse RETURN_ATTRIBUTES* value=Value?
		public Group getGroup() { return cGroup; }

		//type=TypeUse
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//TypeUse
		public RuleCall getTypeTypeUseParserRuleCall_0_0() { return cTypeTypeUseParserRuleCall_0_0; }

		//RETURN_ATTRIBUTES*
		public RuleCall getRETURN_ATTRIBUTESTerminalRuleCall_1() { return cRETURN_ATTRIBUTESTerminalRuleCall_1; }

		//value=Value?
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }
	}

	public class ParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterListAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Assignment cParamsAssignment_1_1_1_0 = (Assignment)cGroup_1_1_1.eContents().get(0);
		private final RuleCall cParamsParameterParserRuleCall_1_1_1_0_0 = (RuleCall)cParamsAssignment_1_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1_1 = (Group)cGroup_1_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_1_0 = (Keyword)cGroup_1_1_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_1_1_1_1 = (Assignment)cGroup_1_1_1_1.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_1_1_1_1_1_0 = (RuleCall)cParamsAssignment_1_1_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//ParameterList:
		//
		//	{ParameterList} ("()" | "(" (params+=Parameter ("," params+=Parameter)*)? ")");
		public ParserRule getRule() { return rule; }

		//{ParameterList} ("()" | "(" (params+=Parameter ("," params+=Parameter)*)? ")")
		public Group getGroup() { return cGroup; }

		//{ParameterList}
		public Action getParameterListAction_0() { return cParameterListAction_0; }

		//"()" | "(" (params+=Parameter ("," params+=Parameter)*)? ")"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"()"
		public Keyword getLeftParenthesisRightParenthesisKeyword_1_0() { return cLeftParenthesisRightParenthesisKeyword_1_0; }

		//"(" (params+=Parameter ("," params+=Parameter)*)? ")"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }

		//(params+=Parameter ("," params+=Parameter)*)?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//params+=Parameter
		public Assignment getParamsAssignment_1_1_1_0() { return cParamsAssignment_1_1_1_0; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_1_1_1_0_0() { return cParamsParameterParserRuleCall_1_1_1_0_0; }

		//("," params+=Parameter)*
		public Group getGroup_1_1_1_1() { return cGroup_1_1_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_1_1_0() { return cCommaKeyword_1_1_1_1_0; }

		//params+=Parameter
		public Assignment getParamsAssignment_1_1_1_1_1() { return cParamsAssignment_1_1_1_1_1; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_1_1_1_1_1_0() { return cParamsParameterParserRuleCall_1_1_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1_2() { return cRightParenthesisKeyword_1_1_2; }
	}

	public class FunctionParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeUseParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cRETURN_ATTRIBUTESTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueAddressParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//FunctionParameter:
		//
		//	type=TypeUse RETURN_ATTRIBUTES* value=Address?;
		public ParserRule getRule() { return rule; }

		//type=TypeUse RETURN_ATTRIBUTES* value=Address?
		public Group getGroup() { return cGroup; }

		//type=TypeUse
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//TypeUse
		public RuleCall getTypeTypeUseParserRuleCall_0_0() { return cTypeTypeUseParserRuleCall_0_0; }

		//RETURN_ATTRIBUTES*
		public RuleCall getRETURN_ATTRIBUTESTerminalRuleCall_1() { return cRETURN_ATTRIBUTESTerminalRuleCall_1; }

		//value=Address?
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Address
		public RuleCall getValueAddressParserRuleCall_2_0() { return cValueAddressParserRuleCall_2_0; }
	}

	public class FunctionParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionParameterListAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Assignment cParamsAssignment_1_1_1_0 = (Assignment)cGroup_1_1_1.eContents().get(0);
		private final RuleCall cParamsFunctionParameterParserRuleCall_1_1_1_0_0 = (RuleCall)cParamsAssignment_1_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1_1 = (Group)cGroup_1_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_1_0 = (Keyword)cGroup_1_1_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_1_1_1_1 = (Assignment)cGroup_1_1_1_1.eContents().get(1);
		private final RuleCall cParamsFunctionParameterParserRuleCall_1_1_1_1_1_0 = (RuleCall)cParamsAssignment_1_1_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//FunctionParameterList:
		//
		//	{FunctionParameterList} ("()" | "(" (params+=FunctionParameter ("," params+=FunctionParameter)*)? ")");
		public ParserRule getRule() { return rule; }

		//{FunctionParameterList} ("()" | "(" (params+=FunctionParameter ("," params+=FunctionParameter)*)? ")")
		public Group getGroup() { return cGroup; }

		//{FunctionParameterList}
		public Action getFunctionParameterListAction_0() { return cFunctionParameterListAction_0; }

		//"()" | "(" (params+=FunctionParameter ("," params+=FunctionParameter)*)? ")"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"()"
		public Keyword getLeftParenthesisRightParenthesisKeyword_1_0() { return cLeftParenthesisRightParenthesisKeyword_1_0; }

		//"(" (params+=FunctionParameter ("," params+=FunctionParameter)*)? ")"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }

		//(params+=FunctionParameter ("," params+=FunctionParameter)*)?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//params+=FunctionParameter
		public Assignment getParamsAssignment_1_1_1_0() { return cParamsAssignment_1_1_1_0; }

		//FunctionParameter
		public RuleCall getParamsFunctionParameterParserRuleCall_1_1_1_0_0() { return cParamsFunctionParameterParserRuleCall_1_1_1_0_0; }

		//("," params+=FunctionParameter)*
		public Group getGroup_1_1_1_1() { return cGroup_1_1_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_1_1_0() { return cCommaKeyword_1_1_1_1_0; }

		//params+=FunctionParameter
		public Assignment getParamsAssignment_1_1_1_1_1() { return cParamsAssignment_1_1_1_1_1; }

		//FunctionParameter
		public RuleCall getParamsFunctionParameterParserRuleCall_1_1_1_1_1_0() { return cParamsFunctionParameterParserRuleCall_1_1_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1_2() { return cRightParenthesisKeyword_1_1_2; }
	}

	public class TypeListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypeListAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Assignment cTypesAssignment_1_1_1_0 = (Assignment)cGroup_1_1_1.eContents().get(0);
		private final RuleCall cTypesTypeUseParserRuleCall_1_1_1_0_0 = (RuleCall)cTypesAssignment_1_1_1_0.eContents().get(0);
		private final Assignment cTypelistsAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cTypelistsTypeListParserRuleCall_1_1_1_1_0 = (RuleCall)cTypelistsAssignment_1_1_1_1.eContents().get(0);
		private final RuleCall cRETURN_ATTRIBUTESTerminalRuleCall_1_1_1_2 = (RuleCall)cGroup_1_1_1.eContents().get(2);
		private final Group cGroup_1_1_1_3 = (Group)cGroup_1_1_1.eContents().get(3);
		private final Keyword cCommaKeyword_1_1_1_3_0 = (Keyword)cGroup_1_1_1_3.eContents().get(0);
		private final Assignment cTypesAssignment_1_1_1_3_1 = (Assignment)cGroup_1_1_1_3.eContents().get(1);
		private final RuleCall cTypesTypeUseParserRuleCall_1_1_1_3_1_0 = (RuleCall)cTypesAssignment_1_1_1_3_1.eContents().get(0);
		private final Assignment cTypelistsAssignment_1_1_1_3_2 = (Assignment)cGroup_1_1_1_3.eContents().get(2);
		private final RuleCall cTypelistsTypeListParserRuleCall_1_1_1_3_2_0 = (RuleCall)cTypelistsAssignment_1_1_1_3_2.eContents().get(0);
		private final RuleCall cRETURN_ATTRIBUTESTerminalRuleCall_1_1_1_3_3 = (RuleCall)cGroup_1_1_1_3.eContents().get(3);
		private final Alternatives cAlternatives_1_1_2 = (Alternatives)cGroup_1_1.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_1_1_2_0 = (Keyword)cAlternatives_1_1_2.eContents().get(0);
		private final Keyword cRightParenthesisAsteriskKeyword_1_1_2_1 = (Keyword)cAlternatives_1_1_2.eContents().get(1);
		private final Keyword cRightParenthesisAsteriskAsteriskKeyword_1_1_2_2 = (Keyword)cAlternatives_1_1_2.eContents().get(2);
		private final Keyword cRightParenthesisAsteriskAsteriskAsteriskKeyword_1_1_2_3 = (Keyword)cAlternatives_1_1_2.eContents().get(3);
		private final Keyword cRightParenthesisAsteriskAsteriskAsteriskAsteriskKeyword_1_1_2_4 = (Keyword)cAlternatives_1_1_2.eContents().get(4);
		private final Keyword cRightParenthesisAsteriskAsteriskAsteriskAsteriskAsteriskKeyword_1_1_2_5 = (Keyword)cAlternatives_1_1_2.eContents().get(5);
		
		//TypeList:
		//
		//	{TypeList} ("()" | "(" (types+=TypeUse typelists+=TypeList? RETURN_ATTRIBUTES? ("," types+=TypeUse
		//
		//	typelists+=TypeList? RETURN_ATTRIBUTES?)*)? (")" | ")*" | ")**" | ")***" | ")****" | ")*****"));
		public ParserRule getRule() { return rule; }

		//{TypeList} ("()" | "(" (types+=TypeUse typelists+=TypeList? RETURN_ATTRIBUTES? ("," types+=TypeUse typelists+=TypeList?
		//
		//RETURN_ATTRIBUTES?)*)? (")" | ")*" | ")**" | ")***" | ")****" | ")*****"))
		public Group getGroup() { return cGroup; }

		//{TypeList}
		public Action getTypeListAction_0() { return cTypeListAction_0; }

		//"()" | "(" (types+=TypeUse typelists+=TypeList? RETURN_ATTRIBUTES? ("," types+=TypeUse typelists+=TypeList?
		//
		//RETURN_ATTRIBUTES?)*)? (")" | ")*" | ")**" | ")***" | ")****" | ")*****")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"()"
		public Keyword getLeftParenthesisRightParenthesisKeyword_1_0() { return cLeftParenthesisRightParenthesisKeyword_1_0; }

		//"(" (types+=TypeUse typelists+=TypeList? RETURN_ATTRIBUTES? ("," types+=TypeUse typelists+=TypeList?
		//
		//RETURN_ATTRIBUTES?)*)? (")" | ")*" | ")**" | ")***" | ")****" | ")*****")
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }

		//(types+=TypeUse typelists+=TypeList? RETURN_ATTRIBUTES? ("," types+=TypeUse typelists+=TypeList? RETURN_ATTRIBUTES?)*)?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//types+=TypeUse
		public Assignment getTypesAssignment_1_1_1_0() { return cTypesAssignment_1_1_1_0; }

		//TypeUse
		public RuleCall getTypesTypeUseParserRuleCall_1_1_1_0_0() { return cTypesTypeUseParserRuleCall_1_1_1_0_0; }

		//typelists+=TypeList?
		public Assignment getTypelistsAssignment_1_1_1_1() { return cTypelistsAssignment_1_1_1_1; }

		//TypeList
		public RuleCall getTypelistsTypeListParserRuleCall_1_1_1_1_0() { return cTypelistsTypeListParserRuleCall_1_1_1_1_0; }

		//RETURN_ATTRIBUTES?
		public RuleCall getRETURN_ATTRIBUTESTerminalRuleCall_1_1_1_2() { return cRETURN_ATTRIBUTESTerminalRuleCall_1_1_1_2; }

		//("," types+=TypeUse typelists+=TypeList? RETURN_ATTRIBUTES?)*
		public Group getGroup_1_1_1_3() { return cGroup_1_1_1_3; }

		//","
		public Keyword getCommaKeyword_1_1_1_3_0() { return cCommaKeyword_1_1_1_3_0; }

		//types+=TypeUse
		public Assignment getTypesAssignment_1_1_1_3_1() { return cTypesAssignment_1_1_1_3_1; }

		//TypeUse
		public RuleCall getTypesTypeUseParserRuleCall_1_1_1_3_1_0() { return cTypesTypeUseParserRuleCall_1_1_1_3_1_0; }

		//typelists+=TypeList?
		public Assignment getTypelistsAssignment_1_1_1_3_2() { return cTypelistsAssignment_1_1_1_3_2; }

		//TypeList
		public RuleCall getTypelistsTypeListParserRuleCall_1_1_1_3_2_0() { return cTypelistsTypeListParserRuleCall_1_1_1_3_2_0; }

		//RETURN_ATTRIBUTES?
		public RuleCall getRETURN_ATTRIBUTESTerminalRuleCall_1_1_1_3_3() { return cRETURN_ATTRIBUTESTerminalRuleCall_1_1_1_3_3; }

		//")" | ")*" | ")**" | ")***" | ")****" | ")*****"
		public Alternatives getAlternatives_1_1_2() { return cAlternatives_1_1_2; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1_2_0() { return cRightParenthesisKeyword_1_1_2_0; }

		//")*"
		public Keyword getRightParenthesisAsteriskKeyword_1_1_2_1() { return cRightParenthesisAsteriskKeyword_1_1_2_1; }

		//")**"
		public Keyword getRightParenthesisAsteriskAsteriskKeyword_1_1_2_2() { return cRightParenthesisAsteriskAsteriskKeyword_1_1_2_2; }

		//")***"
		public Keyword getRightParenthesisAsteriskAsteriskAsteriskKeyword_1_1_2_3() { return cRightParenthesisAsteriskAsteriskAsteriskKeyword_1_1_2_3; }

		//")****"
		public Keyword getRightParenthesisAsteriskAsteriskAsteriskAsteriskKeyword_1_1_2_4() { return cRightParenthesisAsteriskAsteriskAsteriskAsteriskKeyword_1_1_2_4; }

		//")*****"
		public Keyword getRightParenthesisAsteriskAsteriskAsteriskAsteriskAsteriskKeyword_1_1_2_5() { return cRightParenthesisAsteriskAsteriskAsteriskAsteriskAsteriskKeyword_1_1_2_5; }
	}

	public class FunctionBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMetaAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMetaMetadataValueParserRuleCall_0_0 = (RuleCall)cMetaAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBlocksAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlocksBasicBlockParserRuleCall_2_0 = (RuleCall)cBlocksAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FunctionBody:
		//
		//	meta+=MetadataValue* //METADATA*
		//
		//	"{" blocks+=BasicBlock+ "}";
		public ParserRule getRule() { return rule; }

		//meta+=MetadataValue* //METADATA*
		//
		//"{" blocks+=BasicBlock+ "}"
		public Group getGroup() { return cGroup; }

		//meta+=MetadataValue*
		public Assignment getMetaAssignment_0() { return cMetaAssignment_0; }

		//MetadataValue
		public RuleCall getMetaMetadataValueParserRuleCall_0_0() { return cMetaMetadataValueParserRuleCall_0_0; }

		////METADATA*
		//
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//blocks+=BasicBlock+
		public Assignment getBlocksAssignment_2() { return cBlocksAssignment_2; }

		//BasicBlock
		public RuleCall getBlocksBasicBlockParserRuleCall_2_0() { return cBlocksBasicBlockParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Instruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStoreParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLoadParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGetElementPtrParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAllocParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCmpXchgParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cAtomicRMWParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cFenceParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cReturnParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cBranchParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cSwitchParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cIndirectBranchParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cInvokeParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cResumeParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cUnreachableParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cLogicOperationParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cArithmeticOperationParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cCompareParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cCastParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cShuffleVectorParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cInsertElementParserRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		private final RuleCall cExtractElementParserRuleCall_20 = (RuleCall)cAlternatives.eContents().get(20);
		private final RuleCall cInsertValueParserRuleCall_21 = (RuleCall)cAlternatives.eContents().get(21);
		private final RuleCall cExtractValueParserRuleCall_22 = (RuleCall)cAlternatives.eContents().get(22);
		private final RuleCall cPhiParserRuleCall_23 = (RuleCall)cAlternatives.eContents().get(23);
		private final RuleCall cSelectParserRuleCall_24 = (RuleCall)cAlternatives.eContents().get(24);
		private final RuleCall cCallParserRuleCall_25 = (RuleCall)cAlternatives.eContents().get(25);
		private final RuleCall cVariableAttributeAccessParserRuleCall_26 = (RuleCall)cAlternatives.eContents().get(26);
		private final RuleCall cLandingPadParserRuleCall_27 = (RuleCall)cAlternatives.eContents().get(27);
		
		//Instruction:
		//
		//	Store | Load | GetElementPtr | Alloc | CmpXchg | AtomicRMW | Fence | Return | Branch | Switch | IndirectBranch |
		//
		//	Invoke | Resume | Unreachable | LogicOperation | ArithmeticOperation | Compare | Cast | ShuffleVector | InsertElement
		//
		//	| ExtractElement | InsertValue | ExtractValue | Phi | Select | Call | VariableAttributeAccess | LandingPad;
		public ParserRule getRule() { return rule; }

		//Store | Load | GetElementPtr | Alloc | CmpXchg | AtomicRMW | Fence | Return | Branch | Switch | IndirectBranch | Invoke
		//
		//| Resume | Unreachable | LogicOperation | ArithmeticOperation | Compare | Cast | ShuffleVector | InsertElement |
		//
		//ExtractElement | InsertValue | ExtractValue | Phi | Select | Call | VariableAttributeAccess | LandingPad
		public Alternatives getAlternatives() { return cAlternatives; }

		//Store
		public RuleCall getStoreParserRuleCall_0() { return cStoreParserRuleCall_0; }

		//Load
		public RuleCall getLoadParserRuleCall_1() { return cLoadParserRuleCall_1; }

		//GetElementPtr
		public RuleCall getGetElementPtrParserRuleCall_2() { return cGetElementPtrParserRuleCall_2; }

		//Alloc
		public RuleCall getAllocParserRuleCall_3() { return cAllocParserRuleCall_3; }

		//CmpXchg
		public RuleCall getCmpXchgParserRuleCall_4() { return cCmpXchgParserRuleCall_4; }

		//AtomicRMW
		public RuleCall getAtomicRMWParserRuleCall_5() { return cAtomicRMWParserRuleCall_5; }

		//Fence
		public RuleCall getFenceParserRuleCall_6() { return cFenceParserRuleCall_6; }

		//Return
		public RuleCall getReturnParserRuleCall_7() { return cReturnParserRuleCall_7; }

		//Branch
		public RuleCall getBranchParserRuleCall_8() { return cBranchParserRuleCall_8; }

		//Switch
		public RuleCall getSwitchParserRuleCall_9() { return cSwitchParserRuleCall_9; }

		//IndirectBranch
		public RuleCall getIndirectBranchParserRuleCall_10() { return cIndirectBranchParserRuleCall_10; }

		//Invoke
		public RuleCall getInvokeParserRuleCall_11() { return cInvokeParserRuleCall_11; }

		//Resume
		public RuleCall getResumeParserRuleCall_12() { return cResumeParserRuleCall_12; }

		//Unreachable
		public RuleCall getUnreachableParserRuleCall_13() { return cUnreachableParserRuleCall_13; }

		//LogicOperation
		public RuleCall getLogicOperationParserRuleCall_14() { return cLogicOperationParserRuleCall_14; }

		//ArithmeticOperation
		public RuleCall getArithmeticOperationParserRuleCall_15() { return cArithmeticOperationParserRuleCall_15; }

		//Compare
		public RuleCall getCompareParserRuleCall_16() { return cCompareParserRuleCall_16; }

		//Cast
		public RuleCall getCastParserRuleCall_17() { return cCastParserRuleCall_17; }

		//ShuffleVector
		public RuleCall getShuffleVectorParserRuleCall_18() { return cShuffleVectorParserRuleCall_18; }

		//InsertElement
		public RuleCall getInsertElementParserRuleCall_19() { return cInsertElementParserRuleCall_19; }

		//ExtractElement
		public RuleCall getExtractElementParserRuleCall_20() { return cExtractElementParserRuleCall_20; }

		//InsertValue
		public RuleCall getInsertValueParserRuleCall_21() { return cInsertValueParserRuleCall_21; }

		//ExtractValue
		public RuleCall getExtractValueParserRuleCall_22() { return cExtractValueParserRuleCall_22; }

		//Phi
		public RuleCall getPhiParserRuleCall_23() { return cPhiParserRuleCall_23; }

		//Select
		public RuleCall getSelectParserRuleCall_24() { return cSelectParserRuleCall_24; }

		//Call
		public RuleCall getCallParserRuleCall_25() { return cCallParserRuleCall_25; }

		//VariableAttributeAccess
		public RuleCall getVariableAttributeAccessParserRuleCall_26() { return cVariableAttributeAccessParserRuleCall_26; }

		//LandingPad
		public RuleCall getLandingPadParserRuleCall_27() { return cLandingPadParserRuleCall_27; }
	}

	public class BasicBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BasicBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cLabelAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cLabelLABEL_IDParserRuleCall_0_0_0 = (RuleCall)cLabelAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cInstructionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInstructionsInstructionParserRuleCall_1_0 = (RuleCall)cInstructionsAssignment_1.eContents().get(0);
		
		//BasicBlock:
		//
		//	(label=LABEL_ID ":") / *instructions+=(InstructionUse | StandartInstruction)*
		//
		//	(retadr=VALID_ID '=')? terminator=ControlFlowInstruction* / instructions+=Instruction+;
		public ParserRule getRule() { return rule; }

		//(label=LABEL_ID ":") / *instructions+=(InstructionUse | StandartInstruction)*
		//
		//	(retadr=VALID_ID '=')? terminator=ControlFlowInstruction* / instructions+=Instruction+
		public Group getGroup() { return cGroup; }

		//label=LABEL_ID ":"
		public Group getGroup_0() { return cGroup_0; }

		//label=LABEL_ID
		public Assignment getLabelAssignment_0_0() { return cLabelAssignment_0_0; }

		//LABEL_ID
		public RuleCall getLabelLABEL_IDParserRuleCall_0_0_0() { return cLabelLABEL_IDParserRuleCall_0_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//instructions+=Instruction+
		public Assignment getInstructionsAssignment_1() { return cInstructionsAssignment_1; }

		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_1_0() { return cInstructionsInstructionParserRuleCall_1_0; }
	}

	public class ArithmeticOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArithmeticOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cResultAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cResultAddressParserRuleCall_0_0 = (RuleCall)cResultAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cOperationAlternatives_2_0 = (Alternatives)cOperationAssignment_2.eContents().get(0);
		private final Keyword cOperationAddKeyword_2_0_0 = (Keyword)cOperationAlternatives_2_0.eContents().get(0);
		private final Keyword cOperationFaddKeyword_2_0_1 = (Keyword)cOperationAlternatives_2_0.eContents().get(1);
		private final Keyword cOperationSubKeyword_2_0_2 = (Keyword)cOperationAlternatives_2_0.eContents().get(2);
		private final Keyword cOperationFsubKeyword_2_0_3 = (Keyword)cOperationAlternatives_2_0.eContents().get(3);
		private final Keyword cOperationMulKeyword_2_0_4 = (Keyword)cOperationAlternatives_2_0.eContents().get(4);
		private final Keyword cOperationFmulKeyword_2_0_5 = (Keyword)cOperationAlternatives_2_0.eContents().get(5);
		private final Keyword cOperationUdivKeyword_2_0_6 = (Keyword)cOperationAlternatives_2_0.eContents().get(6);
		private final Keyword cOperationSdivKeyword_2_0_7 = (Keyword)cOperationAlternatives_2_0.eContents().get(7);
		private final Keyword cOperationFdivKeyword_2_0_8 = (Keyword)cOperationAlternatives_2_0.eContents().get(8);
		private final Keyword cOperationUremKeyword_2_0_9 = (Keyword)cOperationAlternatives_2_0.eContents().get(9);
		private final Keyword cOperationSremKeyword_2_0_10 = (Keyword)cOperationAlternatives_2_0.eContents().get(10);
		private final Keyword cOperationFremKeyword_2_0_11 = (Keyword)cOperationAlternatives_2_0.eContents().get(11);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Keyword cNswKeyword_3_0_0 = (Keyword)cAlternatives_3_0.eContents().get(0);
		private final Keyword cNuwKeyword_3_0_1 = (Keyword)cAlternatives_3_0.eContents().get(1);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Keyword cNuwKeyword_3_1_0 = (Keyword)cAlternatives_3_1.eContents().get(0);
		private final Keyword cNswKeyword_3_1_1 = (Keyword)cAlternatives_3_1.eContents().get(1);
		private final Assignment cOptypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOptypeTypeUseParserRuleCall_4_0 = (RuleCall)cOptypeAssignment_4.eContents().get(0);
		private final Assignment cValue1Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValue1ValueParserRuleCall_5_0 = (RuleCall)cValue1Assignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cValue2Assignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cValue2ValueParserRuleCall_7_0 = (RuleCall)cValue2Assignment_7.eContents().get(0);
		
		//ArithmeticOperation:
		//
		//	result=Address "=" operation=("add" | "fadd" | "sub" | "fsub" | "mul" | "fmul" | "udiv" | "sdiv" | "fdiv" | "urem" |
		//
		//	"srem" | "frem") (("nsw" | "nuw") ("nuw" | "nsw")?)? optype=TypeUse value1=Value "," value2=Value;
		public ParserRule getRule() { return rule; }

		//result=Address "=" operation=("add" | "fadd" | "sub" | "fsub" | "mul" | "fmul" | "udiv" | "sdiv" | "fdiv" | "urem" |
		//
		//"srem" | "frem") (("nsw" | "nuw") ("nuw" | "nsw")?)? optype=TypeUse value1=Value "," value2=Value
		public Group getGroup() { return cGroup; }

		//result=Address
		public Assignment getResultAssignment_0() { return cResultAssignment_0; }

		//Address
		public RuleCall getResultAddressParserRuleCall_0_0() { return cResultAddressParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//operation=("add" | "fadd" | "sub" | "fsub" | "mul" | "fmul" | "udiv" | "sdiv" | "fdiv" | "urem" | "srem" | "frem")
		public Assignment getOperationAssignment_2() { return cOperationAssignment_2; }

		//"add" | "fadd" | "sub" | "fsub" | "mul" | "fmul" | "udiv" | "sdiv" | "fdiv" | "urem" | "srem" | "frem"
		public Alternatives getOperationAlternatives_2_0() { return cOperationAlternatives_2_0; }

		//"add"
		public Keyword getOperationAddKeyword_2_0_0() { return cOperationAddKeyword_2_0_0; }

		//"fadd"
		public Keyword getOperationFaddKeyword_2_0_1() { return cOperationFaddKeyword_2_0_1; }

		//"sub"
		public Keyword getOperationSubKeyword_2_0_2() { return cOperationSubKeyword_2_0_2; }

		//"fsub"
		public Keyword getOperationFsubKeyword_2_0_3() { return cOperationFsubKeyword_2_0_3; }

		//"mul"
		public Keyword getOperationMulKeyword_2_0_4() { return cOperationMulKeyword_2_0_4; }

		//"fmul"
		public Keyword getOperationFmulKeyword_2_0_5() { return cOperationFmulKeyword_2_0_5; }

		//"udiv"
		public Keyword getOperationUdivKeyword_2_0_6() { return cOperationUdivKeyword_2_0_6; }

		//"sdiv"
		public Keyword getOperationSdivKeyword_2_0_7() { return cOperationSdivKeyword_2_0_7; }

		//"fdiv"
		public Keyword getOperationFdivKeyword_2_0_8() { return cOperationFdivKeyword_2_0_8; }

		//"urem"
		public Keyword getOperationUremKeyword_2_0_9() { return cOperationUremKeyword_2_0_9; }

		//"srem"
		public Keyword getOperationSremKeyword_2_0_10() { return cOperationSremKeyword_2_0_10; }

		//"frem"
		public Keyword getOperationFremKeyword_2_0_11() { return cOperationFremKeyword_2_0_11; }

		//(("nsw" | "nuw") ("nuw" | "nsw")?)?
		public Group getGroup_3() { return cGroup_3; }

		//"nsw" | "nuw"
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }

		//"nsw"
		public Keyword getNswKeyword_3_0_0() { return cNswKeyword_3_0_0; }

		//"nuw"
		public Keyword getNuwKeyword_3_0_1() { return cNuwKeyword_3_0_1; }

		//("nuw" | "nsw")?
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }

		//"nuw"
		public Keyword getNuwKeyword_3_1_0() { return cNuwKeyword_3_1_0; }

		//"nsw"
		public Keyword getNswKeyword_3_1_1() { return cNswKeyword_3_1_1; }

		//optype=TypeUse
		public Assignment getOptypeAssignment_4() { return cOptypeAssignment_4; }

		//TypeUse
		public RuleCall getOptypeTypeUseParserRuleCall_4_0() { return cOptypeTypeUseParserRuleCall_4_0; }

		//value1=Value
		public Assignment getValue1Assignment_5() { return cValue1Assignment_5; }

		//Value
		public RuleCall getValue1ValueParserRuleCall_5_0() { return cValue1ValueParserRuleCall_5_0; }

		//","
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }

		//value2=Value
		public Assignment getValue2Assignment_7() { return cValue2Assignment_7; }

		//Value
		public RuleCall getValue2ValueParserRuleCall_7_0() { return cValue2ValueParserRuleCall_7_0; }
	}

	public class LogicOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cResultAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cResultAddressParserRuleCall_0_0 = (RuleCall)cResultAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cOperationAlternatives_2_0 = (Alternatives)cOperationAssignment_2.eContents().get(0);
		private final Keyword cOperationShlKeyword_2_0_0 = (Keyword)cOperationAlternatives_2_0.eContents().get(0);
		private final Keyword cOperationLshrKeyword_2_0_1 = (Keyword)cOperationAlternatives_2_0.eContents().get(1);
		private final Keyword cOperationAshrKeyword_2_0_2 = (Keyword)cOperationAlternatives_2_0.eContents().get(2);
		private final Keyword cOperationAndKeyword_2_0_3 = (Keyword)cOperationAlternatives_2_0.eContents().get(3);
		private final Keyword cOperationOrKeyword_2_0_4 = (Keyword)cOperationAlternatives_2_0.eContents().get(4);
		private final Keyword cOperationXorKeyword_2_0_5 = (Keyword)cOperationAlternatives_2_0.eContents().get(5);
		private final Assignment cOptypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOptypeTypeUseParserRuleCall_3_0 = (RuleCall)cOptypeAssignment_3.eContents().get(0);
		private final Assignment cValue1Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValue1ValueParserRuleCall_4_0 = (RuleCall)cValue1Assignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cValue2Assignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cValue2ValueParserRuleCall_6_0 = (RuleCall)cValue2Assignment_6.eContents().get(0);
		
		//LogicOperation:
		//
		//	result=Address "=" operation=("shl" | "lshr" | "ashr" | "and" | "or" | "xor") optype=TypeUse value1=Value ","
		//
		//	value2=Value;
		public ParserRule getRule() { return rule; }

		//result=Address "=" operation=("shl" | "lshr" | "ashr" | "and" | "or" | "xor") optype=TypeUse value1=Value ","
		//
		//value2=Value
		public Group getGroup() { return cGroup; }

		//result=Address
		public Assignment getResultAssignment_0() { return cResultAssignment_0; }

		//Address
		public RuleCall getResultAddressParserRuleCall_0_0() { return cResultAddressParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//operation=("shl" | "lshr" | "ashr" | "and" | "or" | "xor")
		public Assignment getOperationAssignment_2() { return cOperationAssignment_2; }

		//"shl" | "lshr" | "ashr" | "and" | "or" | "xor"
		public Alternatives getOperationAlternatives_2_0() { return cOperationAlternatives_2_0; }

		//"shl"
		public Keyword getOperationShlKeyword_2_0_0() { return cOperationShlKeyword_2_0_0; }

		//"lshr"
		public Keyword getOperationLshrKeyword_2_0_1() { return cOperationLshrKeyword_2_0_1; }

		//"ashr"
		public Keyword getOperationAshrKeyword_2_0_2() { return cOperationAshrKeyword_2_0_2; }

		//"and"
		public Keyword getOperationAndKeyword_2_0_3() { return cOperationAndKeyword_2_0_3; }

		//"or"
		public Keyword getOperationOrKeyword_2_0_4() { return cOperationOrKeyword_2_0_4; }

		//"xor"
		public Keyword getOperationXorKeyword_2_0_5() { return cOperationXorKeyword_2_0_5; }

		//optype=TypeUse
		public Assignment getOptypeAssignment_3() { return cOptypeAssignment_3; }

		//TypeUse
		public RuleCall getOptypeTypeUseParserRuleCall_3_0() { return cOptypeTypeUseParserRuleCall_3_0; }

		//value1=Value
		public Assignment getValue1Assignment_4() { return cValue1Assignment_4; }

		//Value
		public RuleCall getValue1ValueParserRuleCall_4_0() { return cValue1ValueParserRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//value2=Value
		public Assignment getValue2Assignment_6() { return cValue2Assignment_6; }

		//Value
		public RuleCall getValue2ValueParserRuleCall_6_0() { return cValue2ValueParserRuleCall_6_0; }
	}

	public class CastElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Cast");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cResultAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cResultAddressParserRuleCall_0_0 = (RuleCall)cResultAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperationCAST_OPTerminalRuleCall_2_0 = (RuleCall)cOperationAssignment_2.eContents().get(0);
		private final Assignment cFromAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cFromAlternatives_3_0 = (Alternatives)cFromAssignment_3.eContents().get(0);
		private final RuleCall cFromTypeUseParserRuleCall_3_0_0 = (RuleCall)cFromAlternatives_3_0.eContents().get(0);
		private final RuleCall cFromAggregate_TypesParserRuleCall_3_0_1 = (RuleCall)cFromAlternatives_3_0.eContents().get(1);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueValueParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		private final Keyword cToKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cToAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cToTypeUseParserRuleCall_6_0 = (RuleCall)cToAssignment_6.eContents().get(0);
		
		//Cast:
		//
		//	result=Address "=" operation=CAST_OP from=(TypeUse | Aggregate_Types) value=Value "to" to=TypeUse;
		public ParserRule getRule() { return rule; }

		//result=Address "=" operation=CAST_OP from=(TypeUse | Aggregate_Types) value=Value "to" to=TypeUse
		public Group getGroup() { return cGroup; }

		//result=Address
		public Assignment getResultAssignment_0() { return cResultAssignment_0; }

		//Address
		public RuleCall getResultAddressParserRuleCall_0_0() { return cResultAddressParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//operation=CAST_OP
		public Assignment getOperationAssignment_2() { return cOperationAssignment_2; }

		//CAST_OP
		public RuleCall getOperationCAST_OPTerminalRuleCall_2_0() { return cOperationCAST_OPTerminalRuleCall_2_0; }

		//from=(TypeUse | Aggregate_Types)
		public Assignment getFromAssignment_3() { return cFromAssignment_3; }

		//TypeUse | Aggregate_Types
		public Alternatives getFromAlternatives_3_0() { return cFromAlternatives_3_0; }

		//TypeUse
		public RuleCall getFromTypeUseParserRuleCall_3_0_0() { return cFromTypeUseParserRuleCall_3_0_0; }

		//Aggregate_Types
		public RuleCall getFromAggregate_TypesParserRuleCall_3_0_1() { return cFromAggregate_TypesParserRuleCall_3_0_1; }

		//value=Value
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }

		//Value
		public RuleCall getValueValueParserRuleCall_4_0() { return cValueValueParserRuleCall_4_0; }

		//"to"
		public Keyword getToKeyword_5() { return cToKeyword_5; }

		//to=TypeUse
		public Assignment getToAssignment_6() { return cToAssignment_6; }

		//TypeUse
		public RuleCall getToTypeUseParserRuleCall_6_0() { return cToTypeUseParserRuleCall_6_0; }
	}

	public class NestedCastElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NestedCast");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperationCAST_OPTerminalRuleCall_0_0 = (RuleCall)cOperationAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFromAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cFromAlternatives_2_0 = (Alternatives)cFromAssignment_2.eContents().get(0);
		private final RuleCall cFromTypeUseParserRuleCall_2_0_0 = (RuleCall)cFromAlternatives_2_0.eContents().get(0);
		private final RuleCall cFromAggregate_TypesParserRuleCall_2_0_1 = (RuleCall)cFromAlternatives_2_0.eContents().get(1);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueValueParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cToAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cToTypeUseParserRuleCall_5_0 = (RuleCall)cToAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//NestedCast:
		//
		//	operation=CAST_OP "(" from=(TypeUse | Aggregate_Types) value=Value "to" to=TypeUse ")";
		public ParserRule getRule() { return rule; }

		//operation=CAST_OP "(" from=(TypeUse | Aggregate_Types) value=Value "to" to=TypeUse ")"
		public Group getGroup() { return cGroup; }

		//operation=CAST_OP
		public Assignment getOperationAssignment_0() { return cOperationAssignment_0; }

		//CAST_OP
		public RuleCall getOperationCAST_OPTerminalRuleCall_0_0() { return cOperationCAST_OPTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//from=(TypeUse | Aggregate_Types)
		public Assignment getFromAssignment_2() { return cFromAssignment_2; }

		//TypeUse | Aggregate_Types
		public Alternatives getFromAlternatives_2_0() { return cFromAlternatives_2_0; }

		//TypeUse
		public RuleCall getFromTypeUseParserRuleCall_2_0_0() { return cFromTypeUseParserRuleCall_2_0_0; }

		//Aggregate_Types
		public RuleCall getFromAggregate_TypesParserRuleCall_2_0_1() { return cFromAggregate_TypesParserRuleCall_2_0_1; }

		//value=Value
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//Value
		public RuleCall getValueValueParserRuleCall_3_0() { return cValueValueParserRuleCall_3_0; }

		//"to"
		public Keyword getToKeyword_4() { return cToKeyword_4; }

		//to=TypeUse
		public Assignment getToAssignment_5() { return cToAssignment_5; }

		//TypeUse
		public RuleCall getToTypeUseParserRuleCall_5_0() { return cToTypeUseParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class MetaArgValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MetaArgValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArgMETADATATerminalRuleCall_0_0 = (RuleCall)cArgAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cValueAlternatives_1_0 = (Alternatives)cValueAssignment_1.eContents().get(0);
		private final RuleCall cValueMETADATATerminalRuleCall_1_0_0 = (RuleCall)cValueAlternatives_1_0.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cValueAlternatives_1_0.eContents().get(1);
		
		//MetaArgValue:
		//
		//	arg=METADATA value=(METADATA | STRING);
		public ParserRule getRule() { return rule; }

		//arg=METADATA value=(METADATA | STRING)
		public Group getGroup() { return cGroup; }

		//arg=METADATA
		public Assignment getArgAssignment_0() { return cArgAssignment_0; }

		//METADATA
		public RuleCall getArgMETADATATerminalRuleCall_0_0() { return cArgMETADATATerminalRuleCall_0_0; }

		//value=(METADATA | STRING)
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//METADATA | STRING
		public Alternatives getValueAlternatives_1_0() { return cValueAlternatives_1_0; }

		//METADATA
		public RuleCall getValueMETADATATerminalRuleCall_1_0_0() { return cValueMETADATATerminalRuleCall_1_0_0; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0_1() { return cValueSTRINGTerminalRuleCall_1_0_1; }
	}

	public class MetaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Meta");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cMetadataKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cMetaAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cMetaMETADATATerminalRuleCall_0_1_0 = (RuleCall)cMetaAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cArgAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cArgPredefinedParserRuleCall_1_0_0 = (RuleCall)cArgAssignment_1_0.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		
		//Meta:
		//
		//	"metadata" meta=METADATA | arg=Predefined? value=Value;
		public ParserRule getRule() { return rule; }

		//"metadata" meta=METADATA | arg=Predefined? value=Value
		public Alternatives getAlternatives() { return cAlternatives; }

		//"metadata" meta=METADATA
		public Group getGroup_0() { return cGroup_0; }

		//"metadata"
		public Keyword getMetadataKeyword_0_0() { return cMetadataKeyword_0_0; }

		//meta=METADATA
		public Assignment getMetaAssignment_0_1() { return cMetaAssignment_0_1; }

		//METADATA
		public RuleCall getMetaMETADATATerminalRuleCall_0_1_0() { return cMetaMETADATATerminalRuleCall_0_1_0; }

		//arg=Predefined? value=Value
		public Group getGroup_1() { return cGroup_1; }

		//arg=Predefined?
		public Assignment getArgAssignment_1_0() { return cArgAssignment_1_0; }

		//Predefined
		public RuleCall getArgPredefinedParserRuleCall_1_0_0() { return cArgPredefinedParserRuleCall_1_0_0; }

		//value=Value
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//Value
		public RuleCall getValueValueParserRuleCall_1_1_0() { return cValueValueParserRuleCall_1_1_0; }
	}

	public class MetadataValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MetadataValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNodeIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNodeIdMETADATATerminalRuleCall_0_0 = (RuleCall)cNodeIdAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cMetadataKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final Keyword cExclamationMarkLeftCurlyBracketKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Assignment cValuesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValuesMetaParserRuleCall_4_0 = (RuleCall)cValuesAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cValuesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cValuesMetaParserRuleCall_5_1_0 = (RuleCall)cValuesAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//MetadataValue:
		//
		//	nodeId=METADATA "=" "metadata"? ("!" "{" | "!{") values+=Meta ("," values+=Meta)* "}";
		public ParserRule getRule() { return rule; }

		//nodeId=METADATA "=" "metadata"? ("!" "{" | "!{") values+=Meta ("," values+=Meta)* "}"
		public Group getGroup() { return cGroup; }

		//nodeId=METADATA
		public Assignment getNodeIdAssignment_0() { return cNodeIdAssignment_0; }

		//METADATA
		public RuleCall getNodeIdMETADATATerminalRuleCall_0_0() { return cNodeIdMETADATATerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"metadata"?
		public Keyword getMetadataKeyword_2() { return cMetadataKeyword_2; }

		//"!" "{" | "!{"
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//"!" "{"
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_3_0_0() { return cExclamationMarkKeyword_3_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0_1() { return cLeftCurlyBracketKeyword_3_0_1; }

		//"!{"
		public Keyword getExclamationMarkLeftCurlyBracketKeyword_3_1() { return cExclamationMarkLeftCurlyBracketKeyword_3_1; }

		//values+=Meta
		public Assignment getValuesAssignment_4() { return cValuesAssignment_4; }

		//Meta
		public RuleCall getValuesMetaParserRuleCall_4_0() { return cValuesMetaParserRuleCall_4_0; }

		//("," values+=Meta)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//values+=Meta
		public Assignment getValuesAssignment_5_1() { return cValuesAssignment_5_1; }

		//Meta
		public RuleCall getValuesMetaParserRuleCall_5_1_0() { return cValuesMetaParserRuleCall_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class GetElementPtrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GetElementPtr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cResultAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cResultAddressParserRuleCall_0_0 = (RuleCall)cResultAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cGetelementptrKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cInboundsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cAggregateAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Alternatives cAggregateAlternatives_4_0_0 = (Alternatives)cAggregateAssignment_4_0.eContents().get(0);
		private final RuleCall cAggregateTypeUseParserRuleCall_4_0_0_0 = (RuleCall)cAggregateAlternatives_4_0_0.eContents().get(0);
		private final RuleCall cAggregateArrayParserRuleCall_4_0_0_1 = (RuleCall)cAggregateAlternatives_4_0_0.eContents().get(1);
		private final Assignment cAggregatenameAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAggregatenameValueParserRuleCall_4_1_0 = (RuleCall)cAggregatenameAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cIndTypesAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cIndTypesTypeUseParserRuleCall_4_2_1_0 = (RuleCall)cIndTypesAssignment_4_2_1.eContents().get(0);
		private final Assignment cIndiziesAssignment_4_2_2 = (Assignment)cGroup_4_2.eContents().get(2);
		private final RuleCall cIndiziesValueParserRuleCall_4_2_2_0 = (RuleCall)cIndiziesAssignment_4_2_2.eContents().get(0);
		
		//GetElementPtr:
		//
		//	result=Address "=" "getelementptr" "inbounds"? (aggregate=(TypeUse | Array) aggregatename=Value (","
		//
		//	indTypes+=TypeUse indizies+=Value)*);
		public ParserRule getRule() { return rule; }

		//result=Address "=" "getelementptr" "inbounds"? (aggregate=(TypeUse | Array) aggregatename=Value ("," indTypes+=TypeUse
		//
		//indizies+=Value)*)
		public Group getGroup() { return cGroup; }

		//result=Address
		public Assignment getResultAssignment_0() { return cResultAssignment_0; }

		//Address
		public RuleCall getResultAddressParserRuleCall_0_0() { return cResultAddressParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"getelementptr"
		public Keyword getGetelementptrKeyword_2() { return cGetelementptrKeyword_2; }

		//"inbounds"?
		public Keyword getInboundsKeyword_3() { return cInboundsKeyword_3; }

		//aggregate=(TypeUse | Array) aggregatename=Value ("," indTypes+=TypeUse indizies+=Value)*
		public Group getGroup_4() { return cGroup_4; }

		//aggregate=(TypeUse | Array)
		public Assignment getAggregateAssignment_4_0() { return cAggregateAssignment_4_0; }

		//TypeUse | Array
		public Alternatives getAggregateAlternatives_4_0_0() { return cAggregateAlternatives_4_0_0; }

		//TypeUse
		public RuleCall getAggregateTypeUseParserRuleCall_4_0_0_0() { return cAggregateTypeUseParserRuleCall_4_0_0_0; }

		//Array
		public RuleCall getAggregateArrayParserRuleCall_4_0_0_1() { return cAggregateArrayParserRuleCall_4_0_0_1; }

		//aggregatename=Value
		public Assignment getAggregatenameAssignment_4_1() { return cAggregatenameAssignment_4_1; }

		//Value
		public RuleCall getAggregatenameValueParserRuleCall_4_1_0() { return cAggregatenameValueParserRuleCall_4_1_0; }

		//("," indTypes+=TypeUse indizies+=Value)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//indTypes+=TypeUse
		public Assignment getIndTypesAssignment_4_2_1() { return cIndTypesAssignment_4_2_1; }

		//TypeUse
		public RuleCall getIndTypesTypeUseParserRuleCall_4_2_1_0() { return cIndTypesTypeUseParserRuleCall_4_2_1_0; }

		//indizies+=Value
		public Assignment getIndiziesAssignment_4_2_2() { return cIndiziesAssignment_4_2_2; }

		//Value
		public RuleCall getIndiziesValueParserRuleCall_4_2_2_0() { return cIndiziesValueParserRuleCall_4_2_2_0; }
	}

	public class NestedGetElementPtrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NestedGetElementPtr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGetelementptrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cInboundsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAggregateAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cAggregateAlternatives_2_1_0 = (Alternatives)cAggregateAssignment_2_1.eContents().get(0);
		private final RuleCall cAggregateTypeUseParserRuleCall_2_1_0_0 = (RuleCall)cAggregateAlternatives_2_1_0.eContents().get(0);
		private final RuleCall cAggregateArrayParserRuleCall_2_1_0_1 = (RuleCall)cAggregateAlternatives_2_1_0.eContents().get(1);
		private final Assignment cAggregatenameAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cAggregatenameValueParserRuleCall_2_2_0 = (RuleCall)cAggregatenameAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cCommaKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cIndTypesAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cIndTypesTypeUseParserRuleCall_2_3_1_0 = (RuleCall)cIndTypesAssignment_2_3_1.eContents().get(0);
		private final Assignment cIndiziesAssignment_2_3_2 = (Assignment)cGroup_2_3.eContents().get(2);
		private final RuleCall cIndiziesValueParserRuleCall_2_3_2_0 = (RuleCall)cIndiziesAssignment_2_3_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		
		//NestedGetElementPtr:
		//
		//	"getelementptr" "inbounds"? ("(" aggregate=(TypeUse | Array) aggregatename=Value ("," indTypes+=TypeUse
		//
		//	indizies+=Value)* ")");
		public ParserRule getRule() { return rule; }

		//"getelementptr" "inbounds"? ("(" aggregate=(TypeUse | Array) aggregatename=Value ("," indTypes+=TypeUse
		//
		//indizies+=Value)* ")")
		public Group getGroup() { return cGroup; }

		//"getelementptr"
		public Keyword getGetelementptrKeyword_0() { return cGetelementptrKeyword_0; }

		//"inbounds"?
		public Keyword getInboundsKeyword_1() { return cInboundsKeyword_1; }

		//"(" aggregate=(TypeUse | Array) aggregatename=Value ("," indTypes+=TypeUse indizies+=Value)* ")"
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//aggregate=(TypeUse | Array)
		public Assignment getAggregateAssignment_2_1() { return cAggregateAssignment_2_1; }

		//TypeUse | Array
		public Alternatives getAggregateAlternatives_2_1_0() { return cAggregateAlternatives_2_1_0; }

		//TypeUse
		public RuleCall getAggregateTypeUseParserRuleCall_2_1_0_0() { return cAggregateTypeUseParserRuleCall_2_1_0_0; }

		//Array
		public RuleCall getAggregateArrayParserRuleCall_2_1_0_1() { return cAggregateArrayParserRuleCall_2_1_0_1; }

		//aggregatename=Value
		public Assignment getAggregatenameAssignment_2_2() { return cAggregatenameAssignment_2_2; }

		//Value
		public RuleCall getAggregatenameValueParserRuleCall_2_2_0() { return cAggregatenameValueParserRuleCall_2_2_0; }

		//("," indTypes+=TypeUse indizies+=Value)*
		public Group getGroup_2_3() { return cGroup_2_3; }

		//","
		public Keyword getCommaKeyword_2_3_0() { return cCommaKeyword_2_3_0; }

		//indTypes+=TypeUse
		public Assignment getIndTypesAssignment_2_3_1() { return cIndTypesAssignment_2_3_1; }

		//TypeUse
		public RuleCall getIndTypesTypeUseParserRuleCall_2_3_1_0() { return cIndTypesTypeUseParserRuleCall_2_3_1_0; }

		//indizies+=Value
		public Assignment getIndiziesAssignment_2_3_2() { return cIndiziesAssignment_2_3_2; }

		//Value
		public RuleCall getIndiziesValueParserRuleCall_2_3_2_0() { return cIndiziesValueParserRuleCall_2_3_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_4() { return cRightParenthesisKeyword_2_4; }
	}

	public class ExtractValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExtractValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cResultAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cResultAddressParserRuleCall_0_0 = (RuleCall)cResultAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cExtractvalueKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cArrayAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cArrayArrayParserRuleCall_3_0_0 = (RuleCall)cArrayAssignment_3_0.eContents().get(0);
		private final Assignment cStructAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cStructStructureParserRuleCall_3_1_0 = (RuleCall)cStructAssignment_3_1.eContents().get(0);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueValueParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cIndexAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cIndexNUMBERParserRuleCall_5_1_0 = (RuleCall)cIndexAssignment_5_1.eContents().get(0);
		
		//ExtractValue:
		//
		//	result=Address "=" "extractvalue" (array=Array | struct=Structure) value=Value ("," index+=NUMBER)+;
		public ParserRule getRule() { return rule; }

		//result=Address "=" "extractvalue" (array=Array | struct=Structure) value=Value ("," index+=NUMBER)+
		public Group getGroup() { return cGroup; }

		//result=Address
		public Assignment getResultAssignment_0() { return cResultAssignment_0; }

		//Address
		public RuleCall getResultAddressParserRuleCall_0_0() { return cResultAddressParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"extractvalue"
		public Keyword getExtractvalueKeyword_2() { return cExtractvalueKeyword_2; }

		//array=Array | struct=Structure
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//array=Array
		public Assignment getArrayAssignment_3_0() { return cArrayAssignment_3_0; }

		//Array
		public RuleCall getArrayArrayParserRuleCall_3_0_0() { return cArrayArrayParserRuleCall_3_0_0; }

		//struct=Structure
		public Assignment getStructAssignment_3_1() { return cStructAssignment_3_1; }

		//Structure
		public RuleCall getStructStructureParserRuleCall_3_1_0() { return cStructStructureParserRuleCall_3_1_0; }

		//value=Value
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }

		//Value
		public RuleCall getValueValueParserRuleCall_4_0() { return cValueValueParserRuleCall_4_0; }

		//("," index+=NUMBER)+
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//index+=NUMBER
		public Assignment getIndexAssignment_5_1() { return cIndexAssignment_5_1; }

		//NUMBER
		public RuleCall getIndexNUMBERParserRuleCall_5_1_0() { return cIndexNUMBERParserRuleCall_5_1_0; }
	}

	public class InsertValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InsertValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cResultAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cResultAddressParserRuleCall_0_0 = (RuleCall)cResultAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cInsertvalueKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStructAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStructStructureParserRuleCall_3_0 = (RuleCall)cStructAssignment_3.eContents().get(0);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueValueParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cInserttypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cInserttypeTypeUseParserRuleCall_6_0 = (RuleCall)cInserttypeAssignment_6.eContents().get(0);
		private final Assignment cInsertvalueAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cInsertvalueValueParserRuleCall_7_0 = (RuleCall)cInsertvalueAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCommaKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cIndexAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cIndexNUMBERParserRuleCall_8_1_0 = (RuleCall)cIndexAssignment_8_1.eContents().get(0);
		
		//InsertValue:
		//
		//	result=Address "=" "insertvalue" struct=Structure value=Value "," inserttype=TypeUse insertvalue=Value (","
		//
		//	index+=NUMBER)+;
		public ParserRule getRule() { return rule; }

		//result=Address "=" "insertvalue" struct=Structure value=Value "," inserttype=TypeUse insertvalue=Value (","
		//
		//index+=NUMBER)+
		public Group getGroup() { return cGroup; }

		//result=Address
		public Assignment getResultAssignment_0() { return cResultAssignment_0; }

		//Address
		public RuleCall getResultAddressParserRuleCall_0_0() { return cResultAddressParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"insertvalue"
		public Keyword getInsertvalueKeyword_2() { return cInsertvalueKeyword_2; }

		//struct=Structure
		public Assignment getStructAssignment_3() { return cStructAssignment_3; }

		//Structure
		public RuleCall getStructStructureParserRuleCall_3_0() { return cStructStructureParserRuleCall_3_0; }

		//value=Value
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }

		//Value
		public RuleCall getValueValueParserRuleCall_4_0() { return cValueValueParserRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//inserttype=TypeUse
		public Assignment getInserttypeAssignment_6() { return cInserttypeAssignment_6; }

		//TypeUse
		public RuleCall getInserttypeTypeUseParserRuleCall_6_0() { return cInserttypeTypeUseParserRuleCall_6_0; }

		//insertvalue=Value
		public Assignment getInsertvalueAssignment_7() { return cInsertvalueAssignment_7; }

		//Value
		public RuleCall getInsertvalueValueParserRuleCall_7_0() { return cInsertvalueValueParserRuleCall_7_0; }

		//("," index+=NUMBER)+
		public Group getGroup_8() { return cGroup_8; }

		//","
		public Keyword getCommaKeyword_8_0() { return cCommaKeyword_8_0; }

		//index+=NUMBER
		public Assignment getIndexAssignment_8_1() { return cIndexAssignment_8_1; }

		//NUMBER
		public RuleCall getIndexNUMBERParserRuleCall_8_1_0() { return cIndexNUMBERParserRuleCall_8_1_0; }
	}

	public class FenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Fence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFenceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSinglethreadKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOrderingAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOrderingATOMIC_ORDERINGTerminalRuleCall_2_0 = (RuleCall)cOrderingAssignment_2.eContents().get(0);
		
		//Fence:
		//
		//	"fence" "singlethread"? ordering=ATOMIC_ORDERING;
		public ParserRule getRule() { return rule; }

		//"fence" "singlethread"? ordering=ATOMIC_ORDERING
		public Group getGroup() { return cGroup; }

		//"fence"
		public Keyword getFenceKeyword_0() { return cFenceKeyword_0; }

		//"singlethread"?
		public Keyword getSinglethreadKeyword_1() { return cSinglethreadKeyword_1; }

		//ordering=ATOMIC_ORDERING
		public Assignment getOrderingAssignment_2() { return cOrderingAssignment_2; }

		//ATOMIC_ORDERING
		public RuleCall getOrderingATOMIC_ORDERINGTerminalRuleCall_2_0() { return cOrderingATOMIC_ORDERINGTerminalRuleCall_2_0; }
	}

	public class CmpXchgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CmpXchg");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cResultAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cResultAddressParserRuleCall_0_0 = (RuleCall)cResultAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cCmpxchgKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVolatileAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cVolatileVolatileKeyword_3_0 = (Keyword)cVolatileAssignment_3.eContents().get(0);
		private final Assignment cAdresstypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAdresstypeTypeUseParserRuleCall_4_0 = (RuleCall)cAdresstypeAssignment_4.eContents().get(0);
		private final Assignment cAdressAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAdressValueParserRuleCall_5_0 = (RuleCall)cAdressAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cComparetypeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cComparetypeTypeUseParserRuleCall_7_0 = (RuleCall)cComparetypeAssignment_7.eContents().get(0);
		private final Assignment cComparevalueAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cComparevalueValueParserRuleCall_8_0 = (RuleCall)cComparevalueAssignment_8.eContents().get(0);
		private final Keyword cCommaKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cNewtypeAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cNewtypeTypeUseParserRuleCall_10_0 = (RuleCall)cNewtypeAssignment_10.eContents().get(0);
		private final Assignment cNewvalueAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cNewvalueValueParserRuleCall_11_0 = (RuleCall)cNewvalueAssignment_11.eContents().get(0);
		private final Keyword cSinglethreadKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cOrderingAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cOrderingATOMIC_ORDERINGTerminalRuleCall_13_0 = (RuleCall)cOrderingAssignment_13.eContents().get(0);
		
		//CmpXchg:
		//
		//	result=Address "=" "cmpxchg" volatile?="volatile"? adresstype=TypeUse adress=Value "," comparetype=TypeUse
		//
		//	comparevalue=Value "," newtype=TypeUse newvalue=Value "singlethread"? ordering=ATOMIC_ORDERING;
		public ParserRule getRule() { return rule; }

		//result=Address "=" "cmpxchg" volatile?="volatile"? adresstype=TypeUse adress=Value "," comparetype=TypeUse
		//
		//comparevalue=Value "," newtype=TypeUse newvalue=Value "singlethread"? ordering=ATOMIC_ORDERING
		public Group getGroup() { return cGroup; }

		//result=Address
		public Assignment getResultAssignment_0() { return cResultAssignment_0; }

		//Address
		public RuleCall getResultAddressParserRuleCall_0_0() { return cResultAddressParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"cmpxchg"
		public Keyword getCmpxchgKeyword_2() { return cCmpxchgKeyword_2; }

		//volatile?="volatile"?
		public Assignment getVolatileAssignment_3() { return cVolatileAssignment_3; }

		//"volatile"
		public Keyword getVolatileVolatileKeyword_3_0() { return cVolatileVolatileKeyword_3_0; }

		//adresstype=TypeUse
		public Assignment getAdresstypeAssignment_4() { return cAdresstypeAssignment_4; }

		//TypeUse
		public RuleCall getAdresstypeTypeUseParserRuleCall_4_0() { return cAdresstypeTypeUseParserRuleCall_4_0; }

		//adress=Value
		public Assignment getAdressAssignment_5() { return cAdressAssignment_5; }

		//Value
		public RuleCall getAdressValueParserRuleCall_5_0() { return cAdressValueParserRuleCall_5_0; }

		//","
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }

		//comparetype=TypeUse
		public Assignment getComparetypeAssignment_7() { return cComparetypeAssignment_7; }

		//TypeUse
		public RuleCall getComparetypeTypeUseParserRuleCall_7_0() { return cComparetypeTypeUseParserRuleCall_7_0; }

		//comparevalue=Value
		public Assignment getComparevalueAssignment_8() { return cComparevalueAssignment_8; }

		//Value
		public RuleCall getComparevalueValueParserRuleCall_8_0() { return cComparevalueValueParserRuleCall_8_0; }

		//","
		public Keyword getCommaKeyword_9() { return cCommaKeyword_9; }

		//newtype=TypeUse
		public Assignment getNewtypeAssignment_10() { return cNewtypeAssignment_10; }

		//TypeUse
		public RuleCall getNewtypeTypeUseParserRuleCall_10_0() { return cNewtypeTypeUseParserRuleCall_10_0; }

		//newvalue=Value
		public Assignment getNewvalueAssignment_11() { return cNewvalueAssignment_11; }

		//Value
		public RuleCall getNewvalueValueParserRuleCall_11_0() { return cNewvalueValueParserRuleCall_11_0; }

		//"singlethread"?
		public Keyword getSinglethreadKeyword_12() { return cSinglethreadKeyword_12; }

		//ordering=ATOMIC_ORDERING
		public Assignment getOrderingAssignment_13() { return cOrderingAssignment_13; }

		//ATOMIC_ORDERING
		public RuleCall getOrderingATOMIC_ORDERINGTerminalRuleCall_13_0() { return cOrderingATOMIC_ORDERINGTerminalRuleCall_13_0; }
	}

	public class AtomicRMWElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtomicRMW");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cResultAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cResultAddressParserRuleCall_0_0 = (RuleCall)cResultAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAtomicrmwKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVolatileAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cVolatileVolatileKeyword_3_0 = (Keyword)cVolatileAssignment_3.eContents().get(0);
		private final Assignment cOperationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOperationBIN_OPTerminalRuleCall_4_0 = (RuleCall)cOperationAssignment_4.eContents().get(0);
		private final Assignment cAdresstypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAdresstypeTypeUseParserRuleCall_5_0 = (RuleCall)cAdresstypeAssignment_5.eContents().get(0);
		private final Assignment cAdressAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAdressValueParserRuleCall_6_0 = (RuleCall)cAdressAssignment_6.eContents().get(0);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cOptypeAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cOptypeTypeUseParserRuleCall_8_0 = (RuleCall)cOptypeAssignment_8.eContents().get(0);
		private final Assignment cOpvalueAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cOpvalueValueParserRuleCall_9_0 = (RuleCall)cOpvalueAssignment_9.eContents().get(0);
		private final Keyword cSinglethreadKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cOrderingAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cOrderingATOMIC_ORDERINGTerminalRuleCall_11_0 = (RuleCall)cOrderingAssignment_11.eContents().get(0);
		
		//AtomicRMW:
		//
		//	result=Address "=" "atomicrmw" volatile?="volatile"? operation=BIN_OP adresstype=TypeUse adress=Value ","
		//
		//	optype=TypeUse opvalue=Value "singlethread"? ordering=ATOMIC_ORDERING;
		public ParserRule getRule() { return rule; }

		//result=Address "=" "atomicrmw" volatile?="volatile"? operation=BIN_OP adresstype=TypeUse adress=Value "," optype=TypeUse
		//
		//opvalue=Value "singlethread"? ordering=ATOMIC_ORDERING
		public Group getGroup() { return cGroup; }

		//result=Address
		public Assignment getResultAssignment_0() { return cResultAssignment_0; }

		//Address
		public RuleCall getResultAddressParserRuleCall_0_0() { return cResultAddressParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"atomicrmw"
		public Keyword getAtomicrmwKeyword_2() { return cAtomicrmwKeyword_2; }

		//volatile?="volatile"?
		public Assignment getVolatileAssignment_3() { return cVolatileAssignment_3; }

		//"volatile"
		public Keyword getVolatileVolatileKeyword_3_0() { return cVolatileVolatileKeyword_3_0; }

		//operation=BIN_OP
		public Assignment getOperationAssignment_4() { return cOperationAssignment_4; }

		//BIN_OP
		public RuleCall getOperationBIN_OPTerminalRuleCall_4_0() { return cOperationBIN_OPTerminalRuleCall_4_0; }

		//adresstype=TypeUse
		public Assignment getAdresstypeAssignment_5() { return cAdresstypeAssignment_5; }

		//TypeUse
		public RuleCall getAdresstypeTypeUseParserRuleCall_5_0() { return cAdresstypeTypeUseParserRuleCall_5_0; }

		//adress=Value
		public Assignment getAdressAssignment_6() { return cAdressAssignment_6; }

		//Value
		public RuleCall getAdressValueParserRuleCall_6_0() { return cAdressValueParserRuleCall_6_0; }

		//","
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }

		//optype=TypeUse
		public Assignment getOptypeAssignment_8() { return cOptypeAssignment_8; }

		//TypeUse
		public RuleCall getOptypeTypeUseParserRuleCall_8_0() { return cOptypeTypeUseParserRuleCall_8_0; }

		//opvalue=Value
		public Assignment getOpvalueAssignment_9() { return cOpvalueAssignment_9; }

		//Value
		public RuleCall getOpvalueValueParserRuleCall_9_0() { return cOpvalueValueParserRuleCall_9_0; }

		//"singlethread"?
		public Keyword getSinglethreadKeyword_10() { return cSinglethreadKeyword_10; }

		//ordering=ATOMIC_ORDERING
		public Assignment getOrderingAssignment_11() { return cOrderingAssignment_11; }

		//ATOMIC_ORDERING
		public RuleCall getOrderingATOMIC_ORDERINGTerminalRuleCall_11_0() { return cOrderingATOMIC_ORDERINGTerminalRuleCall_11_0; }
	}

	public class LoadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Load");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cResultAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cResultAddressParserRuleCall_0_0_0 = (RuleCall)cResultAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Alternatives cAlternatives_0_2 = (Alternatives)cGroup_0.eContents().get(2);
		private final Group cGroup_0_2_0 = (Group)cAlternatives_0_2.eContents().get(0);
		private final Assignment cVolatileAssignment_0_2_0_0 = (Assignment)cGroup_0_2_0.eContents().get(0);
		private final Keyword cVolatileVolatileKeyword_0_2_0_0_0 = (Keyword)cVolatileAssignment_0_2_0_0.eContents().get(0);
		private final Keyword cLoadKeyword_0_2_0_1 = (Keyword)cGroup_0_2_0.eContents().get(1);
		private final Group cGroup_0_2_1 = (Group)cAlternatives_0_2.eContents().get(1);
		private final Keyword cLoadKeyword_0_2_1_0 = (Keyword)cGroup_0_2_1.eContents().get(0);
		private final Assignment cVolatileAssignment_0_2_1_1 = (Assignment)cGroup_0_2_1.eContents().get(1);
		private final Keyword cVolatileVolatileKeyword_0_2_1_1_0 = (Keyword)cVolatileAssignment_0_2_1_1.eContents().get(0);
		private final Assignment cAddressAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cAddressParameterParserRuleCall_0_3_0 = (RuleCall)cAddressAssignment_0_3.eContents().get(0);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final Keyword cCommaKeyword_0_4_0 = (Keyword)cGroup_0_4.eContents().get(0);
		private final Keyword cAlignKeyword_0_4_1 = (Keyword)cGroup_0_4.eContents().get(1);
		private final Assignment cAlignAssignment_0_4_2 = (Assignment)cGroup_0_4.eContents().get(2);
		private final RuleCall cAlignNUMBERParserRuleCall_0_4_2_0 = (RuleCall)cAlignAssignment_0_4_2.eContents().get(0);
		private final Group cGroup_0_5 = (Group)cGroup_0.eContents().get(5);
		private final Keyword cCommaKeyword_0_5_0 = (Keyword)cGroup_0_5.eContents().get(0);
		private final Assignment cMetaAssignment_0_5_1 = (Assignment)cGroup_0_5.eContents().get(1);
		private final RuleCall cMetaMetaArgValueParserRuleCall_0_5_1_0 = (RuleCall)cMetaAssignment_0_5_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cResultAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cResultAddressParserRuleCall_1_0_0 = (RuleCall)cResultAssignment_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLoadKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cAtomicKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cVolatileAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final Keyword cVolatileVolatileKeyword_1_4_0 = (Keyword)cVolatileAssignment_1_4.eContents().get(0);
		private final Assignment cAddressAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cAddressParameterParserRuleCall_1_5_0 = (RuleCall)cAddressAssignment_1_5.eContents().get(0);
		private final Keyword cSinglethreadKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Assignment cOrderingAssignment_1_7 = (Assignment)cGroup_1.eContents().get(7);
		private final RuleCall cOrderingATOMIC_ORDERINGTerminalRuleCall_1_7_0 = (RuleCall)cOrderingAssignment_1_7.eContents().get(0);
		private final Group cGroup_1_8 = (Group)cGroup_1.eContents().get(8);
		private final Keyword cCommaKeyword_1_8_0 = (Keyword)cGroup_1_8.eContents().get(0);
		private final Keyword cAlignKeyword_1_8_1 = (Keyword)cGroup_1_8.eContents().get(1);
		private final Assignment cAlignAssignment_1_8_2 = (Assignment)cGroup_1_8.eContents().get(2);
		private final RuleCall cAlignNUMBERParserRuleCall_1_8_2_0 = (RuleCall)cAlignAssignment_1_8_2.eContents().get(0);
		
		//Load:
		//
		//	result=Address "=" (volatile?="volatile" "load" | "load" volatile?="volatile"?) address=Parameter ("," "align"
		//
		//	align=NUMBER)? ("," meta+=MetaArgValue)* | result=Address "=" "load" "atomic" volatile?="volatile"? address=Parameter
		//
		//	"singlethread"? ordering=ATOMIC_ORDERING ("," "align" align=NUMBER)?;
		public ParserRule getRule() { return rule; }

		//result=Address "=" (volatile?="volatile" "load" | "load" volatile?="volatile"?) address=Parameter ("," "align"
		//
		//align=NUMBER)? ("," meta+=MetaArgValue)* | result=Address "=" "load" "atomic" volatile?="volatile"? address=Parameter
		//
		//"singlethread"? ordering=ATOMIC_ORDERING ("," "align" align=NUMBER)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//result=Address "=" (volatile?="volatile" "load" | "load" volatile?="volatile"?) address=Parameter ("," "align"
		//
		//align=NUMBER)? ("," meta+=MetaArgValue)*
		public Group getGroup_0() { return cGroup_0; }

		//result=Address
		public Assignment getResultAssignment_0_0() { return cResultAssignment_0_0; }

		//Address
		public RuleCall getResultAddressParserRuleCall_0_0_0() { return cResultAddressParserRuleCall_0_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }

		//volatile?="volatile" "load" | "load" volatile?="volatile"?
		public Alternatives getAlternatives_0_2() { return cAlternatives_0_2; }

		//volatile?="volatile" "load"
		public Group getGroup_0_2_0() { return cGroup_0_2_0; }

		//volatile?="volatile"
		public Assignment getVolatileAssignment_0_2_0_0() { return cVolatileAssignment_0_2_0_0; }

		//"volatile"
		public Keyword getVolatileVolatileKeyword_0_2_0_0_0() { return cVolatileVolatileKeyword_0_2_0_0_0; }

		//"load"
		public Keyword getLoadKeyword_0_2_0_1() { return cLoadKeyword_0_2_0_1; }

		//"load" volatile?="volatile"?
		public Group getGroup_0_2_1() { return cGroup_0_2_1; }

		//"load"
		public Keyword getLoadKeyword_0_2_1_0() { return cLoadKeyword_0_2_1_0; }

		//volatile?="volatile"?
		public Assignment getVolatileAssignment_0_2_1_1() { return cVolatileAssignment_0_2_1_1; }

		//"volatile"
		public Keyword getVolatileVolatileKeyword_0_2_1_1_0() { return cVolatileVolatileKeyword_0_2_1_1_0; }

		//address=Parameter
		public Assignment getAddressAssignment_0_3() { return cAddressAssignment_0_3; }

		//Parameter
		public RuleCall getAddressParameterParserRuleCall_0_3_0() { return cAddressParameterParserRuleCall_0_3_0; }

		//("," "align" align=NUMBER)?
		public Group getGroup_0_4() { return cGroup_0_4; }

		//","
		public Keyword getCommaKeyword_0_4_0() { return cCommaKeyword_0_4_0; }

		//"align"
		public Keyword getAlignKeyword_0_4_1() { return cAlignKeyword_0_4_1; }

		//align=NUMBER
		public Assignment getAlignAssignment_0_4_2() { return cAlignAssignment_0_4_2; }

		//NUMBER
		public RuleCall getAlignNUMBERParserRuleCall_0_4_2_0() { return cAlignNUMBERParserRuleCall_0_4_2_0; }

		//("," meta+=MetaArgValue)*
		public Group getGroup_0_5() { return cGroup_0_5; }

		//","
		public Keyword getCommaKeyword_0_5_0() { return cCommaKeyword_0_5_0; }

		//meta+=MetaArgValue
		public Assignment getMetaAssignment_0_5_1() { return cMetaAssignment_0_5_1; }

		//MetaArgValue
		public RuleCall getMetaMetaArgValueParserRuleCall_0_5_1_0() { return cMetaMetaArgValueParserRuleCall_0_5_1_0; }

		//result=Address "=" "load" "atomic" volatile?="volatile"? address=Parameter "singlethread"? ordering=ATOMIC_ORDERING (","
		//
		//"align" align=NUMBER)?
		public Group getGroup_1() { return cGroup_1; }

		//result=Address
		public Assignment getResultAssignment_1_0() { return cResultAssignment_1_0; }

		//Address
		public RuleCall getResultAddressParserRuleCall_1_0_0() { return cResultAddressParserRuleCall_1_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }

		//"load"
		public Keyword getLoadKeyword_1_2() { return cLoadKeyword_1_2; }

		//"atomic"
		public Keyword getAtomicKeyword_1_3() { return cAtomicKeyword_1_3; }

		//volatile?="volatile"?
		public Assignment getVolatileAssignment_1_4() { return cVolatileAssignment_1_4; }

		//"volatile"
		public Keyword getVolatileVolatileKeyword_1_4_0() { return cVolatileVolatileKeyword_1_4_0; }

		//address=Parameter
		public Assignment getAddressAssignment_1_5() { return cAddressAssignment_1_5; }

		//Parameter
		public RuleCall getAddressParameterParserRuleCall_1_5_0() { return cAddressParameterParserRuleCall_1_5_0; }

		//"singlethread"?
		public Keyword getSinglethreadKeyword_1_6() { return cSinglethreadKeyword_1_6; }

		//ordering=ATOMIC_ORDERING
		public Assignment getOrderingAssignment_1_7() { return cOrderingAssignment_1_7; }

		//ATOMIC_ORDERING
		public RuleCall getOrderingATOMIC_ORDERINGTerminalRuleCall_1_7_0() { return cOrderingATOMIC_ORDERINGTerminalRuleCall_1_7_0; }

		//("," "align" align=NUMBER)?
		public Group getGroup_1_8() { return cGroup_1_8; }

		//","
		public Keyword getCommaKeyword_1_8_0() { return cCommaKeyword_1_8_0; }

		//"align"
		public Keyword getAlignKeyword_1_8_1() { return cAlignKeyword_1_8_1; }

		//align=NUMBER
		public Assignment getAlignAssignment_1_8_2() { return cAlignAssignment_1_8_2; }

		//NUMBER
		public RuleCall getAlignNUMBERParserRuleCall_1_8_2_0() { return cAlignNUMBERParserRuleCall_1_8_2_0; }
	}

	public class StoreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Store");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Group cGroup_0_0_0 = (Group)cAlternatives_0_0.eContents().get(0);
		private final Assignment cVolatileAssignment_0_0_0_0 = (Assignment)cGroup_0_0_0.eContents().get(0);
		private final Keyword cVolatileVolatileKeyword_0_0_0_0_0 = (Keyword)cVolatileAssignment_0_0_0_0.eContents().get(0);
		private final Keyword cStoreKeyword_0_0_0_1 = (Keyword)cGroup_0_0_0.eContents().get(1);
		private final Group cGroup_0_0_1 = (Group)cAlternatives_0_0.eContents().get(1);
		private final Keyword cStoreKeyword_0_0_1_0 = (Keyword)cGroup_0_0_1.eContents().get(0);
		private final Assignment cVolatileAssignment_0_0_1_1 = (Assignment)cGroup_0_0_1.eContents().get(1);
		private final Keyword cVolatileVolatileKeyword_0_0_1_1_0 = (Keyword)cVolatileAssignment_0_0_1_1.eContents().get(0);
		private final Assignment cTargetAddressAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTargetAddressParameterParserRuleCall_0_1_0 = (RuleCall)cTargetAddressAssignment_0_1.eContents().get(0);
		private final Keyword cCommaKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cValueAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cValueParameterParserRuleCall_0_3_0 = (RuleCall)cValueAssignment_0_3.eContents().get(0);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final Keyword cCommaKeyword_0_4_0 = (Keyword)cGroup_0_4.eContents().get(0);
		private final Keyword cAlignKeyword_0_4_1 = (Keyword)cGroup_0_4.eContents().get(1);
		private final Assignment cAlignAssignment_0_4_2 = (Assignment)cGroup_0_4.eContents().get(2);
		private final RuleCall cAlignNUMBERParserRuleCall_0_4_2_0 = (RuleCall)cAlignAssignment_0_4_2.eContents().get(0);
		private final Group cGroup_0_5 = (Group)cGroup_0.eContents().get(5);
		private final Keyword cCommaKeyword_0_5_0 = (Keyword)cGroup_0_5.eContents().get(0);
		private final Assignment cMetaAssignment_0_5_1 = (Assignment)cGroup_0_5.eContents().get(1);
		private final RuleCall cMetaMetaArgValueParserRuleCall_0_5_1_0 = (RuleCall)cMetaAssignment_0_5_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cStoreKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAtomicKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cVolatileAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Keyword cVolatileVolatileKeyword_1_2_0 = (Keyword)cVolatileAssignment_1_2.eContents().get(0);
		private final Assignment cTargetAddressAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cTargetAddressParameterParserRuleCall_1_3_0 = (RuleCall)cTargetAddressAssignment_1_3.eContents().get(0);
		private final Keyword cCommaKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cValueAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cValueParameterParserRuleCall_1_5_0 = (RuleCall)cValueAssignment_1_5.eContents().get(0);
		private final Keyword cSinglethreadKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Assignment cOrderingAssignment_1_7 = (Assignment)cGroup_1.eContents().get(7);
		private final RuleCall cOrderingATOMIC_ORDERINGTerminalRuleCall_1_7_0 = (RuleCall)cOrderingAssignment_1_7.eContents().get(0);
		private final Group cGroup_1_8 = (Group)cGroup_1.eContents().get(8);
		private final Keyword cCommaKeyword_1_8_0 = (Keyword)cGroup_1_8.eContents().get(0);
		private final Keyword cAlignKeyword_1_8_1 = (Keyword)cGroup_1_8.eContents().get(1);
		private final Assignment cAlignAssignment_1_8_2 = (Assignment)cGroup_1_8.eContents().get(2);
		private final RuleCall cAlignNUMBERParserRuleCall_1_8_2_0 = (RuleCall)cAlignAssignment_1_8_2.eContents().get(0);
		
		//Store:
		//
		//	(volatile?="volatile" "store" | "store" volatile?="volatile"?) targetAddress=Parameter "," value=Parameter (","
		//
		//	"align" align=NUMBER)? ("," meta+=MetaArgValue)* | "store" "atomic" volatile?="volatile"? targetAddress=Parameter ","
		//
		//	value=Parameter "singlethread"? ordering=ATOMIC_ORDERING ("," "align" align=NUMBER)?;
		public ParserRule getRule() { return rule; }

		//(volatile?="volatile" "store" | "store" volatile?="volatile"?) targetAddress=Parameter "," value=Parameter ("," "align"
		//
		//align=NUMBER)? ("," meta+=MetaArgValue)* | "store" "atomic" volatile?="volatile"? targetAddress=Parameter ","
		//
		//value=Parameter "singlethread"? ordering=ATOMIC_ORDERING ("," "align" align=NUMBER)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//(volatile?="volatile" "store" | "store" volatile?="volatile"?) targetAddress=Parameter "," value=Parameter ("," "align"
		//
		//align=NUMBER)? ("," meta+=MetaArgValue)*
		public Group getGroup_0() { return cGroup_0; }

		//volatile?="volatile" "store" | "store" volatile?="volatile"?
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }

		//volatile?="volatile" "store"
		public Group getGroup_0_0_0() { return cGroup_0_0_0; }

		//volatile?="volatile"
		public Assignment getVolatileAssignment_0_0_0_0() { return cVolatileAssignment_0_0_0_0; }

		//"volatile"
		public Keyword getVolatileVolatileKeyword_0_0_0_0_0() { return cVolatileVolatileKeyword_0_0_0_0_0; }

		//"store"
		public Keyword getStoreKeyword_0_0_0_1() { return cStoreKeyword_0_0_0_1; }

		//"store" volatile?="volatile"?
		public Group getGroup_0_0_1() { return cGroup_0_0_1; }

		//"store"
		public Keyword getStoreKeyword_0_0_1_0() { return cStoreKeyword_0_0_1_0; }

		//volatile?="volatile"?
		public Assignment getVolatileAssignment_0_0_1_1() { return cVolatileAssignment_0_0_1_1; }

		//"volatile"
		public Keyword getVolatileVolatileKeyword_0_0_1_1_0() { return cVolatileVolatileKeyword_0_0_1_1_0; }

		//targetAddress=Parameter
		public Assignment getTargetAddressAssignment_0_1() { return cTargetAddressAssignment_0_1; }

		//Parameter
		public RuleCall getTargetAddressParameterParserRuleCall_0_1_0() { return cTargetAddressParameterParserRuleCall_0_1_0; }

		//","
		public Keyword getCommaKeyword_0_2() { return cCommaKeyword_0_2; }

		//value=Parameter
		public Assignment getValueAssignment_0_3() { return cValueAssignment_0_3; }

		//Parameter
		public RuleCall getValueParameterParserRuleCall_0_3_0() { return cValueParameterParserRuleCall_0_3_0; }

		//("," "align" align=NUMBER)?
		public Group getGroup_0_4() { return cGroup_0_4; }

		//","
		public Keyword getCommaKeyword_0_4_0() { return cCommaKeyword_0_4_0; }

		//"align"
		public Keyword getAlignKeyword_0_4_1() { return cAlignKeyword_0_4_1; }

		//align=NUMBER
		public Assignment getAlignAssignment_0_4_2() { return cAlignAssignment_0_4_2; }

		//NUMBER
		public RuleCall getAlignNUMBERParserRuleCall_0_4_2_0() { return cAlignNUMBERParserRuleCall_0_4_2_0; }

		//("," meta+=MetaArgValue)*
		public Group getGroup_0_5() { return cGroup_0_5; }

		//","
		public Keyword getCommaKeyword_0_5_0() { return cCommaKeyword_0_5_0; }

		//meta+=MetaArgValue
		public Assignment getMetaAssignment_0_5_1() { return cMetaAssignment_0_5_1; }

		//MetaArgValue
		public RuleCall getMetaMetaArgValueParserRuleCall_0_5_1_0() { return cMetaMetaArgValueParserRuleCall_0_5_1_0; }

		//"store" "atomic" volatile?="volatile"? targetAddress=Parameter "," value=Parameter "singlethread"?
		//
		//ordering=ATOMIC_ORDERING ("," "align" align=NUMBER)?
		public Group getGroup_1() { return cGroup_1; }

		//"store"
		public Keyword getStoreKeyword_1_0() { return cStoreKeyword_1_0; }

		//"atomic"
		public Keyword getAtomicKeyword_1_1() { return cAtomicKeyword_1_1; }

		//volatile?="volatile"?
		public Assignment getVolatileAssignment_1_2() { return cVolatileAssignment_1_2; }

		//"volatile"
		public Keyword getVolatileVolatileKeyword_1_2_0() { return cVolatileVolatileKeyword_1_2_0; }

		//targetAddress=Parameter
		public Assignment getTargetAddressAssignment_1_3() { return cTargetAddressAssignment_1_3; }

		//Parameter
		public RuleCall getTargetAddressParameterParserRuleCall_1_3_0() { return cTargetAddressParameterParserRuleCall_1_3_0; }

		//","
		public Keyword getCommaKeyword_1_4() { return cCommaKeyword_1_4; }

		//value=Parameter
		public Assignment getValueAssignment_1_5() { return cValueAssignment_1_5; }

		//Parameter
		public RuleCall getValueParameterParserRuleCall_1_5_0() { return cValueParameterParserRuleCall_1_5_0; }

		//"singlethread"?
		public Keyword getSinglethreadKeyword_1_6() { return cSinglethreadKeyword_1_6; }

		//ordering=ATOMIC_ORDERING
		public Assignment getOrderingAssignment_1_7() { return cOrderingAssignment_1_7; }

		//ATOMIC_ORDERING
		public RuleCall getOrderingATOMIC_ORDERINGTerminalRuleCall_1_7_0() { return cOrderingATOMIC_ORDERINGTerminalRuleCall_1_7_0; }

		//("," "align" align=NUMBER)?
		public Group getGroup_1_8() { return cGroup_1_8; }

		//","
		public Keyword getCommaKeyword_1_8_0() { return cCommaKeyword_1_8_0; }

		//"align"
		public Keyword getAlignKeyword_1_8_1() { return cAlignKeyword_1_8_1; }

		//align=NUMBER
		public Assignment getAlignAssignment_1_8_2() { return cAlignAssignment_1_8_2; }

		//NUMBER
		public RuleCall getAlignNUMBERParserRuleCall_1_8_2_0() { return cAlignNUMBERParserRuleCall_1_8_2_0; }
	}

	public class CallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Call");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cResultAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cResultAddressParserRuleCall_0_0_0 = (RuleCall)cResultAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cTailKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cCallKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cCallingConvParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cRETURN_ATTRIBUTESTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cAdresstypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAdresstypeTypeUseParserRuleCall_5_0 = (RuleCall)cAdresstypeAssignment_5.eContents().get(0);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Assignment cAdressAssignment_6_0 = (Assignment)cAlternatives_6.eContents().get(0);
		private final RuleCall cAdressValueParserRuleCall_6_0_0 = (RuleCall)cAdressAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cAlternatives_6.eContents().get(1);
		private final Keyword cAsmKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Keyword cSideeffectKeyword_6_1_1 = (Keyword)cGroup_6_1.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_6_1_2 = (RuleCall)cGroup_6_1.eContents().get(2);
		private final Keyword cCommaKeyword_6_1_3 = (Keyword)cGroup_6_1.eContents().get(3);
		private final RuleCall cSTRINGTerminalRuleCall_6_1_4 = (RuleCall)cGroup_6_1.eContents().get(4);
		private final Assignment cPListAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cPListParameterListParserRuleCall_7_0 = (RuleCall)cPListAssignment_7.eContents().get(0);
		private final RuleCall cFUNCTION_ATTRIBUTESParserRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cCommaKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cSrclocKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_9_2 = (Keyword)cGroup_9.eContents().get(2);
		private final RuleCall cNUMBERParserRuleCall_9_3 = (RuleCall)cGroup_9.eContents().get(3);
		
		//Call:
		//
		//	(result=Address "=")? "tail"? "call" CallingConv? RETURN_ATTRIBUTES? adresstype=TypeUse (adress=Value | "asm"
		//
		//	"sideeffect"? STRING "," STRING) pList=ParameterList FUNCTION_ATTRIBUTES* ("," "!srcloc" "!" NUMBER)*;
		public ParserRule getRule() { return rule; }

		//(result=Address "=")? "tail"? "call" CallingConv? RETURN_ATTRIBUTES? adresstype=TypeUse (adress=Value | "asm"
		//
		//"sideeffect"? STRING "," STRING) pList=ParameterList FUNCTION_ATTRIBUTES* ("," "!srcloc" "!" NUMBER)*
		public Group getGroup() { return cGroup; }

		//(result=Address "=")?
		public Group getGroup_0() { return cGroup_0; }

		//result=Address
		public Assignment getResultAssignment_0_0() { return cResultAssignment_0_0; }

		//Address
		public RuleCall getResultAddressParserRuleCall_0_0_0() { return cResultAddressParserRuleCall_0_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }

		//"tail"?
		public Keyword getTailKeyword_1() { return cTailKeyword_1; }

		//"call"
		public Keyword getCallKeyword_2() { return cCallKeyword_2; }

		//CallingConv?
		public RuleCall getCallingConvParserRuleCall_3() { return cCallingConvParserRuleCall_3; }

		//RETURN_ATTRIBUTES?
		public RuleCall getRETURN_ATTRIBUTESTerminalRuleCall_4() { return cRETURN_ATTRIBUTESTerminalRuleCall_4; }

		//adresstype=TypeUse
		public Assignment getAdresstypeAssignment_5() { return cAdresstypeAssignment_5; }

		//TypeUse
		public RuleCall getAdresstypeTypeUseParserRuleCall_5_0() { return cAdresstypeTypeUseParserRuleCall_5_0; }

		//adress=Value | "asm" "sideeffect"? STRING "," STRING
		public Alternatives getAlternatives_6() { return cAlternatives_6; }

		//adress=Value
		public Assignment getAdressAssignment_6_0() { return cAdressAssignment_6_0; }

		//Value
		public RuleCall getAdressValueParserRuleCall_6_0_0() { return cAdressValueParserRuleCall_6_0_0; }

		//"asm" "sideeffect"? STRING "," STRING
		public Group getGroup_6_1() { return cGroup_6_1; }

		//"asm"
		public Keyword getAsmKeyword_6_1_0() { return cAsmKeyword_6_1_0; }

		//"sideeffect"?
		public Keyword getSideeffectKeyword_6_1_1() { return cSideeffectKeyword_6_1_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_6_1_2() { return cSTRINGTerminalRuleCall_6_1_2; }

		//","
		public Keyword getCommaKeyword_6_1_3() { return cCommaKeyword_6_1_3; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_6_1_4() { return cSTRINGTerminalRuleCall_6_1_4; }

		//pList=ParameterList
		public Assignment getPListAssignment_7() { return cPListAssignment_7; }

		//ParameterList
		public RuleCall getPListParameterListParserRuleCall_7_0() { return cPListParameterListParserRuleCall_7_0; }

		//FUNCTION_ATTRIBUTES*
		public RuleCall getFUNCTION_ATTRIBUTESParserRuleCall_8() { return cFUNCTION_ATTRIBUTESParserRuleCall_8; }

		//("," "!srcloc" "!" NUMBER)*
		public Group getGroup_9() { return cGroup_9; }

		//","
		public Keyword getCommaKeyword_9_0() { return cCommaKeyword_9_0; }

		//"!srcloc"
		public Keyword getSrclocKeyword_9_1() { return cSrclocKeyword_9_1; }

		//"!"
		public Keyword getExclamationMarkKeyword_9_2() { return cExclamationMarkKeyword_9_2; }

		//NUMBER
		public RuleCall getNUMBERParserRuleCall_9_3() { return cNUMBERParserRuleCall_9_3; }
	}

	public class AllocElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Alloc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cResultAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cResultAddressParserRuleCall_0_0 = (RuleCall)cResultAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAllocaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cTypeTypeUseParserRuleCall_3_0_0 = (RuleCall)cTypeAssignment_3_0.eContents().get(0);
		private final Assignment cTypelistAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypelistParameterListParserRuleCall_3_1_0 = (RuleCall)cTypelistAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cNumelementstypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cNumelementstypeTypeUseParserRuleCall_4_1_0 = (RuleCall)cNumelementstypeAssignment_4_1.eContents().get(0);
		private final Assignment cNumelementsvalueAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cNumelementsvalueValueParserRuleCall_4_2_0 = (RuleCall)cNumelementsvalueAssignment_4_2.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cAlignKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cAlignAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cAlignNUMBERParserRuleCall_5_2_0 = (RuleCall)cAlignAssignment_5_2.eContents().get(0);
		
		//Alloc:
		//
		//	result=Address "=" "alloca" (type=TypeUse typelist=ParameterList?) ("," numelementstype=TypeUse
		//
		//	numelementsvalue=Value)? ("," "align" align=NUMBER)?;
		public ParserRule getRule() { return rule; }

		//result=Address "=" "alloca" (type=TypeUse typelist=ParameterList?) ("," numelementstype=TypeUse numelementsvalue=Value)?
		//
		//("," "align" align=NUMBER)?
		public Group getGroup() { return cGroup; }

		//result=Address
		public Assignment getResultAssignment_0() { return cResultAssignment_0; }

		//Address
		public RuleCall getResultAddressParserRuleCall_0_0() { return cResultAddressParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"alloca"
		public Keyword getAllocaKeyword_2() { return cAllocaKeyword_2; }

		//type=TypeUse typelist=ParameterList?
		public Group getGroup_3() { return cGroup_3; }

		//type=TypeUse
		public Assignment getTypeAssignment_3_0() { return cTypeAssignment_3_0; }

		//TypeUse
		public RuleCall getTypeTypeUseParserRuleCall_3_0_0() { return cTypeTypeUseParserRuleCall_3_0_0; }

		//typelist=ParameterList?
		public Assignment getTypelistAssignment_3_1() { return cTypelistAssignment_3_1; }

		//ParameterList
		public RuleCall getTypelistParameterListParserRuleCall_3_1_0() { return cTypelistParameterListParserRuleCall_3_1_0; }

		//("," numelementstype=TypeUse numelementsvalue=Value)?
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//numelementstype=TypeUse
		public Assignment getNumelementstypeAssignment_4_1() { return cNumelementstypeAssignment_4_1; }

		//TypeUse
		public RuleCall getNumelementstypeTypeUseParserRuleCall_4_1_0() { return cNumelementstypeTypeUseParserRuleCall_4_1_0; }

		//numelementsvalue=Value
		public Assignment getNumelementsvalueAssignment_4_2() { return cNumelementsvalueAssignment_4_2; }

		//Value
		public RuleCall getNumelementsvalueValueParserRuleCall_4_2_0() { return cNumelementsvalueValueParserRuleCall_4_2_0; }

		//("," "align" align=NUMBER)?
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//"align"
		public Keyword getAlignKeyword_5_1() { return cAlignKeyword_5_1; }

		//align=NUMBER
		public Assignment getAlignAssignment_5_2() { return cAlignAssignment_5_2; }

		//NUMBER
		public RuleCall getAlignNUMBERParserRuleCall_5_2_0() { return cAlignNUMBERParserRuleCall_5_2_0; }
	}

	public class PhiCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PhiCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueValueParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLabelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLabelVALID_IDTerminalRuleCall_2_0 = (RuleCall)cLabelAssignment_2.eContents().get(0);
		
		//PhiCase:
		//
		//	value=Value "," label=VALID_ID;
		public ParserRule getRule() { return rule; }

		//value=Value "," label=VALID_ID
		public Group getGroup() { return cGroup; }

		//value=Value
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//Value
		public RuleCall getValueValueParserRuleCall_0_0() { return cValueValueParserRuleCall_0_0; }

		//","
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }

		//label=VALID_ID
		public Assignment getLabelAssignment_2() { return cLabelAssignment_2; }

		//VALID_ID
		public RuleCall getLabelVALID_IDTerminalRuleCall_2_0() { return cLabelVALID_IDTerminalRuleCall_2_0; }
	}

	public class PhiElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Phi");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cResultAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cResultAddressParserRuleCall_0_0 = (RuleCall)cResultAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cPhiKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeUseParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCasesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCasesPhiCaseParserRuleCall_5_0 = (RuleCall)cCasesAssignment_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cCasesAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cCasesPhiCaseParserRuleCall_7_2_0 = (RuleCall)cCasesAssignment_7_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		
		//Phi:
		//
		//	result=Address "=" "phi" type=TypeUse "[" cases+=PhiCase "]" ("," "[" cases+=PhiCase "]")*;
		public ParserRule getRule() { return rule; }

		//result=Address "=" "phi" type=TypeUse "[" cases+=PhiCase "]" ("," "[" cases+=PhiCase "]")*
		public Group getGroup() { return cGroup; }

		//result=Address
		public Assignment getResultAssignment_0() { return cResultAssignment_0; }

		//Address
		public RuleCall getResultAddressParserRuleCall_0_0() { return cResultAddressParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"phi"
		public Keyword getPhiKeyword_2() { return cPhiKeyword_2; }

		//type=TypeUse
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//TypeUse
		public RuleCall getTypeTypeUseParserRuleCall_3_0() { return cTypeTypeUseParserRuleCall_3_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }

		//cases+=PhiCase
		public Assignment getCasesAssignment_5() { return cCasesAssignment_5; }

		//PhiCase
		public RuleCall getCasesPhiCaseParserRuleCall_5_0() { return cCasesPhiCaseParserRuleCall_5_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }

		//("," "[" cases+=PhiCase "]")*
		public Group getGroup_7() { return cGroup_7; }

		//","
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_7_1() { return cLeftSquareBracketKeyword_7_1; }

		//cases+=PhiCase
		public Assignment getCasesAssignment_7_2() { return cCasesAssignment_7_2; }

		//PhiCase
		public RuleCall getCasesPhiCaseParserRuleCall_7_2_0() { return cCasesPhiCaseParserRuleCall_7_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_7_3() { return cRightSquareBracketKeyword_7_3; }
	}

	public class LandingPadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LandingPad");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cResultAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cResultAddressParserRuleCall_0_0 = (RuleCall)cResultAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLandingpadKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStructAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStructStructureParserRuleCall_3_0 = (RuleCall)cStructAssignment_3.eContents().get(0);
		private final Keyword cPersonalityKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPersonalitytypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPersonalitytypeTypeUseParserRuleCall_5_0 = (RuleCall)cPersonalitytypeAssignment_5.eContents().get(0);
		private final Assignment cPersonalityvalueAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPersonalityvalueValueParserRuleCall_6_0 = (RuleCall)cPersonalityvalueAssignment_6.eContents().get(0);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Group cGroup_7_0 = (Group)cAlternatives_7.eContents().get(0);
		private final Keyword cCleanupKeyword_7_0_0 = (Keyword)cGroup_7_0.eContents().get(0);
		private final Assignment cClauseAssignment_7_0_1 = (Assignment)cGroup_7_0.eContents().get(1);
		private final RuleCall cClauseClauseParserRuleCall_7_0_1_0 = (RuleCall)cClauseAssignment_7_0_1.eContents().get(0);
		private final Assignment cClauseAssignment_7_1 = (Assignment)cAlternatives_7.eContents().get(1);
		private final RuleCall cClauseClauseParserRuleCall_7_1_0 = (RuleCall)cClauseAssignment_7_1.eContents().get(0);
		
		//LandingPad:
		//
		//	result=Address "=" "landingpad" struct=Structure "personality" personalitytype=TypeUse personalityvalue=Value
		//
		//	("cleanup" clause+=Clause* | clause+=Clause+);
		public ParserRule getRule() { return rule; }

		//result=Address "=" "landingpad" struct=Structure "personality" personalitytype=TypeUse personalityvalue=Value ("cleanup"
		//
		//clause+=Clause* | clause+=Clause+)
		public Group getGroup() { return cGroup; }

		//result=Address
		public Assignment getResultAssignment_0() { return cResultAssignment_0; }

		//Address
		public RuleCall getResultAddressParserRuleCall_0_0() { return cResultAddressParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"landingpad"
		public Keyword getLandingpadKeyword_2() { return cLandingpadKeyword_2; }

		//struct=Structure
		public Assignment getStructAssignment_3() { return cStructAssignment_3; }

		//Structure
		public RuleCall getStructStructureParserRuleCall_3_0() { return cStructStructureParserRuleCall_3_0; }

		//"personality"
		public Keyword getPersonalityKeyword_4() { return cPersonalityKeyword_4; }

		//personalitytype=TypeUse
		public Assignment getPersonalitytypeAssignment_5() { return cPersonalitytypeAssignment_5; }

		//TypeUse
		public RuleCall getPersonalitytypeTypeUseParserRuleCall_5_0() { return cPersonalitytypeTypeUseParserRuleCall_5_0; }

		//personalityvalue=Value
		public Assignment getPersonalityvalueAssignment_6() { return cPersonalityvalueAssignment_6; }

		//Value
		public RuleCall getPersonalityvalueValueParserRuleCall_6_0() { return cPersonalityvalueValueParserRuleCall_6_0; }

		//"cleanup" clause+=Clause* | clause+=Clause+
		public Alternatives getAlternatives_7() { return cAlternatives_7; }

		//"cleanup" clause+=Clause*
		public Group getGroup_7_0() { return cGroup_7_0; }

		//"cleanup"
		public Keyword getCleanupKeyword_7_0_0() { return cCleanupKeyword_7_0_0; }

		//clause+=Clause*
		public Assignment getClauseAssignment_7_0_1() { return cClauseAssignment_7_0_1; }

		//Clause
		public RuleCall getClauseClauseParserRuleCall_7_0_1_0() { return cClauseClauseParserRuleCall_7_0_1_0; }

		//clause+=Clause+
		public Assignment getClauseAssignment_7_1() { return cClauseAssignment_7_1; }

		//Clause
		public RuleCall getClauseClauseParserRuleCall_7_1_0() { return cClauseClauseParserRuleCall_7_1_0; }
	}

	public class ClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Clause");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cCatchKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTypeTypeUseParserRuleCall_0_1_0 = (RuleCall)cTypeAssignment_0_1.eContents().get(0);
		private final Assignment cValueAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_0_2_0 = (RuleCall)cValueAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFilterKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFilterarrayAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFilterarrayArrayParserRuleCall_1_1_0 = (RuleCall)cFilterarrayAssignment_1_1.eContents().get(0);
		private final Assignment cConstantAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cConstantValueParserRuleCall_1_2_0 = (RuleCall)cConstantAssignment_1_2.eContents().get(0);
		
		//Clause:
		//
		//	"catch" type=TypeUse value=Value | "filter" filterarray=Array constant=Value;
		public ParserRule getRule() { return rule; }

		//"catch" type=TypeUse value=Value | "filter" filterarray=Array constant=Value
		public Alternatives getAlternatives() { return cAlternatives; }

		//"catch" type=TypeUse value=Value
		public Group getGroup_0() { return cGroup_0; }

		//"catch"
		public Keyword getCatchKeyword_0_0() { return cCatchKeyword_0_0; }

		//type=TypeUse
		public Assignment getTypeAssignment_0_1() { return cTypeAssignment_0_1; }

		//TypeUse
		public RuleCall getTypeTypeUseParserRuleCall_0_1_0() { return cTypeTypeUseParserRuleCall_0_1_0; }

		//value=Value
		public Assignment getValueAssignment_0_2() { return cValueAssignment_0_2; }

		//Value
		public RuleCall getValueValueParserRuleCall_0_2_0() { return cValueValueParserRuleCall_0_2_0; }

		//"filter" filterarray=Array constant=Value
		public Group getGroup_1() { return cGroup_1; }

		//"filter"
		public Keyword getFilterKeyword_1_0() { return cFilterKeyword_1_0; }

		//filterarray=Array
		public Assignment getFilterarrayAssignment_1_1() { return cFilterarrayAssignment_1_1; }

		//Array
		public RuleCall getFilterarrayArrayParserRuleCall_1_1_0() { return cFilterarrayArrayParserRuleCall_1_1_0; }

		//constant=Value
		public Assignment getConstantAssignment_1_2() { return cConstantAssignment_1_2; }

		//Value
		public RuleCall getConstantValueParserRuleCall_1_2_0() { return cConstantValueParserRuleCall_1_2_0; }
	}

	public class SelectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Select");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cResultAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cResultAddressParserRuleCall_0_0 = (RuleCall)cResultAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSelectKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditiontypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditiontypeTypeUseParserRuleCall_3_0 = (RuleCall)cConditiontypeAssignment_3.eContents().get(0);
		private final Assignment cConditionvalueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionvalueValueParserRuleCall_4_0 = (RuleCall)cConditionvalueAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cVal1typeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cVal1typeTypeUseParserRuleCall_6_0 = (RuleCall)cVal1typeAssignment_6.eContents().get(0);
		private final Assignment cVal1valueAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cVal1valueValueParserRuleCall_7_0 = (RuleCall)cVal1valueAssignment_7.eContents().get(0);
		private final Keyword cCommaKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cVal2typeAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cVal2typeTypeUseParserRuleCall_9_0 = (RuleCall)cVal2typeAssignment_9.eContents().get(0);
		private final Assignment cVal2valueAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cVal2valueValueParserRuleCall_10_0 = (RuleCall)cVal2valueAssignment_10.eContents().get(0);
		
		//Select:
		//
		//	result=Address "=" "select" conditiontype=TypeUse conditionvalue=Value "," val1type=TypeUse val1value=Value ","
		//
		//	val2type=TypeUse val2value=Value;
		public ParserRule getRule() { return rule; }

		//result=Address "=" "select" conditiontype=TypeUse conditionvalue=Value "," val1type=TypeUse val1value=Value ","
		//
		//val2type=TypeUse val2value=Value
		public Group getGroup() { return cGroup; }

		//result=Address
		public Assignment getResultAssignment_0() { return cResultAssignment_0; }

		//Address
		public RuleCall getResultAddressParserRuleCall_0_0() { return cResultAddressParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"select"
		public Keyword getSelectKeyword_2() { return cSelectKeyword_2; }

		//conditiontype=TypeUse
		public Assignment getConditiontypeAssignment_3() { return cConditiontypeAssignment_3; }

		//TypeUse
		public RuleCall getConditiontypeTypeUseParserRuleCall_3_0() { return cConditiontypeTypeUseParserRuleCall_3_0; }

		//conditionvalue=Value
		public Assignment getConditionvalueAssignment_4() { return cConditionvalueAssignment_4; }

		//Value
		public RuleCall getConditionvalueValueParserRuleCall_4_0() { return cConditionvalueValueParserRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//val1type=TypeUse
		public Assignment getVal1typeAssignment_6() { return cVal1typeAssignment_6; }

		//TypeUse
		public RuleCall getVal1typeTypeUseParserRuleCall_6_0() { return cVal1typeTypeUseParserRuleCall_6_0; }

		//val1value=Value
		public Assignment getVal1valueAssignment_7() { return cVal1valueAssignment_7; }

		//Value
		public RuleCall getVal1valueValueParserRuleCall_7_0() { return cVal1valueValueParserRuleCall_7_0; }

		//","
		public Keyword getCommaKeyword_8() { return cCommaKeyword_8; }

		//val2type=TypeUse
		public Assignment getVal2typeAssignment_9() { return cVal2typeAssignment_9; }

		//TypeUse
		public RuleCall getVal2typeTypeUseParserRuleCall_9_0() { return cVal2typeTypeUseParserRuleCall_9_0; }

		//val2value=Value
		public Assignment getVal2valueAssignment_10() { return cVal2valueAssignment_10; }

		//Value
		public RuleCall getVal2valueValueParserRuleCall_10_0() { return cVal2valueValueParserRuleCall_10_0; }
	}

	public class VariableAttributeAccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableAttributeAccess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cResultAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cResultAddressParserRuleCall_0_0 = (RuleCall)cResultAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cVa_argKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cListtypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cListtypeTypeUseParserRuleCall_3_0 = (RuleCall)cListtypeAssignment_3.eContents().get(0);
		private final Assignment cListvalueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cListvalueValueParserRuleCall_4_0 = (RuleCall)cListvalueAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cArgTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cArgTypeTypeUseParserRuleCall_6_0 = (RuleCall)cArgTypeAssignment_6.eContents().get(0);
		
		//VariableAttributeAccess:
		//
		//	result=Address "=" "va_arg" listtype=TypeUse listvalue=Value "," argType=TypeUse;
		public ParserRule getRule() { return rule; }

		//result=Address "=" "va_arg" listtype=TypeUse listvalue=Value "," argType=TypeUse
		public Group getGroup() { return cGroup; }

		//result=Address
		public Assignment getResultAssignment_0() { return cResultAssignment_0; }

		//Address
		public RuleCall getResultAddressParserRuleCall_0_0() { return cResultAddressParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"va_arg"
		public Keyword getVa_argKeyword_2() { return cVa_argKeyword_2; }

		//listtype=TypeUse
		public Assignment getListtypeAssignment_3() { return cListtypeAssignment_3; }

		//TypeUse
		public RuleCall getListtypeTypeUseParserRuleCall_3_0() { return cListtypeTypeUseParserRuleCall_3_0; }

		//listvalue=Value
		public Assignment getListvalueAssignment_4() { return cListvalueAssignment_4; }

		//Value
		public RuleCall getListvalueValueParserRuleCall_4_0() { return cListvalueValueParserRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//argType=TypeUse
		public Assignment getArgTypeAssignment_6() { return cArgTypeAssignment_6; }

		//TypeUse
		public RuleCall getArgTypeTypeUseParserRuleCall_6_0() { return cArgTypeTypeUseParserRuleCall_6_0; }
	}

	public class ExtractElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExtractElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cResultAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cResultAddressParserRuleCall_0_0 = (RuleCall)cResultAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cExtractelementKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVectortypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVectortypeTypeUseParserRuleCall_3_0 = (RuleCall)cVectortypeAssignment_3.eContents().get(0);
		private final Assignment cVectorvalueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVectorvalueValueParserRuleCall_4_0 = (RuleCall)cVectorvalueAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cIndextypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cIndextypeTypeUseParserRuleCall_6_0 = (RuleCall)cIndextypeAssignment_6.eContents().get(0);
		private final Assignment cIndexAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cIndexValueParserRuleCall_7_0 = (RuleCall)cIndexAssignment_7.eContents().get(0);
		
		//ExtractElement:
		//
		//	result=Address "=" "extractelement" vectortype=TypeUse vectorvalue=Value "," indextype=TypeUse index=Value;
		public ParserRule getRule() { return rule; }

		//result=Address "=" "extractelement" vectortype=TypeUse vectorvalue=Value "," indextype=TypeUse index=Value
		public Group getGroup() { return cGroup; }

		//result=Address
		public Assignment getResultAssignment_0() { return cResultAssignment_0; }

		//Address
		public RuleCall getResultAddressParserRuleCall_0_0() { return cResultAddressParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"extractelement"
		public Keyword getExtractelementKeyword_2() { return cExtractelementKeyword_2; }

		//vectortype=TypeUse
		public Assignment getVectortypeAssignment_3() { return cVectortypeAssignment_3; }

		//TypeUse
		public RuleCall getVectortypeTypeUseParserRuleCall_3_0() { return cVectortypeTypeUseParserRuleCall_3_0; }

		//vectorvalue=Value
		public Assignment getVectorvalueAssignment_4() { return cVectorvalueAssignment_4; }

		//Value
		public RuleCall getVectorvalueValueParserRuleCall_4_0() { return cVectorvalueValueParserRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//indextype=TypeUse
		public Assignment getIndextypeAssignment_6() { return cIndextypeAssignment_6; }

		//TypeUse
		public RuleCall getIndextypeTypeUseParserRuleCall_6_0() { return cIndextypeTypeUseParserRuleCall_6_0; }

		//index=Value
		public Assignment getIndexAssignment_7() { return cIndexAssignment_7; }

		//Value
		public RuleCall getIndexValueParserRuleCall_7_0() { return cIndexValueParserRuleCall_7_0; }
	}

	public class InsertElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InsertElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cResultAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cResultAddressParserRuleCall_0_0 = (RuleCall)cResultAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cInsertelementKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVectortypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVectortypeTypeUseParserRuleCall_3_0 = (RuleCall)cVectortypeAssignment_3.eContents().get(0);
		private final Assignment cVectorvalueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVectorvalueValueParserRuleCall_4_0 = (RuleCall)cVectorvalueAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cScalartypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cScalartypeTypeUseParserRuleCall_6_0 = (RuleCall)cScalartypeAssignment_6.eContents().get(0);
		private final Assignment cScalarvalueAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cScalarvalueValueParserRuleCall_7_0 = (RuleCall)cScalarvalueAssignment_7.eContents().get(0);
		private final Keyword cCommaKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cIndextypeAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cIndextypeTypeUseParserRuleCall_9_0 = (RuleCall)cIndextypeAssignment_9.eContents().get(0);
		private final Assignment cIndexAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cIndexValueParserRuleCall_10_0 = (RuleCall)cIndexAssignment_10.eContents().get(0);
		
		//InsertElement:
		//
		//	result=Address "=" "insertelement" vectortype=TypeUse vectorvalue=Value "," scalartype=TypeUse scalarvalue=Value ","
		//
		//	indextype=TypeUse index=Value;
		public ParserRule getRule() { return rule; }

		//result=Address "=" "insertelement" vectortype=TypeUse vectorvalue=Value "," scalartype=TypeUse scalarvalue=Value ","
		//
		//indextype=TypeUse index=Value
		public Group getGroup() { return cGroup; }

		//result=Address
		public Assignment getResultAssignment_0() { return cResultAssignment_0; }

		//Address
		public RuleCall getResultAddressParserRuleCall_0_0() { return cResultAddressParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"insertelement"
		public Keyword getInsertelementKeyword_2() { return cInsertelementKeyword_2; }

		//vectortype=TypeUse
		public Assignment getVectortypeAssignment_3() { return cVectortypeAssignment_3; }

		//TypeUse
		public RuleCall getVectortypeTypeUseParserRuleCall_3_0() { return cVectortypeTypeUseParserRuleCall_3_0; }

		//vectorvalue=Value
		public Assignment getVectorvalueAssignment_4() { return cVectorvalueAssignment_4; }

		//Value
		public RuleCall getVectorvalueValueParserRuleCall_4_0() { return cVectorvalueValueParserRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//scalartype=TypeUse
		public Assignment getScalartypeAssignment_6() { return cScalartypeAssignment_6; }

		//TypeUse
		public RuleCall getScalartypeTypeUseParserRuleCall_6_0() { return cScalartypeTypeUseParserRuleCall_6_0; }

		//scalarvalue=Value
		public Assignment getScalarvalueAssignment_7() { return cScalarvalueAssignment_7; }

		//Value
		public RuleCall getScalarvalueValueParserRuleCall_7_0() { return cScalarvalueValueParserRuleCall_7_0; }

		//","
		public Keyword getCommaKeyword_8() { return cCommaKeyword_8; }

		//indextype=TypeUse
		public Assignment getIndextypeAssignment_9() { return cIndextypeAssignment_9; }

		//TypeUse
		public RuleCall getIndextypeTypeUseParserRuleCall_9_0() { return cIndextypeTypeUseParserRuleCall_9_0; }

		//index=Value
		public Assignment getIndexAssignment_10() { return cIndexAssignment_10; }

		//Value
		public RuleCall getIndexValueParserRuleCall_10_0() { return cIndexValueParserRuleCall_10_0; }
	}

	public class ShuffleVectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShuffleVector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cResultAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cResultAddressParserRuleCall_0_0 = (RuleCall)cResultAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cShufflevectorKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVal1typeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVal1typeTypeUseParserRuleCall_3_0 = (RuleCall)cVal1typeAssignment_3.eContents().get(0);
		private final Assignment cVal1valueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVal1valueValueParserRuleCall_4_0 = (RuleCall)cVal1valueAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cVal2typeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cVal2typeTypeUseParserRuleCall_6_0 = (RuleCall)cVal2typeAssignment_6.eContents().get(0);
		private final Assignment cVal2valueAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cVal2valueValueParserRuleCall_7_0 = (RuleCall)cVal2valueAssignment_7.eContents().get(0);
		private final Keyword cCommaKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cMasktypeAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cMasktypeTypeUseParserRuleCall_9_0 = (RuleCall)cMasktypeAssignment_9.eContents().get(0);
		private final Assignment cMaskvalueAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cMaskvalueValueParserRuleCall_10_0 = (RuleCall)cMaskvalueAssignment_10.eContents().get(0);
		
		//ShuffleVector:
		//
		//	result=Address "=" "shufflevector" val1type=TypeUse val1value=Value "," val2type=TypeUse val2value=Value ","
		//
		//	masktype=TypeUse maskvalue=Value;
		public ParserRule getRule() { return rule; }

		//result=Address "=" "shufflevector" val1type=TypeUse val1value=Value "," val2type=TypeUse val2value=Value ","
		//
		//masktype=TypeUse maskvalue=Value
		public Group getGroup() { return cGroup; }

		//result=Address
		public Assignment getResultAssignment_0() { return cResultAssignment_0; }

		//Address
		public RuleCall getResultAddressParserRuleCall_0_0() { return cResultAddressParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"shufflevector"
		public Keyword getShufflevectorKeyword_2() { return cShufflevectorKeyword_2; }

		//val1type=TypeUse
		public Assignment getVal1typeAssignment_3() { return cVal1typeAssignment_3; }

		//TypeUse
		public RuleCall getVal1typeTypeUseParserRuleCall_3_0() { return cVal1typeTypeUseParserRuleCall_3_0; }

		//val1value=Value
		public Assignment getVal1valueAssignment_4() { return cVal1valueAssignment_4; }

		//Value
		public RuleCall getVal1valueValueParserRuleCall_4_0() { return cVal1valueValueParserRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//val2type=TypeUse
		public Assignment getVal2typeAssignment_6() { return cVal2typeAssignment_6; }

		//TypeUse
		public RuleCall getVal2typeTypeUseParserRuleCall_6_0() { return cVal2typeTypeUseParserRuleCall_6_0; }

		//val2value=Value
		public Assignment getVal2valueAssignment_7() { return cVal2valueAssignment_7; }

		//Value
		public RuleCall getVal2valueValueParserRuleCall_7_0() { return cVal2valueValueParserRuleCall_7_0; }

		//","
		public Keyword getCommaKeyword_8() { return cCommaKeyword_8; }

		//masktype=TypeUse
		public Assignment getMasktypeAssignment_9() { return cMasktypeAssignment_9; }

		//TypeUse
		public RuleCall getMasktypeTypeUseParserRuleCall_9_0() { return cMasktypeTypeUseParserRuleCall_9_0; }

		//maskvalue=Value
		public Assignment getMaskvalueAssignment_10() { return cMaskvalueAssignment_10; }

		//Value
		public RuleCall getMaskvalueValueParserRuleCall_10_0() { return cMaskvalueValueParserRuleCall_10_0; }
	}

	public class CompareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Compare");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cResultAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cResultAddressParserRuleCall_0_0 = (RuleCall)cResultAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cIcmpKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cPredAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cPredI_PREDICATESTerminalRuleCall_2_0_1_0 = (RuleCall)cPredAssignment_2_0_1.eContents().get(0);
		private final Assignment cComptypeAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final RuleCall cComptypeTypeUseParserRuleCall_2_0_2_0 = (RuleCall)cComptypeAssignment_2_0_2.eContents().get(0);
		private final Assignment cValue1Assignment_2_0_3 = (Assignment)cGroup_2_0.eContents().get(3);
		private final RuleCall cValue1ValueParserRuleCall_2_0_3_0 = (RuleCall)cValue1Assignment_2_0_3.eContents().get(0);
		private final Keyword cCommaKeyword_2_0_4 = (Keyword)cGroup_2_0.eContents().get(4);
		private final Assignment cValue2Assignment_2_0_5 = (Assignment)cGroup_2_0.eContents().get(5);
		private final RuleCall cValue2ValueParserRuleCall_2_0_5_0 = (RuleCall)cValue2Assignment_2_0_5.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cFcmpKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cPredAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final Alternatives cPredAlternatives_2_1_1_0 = (Alternatives)cPredAssignment_2_1_1.eContents().get(0);
		private final RuleCall cPredF_PREDICATESTerminalRuleCall_2_1_1_0_0 = (RuleCall)cPredAlternatives_2_1_1_0.eContents().get(0);
		private final RuleCall cPredBOOLTerminalRuleCall_2_1_1_0_1 = (RuleCall)cPredAlternatives_2_1_1_0.eContents().get(1);
		private final Assignment cComptypeAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cComptypeTypeUseParserRuleCall_2_1_2_0 = (RuleCall)cComptypeAssignment_2_1_2.eContents().get(0);
		private final Assignment cValue1Assignment_2_1_3 = (Assignment)cGroup_2_1.eContents().get(3);
		private final RuleCall cValue1ValueParserRuleCall_2_1_3_0 = (RuleCall)cValue1Assignment_2_1_3.eContents().get(0);
		private final Keyword cCommaKeyword_2_1_4 = (Keyword)cGroup_2_1.eContents().get(4);
		private final Assignment cValue2Assignment_2_1_5 = (Assignment)cGroup_2_1.eContents().get(5);
		private final RuleCall cValue2ValueParserRuleCall_2_1_5_0 = (RuleCall)cValue2Assignment_2_1_5.eContents().get(0);
		
		//Compare:
		//
		//	result=Address "=" ("icmp" pred=I_PREDICATES comptype=TypeUse value1=Value "," value2=Value | "fcmp"
		//
		//	pred=(F_PREDICATES | BOOL) comptype=TypeUse value1=Value "," value2=Value);
		public ParserRule getRule() { return rule; }

		//result=Address "=" ("icmp" pred=I_PREDICATES comptype=TypeUse value1=Value "," value2=Value | "fcmp" pred=(F_PREDICATES
		//
		//| BOOL) comptype=TypeUse value1=Value "," value2=Value)
		public Group getGroup() { return cGroup; }

		//result=Address
		public Assignment getResultAssignment_0() { return cResultAssignment_0; }

		//Address
		public RuleCall getResultAddressParserRuleCall_0_0() { return cResultAddressParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"icmp" pred=I_PREDICATES comptype=TypeUse value1=Value "," value2=Value | "fcmp" pred=(F_PREDICATES | BOOL)
		//
		//comptype=TypeUse value1=Value "," value2=Value
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"icmp" pred=I_PREDICATES comptype=TypeUse value1=Value "," value2=Value
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"icmp"
		public Keyword getIcmpKeyword_2_0_0() { return cIcmpKeyword_2_0_0; }

		//pred=I_PREDICATES
		public Assignment getPredAssignment_2_0_1() { return cPredAssignment_2_0_1; }

		//I_PREDICATES
		public RuleCall getPredI_PREDICATESTerminalRuleCall_2_0_1_0() { return cPredI_PREDICATESTerminalRuleCall_2_0_1_0; }

		//comptype=TypeUse
		public Assignment getComptypeAssignment_2_0_2() { return cComptypeAssignment_2_0_2; }

		//TypeUse
		public RuleCall getComptypeTypeUseParserRuleCall_2_0_2_0() { return cComptypeTypeUseParserRuleCall_2_0_2_0; }

		//value1=Value
		public Assignment getValue1Assignment_2_0_3() { return cValue1Assignment_2_0_3; }

		//Value
		public RuleCall getValue1ValueParserRuleCall_2_0_3_0() { return cValue1ValueParserRuleCall_2_0_3_0; }

		//","
		public Keyword getCommaKeyword_2_0_4() { return cCommaKeyword_2_0_4; }

		//value2=Value
		public Assignment getValue2Assignment_2_0_5() { return cValue2Assignment_2_0_5; }

		//Value
		public RuleCall getValue2ValueParserRuleCall_2_0_5_0() { return cValue2ValueParserRuleCall_2_0_5_0; }

		//"fcmp" pred=(F_PREDICATES | BOOL) comptype=TypeUse value1=Value "," value2=Value
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"fcmp"
		public Keyword getFcmpKeyword_2_1_0() { return cFcmpKeyword_2_1_0; }

		//pred=(F_PREDICATES | BOOL)
		public Assignment getPredAssignment_2_1_1() { return cPredAssignment_2_1_1; }

		//F_PREDICATES | BOOL
		public Alternatives getPredAlternatives_2_1_1_0() { return cPredAlternatives_2_1_1_0; }

		//F_PREDICATES
		public RuleCall getPredF_PREDICATESTerminalRuleCall_2_1_1_0_0() { return cPredF_PREDICATESTerminalRuleCall_2_1_1_0_0; }

		//BOOL
		public RuleCall getPredBOOLTerminalRuleCall_2_1_1_0_1() { return cPredBOOLTerminalRuleCall_2_1_1_0_1; }

		//comptype=TypeUse
		public Assignment getComptypeAssignment_2_1_2() { return cComptypeAssignment_2_1_2; }

		//TypeUse
		public RuleCall getComptypeTypeUseParserRuleCall_2_1_2_0() { return cComptypeTypeUseParserRuleCall_2_1_2_0; }

		//value1=Value
		public Assignment getValue1Assignment_2_1_3() { return cValue1Assignment_2_1_3; }

		//Value
		public RuleCall getValue1ValueParserRuleCall_2_1_3_0() { return cValue1ValueParserRuleCall_2_1_3_0; }

		//","
		public Keyword getCommaKeyword_2_1_4() { return cCommaKeyword_2_1_4; }

		//value2=Value
		public Assignment getValue2Assignment_2_1_5() { return cValue2Assignment_2_1_5; }

		//Value
		public RuleCall getValue2ValueParserRuleCall_2_1_5_0() { return cValue2ValueParserRuleCall_2_1_5_0; }
	}

	public class IndirectBranchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IndirectBranch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIndirectbrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAdresstypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAdresstypeTypeUseParserRuleCall_1_0 = (RuleCall)cAdresstypeAssignment_1.eContents().get(0);
		private final Assignment cAdressAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAdressValueParserRuleCall_2_0 = (RuleCall)cAdressAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cLabeltypeAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cLabeltypeTypeUseParserRuleCall_5_0_0 = (RuleCall)cLabeltypeAssignment_5_0.eContents().get(0);
		private final Assignment cLabelsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cLabelsValueParserRuleCall_5_1_0 = (RuleCall)cLabelsAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cLabeltypeAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cLabeltypeTypeUseParserRuleCall_5_2_1_0 = (RuleCall)cLabeltypeAssignment_5_2_1.eContents().get(0);
		private final Assignment cLabelsAssignment_5_2_2 = (Assignment)cGroup_5_2.eContents().get(2);
		private final RuleCall cLabelsValueParserRuleCall_5_2_2_0 = (RuleCall)cLabelsAssignment_5_2_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//IndirectBranch:
		//
		//	"indirectbr" adresstype=TypeUse adress=Value "," "[" (labeltype+=TypeUse labels+=Value ("," labeltype+=TypeUse
		//
		//	labels+=Value)*)? "]";
		public ParserRule getRule() { return rule; }

		//"indirectbr" adresstype=TypeUse adress=Value "," "[" (labeltype+=TypeUse labels+=Value ("," labeltype+=TypeUse
		//
		//labels+=Value)*)? "]"
		public Group getGroup() { return cGroup; }

		//"indirectbr"
		public Keyword getIndirectbrKeyword_0() { return cIndirectbrKeyword_0; }

		//adresstype=TypeUse
		public Assignment getAdresstypeAssignment_1() { return cAdresstypeAssignment_1; }

		//TypeUse
		public RuleCall getAdresstypeTypeUseParserRuleCall_1_0() { return cAdresstypeTypeUseParserRuleCall_1_0; }

		//adress=Value
		public Assignment getAdressAssignment_2() { return cAdressAssignment_2; }

		//Value
		public RuleCall getAdressValueParserRuleCall_2_0() { return cAdressValueParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//"["
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }

		//(labeltype+=TypeUse labels+=Value ("," labeltype+=TypeUse labels+=Value)*)?
		public Group getGroup_5() { return cGroup_5; }

		//labeltype+=TypeUse
		public Assignment getLabeltypeAssignment_5_0() { return cLabeltypeAssignment_5_0; }

		//TypeUse
		public RuleCall getLabeltypeTypeUseParserRuleCall_5_0_0() { return cLabeltypeTypeUseParserRuleCall_5_0_0; }

		//labels+=Value
		public Assignment getLabelsAssignment_5_1() { return cLabelsAssignment_5_1; }

		//Value
		public RuleCall getLabelsValueParserRuleCall_5_1_0() { return cLabelsValueParserRuleCall_5_1_0; }

		//("," labeltype+=TypeUse labels+=Value)*
		public Group getGroup_5_2() { return cGroup_5_2; }

		//","
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }

		//labeltype+=TypeUse
		public Assignment getLabeltypeAssignment_5_2_1() { return cLabeltypeAssignment_5_2_1; }

		//TypeUse
		public RuleCall getLabeltypeTypeUseParserRuleCall_5_2_1_0() { return cLabeltypeTypeUseParserRuleCall_5_2_1_0; }

		//labels+=Value
		public Assignment getLabelsAssignment_5_2_2() { return cLabelsAssignment_5_2_2; }

		//Value
		public RuleCall getLabelsValueParserRuleCall_5_2_2_0() { return cLabelsValueParserRuleCall_5_2_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}

	public class SwitchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Switch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwitchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cComptypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cComptypeTypeUseParserRuleCall_1_0 = (RuleCall)cComptypeAssignment_1.eContents().get(0);
		private final Assignment cCompvalueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCompvalueValueParserRuleCall_2_0 = (RuleCall)cCompvalueAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDefaulttypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDefaulttypeTypeUseParserRuleCall_4_0 = (RuleCall)cDefaulttypeAssignment_4.eContents().get(0);
		private final Assignment cDefaultvalueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDefaultvalueValueParserRuleCall_5_0 = (RuleCall)cDefaultvalueAssignment_5.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cJtypesAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cJtypesTypeUseParserRuleCall_7_0_0 = (RuleCall)cJtypesAssignment_7_0.eContents().get(0);
		private final Assignment cJvaluesAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cJvaluesValueParserRuleCall_7_1_0 = (RuleCall)cJvaluesAssignment_7_1.eContents().get(0);
		private final Keyword cCommaKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Assignment cDestinationtypesAssignment_7_3 = (Assignment)cGroup_7.eContents().get(3);
		private final RuleCall cDestinationtypesTypeUseParserRuleCall_7_3_0 = (RuleCall)cDestinationtypesAssignment_7_3.eContents().get(0);
		private final Assignment cDestinationsAssignment_7_4 = (Assignment)cGroup_7.eContents().get(4);
		private final RuleCall cDestinationsValueParserRuleCall_7_4_0 = (RuleCall)cDestinationsAssignment_7_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Switch:
		//
		//	"switch" comptype=TypeUse compvalue=Value "," defaulttype=TypeUse defaultvalue=Value "[" (jtypes+=TypeUse
		//
		//	jvalues+=Value "," destinationtypes+=TypeUse destinations+=Value)+ "]";
		public ParserRule getRule() { return rule; }

		//"switch" comptype=TypeUse compvalue=Value "," defaulttype=TypeUse defaultvalue=Value "[" (jtypes+=TypeUse jvalues+=Value
		//
		//"," destinationtypes+=TypeUse destinations+=Value)+ "]"
		public Group getGroup() { return cGroup; }

		//"switch"
		public Keyword getSwitchKeyword_0() { return cSwitchKeyword_0; }

		//comptype=TypeUse
		public Assignment getComptypeAssignment_1() { return cComptypeAssignment_1; }

		//TypeUse
		public RuleCall getComptypeTypeUseParserRuleCall_1_0() { return cComptypeTypeUseParserRuleCall_1_0; }

		//compvalue=Value
		public Assignment getCompvalueAssignment_2() { return cCompvalueAssignment_2; }

		//Value
		public RuleCall getCompvalueValueParserRuleCall_2_0() { return cCompvalueValueParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//defaulttype=TypeUse
		public Assignment getDefaulttypeAssignment_4() { return cDefaulttypeAssignment_4; }

		//TypeUse
		public RuleCall getDefaulttypeTypeUseParserRuleCall_4_0() { return cDefaulttypeTypeUseParserRuleCall_4_0; }

		//defaultvalue=Value
		public Assignment getDefaultvalueAssignment_5() { return cDefaultvalueAssignment_5; }

		//Value
		public RuleCall getDefaultvalueValueParserRuleCall_5_0() { return cDefaultvalueValueParserRuleCall_5_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_6() { return cLeftSquareBracketKeyword_6; }

		//(jtypes+=TypeUse jvalues+=Value "," destinationtypes+=TypeUse destinations+=Value)+
		public Group getGroup_7() { return cGroup_7; }

		//jtypes+=TypeUse
		public Assignment getJtypesAssignment_7_0() { return cJtypesAssignment_7_0; }

		//TypeUse
		public RuleCall getJtypesTypeUseParserRuleCall_7_0_0() { return cJtypesTypeUseParserRuleCall_7_0_0; }

		//jvalues+=Value
		public Assignment getJvaluesAssignment_7_1() { return cJvaluesAssignment_7_1; }

		//Value
		public RuleCall getJvaluesValueParserRuleCall_7_1_0() { return cJvaluesValueParserRuleCall_7_1_0; }

		//","
		public Keyword getCommaKeyword_7_2() { return cCommaKeyword_7_2; }

		//destinationtypes+=TypeUse
		public Assignment getDestinationtypesAssignment_7_3() { return cDestinationtypesAssignment_7_3; }

		//TypeUse
		public RuleCall getDestinationtypesTypeUseParserRuleCall_7_3_0() { return cDestinationtypesTypeUseParserRuleCall_7_3_0; }

		//destinations+=Value
		public Assignment getDestinationsAssignment_7_4() { return cDestinationsAssignment_7_4; }

		//Value
		public RuleCall getDestinationsValueParserRuleCall_7_4_0() { return cDestinationsValueParserRuleCall_7_4_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_8() { return cRightSquareBracketKeyword_8; }
	}

	public class InvokeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Invoke");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInvokeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cCallingConvParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cRETURN_ATTRIBUTESTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cFunctiontypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFunctiontypeTypeUseParserRuleCall_3_0 = (RuleCall)cFunctiontypeAssignment_3.eContents().get(0);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameAddressParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Assignment cPListAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPListParameterListParserRuleCall_5_0 = (RuleCall)cPListAssignment_5.eContents().get(0);
		private final RuleCall cFUNCTION_ATTRIBUTESParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Keyword cToKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLabelKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cToTargetAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cToTargetVALID_IDTerminalRuleCall_9_0 = (RuleCall)cToTargetAssignment_9.eContents().get(0);
		private final Keyword cUnwindKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cLabelKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cUnwindCaseAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cUnwindCaseVALID_IDTerminalRuleCall_12_0 = (RuleCall)cUnwindCaseAssignment_12.eContents().get(0);
		
		//Invoke:
		//
		//	"invoke" CallingConv? RETURN_ATTRIBUTES? functiontype=TypeUse name=Address pList=ParameterList FUNCTION_ATTRIBUTES*
		//
		//	"to" "label" toTarget=VALID_ID "unwind" "label" unwindCase=VALID_ID;
		public ParserRule getRule() { return rule; }

		//"invoke" CallingConv? RETURN_ATTRIBUTES? functiontype=TypeUse name=Address pList=ParameterList FUNCTION_ATTRIBUTES* "to"
		//
		//"label" toTarget=VALID_ID "unwind" "label" unwindCase=VALID_ID
		public Group getGroup() { return cGroup; }

		//"invoke"
		public Keyword getInvokeKeyword_0() { return cInvokeKeyword_0; }

		//CallingConv?
		public RuleCall getCallingConvParserRuleCall_1() { return cCallingConvParserRuleCall_1; }

		//RETURN_ATTRIBUTES?
		public RuleCall getRETURN_ATTRIBUTESTerminalRuleCall_2() { return cRETURN_ATTRIBUTESTerminalRuleCall_2; }

		//functiontype=TypeUse
		public Assignment getFunctiontypeAssignment_3() { return cFunctiontypeAssignment_3; }

		//TypeUse
		public RuleCall getFunctiontypeTypeUseParserRuleCall_3_0() { return cFunctiontypeTypeUseParserRuleCall_3_0; }

		//name=Address
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//Address
		public RuleCall getNameAddressParserRuleCall_4_0() { return cNameAddressParserRuleCall_4_0; }

		//pList=ParameterList
		public Assignment getPListAssignment_5() { return cPListAssignment_5; }

		//ParameterList
		public RuleCall getPListParameterListParserRuleCall_5_0() { return cPListParameterListParserRuleCall_5_0; }

		//FUNCTION_ATTRIBUTES*
		public RuleCall getFUNCTION_ATTRIBUTESParserRuleCall_6() { return cFUNCTION_ATTRIBUTESParserRuleCall_6; }

		//"to"
		public Keyword getToKeyword_7() { return cToKeyword_7; }

		//"label"
		public Keyword getLabelKeyword_8() { return cLabelKeyword_8; }

		//toTarget=VALID_ID
		public Assignment getToTargetAssignment_9() { return cToTargetAssignment_9; }

		//VALID_ID
		public RuleCall getToTargetVALID_IDTerminalRuleCall_9_0() { return cToTargetVALID_IDTerminalRuleCall_9_0; }

		//"unwind"
		public Keyword getUnwindKeyword_10() { return cUnwindKeyword_10; }

		//"label"
		public Keyword getLabelKeyword_11() { return cLabelKeyword_11; }

		//unwindCase=VALID_ID
		public Assignment getUnwindCaseAssignment_12() { return cUnwindCaseAssignment_12; }

		//VALID_ID
		public RuleCall getUnwindCaseVALID_IDTerminalRuleCall_12_0() { return cUnwindCaseVALID_IDTerminalRuleCall_12_0; }
	}

	public class ResumeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Resume");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cResumeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cResumestructAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cResumestructStructureParserRuleCall_1_0 = (RuleCall)cResumestructAssignment_1.eContents().get(0);
		private final Assignment cResumevalueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cResumevalueValueParserRuleCall_2_0 = (RuleCall)cResumevalueAssignment_2.eContents().get(0);
		
		//Resume:
		//
		//	"resume" resumestruct=Structure resumevalue=Value;
		public ParserRule getRule() { return rule; }

		//"resume" resumestruct=Structure resumevalue=Value
		public Group getGroup() { return cGroup; }

		//"resume"
		public Keyword getResumeKeyword_0() { return cResumeKeyword_0; }

		//resumestruct=Structure
		public Assignment getResumestructAssignment_1() { return cResumestructAssignment_1; }

		//Structure
		public RuleCall getResumestructStructureParserRuleCall_1_0() { return cResumestructStructureParserRuleCall_1_0; }

		//resumevalue=Value
		public Assignment getResumevalueAssignment_2() { return cResumevalueAssignment_2; }

		//Value
		public RuleCall getResumevalueValueParserRuleCall_2_0() { return cResumevalueValueParserRuleCall_2_0; }
	}

	public class UnreachableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Unreachable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnreachableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cUnreachableKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Unreachable:
		//
		//	{Unreachable} "unreachable";
		public ParserRule getRule() { return rule; }

		//{Unreachable} "unreachable"
		public Group getGroup() { return cGroup; }

		//{Unreachable}
		public Action getUnreachableAction_0() { return cUnreachableAction_0; }

		//"unreachable"
		public Keyword getUnreachableKeyword_1() { return cUnreachableKeyword_1; }
	}

	public class ReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Return");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cRetKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cReturntypeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cReturntypePredefinedParserRuleCall_0_1_0 = (RuleCall)cReturntypeAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cCommaKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Keyword cDbgKeyword_0_2_1 = (Keyword)cGroup_0_2.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0_2_2 = (Keyword)cGroup_0_2.eContents().get(2);
		private final RuleCall cNUMBERParserRuleCall_0_2_3 = (RuleCall)cGroup_0_2.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cRetKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cReturntypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cReturntypeTypeUseParserRuleCall_1_1_0 = (RuleCall)cReturntypeAssignment_1_1.eContents().get(0);
		private final Assignment cReturnvalueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cReturnvalueValueParserRuleCall_1_2_0 = (RuleCall)cReturnvalueAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cCommaKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Keyword cDbgKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_1_3_2 = (Keyword)cGroup_1_3.eContents().get(2);
		private final RuleCall cNUMBERParserRuleCall_1_3_3 = (RuleCall)cGroup_1_3.eContents().get(3);
		
		//Return:
		//
		//	"ret" returntype=Predefined ("," "!dbg" "!" NUMBER)? | "ret" returntype=TypeUse returnvalue=Value ("," "!dbg" "!"
		//
		//	NUMBER)?;
		public ParserRule getRule() { return rule; }

		//"ret" returntype=Predefined ("," "!dbg" "!" NUMBER)? | "ret" returntype=TypeUse returnvalue=Value ("," "!dbg" "!"
		//
		//NUMBER)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//"ret" returntype=Predefined ("," "!dbg" "!" NUMBER)?
		public Group getGroup_0() { return cGroup_0; }

		//"ret"
		public Keyword getRetKeyword_0_0() { return cRetKeyword_0_0; }

		//returntype=Predefined
		public Assignment getReturntypeAssignment_0_1() { return cReturntypeAssignment_0_1; }

		//Predefined
		public RuleCall getReturntypePredefinedParserRuleCall_0_1_0() { return cReturntypePredefinedParserRuleCall_0_1_0; }

		//("," "!dbg" "!" NUMBER)?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//","
		public Keyword getCommaKeyword_0_2_0() { return cCommaKeyword_0_2_0; }

		//"!dbg"
		public Keyword getDbgKeyword_0_2_1() { return cDbgKeyword_0_2_1; }

		//"!"
		public Keyword getExclamationMarkKeyword_0_2_2() { return cExclamationMarkKeyword_0_2_2; }

		//NUMBER
		public RuleCall getNUMBERParserRuleCall_0_2_3() { return cNUMBERParserRuleCall_0_2_3; }

		//"ret" returntype=TypeUse returnvalue=Value ("," "!dbg" "!" NUMBER)?
		public Group getGroup_1() { return cGroup_1; }

		//"ret"
		public Keyword getRetKeyword_1_0() { return cRetKeyword_1_0; }

		//returntype=TypeUse
		public Assignment getReturntypeAssignment_1_1() { return cReturntypeAssignment_1_1; }

		//TypeUse
		public RuleCall getReturntypeTypeUseParserRuleCall_1_1_0() { return cReturntypeTypeUseParserRuleCall_1_1_0; }

		//returnvalue=Value
		public Assignment getReturnvalueAssignment_1_2() { return cReturnvalueAssignment_1_2; }

		//Value
		public RuleCall getReturnvalueValueParserRuleCall_1_2_0() { return cReturnvalueValueParserRuleCall_1_2_0; }

		//("," "!dbg" "!" NUMBER)?
		public Group getGroup_1_3() { return cGroup_1_3; }

		//","
		public Keyword getCommaKeyword_1_3_0() { return cCommaKeyword_1_3_0; }

		//"!dbg"
		public Keyword getDbgKeyword_1_3_1() { return cDbgKeyword_1_3_1; }

		//"!"
		public Keyword getExclamationMarkKeyword_1_3_2() { return cExclamationMarkKeyword_1_3_2; }

		//NUMBER
		public RuleCall getNUMBERParserRuleCall_1_3_3() { return cNUMBERParserRuleCall_1_3_3; }
	}

	public class BranchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Branch");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cBrKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLabelKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cDestinationAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cDestinationVALID_IDTerminalRuleCall_0_2_0 = (RuleCall)cDestinationAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cBrKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINT_TYPETerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cCondvalueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cCondvalueValueParserRuleCall_1_2_0 = (RuleCall)cCondvalueAssignment_1_2.eContents().get(0);
		private final Keyword cCommaKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cLabelKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cLabelTrueAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cLabelTrueVALID_IDTerminalRuleCall_1_5_0 = (RuleCall)cLabelTrueAssignment_1_5.eContents().get(0);
		private final Keyword cCommaKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Keyword cLabelKeyword_1_7 = (Keyword)cGroup_1.eContents().get(7);
		private final Assignment cLabelFalseAssignment_1_8 = (Assignment)cGroup_1.eContents().get(8);
		private final RuleCall cLabelFalseVALID_IDTerminalRuleCall_1_8_0 = (RuleCall)cLabelFalseAssignment_1_8.eContents().get(0);
		
		//Branch:
		//
		//	"br" "label" destination=VALID_ID | "br" INT_TYPE condvalue=Value "," "label" labelTrue=VALID_ID "," "label"
		//
		//	labelFalse=VALID_ID;
		public ParserRule getRule() { return rule; }

		//"br" "label" destination=VALID_ID | "br" INT_TYPE condvalue=Value "," "label" labelTrue=VALID_ID "," "label"
		//
		//labelFalse=VALID_ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//"br" "label" destination=VALID_ID
		public Group getGroup_0() { return cGroup_0; }

		//"br"
		public Keyword getBrKeyword_0_0() { return cBrKeyword_0_0; }

		//"label"
		public Keyword getLabelKeyword_0_1() { return cLabelKeyword_0_1; }

		//destination=VALID_ID
		public Assignment getDestinationAssignment_0_2() { return cDestinationAssignment_0_2; }

		//VALID_ID
		public RuleCall getDestinationVALID_IDTerminalRuleCall_0_2_0() { return cDestinationVALID_IDTerminalRuleCall_0_2_0; }

		//"br" INT_TYPE condvalue=Value "," "label" labelTrue=VALID_ID "," "label" labelFalse=VALID_ID
		public Group getGroup_1() { return cGroup_1; }

		//"br"
		public Keyword getBrKeyword_1_0() { return cBrKeyword_1_0; }

		//INT_TYPE
		public RuleCall getINT_TYPETerminalRuleCall_1_1() { return cINT_TYPETerminalRuleCall_1_1; }

		//condvalue=Value
		public Assignment getCondvalueAssignment_1_2() { return cCondvalueAssignment_1_2; }

		//Value
		public RuleCall getCondvalueValueParserRuleCall_1_2_0() { return cCondvalueValueParserRuleCall_1_2_0; }

		//","
		public Keyword getCommaKeyword_1_3() { return cCommaKeyword_1_3; }

		//"label"
		public Keyword getLabelKeyword_1_4() { return cLabelKeyword_1_4; }

		//labelTrue=VALID_ID
		public Assignment getLabelTrueAssignment_1_5() { return cLabelTrueAssignment_1_5; }

		//VALID_ID
		public RuleCall getLabelTrueVALID_IDTerminalRuleCall_1_5_0() { return cLabelTrueVALID_IDTerminalRuleCall_1_5_0; }

		//","
		public Keyword getCommaKeyword_1_6() { return cCommaKeyword_1_6; }

		//"label"
		public Keyword getLabelKeyword_1_7() { return cLabelKeyword_1_7; }

		//labelFalse=VALID_ID
		public Assignment getLabelFalseAssignment_1_8() { return cLabelFalseAssignment_1_8; }

		//VALID_ID
		public RuleCall getLabelFalseVALID_IDTerminalRuleCall_1_8_0() { return cLabelFalseVALID_IDTerminalRuleCall_1_8_0; }
	}
	
	
	private LLVMElements pLLVM;
	private NUMBERElements pNUMBER;
	private TerminalRule tVALID_ID;
	private TerminalRule tINT_TYPE;
	private TerminalRule tBOOL;
	private TerminalRule tPRIMITIVE_VALUE;
	private TerminalRule tFLOATING_POINT_TYPE;
	private TerminalRule tINITIALIZER;
	private TerminalRule tSTRING;
	private TerminalRule tUNKNOWN_TYPE;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tPOINTER;
	private TerminalRule tMETADATA;
	private TerminalRule tF_PREDICATES;
	private TerminalRule tATOMIC_ORDERING;
	private TerminalRule tBIN_OP;
	private TerminalRule tRETURN_ATTRIBUTES;
	private CallingConvElements pCallingConv;
	private FUNCTION_ATTRIBUTESElements pFUNCTION_ATTRIBUTES;
	private TerminalRule tCAST_OP;
	private TerminalRule tI_PREDICATES;
	private TerminalRule tVISIBILITY;
	private TerminalRule tLINKAGE;
	private TerminalRule tALIAS_LINKAGE;
	private KEYWORDSElements pKEYWORDS;
	private LABEL_IDElements pLABEL_ID;
	private AbstractElementElements pAbstractElement;
	private TopLevelEntityElements pTopLevelEntity;
	private MainLevelEntityElements pMainLevelEntity;
	private TypeDefinitionElements pTypeDefinition;
	private GlobalDefinitionElements pGlobalDefinition;
	private FunctionDefinitionElements pFunctionDefinition;
	private AliasDefinitionElements pAliasDefinition;
	private TypeUseElements pTypeUse;
	private AddressUseElements pAddressUse;
	private AddressElements pAddress;
	private PredefinedElements pPredefined;
	private VectorElements pVector;
	private ArrayElements pArray;
	private Aggregate_TypesElements pAggregate_Types;
	private ConstantElements pConstant;
	private PrimitiveValueElements pPrimitiveValue;
	private ValueElements pValue;
	private ValueStructElements pValueStruct;
	private StructureElements pStructure;
	private ParameterElements pParameter;
	private ParameterListElements pParameterList;
	private FunctionParameterElements pFunctionParameter;
	private FunctionParameterListElements pFunctionParameterList;
	private TypeListElements pTypeList;
	private FunctionBodyElements pFunctionBody;
	private InstructionElements pInstruction;
	private BasicBlockElements pBasicBlock;
	private ArithmeticOperationElements pArithmeticOperation;
	private LogicOperationElements pLogicOperation;
	private CastElements pCast;
	private NestedCastElements pNestedCast;
	private MetaArgValueElements pMetaArgValue;
	private MetaElements pMeta;
	private MetadataValueElements pMetadataValue;
	private GetElementPtrElements pGetElementPtr;
	private NestedGetElementPtrElements pNestedGetElementPtr;
	private ExtractValueElements pExtractValue;
	private InsertValueElements pInsertValue;
	private FenceElements pFence;
	private CmpXchgElements pCmpXchg;
	private AtomicRMWElements pAtomicRMW;
	private LoadElements pLoad;
	private StoreElements pStore;
	private CallElements pCall;
	private AllocElements pAlloc;
	private PhiCaseElements pPhiCase;
	private PhiElements pPhi;
	private LandingPadElements pLandingPad;
	private ClauseElements pClause;
	private SelectElements pSelect;
	private VariableAttributeAccessElements pVariableAttributeAccess;
	private ExtractElementElements pExtractElement;
	private InsertElementElements pInsertElement;
	private ShuffleVectorElements pShuffleVector;
	private CompareElements pCompare;
	private IndirectBranchElements pIndirectBranch;
	private SwitchElements pSwitch;
	private InvokeElements pInvoke;
	private ResumeElements pResume;
	private UnreachableElements pUnreachable;
	private ReturnElements pReturn;
	private BranchElements pBranch;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public LLVMGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.upb.llvm_parser.LLVM".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//LLVM:
	//
	//	elements+=AbstractElement*;
	public LLVMElements getLLVMAccess() {
		return (pLLVM != null) ? pLLVM : (pLLVM = new LLVMElements());
	}
	
	public ParserRule getLLVMRule() {
		return getLLVMAccess().getRule();
	}

	//NUMBER returns EBigDecimal:
	//
	//	"-"? INT ("." INT)?;
	public NUMBERElements getNUMBERAccess() {
		return (pNUMBER != null) ? pNUMBER : (pNUMBER = new NUMBERElements());
	}
	
	public ParserRule getNUMBERRule() {
		return getNUMBERAccess().getRule();
	}

	//terminal VALID_ID:
	//
	//	(("%" | "@") "."* (("a".."z" | "A".."Z" | "_" | "0".."9")+ | STRING) | "(" VALID_ID POINTER? ")") ("." (("a".."z" |
	//
	//	"A".."Z" | "_" | "0".."9")+ | "(" ("a".."z" | "A".."Z" | "_" | "0".."9")+ POINTER? ")"))*;
	public TerminalRule getVALID_IDRule() {
		return (tVALID_ID != null) ? tVALID_ID : (tVALID_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "VALID_ID"));
	} 

	//terminal INT_TYPE:
	//
	//	"i" "0".."9"+ POINTER?;
	public TerminalRule getINT_TYPERule() {
		return (tINT_TYPE != null) ? tINT_TYPE : (tINT_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT_TYPE"));
	} 

	//terminal BOOL:
	//
	//	"true" | "false";
	public TerminalRule getBOOLRule() {
		return (tBOOL != null) ? tBOOL : (tBOOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOL"));
	} 

	//terminal PRIMITIVE_VALUE:
	//
	//	"void" | "null" | "label" | "undef" | "...";
	public TerminalRule getPRIMITIVE_VALUERule() {
		return (tPRIMITIVE_VALUE != null) ? tPRIMITIVE_VALUE : (tPRIMITIVE_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PRIMITIVE_VALUE"));
	} 

	//terminal FLOATING_POINT_TYPE:
	//
	//	"half" | "float" | "double" | "x86_fp80" | "fp128" | "ppc_fp128";
	public TerminalRule getFLOATING_POINT_TYPERule() {
		return (tFLOATING_POINT_TYPE != null) ? tFLOATING_POINT_TYPE : (tFLOATING_POINT_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOATING_POINT_TYPE"));
	} 

	//terminal INITIALIZER:
	//
	//	"zeroinitializer";
	public TerminalRule getINITIALIZERRule() {
		return (tINITIALIZER != null) ? tINITIALIZER : (tINITIALIZER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INITIALIZER"));
	} 

	//terminal STRING:
	//
	//	"c"? "\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "0" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "c"? "\'"
	//
	//	("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "0" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal UNKNOWN_TYPE:
	//
	//	"(...)" POINTER?;
	public TerminalRule getUNKNOWN_TYPERule() {
		return (tUNKNOWN_TYPE != null) ? tUNKNOWN_TYPE : (tUNKNOWN_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UNKNOWN_TYPE"));
	} 

	//terminal SL_COMMENT:
	//
	//	";" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal POINTER:
	//
	//	"*"+;
	public TerminalRule getPOINTERRule() {
		return (tPOINTER != null) ? tPOINTER : (tPOINTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "POINTER"));
	} 

	//terminal METADATA:
	//
	//	"!" ("a".."z" | "A".."Z" | "_" | "0".."9")+ | "!\""->"\"";
	public TerminalRule getMETADATARule() {
		return (tMETADATA != null) ? tMETADATA : (tMETADATA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "METADATA"));
	} 

	////Key Words
	//
	//terminal F_PREDICATES:
	//
	//	"oeq" | "ogt" | "oge" | "olt" | "ole" | "one" | "ord" | "ueq" | "ugt" | "uge" | "ult" | "ule" | "une" | "uno";
	public TerminalRule getF_PREDICATESRule() {
		return (tF_PREDICATES != null) ? tF_PREDICATES : (tF_PREDICATES = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "F_PREDICATES"));
	} 

	//terminal ATOMIC_ORDERING:
	//
	//	"unordered" | "monotonic" | "aquire" | "release" | "acq_rel" | "seq_cst";
	public TerminalRule getATOMIC_ORDERINGRule() {
		return (tATOMIC_ORDERING != null) ? tATOMIC_ORDERING : (tATOMIC_ORDERING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ATOMIC_ORDERING"));
	} 

	//terminal BIN_OP:
	//
	//	"xchg" | "add" | "sub" | "and" | "nand" | "or" | "xor" | "max" | "min" | "umax" | "umin";
	public TerminalRule getBIN_OPRule() {
		return (tBIN_OP != null) ? tBIN_OP : (tBIN_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BIN_OP"));
	} 

	//terminal RETURN_ATTRIBUTES:
	//
	//	"zeroext" | "signext" | "inreg" | "byval" | "sret" | "noalias" | "nocapture" | "nest";
	public TerminalRule getRETURN_ATTRIBUTESRule() {
		return (tRETURN_ATTRIBUTES != null) ? tRETURN_ATTRIBUTES : (tRETURN_ATTRIBUTES = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RETURN_ATTRIBUTES"));
	} 

	//CallingConv:
	//
	//	"ccc" | "fastcc" | "coldcc" | "x86_stdcallcc" | "x86_fastcallcc" | "x86_thiscallcc" | "arm_apcscc" | "arm_aapcscc" |
	//
	//	"arm_aapcs_vfpcc" | "msp430_intrcc" | "ptx_kernel" | "ptx_device" | "spir_func" | "spir_kernel" | "cc" "<" NUMBER ">"
	//
	//	NUMBER;
	public CallingConvElements getCallingConvAccess() {
		return (pCallingConv != null) ? pCallingConv : (pCallingConv = new CallingConvElements());
	}
	
	public ParserRule getCallingConvRule() {
		return getCallingConvAccess().getRule();
	}

	//FUNCTION_ATTRIBUTES:
	//
	//	"address_safety" | "alignstack" "(" "<" NUMBER ">" ")" | "alwaysinline" | "nonlazybind" | "inlinehint" | "naked" |
	//
	//	"noimplicitfloat" | "noinline" | "noredzone" | "noreturn" | "nounwind" | "optsize" | "readnone" | "readonly" |
	//
	//	"returns_twice" | "ssp" | "sspreq" | "uwtable";
	public FUNCTION_ATTRIBUTESElements getFUNCTION_ATTRIBUTESAccess() {
		return (pFUNCTION_ATTRIBUTES != null) ? pFUNCTION_ATTRIBUTES : (pFUNCTION_ATTRIBUTES = new FUNCTION_ATTRIBUTESElements());
	}
	
	public ParserRule getFUNCTION_ATTRIBUTESRule() {
		return getFUNCTION_ATTRIBUTESAccess().getRule();
	}

	//terminal CAST_OP:
	//
	//	"trunc" | "zext" | "sext" | "fptrunc" | "fpext" | "fptoui" | "fptosi" | "uitofp" | "sitofp" | "ptrtoint" | "inttoptr"
	//
	//	| "bitcast";
	public TerminalRule getCAST_OPRule() {
		return (tCAST_OP != null) ? tCAST_OP : (tCAST_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CAST_OP"));
	} 

	//terminal I_PREDICATES:
	//
	//	"eq" | "ne" | "ugt" | "uge" | "ult" | "ule" | "sgt" | "sge" | "slt" | "sle";
	public TerminalRule getI_PREDICATESRule() {
		return (tI_PREDICATES != null) ? tI_PREDICATES : (tI_PREDICATES = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "I_PREDICATES"));
	} 

	//terminal VISIBILITY:
	//
	//	"default" | "hidden" | "protected";
	public TerminalRule getVISIBILITYRule() {
		return (tVISIBILITY != null) ? tVISIBILITY : (tVISIBILITY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "VISIBILITY"));
	} 

	//terminal LINKAGE:
	//
	//	"private" | "linker_private" | "linker_private_weak" | "available_externally" | "linkonce" | "common" | "appending" |
	//
	//	"extern_weak" | "linkonce_odr" | "linkonce_odr_auto_hide" | "dllimport" | "dllexport";
	public TerminalRule getLINKAGERule() {
		return (tLINKAGE != null) ? tLINKAGE : (tLINKAGE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LINKAGE"));
	} 

	//terminal ALIAS_LINKAGE:
	//
	//	"external" | "internal" | "weak" | "weak_odr";
	public TerminalRule getALIAS_LINKAGERule() {
		return (tALIAS_LINKAGE != null) ? tALIAS_LINKAGE : (tALIAS_LINKAGE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ALIAS_LINKAGE"));
	} 

	//KEYWORDS:
	//
	//	ALIAS_LINKAGE | ATOMIC_ORDERING | BIN_OP | RETURN_ATTRIBUTES | CAST_OP | I_PREDICATES | VISIBILITY | LINKAGE;
	public KEYWORDSElements getKEYWORDSAccess() {
		return (pKEYWORDS != null) ? pKEYWORDS : (pKEYWORDS = new KEYWORDSElements());
	}
	
	public ParserRule getKEYWORDSRule() {
		return getKEYWORDSAccess().getRule();
	}

	//LABEL_ID:
	//
	//	(KEYWORDS | INT_TYPE | ID | BOOL | "catch" | "invoke" | "resume" | "switch") ("." (KEYWORDS | INT_TYPE | ID | BOOL |
	//
	//	"catch" | "invoke" | "resume" | "switch"))*;
	public LABEL_IDElements getLABEL_IDAccess() {
		return (pLABEL_ID != null) ? pLABEL_ID : (pLABEL_ID = new LABEL_IDElements());
	}
	
	public ParserRule getLABEL_IDRule() {
		return getLABEL_IDAccess().getRule();
	}

	//AbstractElement:
	//
	//	TopLevelEntity SL_COMMENT? | MainLevelEntity SL_COMMENT?;
	public AbstractElementElements getAbstractElementAccess() {
		return (pAbstractElement != null) ? pAbstractElement : (pAbstractElement = new AbstractElementElements());
	}
	
	public ParserRule getAbstractElementRule() {
		return getAbstractElementAccess().getRule();
	}

	//TopLevelEntity:
	//
	//	"module" "asm" module=STRING | "target" ("datalayout" | "triple") "=" target=STRING | "deplibs" "=" "[" libs+=STRING
	//
	//	("," libs+=STRING)* "]";
	public TopLevelEntityElements getTopLevelEntityAccess() {
		return (pTopLevelEntity != null) ? pTopLevelEntity : (pTopLevelEntity = new TopLevelEntityElements());
	}
	
	public ParserRule getTopLevelEntityRule() {
		return getTopLevelEntityAccess().getRule();
	}

	/// *
	//
	// * This rule is used to devide the Function Definitions form the Variable Definitions.
	//
	// * / MainLevelEntity:
	//
	//	TypeDefinition | GlobalDefinition | FunctionDefinition | AliasDefinition | MetadataValue;
	public MainLevelEntityElements getMainLevelEntityAccess() {
		return (pMainLevelEntity != null) ? pMainLevelEntity : (pMainLevelEntity = new MainLevelEntityElements());
	}
	
	public ParserRule getMainLevelEntityRule() {
		return getMainLevelEntityAccess().getRule();
	}

	////| METADATA;
	//
	//TypeDefinition:
	//
	//	address=Address "=" ("type" (struct=Structure | "opaque"));
	public TypeDefinitionElements getTypeDefinitionAccess() {
		return (pTypeDefinition != null) ? pTypeDefinition : (pTypeDefinition = new TypeDefinitionElements());
	}
	
	public ParserRule getTypeDefinitionRule() {
		return getTypeDefinitionAccess().getRule();
	}

	//GlobalDefinition:
	//
	//	adress=Address "=" (LINKAGE | ALIAS_LINKAGE | "global" | "unnamed_addr" | "constant")* type=(TypeUse |
	//
	//	Aggregate_Types) value=(ValueStruct | Value)? ("," "align" align=NUMBER)?;
	public GlobalDefinitionElements getGlobalDefinitionAccess() {
		return (pGlobalDefinition != null) ? pGlobalDefinition : (pGlobalDefinition = new GlobalDefinitionElements());
	}
	
	public ParserRule getGlobalDefinitionRule() {
		return getGlobalDefinitionAccess().getRule();
	}

	//FunctionDefinition:
	//
	//	"define" (LINKAGE | ALIAS_LINKAGE)? VISIBILITY? CallingConv? RETURN_ATTRIBUTES? returnType=TypeUse address=Address
	//
	//	parameter=FunctionParameterList "unnamed_addr"? FUNCTION_ATTRIBUTES* ("section " STRING)? ("align" align=NUMBER)?
	//
	//	body=FunctionBody | "declare" (LINKAGE | ALIAS_LINKAGE)? VISIBILITY? CallingConv? RETURN_ATTRIBUTES?
	//
	//	returnType=TypeUse address=Address parameter=FunctionParameterList "unnamed_addr"? FUNCTION_ATTRIBUTES* ("section "
	//
	//	STRING)? ("align" align=NUMBER)?;
	public FunctionDefinitionElements getFunctionDefinitionAccess() {
		return (pFunctionDefinition != null) ? pFunctionDefinition : (pFunctionDefinition = new FunctionDefinitionElements());
	}
	
	public ParserRule getFunctionDefinitionRule() {
		return getFunctionDefinitionAccess().getRule();
	}

	//AliasDefinition:
	//
	//	address=Address "=" "alias" ALIAS_LINKAGE? VISIBILITY? aliastype=TypeUse aliasvalue=Value aliasee=TypeUse;
	public AliasDefinitionElements getAliasDefinitionAccess() {
		return (pAliasDefinition != null) ? pAliasDefinition : (pAliasDefinition = new AliasDefinitionElements());
	}
	
	public ParserRule getAliasDefinitionRule() {
		return getAliasDefinitionAccess().getRule();
	}

	//TypeUse:
	//
	//	(Predefined | AddressUse) / *('()*')? OREST?)* / functionInput=UNKNOWN_TYPE?;
	public TypeUseElements getTypeUseAccess() {
		return (pTypeUse != null) ? pTypeUse : (pTypeUse = new TypeUseElements());
	}
	
	public ParserRule getTypeUseRule() {
		return getTypeUseAccess().getRule();
	}

	//AddressUse:
	//
	//	address=[Address|VALID_ID] pointer=POINTER?;
	public AddressUseElements getAddressUseAccess() {
		return (pAddressUse != null) ? pAddressUse : (pAddressUse = new AddressUseElements());
	}
	
	public ParserRule getAddressUseRule() {
		return getAddressUseAccess().getRule();
	}

	//Address:
	//
	//	name=VALID_ID;
	public AddressElements getAddressAccess() {
		return (pAddress != null) ? pAddress : (pAddress = new AddressElements());
	}
	
	public ParserRule getAddressRule() {
		return getAddressAccess().getRule();
	}

	//Predefined:
	//
	//	type=(PRIMITIVE_VALUE | INT_TYPE | FLOATING_POINT_TYPE) pointer=POINTER?;
	public PredefinedElements getPredefinedAccess() {
		return (pPredefined != null) ? pPredefined : (pPredefined = new PredefinedElements());
	}
	
	public ParserRule getPredefinedRule() {
		return getPredefinedAccess().getRule();
	}

	//Vector:
	//
	//	"<" length=NUMBER "x" type=TypeUse ">";
	public VectorElements getVectorAccess() {
		return (pVector != null) ? pVector : (pVector = new VectorElements());
	}
	
	public ParserRule getVectorRule() {
		return getVectorAccess().getRule();
	}

	//Array:
	//
	//	{Array} ("[" length=NUMBER "x" type=TypeUse "]" | "[]" | "[" "]") POINTER?;
	public ArrayElements getArrayAccess() {
		return (pArray != null) ? pArray : (pArray = new ArrayElements());
	}
	
	public ParserRule getArrayRule() {
		return getArrayAccess().getRule();
	}

	//Aggregate_Types:
	//
	//	Structure | Array | Vector;
	public Aggregate_TypesElements getAggregate_TypesAccess() {
		return (pAggregate_Types != null) ? pAggregate_Types : (pAggregate_Types = new Aggregate_TypesElements());
	}
	
	public ParserRule getAggregate_TypesRule() {
		return getAggregate_TypesAccess().getRule();
	}

	//Constant:
	//
	//	value=NUMBER;
	public ConstantElements getConstantAccess() {
		return (pConstant != null) ? pConstant : (pConstant = new ConstantElements());
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	//PrimitiveValue:
	//
	//	value=(STRING | PRIMITIVE_VALUE | INITIALIZER | BOOL);
	public PrimitiveValueElements getPrimitiveValueAccess() {
		return (pPrimitiveValue != null) ? pPrimitiveValue : (pPrimitiveValue = new PrimitiveValueElements());
	}
	
	public ParserRule getPrimitiveValueRule() {
		return getPrimitiveValueAccess().getRule();
	}

	//Value:
	//
	//	NestedCast | NestedGetElementPtr | Constant | AddressUse | PrimitiveValue;
	public ValueElements getValueAccess() {
		return (pValue != null) ? pValue : (pValue = new ValueElements());
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//ValueStruct:
	//
	//	"{" types+=TypeUse value+=Value ("," types+=TypeUse value+=Value)* "}";
	public ValueStructElements getValueStructAccess() {
		return (pValueStruct != null) ? pValueStruct : (pValueStruct = new ValueStructElements());
	}
	
	public ParserRule getValueStructRule() {
		return getValueStructAccess().getRule();
	}

	//Structure:
	//
	//	{Structure} "{" (types+=TypeUse ("," types+=(TypeUse | Aggregate_Types))*)? "}" POINTER?;
	public StructureElements getStructureAccess() {
		return (pStructure != null) ? pStructure : (pStructure = new StructureElements());
	}
	
	public ParserRule getStructureRule() {
		return getStructureAccess().getRule();
	}

	//Parameter:
	//
	//	type=TypeUse RETURN_ATTRIBUTES* value=Value?;
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//ParameterList:
	//
	//	{ParameterList} ("()" | "(" (params+=Parameter ("," params+=Parameter)*)? ")");
	public ParameterListElements getParameterListAccess() {
		return (pParameterList != null) ? pParameterList : (pParameterList = new ParameterListElements());
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}

	//FunctionParameter:
	//
	//	type=TypeUse RETURN_ATTRIBUTES* value=Address?;
	public FunctionParameterElements getFunctionParameterAccess() {
		return (pFunctionParameter != null) ? pFunctionParameter : (pFunctionParameter = new FunctionParameterElements());
	}
	
	public ParserRule getFunctionParameterRule() {
		return getFunctionParameterAccess().getRule();
	}

	//FunctionParameterList:
	//
	//	{FunctionParameterList} ("()" | "(" (params+=FunctionParameter ("," params+=FunctionParameter)*)? ")");
	public FunctionParameterListElements getFunctionParameterListAccess() {
		return (pFunctionParameterList != null) ? pFunctionParameterList : (pFunctionParameterList = new FunctionParameterListElements());
	}
	
	public ParserRule getFunctionParameterListRule() {
		return getFunctionParameterListAccess().getRule();
	}

	//TypeList:
	//
	//	{TypeList} ("()" | "(" (types+=TypeUse typelists+=TypeList? RETURN_ATTRIBUTES? ("," types+=TypeUse
	//
	//	typelists+=TypeList? RETURN_ATTRIBUTES?)*)? (")" | ")*" | ")**" | ")***" | ")****" | ")*****"));
	public TypeListElements getTypeListAccess() {
		return (pTypeList != null) ? pTypeList : (pTypeList = new TypeListElements());
	}
	
	public ParserRule getTypeListRule() {
		return getTypeListAccess().getRule();
	}

	//FunctionBody:
	//
	//	meta+=MetadataValue* //METADATA*
	//
	//	"{" blocks+=BasicBlock+ "}";
	public FunctionBodyElements getFunctionBodyAccess() {
		return (pFunctionBody != null) ? pFunctionBody : (pFunctionBody = new FunctionBodyElements());
	}
	
	public ParserRule getFunctionBodyRule() {
		return getFunctionBodyAccess().getRule();
	}

	//Instruction:
	//
	//	Store | Load | GetElementPtr | Alloc | CmpXchg | AtomicRMW | Fence | Return | Branch | Switch | IndirectBranch |
	//
	//	Invoke | Resume | Unreachable | LogicOperation | ArithmeticOperation | Compare | Cast | ShuffleVector | InsertElement
	//
	//	| ExtractElement | InsertValue | ExtractValue | Phi | Select | Call | VariableAttributeAccess | LandingPad;
	public InstructionElements getInstructionAccess() {
		return (pInstruction != null) ? pInstruction : (pInstruction = new InstructionElements());
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}

	//BasicBlock:
	//
	//	(label=LABEL_ID ":") / *instructions+=(InstructionUse | StandartInstruction)*
	//
	//	(retadr=VALID_ID '=')? terminator=ControlFlowInstruction* / instructions+=Instruction+;
	public BasicBlockElements getBasicBlockAccess() {
		return (pBasicBlock != null) ? pBasicBlock : (pBasicBlock = new BasicBlockElements());
	}
	
	public ParserRule getBasicBlockRule() {
		return getBasicBlockAccess().getRule();
	}

	//ArithmeticOperation:
	//
	//	result=Address "=" operation=("add" | "fadd" | "sub" | "fsub" | "mul" | "fmul" | "udiv" | "sdiv" | "fdiv" | "urem" |
	//
	//	"srem" | "frem") (("nsw" | "nuw") ("nuw" | "nsw")?)? optype=TypeUse value1=Value "," value2=Value;
	public ArithmeticOperationElements getArithmeticOperationAccess() {
		return (pArithmeticOperation != null) ? pArithmeticOperation : (pArithmeticOperation = new ArithmeticOperationElements());
	}
	
	public ParserRule getArithmeticOperationRule() {
		return getArithmeticOperationAccess().getRule();
	}

	//LogicOperation:
	//
	//	result=Address "=" operation=("shl" | "lshr" | "ashr" | "and" | "or" | "xor") optype=TypeUse value1=Value ","
	//
	//	value2=Value;
	public LogicOperationElements getLogicOperationAccess() {
		return (pLogicOperation != null) ? pLogicOperation : (pLogicOperation = new LogicOperationElements());
	}
	
	public ParserRule getLogicOperationRule() {
		return getLogicOperationAccess().getRule();
	}

	//Cast:
	//
	//	result=Address "=" operation=CAST_OP from=(TypeUse | Aggregate_Types) value=Value "to" to=TypeUse;
	public CastElements getCastAccess() {
		return (pCast != null) ? pCast : (pCast = new CastElements());
	}
	
	public ParserRule getCastRule() {
		return getCastAccess().getRule();
	}

	//NestedCast:
	//
	//	operation=CAST_OP "(" from=(TypeUse | Aggregate_Types) value=Value "to" to=TypeUse ")";
	public NestedCastElements getNestedCastAccess() {
		return (pNestedCast != null) ? pNestedCast : (pNestedCast = new NestedCastElements());
	}
	
	public ParserRule getNestedCastRule() {
		return getNestedCastAccess().getRule();
	}

	//MetaArgValue:
	//
	//	arg=METADATA value=(METADATA | STRING);
	public MetaArgValueElements getMetaArgValueAccess() {
		return (pMetaArgValue != null) ? pMetaArgValue : (pMetaArgValue = new MetaArgValueElements());
	}
	
	public ParserRule getMetaArgValueRule() {
		return getMetaArgValueAccess().getRule();
	}

	//Meta:
	//
	//	"metadata" meta=METADATA | arg=Predefined? value=Value;
	public MetaElements getMetaAccess() {
		return (pMeta != null) ? pMeta : (pMeta = new MetaElements());
	}
	
	public ParserRule getMetaRule() {
		return getMetaAccess().getRule();
	}

	//MetadataValue:
	//
	//	nodeId=METADATA "=" "metadata"? ("!" "{" | "!{") values+=Meta ("," values+=Meta)* "}";
	public MetadataValueElements getMetadataValueAccess() {
		return (pMetadataValue != null) ? pMetadataValue : (pMetadataValue = new MetadataValueElements());
	}
	
	public ParserRule getMetadataValueRule() {
		return getMetadataValueAccess().getRule();
	}

	//GetElementPtr:
	//
	//	result=Address "=" "getelementptr" "inbounds"? (aggregate=(TypeUse | Array) aggregatename=Value (","
	//
	//	indTypes+=TypeUse indizies+=Value)*);
	public GetElementPtrElements getGetElementPtrAccess() {
		return (pGetElementPtr != null) ? pGetElementPtr : (pGetElementPtr = new GetElementPtrElements());
	}
	
	public ParserRule getGetElementPtrRule() {
		return getGetElementPtrAccess().getRule();
	}

	//NestedGetElementPtr:
	//
	//	"getelementptr" "inbounds"? ("(" aggregate=(TypeUse | Array) aggregatename=Value ("," indTypes+=TypeUse
	//
	//	indizies+=Value)* ")");
	public NestedGetElementPtrElements getNestedGetElementPtrAccess() {
		return (pNestedGetElementPtr != null) ? pNestedGetElementPtr : (pNestedGetElementPtr = new NestedGetElementPtrElements());
	}
	
	public ParserRule getNestedGetElementPtrRule() {
		return getNestedGetElementPtrAccess().getRule();
	}

	//ExtractValue:
	//
	//	result=Address "=" "extractvalue" (array=Array | struct=Structure) value=Value ("," index+=NUMBER)+;
	public ExtractValueElements getExtractValueAccess() {
		return (pExtractValue != null) ? pExtractValue : (pExtractValue = new ExtractValueElements());
	}
	
	public ParserRule getExtractValueRule() {
		return getExtractValueAccess().getRule();
	}

	//InsertValue:
	//
	//	result=Address "=" "insertvalue" struct=Structure value=Value "," inserttype=TypeUse insertvalue=Value (","
	//
	//	index+=NUMBER)+;
	public InsertValueElements getInsertValueAccess() {
		return (pInsertValue != null) ? pInsertValue : (pInsertValue = new InsertValueElements());
	}
	
	public ParserRule getInsertValueRule() {
		return getInsertValueAccess().getRule();
	}

	//Fence:
	//
	//	"fence" "singlethread"? ordering=ATOMIC_ORDERING;
	public FenceElements getFenceAccess() {
		return (pFence != null) ? pFence : (pFence = new FenceElements());
	}
	
	public ParserRule getFenceRule() {
		return getFenceAccess().getRule();
	}

	//CmpXchg:
	//
	//	result=Address "=" "cmpxchg" volatile?="volatile"? adresstype=TypeUse adress=Value "," comparetype=TypeUse
	//
	//	comparevalue=Value "," newtype=TypeUse newvalue=Value "singlethread"? ordering=ATOMIC_ORDERING;
	public CmpXchgElements getCmpXchgAccess() {
		return (pCmpXchg != null) ? pCmpXchg : (pCmpXchg = new CmpXchgElements());
	}
	
	public ParserRule getCmpXchgRule() {
		return getCmpXchgAccess().getRule();
	}

	//AtomicRMW:
	//
	//	result=Address "=" "atomicrmw" volatile?="volatile"? operation=BIN_OP adresstype=TypeUse adress=Value ","
	//
	//	optype=TypeUse opvalue=Value "singlethread"? ordering=ATOMIC_ORDERING;
	public AtomicRMWElements getAtomicRMWAccess() {
		return (pAtomicRMW != null) ? pAtomicRMW : (pAtomicRMW = new AtomicRMWElements());
	}
	
	public ParserRule getAtomicRMWRule() {
		return getAtomicRMWAccess().getRule();
	}

	//Load:
	//
	//	result=Address "=" (volatile?="volatile" "load" | "load" volatile?="volatile"?) address=Parameter ("," "align"
	//
	//	align=NUMBER)? ("," meta+=MetaArgValue)* | result=Address "=" "load" "atomic" volatile?="volatile"? address=Parameter
	//
	//	"singlethread"? ordering=ATOMIC_ORDERING ("," "align" align=NUMBER)?;
	public LoadElements getLoadAccess() {
		return (pLoad != null) ? pLoad : (pLoad = new LoadElements());
	}
	
	public ParserRule getLoadRule() {
		return getLoadAccess().getRule();
	}

	//Store:
	//
	//	(volatile?="volatile" "store" | "store" volatile?="volatile"?) targetAddress=Parameter "," value=Parameter (","
	//
	//	"align" align=NUMBER)? ("," meta+=MetaArgValue)* | "store" "atomic" volatile?="volatile"? targetAddress=Parameter ","
	//
	//	value=Parameter "singlethread"? ordering=ATOMIC_ORDERING ("," "align" align=NUMBER)?;
	public StoreElements getStoreAccess() {
		return (pStore != null) ? pStore : (pStore = new StoreElements());
	}
	
	public ParserRule getStoreRule() {
		return getStoreAccess().getRule();
	}

	//Call:
	//
	//	(result=Address "=")? "tail"? "call" CallingConv? RETURN_ATTRIBUTES? adresstype=TypeUse (adress=Value | "asm"
	//
	//	"sideeffect"? STRING "," STRING) pList=ParameterList FUNCTION_ATTRIBUTES* ("," "!srcloc" "!" NUMBER)*;
	public CallElements getCallAccess() {
		return (pCall != null) ? pCall : (pCall = new CallElements());
	}
	
	public ParserRule getCallRule() {
		return getCallAccess().getRule();
	}

	//Alloc:
	//
	//	result=Address "=" "alloca" (type=TypeUse typelist=ParameterList?) ("," numelementstype=TypeUse
	//
	//	numelementsvalue=Value)? ("," "align" align=NUMBER)?;
	public AllocElements getAllocAccess() {
		return (pAlloc != null) ? pAlloc : (pAlloc = new AllocElements());
	}
	
	public ParserRule getAllocRule() {
		return getAllocAccess().getRule();
	}

	//PhiCase:
	//
	//	value=Value "," label=VALID_ID;
	public PhiCaseElements getPhiCaseAccess() {
		return (pPhiCase != null) ? pPhiCase : (pPhiCase = new PhiCaseElements());
	}
	
	public ParserRule getPhiCaseRule() {
		return getPhiCaseAccess().getRule();
	}

	//Phi:
	//
	//	result=Address "=" "phi" type=TypeUse "[" cases+=PhiCase "]" ("," "[" cases+=PhiCase "]")*;
	public PhiElements getPhiAccess() {
		return (pPhi != null) ? pPhi : (pPhi = new PhiElements());
	}
	
	public ParserRule getPhiRule() {
		return getPhiAccess().getRule();
	}

	//LandingPad:
	//
	//	result=Address "=" "landingpad" struct=Structure "personality" personalitytype=TypeUse personalityvalue=Value
	//
	//	("cleanup" clause+=Clause* | clause+=Clause+);
	public LandingPadElements getLandingPadAccess() {
		return (pLandingPad != null) ? pLandingPad : (pLandingPad = new LandingPadElements());
	}
	
	public ParserRule getLandingPadRule() {
		return getLandingPadAccess().getRule();
	}

	//Clause:
	//
	//	"catch" type=TypeUse value=Value | "filter" filterarray=Array constant=Value;
	public ClauseElements getClauseAccess() {
		return (pClause != null) ? pClause : (pClause = new ClauseElements());
	}
	
	public ParserRule getClauseRule() {
		return getClauseAccess().getRule();
	}

	//Select:
	//
	//	result=Address "=" "select" conditiontype=TypeUse conditionvalue=Value "," val1type=TypeUse val1value=Value ","
	//
	//	val2type=TypeUse val2value=Value;
	public SelectElements getSelectAccess() {
		return (pSelect != null) ? pSelect : (pSelect = new SelectElements());
	}
	
	public ParserRule getSelectRule() {
		return getSelectAccess().getRule();
	}

	//VariableAttributeAccess:
	//
	//	result=Address "=" "va_arg" listtype=TypeUse listvalue=Value "," argType=TypeUse;
	public VariableAttributeAccessElements getVariableAttributeAccessAccess() {
		return (pVariableAttributeAccess != null) ? pVariableAttributeAccess : (pVariableAttributeAccess = new VariableAttributeAccessElements());
	}
	
	public ParserRule getVariableAttributeAccessRule() {
		return getVariableAttributeAccessAccess().getRule();
	}

	//ExtractElement:
	//
	//	result=Address "=" "extractelement" vectortype=TypeUse vectorvalue=Value "," indextype=TypeUse index=Value;
	public ExtractElementElements getExtractElementAccess() {
		return (pExtractElement != null) ? pExtractElement : (pExtractElement = new ExtractElementElements());
	}
	
	public ParserRule getExtractElementRule() {
		return getExtractElementAccess().getRule();
	}

	//InsertElement:
	//
	//	result=Address "=" "insertelement" vectortype=TypeUse vectorvalue=Value "," scalartype=TypeUse scalarvalue=Value ","
	//
	//	indextype=TypeUse index=Value;
	public InsertElementElements getInsertElementAccess() {
		return (pInsertElement != null) ? pInsertElement : (pInsertElement = new InsertElementElements());
	}
	
	public ParserRule getInsertElementRule() {
		return getInsertElementAccess().getRule();
	}

	//ShuffleVector:
	//
	//	result=Address "=" "shufflevector" val1type=TypeUse val1value=Value "," val2type=TypeUse val2value=Value ","
	//
	//	masktype=TypeUse maskvalue=Value;
	public ShuffleVectorElements getShuffleVectorAccess() {
		return (pShuffleVector != null) ? pShuffleVector : (pShuffleVector = new ShuffleVectorElements());
	}
	
	public ParserRule getShuffleVectorRule() {
		return getShuffleVectorAccess().getRule();
	}

	//Compare:
	//
	//	result=Address "=" ("icmp" pred=I_PREDICATES comptype=TypeUse value1=Value "," value2=Value | "fcmp"
	//
	//	pred=(F_PREDICATES | BOOL) comptype=TypeUse value1=Value "," value2=Value);
	public CompareElements getCompareAccess() {
		return (pCompare != null) ? pCompare : (pCompare = new CompareElements());
	}
	
	public ParserRule getCompareRule() {
		return getCompareAccess().getRule();
	}

	//IndirectBranch:
	//
	//	"indirectbr" adresstype=TypeUse adress=Value "," "[" (labeltype+=TypeUse labels+=Value ("," labeltype+=TypeUse
	//
	//	labels+=Value)*)? "]";
	public IndirectBranchElements getIndirectBranchAccess() {
		return (pIndirectBranch != null) ? pIndirectBranch : (pIndirectBranch = new IndirectBranchElements());
	}
	
	public ParserRule getIndirectBranchRule() {
		return getIndirectBranchAccess().getRule();
	}

	//Switch:
	//
	//	"switch" comptype=TypeUse compvalue=Value "," defaulttype=TypeUse defaultvalue=Value "[" (jtypes+=TypeUse
	//
	//	jvalues+=Value "," destinationtypes+=TypeUse destinations+=Value)+ "]";
	public SwitchElements getSwitchAccess() {
		return (pSwitch != null) ? pSwitch : (pSwitch = new SwitchElements());
	}
	
	public ParserRule getSwitchRule() {
		return getSwitchAccess().getRule();
	}

	//Invoke:
	//
	//	"invoke" CallingConv? RETURN_ATTRIBUTES? functiontype=TypeUse name=Address pList=ParameterList FUNCTION_ATTRIBUTES*
	//
	//	"to" "label" toTarget=VALID_ID "unwind" "label" unwindCase=VALID_ID;
	public InvokeElements getInvokeAccess() {
		return (pInvoke != null) ? pInvoke : (pInvoke = new InvokeElements());
	}
	
	public ParserRule getInvokeRule() {
		return getInvokeAccess().getRule();
	}

	//Resume:
	//
	//	"resume" resumestruct=Structure resumevalue=Value;
	public ResumeElements getResumeAccess() {
		return (pResume != null) ? pResume : (pResume = new ResumeElements());
	}
	
	public ParserRule getResumeRule() {
		return getResumeAccess().getRule();
	}

	//Unreachable:
	//
	//	{Unreachable} "unreachable";
	public UnreachableElements getUnreachableAccess() {
		return (pUnreachable != null) ? pUnreachable : (pUnreachable = new UnreachableElements());
	}
	
	public ParserRule getUnreachableRule() {
		return getUnreachableAccess().getRule();
	}

	//Return:
	//
	//	"ret" returntype=Predefined ("," "!dbg" "!" NUMBER)? | "ret" returntype=TypeUse returnvalue=Value ("," "!dbg" "!"
	//
	//	NUMBER)?;
	public ReturnElements getReturnAccess() {
		return (pReturn != null) ? pReturn : (pReturn = new ReturnElements());
	}
	
	public ParserRule getReturnRule() {
		return getReturnAccess().getRule();
	}

	//Branch:
	//
	//	"br" "label" destination=VALID_ID | "br" INT_TYPE condvalue=Value "," "label" labelTrue=VALID_ID "," "label"
	//
	//	labelFalse=VALID_ID;
	public BranchElements getBranchAccess() {
		return (pBranch != null) ? pBranch : (pBranch = new BranchElements());
	}
	
	public ParserRule getBranchRule() {
		return getBranchAccess().getRule();
	}

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
