/*
* generated by Xtext
*/

package de.upb.llvm_parser.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class LLVMGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class LLVMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LLVM");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsAbstractElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//LLVM:
		//
		//	elements+=AbstractElement*;
		public ParserRule getRule() { return rule; }

		//elements+=AbstractElement*
		public Assignment getElementsAssignment() { return cElementsAssignment; }

		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_0() { return cElementsAbstractElementParserRuleCall_0; }
	}

	public class ID_FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ID_FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final Keyword cCatchKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cInvokeKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cResumeKeyword_0_3 = (Keyword)cAlternatives_0.eContents().get(3);
		private final Keyword cSwitchKeyword_0_4 = (Keyword)cAlternatives_0.eContents().get(4);
		private final Keyword cTrueKeyword_0_5 = (Keyword)cAlternatives_0.eContents().get(5);
		private final Keyword cFalseKeyword_0_6 = (Keyword)cAlternatives_0.eContents().get(6);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_1_0 = (RuleCall)cAlternatives_1_1.eContents().get(0);
		private final Keyword cCatchKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Keyword cInvokeKeyword_1_1_2 = (Keyword)cAlternatives_1_1.eContents().get(2);
		private final Keyword cResumeKeyword_1_1_3 = (Keyword)cAlternatives_1_1.eContents().get(3);
		private final Keyword cSwitchKeyword_1_1_4 = (Keyword)cAlternatives_1_1.eContents().get(4);
		private final Keyword cTrueKeyword_1_1_5 = (Keyword)cAlternatives_1_1.eContents().get(5);
		private final Keyword cFalseKeyword_1_1_6 = (Keyword)cAlternatives_1_1.eContents().get(6);
		
		//ID_FQN:
		//
		//	(ID | "catch" | "invoke" | "resume" | "switch" | "true" | "false") ("." (ID | "catch" | "invoke" | "resume" |
		//
		//	"switch" | "true" | "false"))*;
		public ParserRule getRule() { return rule; }

		//(ID | "catch" | "invoke" | "resume" | "switch" | "true" | "false") ("." (ID | "catch" | "invoke" | "resume" | "switch" |
		//
		//"true" | "false"))*
		public Group getGroup() { return cGroup; }

		//ID | "catch" | "invoke" | "resume" | "switch" | "true" | "false"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }

		//"catch"
		public Keyword getCatchKeyword_0_1() { return cCatchKeyword_0_1; }

		//"invoke"
		public Keyword getInvokeKeyword_0_2() { return cInvokeKeyword_0_2; }

		//"resume"
		public Keyword getResumeKeyword_0_3() { return cResumeKeyword_0_3; }

		//"switch"
		public Keyword getSwitchKeyword_0_4() { return cSwitchKeyword_0_4; }

		//"true"
		public Keyword getTrueKeyword_0_5() { return cTrueKeyword_0_5; }

		//"false"
		public Keyword getFalseKeyword_0_6() { return cFalseKeyword_0_6; }

		//("." (ID | "catch" | "invoke" | "resume" | "switch" | "true" | "false"))*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID | "catch" | "invoke" | "resume" | "switch" | "true" | "false"
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1_0() { return cIDTerminalRuleCall_1_1_0; }

		//"catch"
		public Keyword getCatchKeyword_1_1_1() { return cCatchKeyword_1_1_1; }

		//"invoke"
		public Keyword getInvokeKeyword_1_1_2() { return cInvokeKeyword_1_1_2; }

		//"resume"
		public Keyword getResumeKeyword_1_1_3() { return cResumeKeyword_1_1_3; }

		//"switch"
		public Keyword getSwitchKeyword_1_1_4() { return cSwitchKeyword_1_1_4; }

		//"true"
		public Keyword getTrueKeyword_1_1_5() { return cTrueKeyword_1_1_5; }

		//"false"
		public Keyword getFalseKeyword_1_1_6() { return cFalseKeyword_1_1_6; }
	}

	public class AbstractElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cTopLevelEntityParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cSL_COMMENTTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cMainLevelEntityParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cSL_COMMENTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//AbstractElement:
		//
		//	TopLevelEntity SL_COMMENT? | MainLevelEntity SL_COMMENT?;
		public ParserRule getRule() { return rule; }

		//TopLevelEntity SL_COMMENT? | MainLevelEntity SL_COMMENT?
		public Alternatives getAlternatives() { return cAlternatives; }

		//TopLevelEntity SL_COMMENT?
		public Group getGroup_0() { return cGroup_0; }

		//TopLevelEntity
		public RuleCall getTopLevelEntityParserRuleCall_0_0() { return cTopLevelEntityParserRuleCall_0_0; }

		//SL_COMMENT?
		public RuleCall getSL_COMMENTTerminalRuleCall_0_1() { return cSL_COMMENTTerminalRuleCall_0_1; }

		//MainLevelEntity SL_COMMENT?
		public Group getGroup_1() { return cGroup_1; }

		//MainLevelEntity
		public RuleCall getMainLevelEntityParserRuleCall_1_0() { return cMainLevelEntityParserRuleCall_1_0; }

		//SL_COMMENT?
		public RuleCall getSL_COMMENTTerminalRuleCall_1_1() { return cSL_COMMENTTerminalRuleCall_1_1; }
	}

	public class TopLevelEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TopLevelEntity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cModuleKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cAsmKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cModuleAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cModuleSTRINGTerminalRuleCall_0_2_0 = (RuleCall)cModuleAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cTargetKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cDatalayoutKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cTripleKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cTargetAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cTargetSTRINGTerminalRuleCall_1_3_0 = (RuleCall)cTargetAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cDeplibsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cLibsAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cLibsSTRINGTerminalRuleCall_2_3_0 = (RuleCall)cLibsAssignment_2_3.eContents().get(0);
		private final Group cGroup_2_4 = (Group)cGroup_2.eContents().get(4);
		private final Keyword cCommaKeyword_2_4_0 = (Keyword)cGroup_2_4.eContents().get(0);
		private final Assignment cLibsAssignment_2_4_1 = (Assignment)cGroup_2_4.eContents().get(1);
		private final RuleCall cLibsSTRINGTerminalRuleCall_2_4_1_0 = (RuleCall)cLibsAssignment_2_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		
		//TopLevelEntity:
		//
		//	"module" "asm" module=STRING | "target" ("datalayout" | "triple") "=" target=STRING | "deplibs" "=" "[" libs+=STRING
		//
		//	("," libs+=STRING)* "]";
		public ParserRule getRule() { return rule; }

		//"module" "asm" module=STRING | "target" ("datalayout" | "triple") "=" target=STRING | "deplibs" "=" "[" libs+=STRING
		//
		//("," libs+=STRING)* "]"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"module" "asm" module=STRING
		public Group getGroup_0() { return cGroup_0; }

		//"module"
		public Keyword getModuleKeyword_0_0() { return cModuleKeyword_0_0; }

		//"asm"
		public Keyword getAsmKeyword_0_1() { return cAsmKeyword_0_1; }

		//module=STRING
		public Assignment getModuleAssignment_0_2() { return cModuleAssignment_0_2; }

		//STRING
		public RuleCall getModuleSTRINGTerminalRuleCall_0_2_0() { return cModuleSTRINGTerminalRuleCall_0_2_0; }

		//"target" ("datalayout" | "triple") "=" target=STRING
		public Group getGroup_1() { return cGroup_1; }

		//"target"
		public Keyword getTargetKeyword_1_0() { return cTargetKeyword_1_0; }

		//"datalayout" | "triple"
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//"datalayout"
		public Keyword getDatalayoutKeyword_1_1_0() { return cDatalayoutKeyword_1_1_0; }

		//"triple"
		public Keyword getTripleKeyword_1_1_1() { return cTripleKeyword_1_1_1; }

		//"="
		public Keyword getEqualsSignKeyword_1_2() { return cEqualsSignKeyword_1_2; }

		//target=STRING
		public Assignment getTargetAssignment_1_3() { return cTargetAssignment_1_3; }

		//STRING
		public RuleCall getTargetSTRINGTerminalRuleCall_1_3_0() { return cTargetSTRINGTerminalRuleCall_1_3_0; }

		//"deplibs" "=" "[" libs+=STRING ("," libs+=STRING)* "]"
		public Group getGroup_2() { return cGroup_2; }

		//"deplibs"
		public Keyword getDeplibsKeyword_2_0() { return cDeplibsKeyword_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1() { return cEqualsSignKeyword_2_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_2() { return cLeftSquareBracketKeyword_2_2; }

		//libs+=STRING
		public Assignment getLibsAssignment_2_3() { return cLibsAssignment_2_3; }

		//STRING
		public RuleCall getLibsSTRINGTerminalRuleCall_2_3_0() { return cLibsSTRINGTerminalRuleCall_2_3_0; }

		//("," libs+=STRING)*
		public Group getGroup_2_4() { return cGroup_2_4; }

		//","
		public Keyword getCommaKeyword_2_4_0() { return cCommaKeyword_2_4_0; }

		//libs+=STRING
		public Assignment getLibsAssignment_2_4_1() { return cLibsAssignment_2_4_1; }

		//STRING
		public RuleCall getLibsSTRINGTerminalRuleCall_2_4_1_0() { return cLibsSTRINGTerminalRuleCall_2_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_5() { return cRightSquareBracketKeyword_2_5; }
	}

	public class MainLevelEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MainLevelEntity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGlobalDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFunctionDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAliasDefinitionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		/// *
		//
		// * This rule is used to devide the Function Definitions form the Variable Definitions.
		//
		// * / MainLevelEntity:
		//
		//	TypeDefinition | GlobalDefinition | FunctionDefinition | AliasDefinition;
		public ParserRule getRule() { return rule; }

		//TypeDefinition | GlobalDefinition | FunctionDefinition | AliasDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//TypeDefinition
		public RuleCall getTypeDefinitionParserRuleCall_0() { return cTypeDefinitionParserRuleCall_0; }

		//GlobalDefinition
		public RuleCall getGlobalDefinitionParserRuleCall_1() { return cGlobalDefinitionParserRuleCall_1; }

		//FunctionDefinition
		public RuleCall getFunctionDefinitionParserRuleCall_2() { return cFunctionDefinitionParserRuleCall_2; }

		//AliasDefinition
		public RuleCall getAliasDefinitionParserRuleCall_3() { return cAliasDefinitionParserRuleCall_3; }
	}

	public class TypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAddressAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAddressAddressParserRuleCall_0_0 = (RuleCall)cAddressAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cTypeKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Assignment cStructAssignment_2_1_0 = (Assignment)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cStructStructureParserRuleCall_2_1_0_0 = (RuleCall)cStructAssignment_2_1_0.eContents().get(0);
		private final RuleCall cOpaqueParserRuleCall_2_1_1 = (RuleCall)cAlternatives_2_1.eContents().get(1);
		
		//TypeDefinition:
		//
		//	address=Address "=" ("type" (struct=Structure | Opaque));
		public ParserRule getRule() { return rule; }

		//address=Address "=" ("type" (struct=Structure | Opaque))
		public Group getGroup() { return cGroup; }

		//address=Address
		public Assignment getAddressAssignment_0() { return cAddressAssignment_0; }

		//Address
		public RuleCall getAddressAddressParserRuleCall_0_0() { return cAddressAddressParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"type" (struct=Structure | Opaque)
		public Group getGroup_2() { return cGroup_2; }

		//"type"
		public Keyword getTypeKeyword_2_0() { return cTypeKeyword_2_0; }

		//struct=Structure | Opaque
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }

		//struct=Structure
		public Assignment getStructAssignment_2_1_0() { return cStructAssignment_2_1_0; }

		//Structure
		public RuleCall getStructStructureParserRuleCall_2_1_0_0() { return cStructStructureParserRuleCall_2_1_0_0; }

		//Opaque
		public RuleCall getOpaqueParserRuleCall_2_1_1() { return cOpaqueParserRuleCall_2_1_1; }
	}

	public class GlobalDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GlobalDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAdressAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAdressAddressParserRuleCall_0_0 = (RuleCall)cAdressAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cLINKAGEParserRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final Keyword cGlobalKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Keyword cUnnamed_addrKeyword_2_2 = (Keyword)cAlternatives_2.eContents().get(2);
		private final Keyword cConstantKeyword_2_3 = (Keyword)cAlternatives_2.eContents().get(3);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cTypeAlternatives_3_0 = (Alternatives)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeTypeUseParserRuleCall_3_0_0 = (RuleCall)cTypeAlternatives_3_0.eContents().get(0);
		private final RuleCall cTypeAggregate_TypesParserRuleCall_3_0_1 = (RuleCall)cTypeAlternatives_3_0.eContents().get(1);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueValueParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cALIGNMENTParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		
		//GlobalDefinition:
		//
		//	adress=Address "=" (LINKAGE | "global" | "unnamed_addr" | "constant")* type=(TypeUse | Aggregate_Types) value=Value
		//
		//	("," ALIGNMENT)?;
		public ParserRule getRule() { return rule; }

		//adress=Address "=" (LINKAGE | "global" | "unnamed_addr" | "constant")* type=(TypeUse | Aggregate_Types) value=Value (","
		//
		//ALIGNMENT)?
		public Group getGroup() { return cGroup; }

		//adress=Address
		public Assignment getAdressAssignment_0() { return cAdressAssignment_0; }

		//Address
		public RuleCall getAdressAddressParserRuleCall_0_0() { return cAdressAddressParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//(LINKAGE | "global" | "unnamed_addr" | "constant")*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//LINKAGE
		public RuleCall getLINKAGEParserRuleCall_2_0() { return cLINKAGEParserRuleCall_2_0; }

		//"global"
		public Keyword getGlobalKeyword_2_1() { return cGlobalKeyword_2_1; }

		//"unnamed_addr"
		public Keyword getUnnamed_addrKeyword_2_2() { return cUnnamed_addrKeyword_2_2; }

		//"constant"
		public Keyword getConstantKeyword_2_3() { return cConstantKeyword_2_3; }

		//type=(TypeUse | Aggregate_Types)
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//TypeUse | Aggregate_Types
		public Alternatives getTypeAlternatives_3_0() { return cTypeAlternatives_3_0; }

		//TypeUse
		public RuleCall getTypeTypeUseParserRuleCall_3_0_0() { return cTypeTypeUseParserRuleCall_3_0_0; }

		//Aggregate_Types
		public RuleCall getTypeAggregate_TypesParserRuleCall_3_0_1() { return cTypeAggregate_TypesParserRuleCall_3_0_1; }

		//value=Value
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }

		//Value
		public RuleCall getValueValueParserRuleCall_4_0() { return cValueValueParserRuleCall_4_0; }

		//("," ALIGNMENT)?
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//ALIGNMENT
		public RuleCall getALIGNMENTParserRuleCall_5_1() { return cALIGNMENTParserRuleCall_5_1; }
	}

	public class FunctionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cDefineKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cLINKAGEParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cVISIBILITYParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cCallingConvParserRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final RuleCall cRETURN_ATTRIBUTESParserRuleCall_0_4 = (RuleCall)cGroup_0.eContents().get(4);
		private final Assignment cReturnTypeAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cReturnTypeTypeUseParserRuleCall_0_5_0 = (RuleCall)cReturnTypeAssignment_0_5.eContents().get(0);
		private final Assignment cAddressAssignment_0_6 = (Assignment)cGroup_0.eContents().get(6);
		private final RuleCall cAddressAddressParserRuleCall_0_6_0 = (RuleCall)cAddressAssignment_0_6.eContents().get(0);
		private final Assignment cPlAssignment_0_7 = (Assignment)cGroup_0.eContents().get(7);
		private final RuleCall cPlParameterListParserRuleCall_0_7_0 = (RuleCall)cPlAssignment_0_7.eContents().get(0);
		private final Keyword cUnnamed_addrKeyword_0_8 = (Keyword)cGroup_0.eContents().get(8);
		private final RuleCall cFUNCTION_ATTRIBUTESParserRuleCall_0_9 = (RuleCall)cGroup_0.eContents().get(9);
		private final Group cGroup_0_10 = (Group)cGroup_0.eContents().get(10);
		private final Keyword cSectionKeyword_0_10_0 = (Keyword)cGroup_0_10.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_0_10_1 = (RuleCall)cGroup_0_10.eContents().get(1);
		private final RuleCall cALIGNMENTParserRuleCall_0_11 = (RuleCall)cGroup_0.eContents().get(11);
		private final Assignment cBodyAssignment_0_12 = (Assignment)cGroup_0.eContents().get(12);
		private final RuleCall cBodyFunctionBodyParserRuleCall_0_12_0 = (RuleCall)cBodyAssignment_0_12.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cDeclareKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cLINKAGEParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cVISIBILITYParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final RuleCall cCallingConvParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final RuleCall cRETURN_ATTRIBUTESParserRuleCall_1_4 = (RuleCall)cGroup_1.eContents().get(4);
		private final Assignment cReturnTypeAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cReturnTypeTypeUseParserRuleCall_1_5_0 = (RuleCall)cReturnTypeAssignment_1_5.eContents().get(0);
		private final Assignment cAddressAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cAddressAddressParserRuleCall_1_6_0 = (RuleCall)cAddressAssignment_1_6.eContents().get(0);
		private final Alternatives cAlternatives_1_7 = (Alternatives)cGroup_1.eContents().get(7);
		private final Assignment cTListAssignment_1_7_0 = (Assignment)cAlternatives_1_7.eContents().get(0);
		private final RuleCall cTListTypeListParserRuleCall_1_7_0_0 = (RuleCall)cTListAssignment_1_7_0.eContents().get(0);
		private final RuleCall cORESTTerminalRuleCall_1_7_1 = (RuleCall)cAlternatives_1_7.eContents().get(1);
		private final Keyword cUnnamed_addrKeyword_1_8 = (Keyword)cGroup_1.eContents().get(8);
		private final RuleCall cFUNCTION_ATTRIBUTESParserRuleCall_1_9 = (RuleCall)cGroup_1.eContents().get(9);
		private final Group cGroup_1_10 = (Group)cGroup_1.eContents().get(10);
		private final Keyword cSectionKeyword_1_10_0 = (Keyword)cGroup_1_10.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1_10_1 = (RuleCall)cGroup_1_10.eContents().get(1);
		private final RuleCall cALIGNMENTParserRuleCall_1_11 = (RuleCall)cGroup_1.eContents().get(11);
		
		//FunctionDefinition:
		//
		//	"define" LINKAGE? VISIBILITY? CallingConv? RETURN_ATTRIBUTES? returnType=TypeUse address=Address pl=ParameterList
		//
		//	"unnamed_addr"? FUNCTION_ATTRIBUTES* ("section " STRING)? ALIGNMENT? body=FunctionBody | "declare" LINKAGE?
		//
		//	VISIBILITY? CallingConv? RETURN_ATTRIBUTES? returnType=TypeUse address=Address (tList=TypeList | OREST)
		//
		//	"unnamed_addr"? FUNCTION_ATTRIBUTES* ("section " STRING)? ALIGNMENT?;
		public ParserRule getRule() { return rule; }

		//"define" LINKAGE? VISIBILITY? CallingConv? RETURN_ATTRIBUTES? returnType=TypeUse address=Address pl=ParameterList
		//
		//"unnamed_addr"? FUNCTION_ATTRIBUTES* ("section " STRING)? ALIGNMENT? body=FunctionBody | "declare" LINKAGE?
		//
		//VISIBILITY? CallingConv? RETURN_ATTRIBUTES? returnType=TypeUse address=Address (tList=TypeList | OREST)
		//
		//"unnamed_addr"? FUNCTION_ATTRIBUTES* ("section " STRING)? ALIGNMENT?
		public Alternatives getAlternatives() { return cAlternatives; }

		//"define" LINKAGE? VISIBILITY? CallingConv? RETURN_ATTRIBUTES? returnType=TypeUse address=Address pl=ParameterList
		//
		//"unnamed_addr"? FUNCTION_ATTRIBUTES* ("section " STRING)? ALIGNMENT? body=FunctionBody
		public Group getGroup_0() { return cGroup_0; }

		//"define"
		public Keyword getDefineKeyword_0_0() { return cDefineKeyword_0_0; }

		//LINKAGE?
		public RuleCall getLINKAGEParserRuleCall_0_1() { return cLINKAGEParserRuleCall_0_1; }

		//VISIBILITY?
		public RuleCall getVISIBILITYParserRuleCall_0_2() { return cVISIBILITYParserRuleCall_0_2; }

		//CallingConv?
		public RuleCall getCallingConvParserRuleCall_0_3() { return cCallingConvParserRuleCall_0_3; }

		//RETURN_ATTRIBUTES?
		public RuleCall getRETURN_ATTRIBUTESParserRuleCall_0_4() { return cRETURN_ATTRIBUTESParserRuleCall_0_4; }

		//returnType=TypeUse
		public Assignment getReturnTypeAssignment_0_5() { return cReturnTypeAssignment_0_5; }

		//TypeUse
		public RuleCall getReturnTypeTypeUseParserRuleCall_0_5_0() { return cReturnTypeTypeUseParserRuleCall_0_5_0; }

		//address=Address
		public Assignment getAddressAssignment_0_6() { return cAddressAssignment_0_6; }

		//Address
		public RuleCall getAddressAddressParserRuleCall_0_6_0() { return cAddressAddressParserRuleCall_0_6_0; }

		//pl=ParameterList
		public Assignment getPlAssignment_0_7() { return cPlAssignment_0_7; }

		//ParameterList
		public RuleCall getPlParameterListParserRuleCall_0_7_0() { return cPlParameterListParserRuleCall_0_7_0; }

		//"unnamed_addr"?
		public Keyword getUnnamed_addrKeyword_0_8() { return cUnnamed_addrKeyword_0_8; }

		//FUNCTION_ATTRIBUTES*
		public RuleCall getFUNCTION_ATTRIBUTESParserRuleCall_0_9() { return cFUNCTION_ATTRIBUTESParserRuleCall_0_9; }

		//("section " STRING)?
		public Group getGroup_0_10() { return cGroup_0_10; }

		//"section "
		public Keyword getSectionKeyword_0_10_0() { return cSectionKeyword_0_10_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0_10_1() { return cSTRINGTerminalRuleCall_0_10_1; }

		//ALIGNMENT?
		public RuleCall getALIGNMENTParserRuleCall_0_11() { return cALIGNMENTParserRuleCall_0_11; }

		//body=FunctionBody
		public Assignment getBodyAssignment_0_12() { return cBodyAssignment_0_12; }

		//FunctionBody
		public RuleCall getBodyFunctionBodyParserRuleCall_0_12_0() { return cBodyFunctionBodyParserRuleCall_0_12_0; }

		//"declare" LINKAGE? VISIBILITY? CallingConv? RETURN_ATTRIBUTES? returnType=TypeUse address=Address (tList=TypeList |
		//
		//OREST) "unnamed_addr"? FUNCTION_ATTRIBUTES* ("section " STRING)? ALIGNMENT?
		public Group getGroup_1() { return cGroup_1; }

		//"declare"
		public Keyword getDeclareKeyword_1_0() { return cDeclareKeyword_1_0; }

		//LINKAGE?
		public RuleCall getLINKAGEParserRuleCall_1_1() { return cLINKAGEParserRuleCall_1_1; }

		//VISIBILITY?
		public RuleCall getVISIBILITYParserRuleCall_1_2() { return cVISIBILITYParserRuleCall_1_2; }

		//CallingConv?
		public RuleCall getCallingConvParserRuleCall_1_3() { return cCallingConvParserRuleCall_1_3; }

		//RETURN_ATTRIBUTES?
		public RuleCall getRETURN_ATTRIBUTESParserRuleCall_1_4() { return cRETURN_ATTRIBUTESParserRuleCall_1_4; }

		//returnType=TypeUse
		public Assignment getReturnTypeAssignment_1_5() { return cReturnTypeAssignment_1_5; }

		//TypeUse
		public RuleCall getReturnTypeTypeUseParserRuleCall_1_5_0() { return cReturnTypeTypeUseParserRuleCall_1_5_0; }

		//address=Address
		public Assignment getAddressAssignment_1_6() { return cAddressAssignment_1_6; }

		//Address
		public RuleCall getAddressAddressParserRuleCall_1_6_0() { return cAddressAddressParserRuleCall_1_6_0; }

		//tList=TypeList | OREST
		public Alternatives getAlternatives_1_7() { return cAlternatives_1_7; }

		//tList=TypeList
		public Assignment getTListAssignment_1_7_0() { return cTListAssignment_1_7_0; }

		//TypeList
		public RuleCall getTListTypeListParserRuleCall_1_7_0_0() { return cTListTypeListParserRuleCall_1_7_0_0; }

		//OREST
		public RuleCall getORESTTerminalRuleCall_1_7_1() { return cORESTTerminalRuleCall_1_7_1; }

		//"unnamed_addr"?
		public Keyword getUnnamed_addrKeyword_1_8() { return cUnnamed_addrKeyword_1_8; }

		//FUNCTION_ATTRIBUTES*
		public RuleCall getFUNCTION_ATTRIBUTESParserRuleCall_1_9() { return cFUNCTION_ATTRIBUTESParserRuleCall_1_9; }

		//("section " STRING)?
		public Group getGroup_1_10() { return cGroup_1_10; }

		//"section "
		public Keyword getSectionKeyword_1_10_0() { return cSectionKeyword_1_10_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_10_1() { return cSTRINGTerminalRuleCall_1_10_1; }

		//ALIGNMENT?
		public RuleCall getALIGNMENTParserRuleCall_1_11() { return cALIGNMENTParserRuleCall_1_11; }
	}

	public class AliasDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AliasDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAddressAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAddressAddressParserRuleCall_0_0 = (RuleCall)cAddressAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAliasKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cALIAS_LINKAGEParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cVISIBILITYParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cAliastypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAliastypeTypeUseParserRuleCall_5_0 = (RuleCall)cAliastypeAssignment_5.eContents().get(0);
		private final Assignment cAliasvalueAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAliasvalueValueParserRuleCall_6_0 = (RuleCall)cAliasvalueAssignment_6.eContents().get(0);
		private final Assignment cAliaseeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cAliaseeTypeUseParserRuleCall_7_0 = (RuleCall)cAliaseeAssignment_7.eContents().get(0);
		
		//AliasDefinition:
		//
		//	address=Address "=" "alias" ALIAS_LINKAGE? VISIBILITY? aliastype=TypeUse aliasvalue=Value aliasee=TypeUse;
		public ParserRule getRule() { return rule; }

		//address=Address "=" "alias" ALIAS_LINKAGE? VISIBILITY? aliastype=TypeUse aliasvalue=Value aliasee=TypeUse
		public Group getGroup() { return cGroup; }

		//address=Address
		public Assignment getAddressAssignment_0() { return cAddressAssignment_0; }

		//Address
		public RuleCall getAddressAddressParserRuleCall_0_0() { return cAddressAddressParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"alias"
		public Keyword getAliasKeyword_2() { return cAliasKeyword_2; }

		//ALIAS_LINKAGE?
		public RuleCall getALIAS_LINKAGEParserRuleCall_3() { return cALIAS_LINKAGEParserRuleCall_3; }

		//VISIBILITY?
		public RuleCall getVISIBILITYParserRuleCall_4() { return cVISIBILITYParserRuleCall_4; }

		//aliastype=TypeUse
		public Assignment getAliastypeAssignment_5() { return cAliastypeAssignment_5; }

		//TypeUse
		public RuleCall getAliastypeTypeUseParserRuleCall_5_0() { return cAliastypeTypeUseParserRuleCall_5_0; }

		//aliasvalue=Value
		public Assignment getAliasvalueAssignment_6() { return cAliasvalueAssignment_6; }

		//Value
		public RuleCall getAliasvalueValueParserRuleCall_6_0() { return cAliasvalueValueParserRuleCall_6_0; }

		//aliasee=TypeUse
		public Assignment getAliaseeAssignment_7() { return cAliaseeAssignment_7; }

		//TypeUse
		public RuleCall getAliaseeTypeUseParserRuleCall_7_0() { return cAliaseeTypeUseParserRuleCall_7_0; }
	}

	public class TypeUseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeUse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cPredefinedParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cAddressUseParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cORESTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//TypeUse:
		//
		//	(Predefined | AddressUse) OREST?;
		public ParserRule getRule() { return rule; }

		//(Predefined | AddressUse) OREST?
		public Group getGroup() { return cGroup; }

		//Predefined | AddressUse
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//Predefined
		public RuleCall getPredefinedParserRuleCall_0_0() { return cPredefinedParserRuleCall_0_0; }

		//AddressUse
		public RuleCall getAddressUseParserRuleCall_0_1() { return cAddressUseParserRuleCall_0_1; }

		//OREST?
		public RuleCall getORESTTerminalRuleCall_1() { return cORESTTerminalRuleCall_1; }
	}

	public class AddressUseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AddressUse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAddressAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cAddressAddressCrossReference_0_0 = (CrossReference)cAddressAssignment_0.eContents().get(0);
		private final RuleCall cAddressAddressVALID_IDTerminalRuleCall_0_0_1 = (RuleCall)cAddressAddressCrossReference_0_0.eContents().get(1);
		private final Assignment cPointerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPointerPOINTERTerminalRuleCall_1_0 = (RuleCall)cPointerAssignment_1.eContents().get(0);
		
		//AddressUse:
		//
		//	address=[Address|VALID_ID] pointer=POINTER?;
		public ParserRule getRule() { return rule; }

		//address=[Address|VALID_ID] pointer=POINTER?
		public Group getGroup() { return cGroup; }

		//address=[Address|VALID_ID]
		public Assignment getAddressAssignment_0() { return cAddressAssignment_0; }

		//[Address|VALID_ID]
		public CrossReference getAddressAddressCrossReference_0_0() { return cAddressAddressCrossReference_0_0; }

		//VALID_ID
		public RuleCall getAddressAddressVALID_IDTerminalRuleCall_0_0_1() { return cAddressAddressVALID_IDTerminalRuleCall_0_0_1; }

		//pointer=POINTER?
		public Assignment getPointerAssignment_1() { return cPointerAssignment_1; }

		//POINTER
		public RuleCall getPointerPOINTERTerminalRuleCall_1_0() { return cPointerPOINTERTerminalRuleCall_1_0; }
	}

	public class AddressElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Address");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameVALID_IDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Address:
		//
		//	name=VALID_ID;
		public ParserRule getRule() { return rule; }

		//name=VALID_ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//VALID_ID
		public RuleCall getNameVALID_IDTerminalRuleCall_0() { return cNameVALID_IDTerminalRuleCall_0; }
	}

	public class PredefinedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Predefined");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypePredefined_TypesParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cPointerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPointerPOINTERTerminalRuleCall_1_0 = (RuleCall)cPointerAssignment_1.eContents().get(0);
		
		//Predefined:
		//
		//	type=Predefined_Types pointer=POINTER?;
		public ParserRule getRule() { return rule; }

		//type=Predefined_Types pointer=POINTER?
		public Group getGroup() { return cGroup; }

		//type=Predefined_Types
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Predefined_Types
		public RuleCall getTypePredefined_TypesParserRuleCall_0_0() { return cTypePredefined_TypesParserRuleCall_0_0; }

		//pointer=POINTER?
		public Assignment getPointerAssignment_1() { return cPointerAssignment_1; }

		//POINTER
		public RuleCall getPointerPOINTERTerminalRuleCall_1_0() { return cPointerPOINTERTerminalRuleCall_1_0; }
	}

	public class Primitive_TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Primitive_Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cVoidKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cNullKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLabelKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cUndefKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cTrueKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cFalseKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//Primitive_Type:
		//
		//	"void" | "null" | "label" | "undef" | "true" | "false";
		public ParserRule getRule() { return rule; }

		//"void" | "null" | "label" | "undef" | "true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"void"
		public Keyword getVoidKeyword_0() { return cVoidKeyword_0; }

		//"null"
		public Keyword getNullKeyword_1() { return cNullKeyword_1; }

		//"label"
		public Keyword getLabelKeyword_2() { return cLabelKeyword_2; }

		//"undef"
		public Keyword getUndefKeyword_3() { return cUndefKeyword_3; }

		//"true"
		public Keyword getTrueKeyword_4() { return cTrueKeyword_4; }

		//"false"
		public Keyword getFalseKeyword_5() { return cFalseKeyword_5; }
	}

	public class InitializersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Initializers");
		private final Keyword cZeroinitializerKeyword = (Keyword)rule.eContents().get(1);
		
		//Initializers:
		//
		//	"zeroinitializer";
		public ParserRule getRule() { return rule; }

		//"zeroinitializer"
		public Keyword getZeroinitializerKeyword() { return cZeroinitializerKeyword; }
	}

	public class FloatingPoint_TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FloatingPoint_Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cHalfKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFloatKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cDoubleKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cX86_fp80Keyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cFp128Keyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cPpc_fp128Keyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//FloatingPoint_Type:
		//
		//	"half" | "float" | "double" | "x86_fp80" | "fp128" | "ppc_fp128";
		public ParserRule getRule() { return rule; }

		//"half" | "float" | "double" | "x86_fp80" | "fp128" | "ppc_fp128"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"half"
		public Keyword getHalfKeyword_0() { return cHalfKeyword_0; }

		//"float"
		public Keyword getFloatKeyword_1() { return cFloatKeyword_1; }

		//"double"
		public Keyword getDoubleKeyword_2() { return cDoubleKeyword_2; }

		//"x86_fp80"
		public Keyword getX86_fp80Keyword_3() { return cX86_fp80Keyword_3; }

		//"fp128"
		public Keyword getFp128Keyword_4() { return cFp128Keyword_4; }

		//"ppc_fp128"
		public Keyword getPpc_fp128Keyword_5() { return cPpc_fp128Keyword_5; }
	}

	public class Predefined_TypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Predefined_Types");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitive_TypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINT_TYPETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFloatingPoint_TypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Predefined_Types:
		//
		//	Primitive_Type | INT_TYPE | FloatingPoint_Type;
		public ParserRule getRule() { return rule; }

		//Primitive_Type | INT_TYPE | FloatingPoint_Type
		public Alternatives getAlternatives() { return cAlternatives; }

		//Primitive_Type
		public RuleCall getPrimitive_TypeParserRuleCall_0() { return cPrimitive_TypeParserRuleCall_0; }

		//INT_TYPE
		public RuleCall getINT_TYPETerminalRuleCall_1() { return cINT_TYPETerminalRuleCall_1; }

		//FloatingPoint_Type
		public RuleCall getFloatingPoint_TypeParserRuleCall_2() { return cFloatingPoint_TypeParserRuleCall_2; }
	}

	public class VectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Vector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cXKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeUseParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Vector:
		//
		//	"<" INT "x" type=TypeUse ">";
		public ParserRule getRule() { return rule; }

		//"<" INT "x" type=TypeUse ">"
		public Group getGroup() { return cGroup; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//"x"
		public Keyword getXKeyword_2() { return cXKeyword_2; }

		//type=TypeUse
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//TypeUse
		public RuleCall getTypeTypeUseParserRuleCall_3_0() { return cTypeTypeUseParserRuleCall_3_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
	}

	public class ArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Array");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArrayAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Keyword cXKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Assignment cTypeAssignment_1_0_3 = (Assignment)cGroup_1_0.eContents().get(3);
		private final RuleCall cTypeTypeUseParserRuleCall_1_0_3_0 = (RuleCall)cTypeAssignment_1_0_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_0_4 = (Keyword)cGroup_1_0.eContents().get(4);
		private final Keyword cLeftSquareBracketRightSquareBracketKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final RuleCall cPOINTERTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Array:
		//
		//	{Array} ("[" INT "x" type=TypeUse "]" | "[]" | "[" "]") POINTER?;
		public ParserRule getRule() { return rule; }

		//{Array} ("[" INT "x" type=TypeUse "]" | "[]" | "[" "]") POINTER?
		public Group getGroup() { return cGroup; }

		//{Array}
		public Action getArrayAction_0() { return cArrayAction_0; }

		//"[" INT "x" type=TypeUse "]" | "[]" | "[" "]"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"[" INT "x" type=TypeUse "]"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0_0() { return cLeftSquareBracketKeyword_1_0_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_0_1() { return cINTTerminalRuleCall_1_0_1; }

		//"x"
		public Keyword getXKeyword_1_0_2() { return cXKeyword_1_0_2; }

		//type=TypeUse
		public Assignment getTypeAssignment_1_0_3() { return cTypeAssignment_1_0_3; }

		//TypeUse
		public RuleCall getTypeTypeUseParserRuleCall_1_0_3_0() { return cTypeTypeUseParserRuleCall_1_0_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_0_4() { return cRightSquareBracketKeyword_1_0_4; }

		//"[]"
		public Keyword getLeftSquareBracketRightSquareBracketKeyword_1_1() { return cLeftSquareBracketRightSquareBracketKeyword_1_1; }

		//"[" "]"
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_2_0() { return cLeftSquareBracketKeyword_1_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2_1() { return cRightSquareBracketKeyword_1_2_1; }

		//POINTER?
		public RuleCall getPOINTERTerminalRuleCall_2() { return cPOINTERTerminalRuleCall_2; }
	}

	public class Aggregate_TypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Aggregate_Types");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStructureParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArrayParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVectorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Aggregate_Types:
		//
		//	Structure | Array | Vector;
		public ParserRule getRule() { return rule; }

		//Structure | Array | Vector
		public Alternatives getAlternatives() { return cAlternatives; }

		//Structure
		public RuleCall getStructureParserRuleCall_0() { return cStructureParserRuleCall_0; }

		//Array
		public RuleCall getArrayParserRuleCall_1() { return cArrayParserRuleCall_1; }

		//Vector
		public RuleCall getVectorParserRuleCall_2() { return cVectorParserRuleCall_2; }
	}

	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constant");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Constant:
		//
		//	value=INT;
		public ParserRule getRule() { return rule; }

		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}

	public class NonConstantValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NonConstantValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameVALID_IDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cPointerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPointerPOINTERTerminalRuleCall_1_0 = (RuleCall)cPointerAssignment_1.eContents().get(0);
		
		//NonConstantValue:
		//
		//	name=VALID_ID pointer=POINTER?;
		public ParserRule getRule() { return rule; }

		//name=VALID_ID pointer=POINTER?
		public Group getGroup() { return cGroup; }

		//name=VALID_ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//VALID_ID
		public RuleCall getNameVALID_IDTerminalRuleCall_0_0() { return cNameVALID_IDTerminalRuleCall_0_0; }

		//pointer=POINTER?
		public Assignment getPointerAssignment_1() { return cPointerAssignment_1; }

		//POINTER
		public RuleCall getPointerPOINTERTerminalRuleCall_1_0() { return cPointerPOINTERTerminalRuleCall_1_0; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCastParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConstantParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNonConstantValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Assignment cPrimitiveAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Alternatives cPrimitiveAlternatives_3_0 = (Alternatives)cPrimitiveAssignment_3.eContents().get(0);
		private final RuleCall cPrimitivePrimitive_TypeParserRuleCall_3_0_0 = (RuleCall)cPrimitiveAlternatives_3_0.eContents().get(0);
		private final RuleCall cPrimitiveInitializersParserRuleCall_3_0_1 = (RuleCall)cPrimitiveAlternatives_3_0.eContents().get(1);
		
		//Value:
		//
		//	Cast | Constant | NonConstantValue | primitive=(Primitive_Type | Initializers);
		public ParserRule getRule() { return rule; }

		//Cast | Constant | NonConstantValue | primitive=(Primitive_Type | Initializers)
		public Alternatives getAlternatives() { return cAlternatives; }

		//Cast
		public RuleCall getCastParserRuleCall_0() { return cCastParserRuleCall_0; }

		//Constant
		public RuleCall getConstantParserRuleCall_1() { return cConstantParserRuleCall_1; }

		//NonConstantValue
		public RuleCall getNonConstantValueParserRuleCall_2() { return cNonConstantValueParserRuleCall_2; }

		//primitive=(Primitive_Type | Initializers)
		public Assignment getPrimitiveAssignment_3() { return cPrimitiveAssignment_3; }

		//Primitive_Type | Initializers
		public Alternatives getPrimitiveAlternatives_3_0() { return cPrimitiveAlternatives_3_0; }

		//Primitive_Type
		public RuleCall getPrimitivePrimitive_TypeParserRuleCall_3_0_0() { return cPrimitivePrimitive_TypeParserRuleCall_3_0_0; }

		//Initializers
		public RuleCall getPrimitiveInitializersParserRuleCall_3_0_1() { return cPrimitiveInitializersParserRuleCall_3_0_1; }
	}

	public class ValueStructElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueStruct");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypesTypeUseParserRuleCall_1_0 = (RuleCall)cTypesAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisRightParenthesisAsteriskKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueValueParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTypesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTypesTypeUseParserRuleCall_4_1_0 = (RuleCall)cTypesAssignment_4_1.eContents().get(0);
		private final Keyword cLeftParenthesisRightParenthesisAsteriskKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cValueAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cValueValueParserRuleCall_4_3_0 = (RuleCall)cValueAssignment_4_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ValueStruct:
		//
		//	"{" types+=TypeUse "()*"? Value+=Value ("," types+=TypeUse "()*"? Value+=Value) "}";
		public ParserRule getRule() { return rule; }

		//"{" types+=TypeUse "()*"? Value+=Value ("," types+=TypeUse "()*"? Value+=Value) "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//types+=TypeUse
		public Assignment getTypesAssignment_1() { return cTypesAssignment_1; }

		//TypeUse
		public RuleCall getTypesTypeUseParserRuleCall_1_0() { return cTypesTypeUseParserRuleCall_1_0; }

		//"()*"?
		public Keyword getLeftParenthesisRightParenthesisAsteriskKeyword_2() { return cLeftParenthesisRightParenthesisAsteriskKeyword_2; }

		//Value+=Value
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//Value
		public RuleCall getValueValueParserRuleCall_3_0() { return cValueValueParserRuleCall_3_0; }

		//"," types+=TypeUse "()*"? Value+=Value
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//types+=TypeUse
		public Assignment getTypesAssignment_4_1() { return cTypesAssignment_4_1; }

		//TypeUse
		public RuleCall getTypesTypeUseParserRuleCall_4_1_0() { return cTypesTypeUseParserRuleCall_4_1_0; }

		//"()*"?
		public Keyword getLeftParenthesisRightParenthesisAsteriskKeyword_4_2() { return cLeftParenthesisRightParenthesisAsteriskKeyword_4_2; }

		//Value+=Value
		public Assignment getValueAssignment_4_3() { return cValueAssignment_4_3; }

		//Value
		public RuleCall getValueValueParserRuleCall_4_3_0() { return cValueValueParserRuleCall_4_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class StructureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Structure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStructureAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cTypesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cTypesTypeUseParserRuleCall_2_0_0 = (RuleCall)cTypesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cTypesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cTypesTypeUseParserRuleCall_2_1_1_0 = (RuleCall)cTypesAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cPOINTERTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Structure:
		//
		//	{Structure} "{" (types+=TypeUse ("," types+=TypeUse)*)? "}" POINTER?;
		public ParserRule getRule() { return rule; }

		//{Structure} "{" (types+=TypeUse ("," types+=TypeUse)*)? "}" POINTER?
		public Group getGroup() { return cGroup; }

		//{Structure}
		public Action getStructureAction_0() { return cStructureAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(types+=TypeUse ("," types+=TypeUse)*)?
		public Group getGroup_2() { return cGroup_2; }

		//types+=TypeUse
		public Assignment getTypesAssignment_2_0() { return cTypesAssignment_2_0; }

		//TypeUse
		public RuleCall getTypesTypeUseParserRuleCall_2_0_0() { return cTypesTypeUseParserRuleCall_2_0_0; }

		//("," types+=TypeUse)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//types+=TypeUse
		public Assignment getTypesAssignment_2_1_1() { return cTypesAssignment_2_1_1; }

		//TypeUse
		public RuleCall getTypesTypeUseParserRuleCall_2_1_1_0() { return cTypesTypeUseParserRuleCall_2_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }

		//POINTER?
		public RuleCall getPOINTERTerminalRuleCall_4() { return cPOINTERTerminalRuleCall_4; }
	}

	public class OpaqueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Opaque");
		private final Keyword cOpaqueKeyword = (Keyword)rule.eContents().get(1);
		
		//Opaque:
		//
		//	"opaque";
		public ParserRule getRule() { return rule; }

		//"opaque"
		public Keyword getOpaqueKeyword() { return cOpaqueKeyword; }
	}

	public class ParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterListAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Assignment cTypesAssignment_1_1_1_0 = (Assignment)cGroup_1_1_1.eContents().get(0);
		private final RuleCall cTypesTypeUseParserRuleCall_1_1_1_0_0 = (RuleCall)cTypesAssignment_1_1_1_0.eContents().get(0);
		private final Assignment cListsAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cListsTypeListParserRuleCall_1_1_1_1_0 = (RuleCall)cListsAssignment_1_1_1_1.eContents().get(0);
		private final RuleCall cRETURN_ATTRIBUTESParserRuleCall_1_1_1_2 = (RuleCall)cGroup_1_1_1.eContents().get(2);
		private final Assignment cVariablesAssignment_1_1_1_3 = (Assignment)cGroup_1_1_1.eContents().get(3);
		private final RuleCall cVariablesValueParserRuleCall_1_1_1_3_0 = (RuleCall)cVariablesAssignment_1_1_1_3.eContents().get(0);
		private final Group cGroup_1_1_1_4 = (Group)cGroup_1_1_1.eContents().get(4);
		private final Keyword cCommaKeyword_1_1_1_4_0 = (Keyword)cGroup_1_1_1_4.eContents().get(0);
		private final Assignment cTypesAssignment_1_1_1_4_1 = (Assignment)cGroup_1_1_1_4.eContents().get(1);
		private final RuleCall cTypesTypeUseParserRuleCall_1_1_1_4_1_0 = (RuleCall)cTypesAssignment_1_1_1_4_1.eContents().get(0);
		private final Assignment cListsAssignment_1_1_1_4_2 = (Assignment)cGroup_1_1_1_4.eContents().get(2);
		private final RuleCall cListsTypeListParserRuleCall_1_1_1_4_2_0 = (RuleCall)cListsAssignment_1_1_1_4_2.eContents().get(0);
		private final RuleCall cRETURN_ATTRIBUTESParserRuleCall_1_1_1_4_3 = (RuleCall)cGroup_1_1_1_4.eContents().get(3);
		private final Assignment cVariablesAssignment_1_1_1_4_4 = (Assignment)cGroup_1_1_1_4.eContents().get(4);
		private final RuleCall cVariablesValueParserRuleCall_1_1_1_4_4_0 = (RuleCall)cVariablesAssignment_1_1_1_4_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//ParameterList:
		//
		//	{ParameterList} ("()" | "(" (types+=TypeUse Lists+=TypeList? RETURN_ATTRIBUTES* variables+=Value ("," types+=TypeUse
		//
		//	Lists+=TypeList? RETURN_ATTRIBUTES* variables+=Value)*)? ")");
		public ParserRule getRule() { return rule; }

		//{ParameterList} ("()" | "(" (types+=TypeUse Lists+=TypeList? RETURN_ATTRIBUTES* variables+=Value ("," types+=TypeUse
		//
		//Lists+=TypeList? RETURN_ATTRIBUTES* variables+=Value)*)? ")")
		public Group getGroup() { return cGroup; }

		//{ParameterList}
		public Action getParameterListAction_0() { return cParameterListAction_0; }

		//"()" | "(" (types+=TypeUse Lists+=TypeList? RETURN_ATTRIBUTES* variables+=Value ("," types+=TypeUse Lists+=TypeList?
		//
		//RETURN_ATTRIBUTES* variables+=Value)*)? ")"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"()"
		public Keyword getLeftParenthesisRightParenthesisKeyword_1_0() { return cLeftParenthesisRightParenthesisKeyword_1_0; }

		//"(" (types+=TypeUse Lists+=TypeList? RETURN_ATTRIBUTES* variables+=Value ("," types+=TypeUse Lists+=TypeList?
		//
		//RETURN_ATTRIBUTES* variables+=Value)*)? ")"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }

		//(types+=TypeUse Lists+=TypeList? RETURN_ATTRIBUTES* variables+=Value ("," types+=TypeUse Lists+=TypeList?
		//
		//RETURN_ATTRIBUTES* variables+=Value)*)?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//types+=TypeUse
		public Assignment getTypesAssignment_1_1_1_0() { return cTypesAssignment_1_1_1_0; }

		//TypeUse
		public RuleCall getTypesTypeUseParserRuleCall_1_1_1_0_0() { return cTypesTypeUseParserRuleCall_1_1_1_0_0; }

		//Lists+=TypeList?
		public Assignment getListsAssignment_1_1_1_1() { return cListsAssignment_1_1_1_1; }

		//TypeList
		public RuleCall getListsTypeListParserRuleCall_1_1_1_1_0() { return cListsTypeListParserRuleCall_1_1_1_1_0; }

		//RETURN_ATTRIBUTES*
		public RuleCall getRETURN_ATTRIBUTESParserRuleCall_1_1_1_2() { return cRETURN_ATTRIBUTESParserRuleCall_1_1_1_2; }

		//variables+=Value
		public Assignment getVariablesAssignment_1_1_1_3() { return cVariablesAssignment_1_1_1_3; }

		//Value
		public RuleCall getVariablesValueParserRuleCall_1_1_1_3_0() { return cVariablesValueParserRuleCall_1_1_1_3_0; }

		//("," types+=TypeUse Lists+=TypeList? RETURN_ATTRIBUTES* variables+=Value)*
		public Group getGroup_1_1_1_4() { return cGroup_1_1_1_4; }

		//","
		public Keyword getCommaKeyword_1_1_1_4_0() { return cCommaKeyword_1_1_1_4_0; }

		//types+=TypeUse
		public Assignment getTypesAssignment_1_1_1_4_1() { return cTypesAssignment_1_1_1_4_1; }

		//TypeUse
		public RuleCall getTypesTypeUseParserRuleCall_1_1_1_4_1_0() { return cTypesTypeUseParserRuleCall_1_1_1_4_1_0; }

		//Lists+=TypeList?
		public Assignment getListsAssignment_1_1_1_4_2() { return cListsAssignment_1_1_1_4_2; }

		//TypeList
		public RuleCall getListsTypeListParserRuleCall_1_1_1_4_2_0() { return cListsTypeListParserRuleCall_1_1_1_4_2_0; }

		//RETURN_ATTRIBUTES*
		public RuleCall getRETURN_ATTRIBUTESParserRuleCall_1_1_1_4_3() { return cRETURN_ATTRIBUTESParserRuleCall_1_1_1_4_3; }

		//variables+=Value
		public Assignment getVariablesAssignment_1_1_1_4_4() { return cVariablesAssignment_1_1_1_4_4; }

		//Value
		public RuleCall getVariablesValueParserRuleCall_1_1_1_4_4_0() { return cVariablesValueParserRuleCall_1_1_1_4_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1_2() { return cRightParenthesisKeyword_1_1_2; }
	}

	public class TypeListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypeListAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Assignment cTypesAssignment_1_1_1_0 = (Assignment)cGroup_1_1_1.eContents().get(0);
		private final RuleCall cTypesTypeUseParserRuleCall_1_1_1_0_0 = (RuleCall)cTypesAssignment_1_1_1_0.eContents().get(0);
		private final Assignment cTypelistsAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cTypelistsTypeListParserRuleCall_1_1_1_1_0 = (RuleCall)cTypelistsAssignment_1_1_1_1.eContents().get(0);
		private final RuleCall cRETURN_ATTRIBUTESParserRuleCall_1_1_1_2 = (RuleCall)cGroup_1_1_1.eContents().get(2);
		private final Group cGroup_1_1_1_3 = (Group)cGroup_1_1_1.eContents().get(3);
		private final Keyword cCommaKeyword_1_1_1_3_0 = (Keyword)cGroup_1_1_1_3.eContents().get(0);
		private final Assignment cTypesAssignment_1_1_1_3_1 = (Assignment)cGroup_1_1_1_3.eContents().get(1);
		private final RuleCall cTypesTypeUseParserRuleCall_1_1_1_3_1_0 = (RuleCall)cTypesAssignment_1_1_1_3_1.eContents().get(0);
		private final Assignment cTypelistsAssignment_1_1_1_3_2 = (Assignment)cGroup_1_1_1_3.eContents().get(2);
		private final RuleCall cTypelistsTypeListParserRuleCall_1_1_1_3_2_0 = (RuleCall)cTypelistsAssignment_1_1_1_3_2.eContents().get(0);
		private final RuleCall cRETURN_ATTRIBUTESParserRuleCall_1_1_1_3_3 = (RuleCall)cGroup_1_1_1_3.eContents().get(3);
		private final Alternatives cAlternatives_1_1_2 = (Alternatives)cGroup_1_1.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_1_1_2_0 = (Keyword)cAlternatives_1_1_2.eContents().get(0);
		private final Keyword cRightParenthesisAsteriskKeyword_1_1_2_1 = (Keyword)cAlternatives_1_1_2.eContents().get(1);
		private final Keyword cRightParenthesisAsteriskAsteriskKeyword_1_1_2_2 = (Keyword)cAlternatives_1_1_2.eContents().get(2);
		private final Keyword cRightParenthesisAsteriskAsteriskAsteriskKeyword_1_1_2_3 = (Keyword)cAlternatives_1_1_2.eContents().get(3);
		private final Keyword cRightParenthesisAsteriskAsteriskAsteriskAsteriskKeyword_1_1_2_4 = (Keyword)cAlternatives_1_1_2.eContents().get(4);
		private final Keyword cRightParenthesisAsteriskAsteriskAsteriskAsteriskAsteriskKeyword_1_1_2_5 = (Keyword)cAlternatives_1_1_2.eContents().get(5);
		
		//TypeList:
		//
		//	{TypeList} ("()" | "(" (types+=TypeUse typelists+=TypeList? RETURN_ATTRIBUTES? ("," types+=TypeUse
		//
		//	typelists+=TypeList? RETURN_ATTRIBUTES?)*)? (")" | ")*" | ")**" | ")***" | ")****" | ")*****"));
		public ParserRule getRule() { return rule; }

		//{TypeList} ("()" | "(" (types+=TypeUse typelists+=TypeList? RETURN_ATTRIBUTES? ("," types+=TypeUse typelists+=TypeList?
		//
		//RETURN_ATTRIBUTES?)*)? (")" | ")*" | ")**" | ")***" | ")****" | ")*****"))
		public Group getGroup() { return cGroup; }

		//{TypeList}
		public Action getTypeListAction_0() { return cTypeListAction_0; }

		//"()" | "(" (types+=TypeUse typelists+=TypeList? RETURN_ATTRIBUTES? ("," types+=TypeUse typelists+=TypeList?
		//
		//RETURN_ATTRIBUTES?)*)? (")" | ")*" | ")**" | ")***" | ")****" | ")*****")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"()"
		public Keyword getLeftParenthesisRightParenthesisKeyword_1_0() { return cLeftParenthesisRightParenthesisKeyword_1_0; }

		//"(" (types+=TypeUse typelists+=TypeList? RETURN_ATTRIBUTES? ("," types+=TypeUse typelists+=TypeList?
		//
		//RETURN_ATTRIBUTES?)*)? (")" | ")*" | ")**" | ")***" | ")****" | ")*****")
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }

		//(types+=TypeUse typelists+=TypeList? RETURN_ATTRIBUTES? ("," types+=TypeUse typelists+=TypeList? RETURN_ATTRIBUTES?)*)?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//types+=TypeUse
		public Assignment getTypesAssignment_1_1_1_0() { return cTypesAssignment_1_1_1_0; }

		//TypeUse
		public RuleCall getTypesTypeUseParserRuleCall_1_1_1_0_0() { return cTypesTypeUseParserRuleCall_1_1_1_0_0; }

		//typelists+=TypeList?
		public Assignment getTypelistsAssignment_1_1_1_1() { return cTypelistsAssignment_1_1_1_1; }

		//TypeList
		public RuleCall getTypelistsTypeListParserRuleCall_1_1_1_1_0() { return cTypelistsTypeListParserRuleCall_1_1_1_1_0; }

		//RETURN_ATTRIBUTES?
		public RuleCall getRETURN_ATTRIBUTESParserRuleCall_1_1_1_2() { return cRETURN_ATTRIBUTESParserRuleCall_1_1_1_2; }

		//("," types+=TypeUse typelists+=TypeList? RETURN_ATTRIBUTES?)*
		public Group getGroup_1_1_1_3() { return cGroup_1_1_1_3; }

		//","
		public Keyword getCommaKeyword_1_1_1_3_0() { return cCommaKeyword_1_1_1_3_0; }

		//types+=TypeUse
		public Assignment getTypesAssignment_1_1_1_3_1() { return cTypesAssignment_1_1_1_3_1; }

		//TypeUse
		public RuleCall getTypesTypeUseParserRuleCall_1_1_1_3_1_0() { return cTypesTypeUseParserRuleCall_1_1_1_3_1_0; }

		//typelists+=TypeList?
		public Assignment getTypelistsAssignment_1_1_1_3_2() { return cTypelistsAssignment_1_1_1_3_2; }

		//TypeList
		public RuleCall getTypelistsTypeListParserRuleCall_1_1_1_3_2_0() { return cTypelistsTypeListParserRuleCall_1_1_1_3_2_0; }

		//RETURN_ATTRIBUTES?
		public RuleCall getRETURN_ATTRIBUTESParserRuleCall_1_1_1_3_3() { return cRETURN_ATTRIBUTESParserRuleCall_1_1_1_3_3; }

		//")" | ")*" | ")**" | ")***" | ")****" | ")*****"
		public Alternatives getAlternatives_1_1_2() { return cAlternatives_1_1_2; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1_2_0() { return cRightParenthesisKeyword_1_1_2_0; }

		//")*"
		public Keyword getRightParenthesisAsteriskKeyword_1_1_2_1() { return cRightParenthesisAsteriskKeyword_1_1_2_1; }

		//")**"
		public Keyword getRightParenthesisAsteriskAsteriskKeyword_1_1_2_2() { return cRightParenthesisAsteriskAsteriskKeyword_1_1_2_2; }

		//")***"
		public Keyword getRightParenthesisAsteriskAsteriskAsteriskKeyword_1_1_2_3() { return cRightParenthesisAsteriskAsteriskAsteriskKeyword_1_1_2_3; }

		//")****"
		public Keyword getRightParenthesisAsteriskAsteriskAsteriskAsteriskKeyword_1_1_2_4() { return cRightParenthesisAsteriskAsteriskAsteriskAsteriskKeyword_1_1_2_4; }

		//")*****"
		public Keyword getRightParenthesisAsteriskAsteriskAsteriskAsteriskAsteriskKeyword_1_1_2_5() { return cRightParenthesisAsteriskAsteriskAsteriskAsteriskAsteriskKeyword_1_1_2_5; }
	}

	public class FunctionBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMetaAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMetaMetadataValueParserRuleCall_0_0 = (RuleCall)cMetaAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBlocksAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlocksBasicBlockParserRuleCall_2_0 = (RuleCall)cBlocksAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMetaAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMetaMetadataValueParserRuleCall_4_0 = (RuleCall)cMetaAssignment_4.eContents().get(0);
		
		//FunctionBody:
		//
		//	meta+=MetadataValue* "{" blocks+=BasicBlock+ "}" meta+=MetadataValue*;
		public ParserRule getRule() { return rule; }

		//meta+=MetadataValue* "{" blocks+=BasicBlock+ "}" meta+=MetadataValue*
		public Group getGroup() { return cGroup; }

		//meta+=MetadataValue*
		public Assignment getMetaAssignment_0() { return cMetaAssignment_0; }

		//MetadataValue
		public RuleCall getMetaMetadataValueParserRuleCall_0_0() { return cMetaMetadataValueParserRuleCall_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//blocks+=BasicBlock+
		public Assignment getBlocksAssignment_2() { return cBlocksAssignment_2; }

		//BasicBlock
		public RuleCall getBlocksBasicBlockParserRuleCall_2_0() { return cBlocksBasicBlockParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }

		//meta+=MetadataValue*
		public Assignment getMetaAssignment_4() { return cMetaAssignment_4; }

		//MetadataValue
		public RuleCall getMetaMetadataValueParserRuleCall_4_0() { return cMetaMetadataValueParserRuleCall_4_0; }
	}

	public class BasicBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BasicBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cLabelAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cLabelID_FQNParserRuleCall_0_0_0 = (RuleCall)cLabelAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cInstructionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cInstructionsAlternatives_1_0 = (Alternatives)cInstructionsAssignment_1.eContents().get(0);
		private final RuleCall cInstructionsInstructionUseParserRuleCall_1_0_0 = (RuleCall)cInstructionsAlternatives_1_0.eContents().get(0);
		private final RuleCall cInstructionsInstructionParserRuleCall_1_0_1 = (RuleCall)cInstructionsAlternatives_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cRetadrAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cRetadrVALID_IDTerminalRuleCall_2_0_0 = (RuleCall)cRetadrAssignment_2_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cTerminatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTerminatorRet_InstrParserRuleCall_3_0 = (RuleCall)cTerminatorAssignment_3.eContents().get(0);
		
		//BasicBlock:
		//
		//	(label=ID_FQN ":") instructions+=(InstructionUse | Instruction)* (retadr=VALID_ID "=")? terminator=Ret_Instr;
		public ParserRule getRule() { return rule; }

		//(label=ID_FQN ":") instructions+=(InstructionUse | Instruction)* (retadr=VALID_ID "=")? terminator=Ret_Instr
		public Group getGroup() { return cGroup; }

		//label=ID_FQN ":"
		public Group getGroup_0() { return cGroup_0; }

		//label=ID_FQN
		public Assignment getLabelAssignment_0_0() { return cLabelAssignment_0_0; }

		//ID_FQN
		public RuleCall getLabelID_FQNParserRuleCall_0_0_0() { return cLabelID_FQNParserRuleCall_0_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//instructions+=(InstructionUse | Instruction)*
		public Assignment getInstructionsAssignment_1() { return cInstructionsAssignment_1; }

		//InstructionUse | Instruction
		public Alternatives getInstructionsAlternatives_1_0() { return cInstructionsAlternatives_1_0; }

		//InstructionUse
		public RuleCall getInstructionsInstructionUseParserRuleCall_1_0_0() { return cInstructionsInstructionUseParserRuleCall_1_0_0; }

		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_1_0_1() { return cInstructionsInstructionParserRuleCall_1_0_1; }

		//(retadr=VALID_ID "=")?
		public Group getGroup_2() { return cGroup_2; }

		//retadr=VALID_ID
		public Assignment getRetadrAssignment_2_0() { return cRetadrAssignment_2_0; }

		//VALID_ID
		public RuleCall getRetadrVALID_IDTerminalRuleCall_2_0_0() { return cRetadrVALID_IDTerminalRuleCall_2_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1() { return cEqualsSignKeyword_2_1; }

		//terminator=Ret_Instr
		public Assignment getTerminatorAssignment_3() { return cTerminatorAssignment_3; }

		//Ret_Instr
		public RuleCall getTerminatorRet_InstrParserRuleCall_3_0() { return cTerminatorRet_InstrParserRuleCall_3_0; }
	}

	public class InstructionUseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InstructionUse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReg_or_varAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cReg_or_varVALID_IDTerminalRuleCall_0_0 = (RuleCall)cReg_or_varAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInstructionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInstructionInstructionParserRuleCall_2_0 = (RuleCall)cInstructionAssignment_2.eContents().get(0);
		
		//InstructionUse:
		//
		//	reg_or_var=VALID_ID "=" instruction=Instruction;
		public ParserRule getRule() { return rule; }

		//reg_or_var=VALID_ID "=" instruction=Instruction
		public Group getGroup() { return cGroup; }

		//reg_or_var=VALID_ID
		public Assignment getReg_or_varAssignment_0() { return cReg_or_varAssignment_0; }

		//VALID_ID
		public RuleCall getReg_or_varVALID_IDTerminalRuleCall_0_0() { return cReg_or_varVALID_IDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//instruction=Instruction
		public Assignment getInstructionAssignment_2() { return cInstructionAssignment_2; }

		//Instruction
		public RuleCall getInstructionInstructionParserRuleCall_2_0() { return cInstructionInstructionParserRuleCall_2_0; }
	}

	public class Ret_InstrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Ret_Instr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cReturnParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBranchParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSwitchParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIndirectBranchParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cInvokeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cResumeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cUnreachableParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Ret_Instr:
		//
		//	Return | Branch | Switch | IndirectBranch | Invoke | Resume | Unreachable;
		public ParserRule getRule() { return rule; }

		//Return | Branch | Switch | IndirectBranch | Invoke | Resume | Unreachable
		public Alternatives getAlternatives() { return cAlternatives; }

		//Return
		public RuleCall getReturnParserRuleCall_0() { return cReturnParserRuleCall_0; }

		//Branch
		public RuleCall getBranchParserRuleCall_1() { return cBranchParserRuleCall_1; }

		//Switch
		public RuleCall getSwitchParserRuleCall_2() { return cSwitchParserRuleCall_2; }

		//IndirectBranch
		public RuleCall getIndirectBranchParserRuleCall_3() { return cIndirectBranchParserRuleCall_3; }

		//Invoke
		public RuleCall getInvokeParserRuleCall_4() { return cInvokeParserRuleCall_4; }

		//Resume
		public RuleCall getResumeParserRuleCall_5() { return cResumeParserRuleCall_5; }

		//Unreachable
		public RuleCall getUnreachableParserRuleCall_6() { return cUnreachableParserRuleCall_6; }
	}

	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Instruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cVolatileKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cLoadParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cVolatileKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cStoreParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cFenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cGetElementPtrParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLOGICAL_OPParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cARITHMETIC_OPParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cCompareParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cCastParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cShuffleVectorParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cInsertElementParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cExtractElementParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cInsertValueParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cExtractValueParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cAllocParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cCmpXchgParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cAtomicRMWParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cPHIParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cSelectParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cCallParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cVA_ArgParserRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		private final RuleCall cLandingPadParserRuleCall_20 = (RuleCall)cAlternatives.eContents().get(20);
		
		//Instruction:
		//
		//	"volatile"? Load | "volatile"? Store | Fence | GetElementPtr | LOGICAL_OP | ARITHMETIC_OP | Compare | Cast |
		//
		//	ShuffleVector | InsertElement | ExtractElement | InsertValue | ExtractValue | Alloc | CmpXchg | AtomicRMW | PHI |
		//
		//	Select | Call | VA_Arg | LandingPad;
		public ParserRule getRule() { return rule; }

		//"volatile"? Load | "volatile"? Store | Fence | GetElementPtr | LOGICAL_OP | ARITHMETIC_OP | Compare | Cast |
		//
		//ShuffleVector | InsertElement | ExtractElement | InsertValue | ExtractValue | Alloc | CmpXchg | AtomicRMW | PHI |
		//
		//Select | Call | VA_Arg | LandingPad
		public Alternatives getAlternatives() { return cAlternatives; }

		//"volatile"? Load
		public Group getGroup_0() { return cGroup_0; }

		//"volatile"?
		public Keyword getVolatileKeyword_0_0() { return cVolatileKeyword_0_0; }

		//Load
		public RuleCall getLoadParserRuleCall_0_1() { return cLoadParserRuleCall_0_1; }

		//"volatile"? Store
		public Group getGroup_1() { return cGroup_1; }

		//"volatile"?
		public Keyword getVolatileKeyword_1_0() { return cVolatileKeyword_1_0; }

		//Store
		public RuleCall getStoreParserRuleCall_1_1() { return cStoreParserRuleCall_1_1; }

		//Fence
		public RuleCall getFenceParserRuleCall_2() { return cFenceParserRuleCall_2; }

		//GetElementPtr
		public RuleCall getGetElementPtrParserRuleCall_3() { return cGetElementPtrParserRuleCall_3; }

		//LOGICAL_OP
		public RuleCall getLOGICAL_OPParserRuleCall_4() { return cLOGICAL_OPParserRuleCall_4; }

		//ARITHMETIC_OP
		public RuleCall getARITHMETIC_OPParserRuleCall_5() { return cARITHMETIC_OPParserRuleCall_5; }

		//Compare
		public RuleCall getCompareParserRuleCall_6() { return cCompareParserRuleCall_6; }

		//Cast
		public RuleCall getCastParserRuleCall_7() { return cCastParserRuleCall_7; }

		//ShuffleVector
		public RuleCall getShuffleVectorParserRuleCall_8() { return cShuffleVectorParserRuleCall_8; }

		//InsertElement
		public RuleCall getInsertElementParserRuleCall_9() { return cInsertElementParserRuleCall_9; }

		//ExtractElement
		public RuleCall getExtractElementParserRuleCall_10() { return cExtractElementParserRuleCall_10; }

		//InsertValue
		public RuleCall getInsertValueParserRuleCall_11() { return cInsertValueParserRuleCall_11; }

		//ExtractValue
		public RuleCall getExtractValueParserRuleCall_12() { return cExtractValueParserRuleCall_12; }

		//Alloc
		public RuleCall getAllocParserRuleCall_13() { return cAllocParserRuleCall_13; }

		//CmpXchg
		public RuleCall getCmpXchgParserRuleCall_14() { return cCmpXchgParserRuleCall_14; }

		//AtomicRMW
		public RuleCall getAtomicRMWParserRuleCall_15() { return cAtomicRMWParserRuleCall_15; }

		//PHI
		public RuleCall getPHIParserRuleCall_16() { return cPHIParserRuleCall_16; }

		//Select
		public RuleCall getSelectParserRuleCall_17() { return cSelectParserRuleCall_17; }

		//Call
		public RuleCall getCallParserRuleCall_18() { return cCallParserRuleCall_18; }

		//VA_Arg
		public RuleCall getVA_ArgParserRuleCall_19() { return cVA_ArgParserRuleCall_19; }

		//LandingPad
		public RuleCall getLandingPadParserRuleCall_20() { return cLandingPadParserRuleCall_20; }
	}

	public class ARITHMETIC_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ARITHMETIC_OP");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cAddKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cFaddKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cSubKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cFsubKeyword_0_3 = (Keyword)cAlternatives_0.eContents().get(3);
		private final Keyword cMulKeyword_0_4 = (Keyword)cAlternatives_0.eContents().get(4);
		private final Keyword cFmulKeyword_0_5 = (Keyword)cAlternatives_0.eContents().get(5);
		private final Keyword cUdivKeyword_0_6 = (Keyword)cAlternatives_0.eContents().get(6);
		private final Keyword cSdivKeyword_0_7 = (Keyword)cAlternatives_0.eContents().get(7);
		private final Keyword cFdivKeyword_0_8 = (Keyword)cAlternatives_0.eContents().get(8);
		private final Keyword cUremKeyword_0_9 = (Keyword)cAlternatives_0.eContents().get(9);
		private final Keyword cSremKeyword_0_10 = (Keyword)cAlternatives_0.eContents().get(10);
		private final Keyword cFremKeyword_0_11 = (Keyword)cAlternatives_0.eContents().get(11);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cNswKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cNuwKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cNuwKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cNswKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Assignment cOptypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOptypeTypeUseParserRuleCall_2_0 = (RuleCall)cOptypeAssignment_2.eContents().get(0);
		private final Assignment cValue1Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValue1ValueParserRuleCall_3_0 = (RuleCall)cValue1Assignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValue2Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValue2ValueParserRuleCall_5_0 = (RuleCall)cValue2Assignment_5.eContents().get(0);
		
		//ARITHMETIC_OP:
		//
		//	("add" | "fadd" | "sub" | "fsub" | "mul" | "fmul" | "udiv" | "sdiv" | "fdiv" | "urem" | "srem" | "frem") (("nsw" |
		//
		//	"nuw") ("nuw" | "nsw")?)? optype=TypeUse value1=Value "," value2=Value;
		public ParserRule getRule() { return rule; }

		//("add" | "fadd" | "sub" | "fsub" | "mul" | "fmul" | "udiv" | "sdiv" | "fdiv" | "urem" | "srem" | "frem") (("nsw" |
		//
		//"nuw") ("nuw" | "nsw")?)? optype=TypeUse value1=Value "," value2=Value
		public Group getGroup() { return cGroup; }

		//"add" | "fadd" | "sub" | "fsub" | "mul" | "fmul" | "udiv" | "sdiv" | "fdiv" | "urem" | "srem" | "frem"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"add"
		public Keyword getAddKeyword_0_0() { return cAddKeyword_0_0; }

		//"fadd"
		public Keyword getFaddKeyword_0_1() { return cFaddKeyword_0_1; }

		//"sub"
		public Keyword getSubKeyword_0_2() { return cSubKeyword_0_2; }

		//"fsub"
		public Keyword getFsubKeyword_0_3() { return cFsubKeyword_0_3; }

		//"mul"
		public Keyword getMulKeyword_0_4() { return cMulKeyword_0_4; }

		//"fmul"
		public Keyword getFmulKeyword_0_5() { return cFmulKeyword_0_5; }

		//"udiv"
		public Keyword getUdivKeyword_0_6() { return cUdivKeyword_0_6; }

		//"sdiv"
		public Keyword getSdivKeyword_0_7() { return cSdivKeyword_0_7; }

		//"fdiv"
		public Keyword getFdivKeyword_0_8() { return cFdivKeyword_0_8; }

		//"urem"
		public Keyword getUremKeyword_0_9() { return cUremKeyword_0_9; }

		//"srem"
		public Keyword getSremKeyword_0_10() { return cSremKeyword_0_10; }

		//"frem"
		public Keyword getFremKeyword_0_11() { return cFremKeyword_0_11; }

		//(("nsw" | "nuw") ("nuw" | "nsw")?)?
		public Group getGroup_1() { return cGroup_1; }

		//"nsw" | "nuw"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"nsw"
		public Keyword getNswKeyword_1_0_0() { return cNswKeyword_1_0_0; }

		//"nuw"
		public Keyword getNuwKeyword_1_0_1() { return cNuwKeyword_1_0_1; }

		//("nuw" | "nsw")?
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//"nuw"
		public Keyword getNuwKeyword_1_1_0() { return cNuwKeyword_1_1_0; }

		//"nsw"
		public Keyword getNswKeyword_1_1_1() { return cNswKeyword_1_1_1; }

		//optype=TypeUse
		public Assignment getOptypeAssignment_2() { return cOptypeAssignment_2; }

		//TypeUse
		public RuleCall getOptypeTypeUseParserRuleCall_2_0() { return cOptypeTypeUseParserRuleCall_2_0; }

		//value1=Value
		public Assignment getValue1Assignment_3() { return cValue1Assignment_3; }

		//Value
		public RuleCall getValue1ValueParserRuleCall_3_0() { return cValue1ValueParserRuleCall_3_0; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//value2=Value
		public Assignment getValue2Assignment_5() { return cValue2Assignment_5; }

		//Value
		public RuleCall getValue2ValueParserRuleCall_5_0() { return cValue2ValueParserRuleCall_5_0; }
	}

	public class LOGICAL_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LOGICAL_OP");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cShlKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cLshrKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cAshrKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cAndKeyword_0_3 = (Keyword)cAlternatives_0.eContents().get(3);
		private final Keyword cOrKeyword_0_4 = (Keyword)cAlternatives_0.eContents().get(4);
		private final Keyword cXorKeyword_0_5 = (Keyword)cAlternatives_0.eContents().get(5);
		private final Assignment cOptypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOptypeTypeUseParserRuleCall_1_0 = (RuleCall)cOptypeAssignment_1.eContents().get(0);
		private final Assignment cValue1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValue1ValueParserRuleCall_2_0 = (RuleCall)cValue1Assignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValue2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValue2ValueParserRuleCall_4_0 = (RuleCall)cValue2Assignment_4.eContents().get(0);
		
		//LOGICAL_OP:
		//
		//	("shl" | "lshr" | "ashr" | "and" | "or" | "xor") optype=TypeUse value1=Value "," value2=Value;
		public ParserRule getRule() { return rule; }

		//("shl" | "lshr" | "ashr" | "and" | "or" | "xor") optype=TypeUse value1=Value "," value2=Value
		public Group getGroup() { return cGroup; }

		//"shl" | "lshr" | "ashr" | "and" | "or" | "xor"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"shl"
		public Keyword getShlKeyword_0_0() { return cShlKeyword_0_0; }

		//"lshr"
		public Keyword getLshrKeyword_0_1() { return cLshrKeyword_0_1; }

		//"ashr"
		public Keyword getAshrKeyword_0_2() { return cAshrKeyword_0_2; }

		//"and"
		public Keyword getAndKeyword_0_3() { return cAndKeyword_0_3; }

		//"or"
		public Keyword getOrKeyword_0_4() { return cOrKeyword_0_4; }

		//"xor"
		public Keyword getXorKeyword_0_5() { return cXorKeyword_0_5; }

		//optype=TypeUse
		public Assignment getOptypeAssignment_1() { return cOptypeAssignment_1; }

		//TypeUse
		public RuleCall getOptypeTypeUseParserRuleCall_1_0() { return cOptypeTypeUseParserRuleCall_1_0; }

		//value1=Value
		public Assignment getValue1Assignment_2() { return cValue1Assignment_2; }

		//Value
		public RuleCall getValue1ValueParserRuleCall_2_0() { return cValue1ValueParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//value2=Value
		public Assignment getValue2Assignment_4() { return cValue2Assignment_4; }

		//Value
		public RuleCall getValue2ValueParserRuleCall_4_0() { return cValue2ValueParserRuleCall_4_0; }
	}

	public class CastElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Cast");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCast_OPParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cFromAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cFromTypeUseParserRuleCall_1_0_1_0 = (RuleCall)cFromAssignment_1_0_1.eContents().get(0);
		private final Assignment cValueAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_1_0_2_0 = (RuleCall)cValueAssignment_1_0_2.eContents().get(0);
		private final Keyword cToKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Assignment cToAssignment_1_0_4 = (Assignment)cGroup_1_0.eContents().get(4);
		private final RuleCall cToTypeUseParserRuleCall_1_0_4_0 = (RuleCall)cToAssignment_1_0_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_5 = (Keyword)cGroup_1_0.eContents().get(5);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cFromAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cFromTypeUseParserRuleCall_1_1_0_0 = (RuleCall)cFromAssignment_1_1_0.eContents().get(0);
		private final Assignment cValueAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_1_1_1_0 = (RuleCall)cValueAssignment_1_1_1.eContents().get(0);
		private final Keyword cToKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Assignment cToAssignment_1_1_3 = (Assignment)cGroup_1_1.eContents().get(3);
		private final RuleCall cToTypeUseParserRuleCall_1_1_3_0 = (RuleCall)cToAssignment_1_1_3.eContents().get(0);
		
		//Cast:
		//
		//	Cast_OP ("(" from=TypeUse value=Value "to" to=TypeUse ")" | from=TypeUse value=Value "to" to=TypeUse);
		public ParserRule getRule() { return rule; }

		//Cast_OP ("(" from=TypeUse value=Value "to" to=TypeUse ")" | from=TypeUse value=Value "to" to=TypeUse)
		public Group getGroup() { return cGroup; }

		//Cast_OP
		public RuleCall getCast_OPParserRuleCall_0() { return cCast_OPParserRuleCall_0; }

		//"(" from=TypeUse value=Value "to" to=TypeUse ")" | from=TypeUse value=Value "to" to=TypeUse
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"(" from=TypeUse value=Value "to" to=TypeUse ")"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0_0() { return cLeftParenthesisKeyword_1_0_0; }

		//from=TypeUse
		public Assignment getFromAssignment_1_0_1() { return cFromAssignment_1_0_1; }

		//TypeUse
		public RuleCall getFromTypeUseParserRuleCall_1_0_1_0() { return cFromTypeUseParserRuleCall_1_0_1_0; }

		//value=Value
		public Assignment getValueAssignment_1_0_2() { return cValueAssignment_1_0_2; }

		//Value
		public RuleCall getValueValueParserRuleCall_1_0_2_0() { return cValueValueParserRuleCall_1_0_2_0; }

		//"to"
		public Keyword getToKeyword_1_0_3() { return cToKeyword_1_0_3; }

		//to=TypeUse
		public Assignment getToAssignment_1_0_4() { return cToAssignment_1_0_4; }

		//TypeUse
		public RuleCall getToTypeUseParserRuleCall_1_0_4_0() { return cToTypeUseParserRuleCall_1_0_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_0_5() { return cRightParenthesisKeyword_1_0_5; }

		//from=TypeUse value=Value "to" to=TypeUse
		public Group getGroup_1_1() { return cGroup_1_1; }

		//from=TypeUse
		public Assignment getFromAssignment_1_1_0() { return cFromAssignment_1_1_0; }

		//TypeUse
		public RuleCall getFromTypeUseParserRuleCall_1_1_0_0() { return cFromTypeUseParserRuleCall_1_1_0_0; }

		//value=Value
		public Assignment getValueAssignment_1_1_1() { return cValueAssignment_1_1_1; }

		//Value
		public RuleCall getValueValueParserRuleCall_1_1_1_0() { return cValueValueParserRuleCall_1_1_1_0; }

		//"to"
		public Keyword getToKeyword_1_1_2() { return cToKeyword_1_1_2; }

		//to=TypeUse
		public Assignment getToAssignment_1_1_3() { return cToAssignment_1_1_3; }

		//TypeUse
		public RuleCall getToTypeUseParserRuleCall_1_1_3_0() { return cToTypeUseParserRuleCall_1_1_3_0; }
	}

	public class MetadataValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MetadataValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_0_1 = (RuleCall)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cExclamationMarkLeftCurlyBracketKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final RuleCall cID_FQNParserRuleCall_0_1_1 = (RuleCall)cGroup_0_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Group cGroup_0_2 = (Group)cAlternatives_0.eContents().get(2);
		private final Keyword cExclamationMarkKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final RuleCall cID_FQNParserRuleCall_0_2_1 = (RuleCall)cGroup_0_2.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cAlternatives_1_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_1_0_0 = (Keyword)cGroup_1_1_0.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1_0_1 = (RuleCall)cGroup_1_1_0.eContents().get(1);
		private final Group cGroup_1_1_1 = (Group)cAlternatives_1_1.eContents().get(1);
		private final Keyword cExclamationMarkLeftCurlyBracketKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final RuleCall cID_FQNParserRuleCall_1_1_1_1 = (RuleCall)cGroup_1_1_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_1_1_1_2 = (Keyword)cGroup_1_1_1.eContents().get(2);
		private final Group cGroup_1_1_2 = (Group)cAlternatives_1_1.eContents().get(2);
		private final Keyword cExclamationMarkKeyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final RuleCall cID_FQNParserRuleCall_1_1_2_1 = (RuleCall)cGroup_1_1_2.eContents().get(1);
		private final Group cGroup_1_1_3 = (Group)cAlternatives_1_1.eContents().get(3);
		private final Keyword cMetadataKeyword_1_1_3_0 = (Keyword)cGroup_1_1_3.eContents().get(0);
		private final Group cGroup_1_1_3_1 = (Group)cGroup_1_1_3.eContents().get(1);
		private final Alternatives cAlternatives_1_1_3_1_0 = (Alternatives)cGroup_1_1_3_1.eContents().get(0);
		private final Group cGroup_1_1_3_1_0_0 = (Group)cAlternatives_1_1_3_1_0.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_1_3_1_0_0_0 = (Keyword)cGroup_1_1_3_1_0_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_1_3_1_0_0_1 = (Keyword)cGroup_1_1_3_1_0_0.eContents().get(1);
		private final Keyword cExclamationMarkLeftCurlyBracketKeyword_1_1_3_1_0_1 = (Keyword)cAlternatives_1_1_3_1_0.eContents().get(1);
		private final Alternatives cAlternatives_1_1_3_1_1 = (Alternatives)cGroup_1_1_3_1.eContents().get(1);
		private final Group cGroup_1_1_3_1_1_0 = (Group)cAlternatives_1_1_3_1_1.eContents().get(0);
		private final Keyword cMetadataKeyword_1_1_3_1_1_0_0 = (Keyword)cGroup_1_1_3_1_1_0.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_1_3_1_1_0_1 = (Keyword)cGroup_1_1_3_1_1_0.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_1_1_3_1_1_0_2 = (RuleCall)cGroup_1_1_3_1_1_0.eContents().get(2);
		private final Group cGroup_1_1_3_1_1_0_3 = (Group)cGroup_1_1_3_1_1_0.eContents().get(3);
		private final Keyword cCommaKeyword_1_1_3_1_1_0_3_0 = (Keyword)cGroup_1_1_3_1_1_0_3.eContents().get(0);
		private final Group cGroup_1_1_3_1_1_0_3_1 = (Group)cGroup_1_1_3_1_1_0_3.eContents().get(1);
		private final Keyword cMetadataKeyword_1_1_3_1_1_0_3_1_0 = (Keyword)cGroup_1_1_3_1_1_0_3_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_1_3_1_1_0_3_1_1 = (Keyword)cGroup_1_1_3_1_1_0_3_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_1_3_1_1_0_3_1_2 = (RuleCall)cGroup_1_1_3_1_1_0_3_1.eContents().get(2);
		private final Group cGroup_1_1_3_1_1_1 = (Group)cAlternatives_1_1_3_1_1.eContents().get(1);
		private final RuleCall cINT_TYPETerminalRuleCall_1_1_3_1_1_1_0 = (RuleCall)cGroup_1_1_3_1_1_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1_3_1_1_1_1 = (RuleCall)cGroup_1_1_3_1_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_3_1_1_1_2 = (Keyword)cGroup_1_1_3_1_1_1.eContents().get(2);
		private final RuleCall cINT_TYPETerminalRuleCall_1_1_3_1_1_1_3 = (RuleCall)cGroup_1_1_3_1_1_1.eContents().get(3);
		private final RuleCall cINTTerminalRuleCall_1_1_3_1_1_1_4 = (RuleCall)cGroup_1_1_3_1_1_1.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_1_1_3_1_2 = (Keyword)cGroup_1_1_3_1.eContents().get(2);
		
		//MetadataValue:
		//
		//	("!" INT | "!{" ID_FQN "}" | "!" ID_FQN) ("=" ("!" INT | "!{" ID_FQN "}" | "!" ID_FQN | "metadata" (("!" "{" | "!{")
		//
		//	("metadata" "!" STRING ("," ("metadata" "!" INT))? | INT_TYPE INT "," INT_TYPE INT) "}")?))?;
		public ParserRule getRule() { return rule; }

		//("!" INT | "!{" ID_FQN "}" | "!" ID_FQN) ("=" ("!" INT | "!{" ID_FQN "}" | "!" ID_FQN | "metadata" (("!" "{" | "!{")
		//
		//("metadata" "!" STRING ("," ("metadata" "!" INT))? | INT_TYPE INT "," INT_TYPE INT) "}")?))?
		public Group getGroup() { return cGroup; }

		//"!" INT | "!{" ID_FQN "}" | "!" ID_FQN
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"!" INT
		public Group getGroup_0_0() { return cGroup_0_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_0_0_0() { return cExclamationMarkKeyword_0_0_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_0_0_1() { return cINTTerminalRuleCall_0_0_1; }

		//"!{" ID_FQN "}"
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"!{"
		public Keyword getExclamationMarkLeftCurlyBracketKeyword_0_1_0() { return cExclamationMarkLeftCurlyBracketKeyword_0_1_0; }

		//ID_FQN
		public RuleCall getID_FQNParserRuleCall_0_1_1() { return cID_FQNParserRuleCall_0_1_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_0_1_2() { return cRightCurlyBracketKeyword_0_1_2; }

		//"!" ID_FQN
		public Group getGroup_0_2() { return cGroup_0_2; }

		//"!"
		public Keyword getExclamationMarkKeyword_0_2_0() { return cExclamationMarkKeyword_0_2_0; }

		//ID_FQN
		public RuleCall getID_FQNParserRuleCall_0_2_1() { return cID_FQNParserRuleCall_0_2_1; }

		//("=" ("!" INT | "!{" ID_FQN "}" | "!" ID_FQN | "metadata" (("!" "{" | "!{") ("metadata" "!" STRING ("," ("metadata" "!"
		//
		//INT))? | INT_TYPE INT "," INT_TYPE INT) "}")?))?
		public Group getGroup_1() { return cGroup_1; }

		//"="
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }

		//"!" INT | "!{" ID_FQN "}" | "!" ID_FQN | "metadata" (("!" "{" | "!{") ("metadata" "!" STRING ("," ("metadata" "!" INT))?
		//
		//| INT_TYPE INT "," INT_TYPE INT) "}")?
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//"!" INT
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_1_1_0_0() { return cExclamationMarkKeyword_1_1_0_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_1_0_1() { return cINTTerminalRuleCall_1_1_0_1; }

		//"!{" ID_FQN "}"
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//"!{"
		public Keyword getExclamationMarkLeftCurlyBracketKeyword_1_1_1_0() { return cExclamationMarkLeftCurlyBracketKeyword_1_1_1_0; }

		//ID_FQN
		public RuleCall getID_FQNParserRuleCall_1_1_1_1() { return cID_FQNParserRuleCall_1_1_1_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_1_1_2() { return cRightCurlyBracketKeyword_1_1_1_2; }

		//"!" ID_FQN
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }

		//"!"
		public Keyword getExclamationMarkKeyword_1_1_2_0() { return cExclamationMarkKeyword_1_1_2_0; }

		//ID_FQN
		public RuleCall getID_FQNParserRuleCall_1_1_2_1() { return cID_FQNParserRuleCall_1_1_2_1; }

		//"metadata" (("!" "{" | "!{") ("metadata" "!" STRING ("," ("metadata" "!" INT))? | INT_TYPE INT "," INT_TYPE INT) "}")?
		public Group getGroup_1_1_3() { return cGroup_1_1_3; }

		//"metadata"
		public Keyword getMetadataKeyword_1_1_3_0() { return cMetadataKeyword_1_1_3_0; }

		//(("!" "{" | "!{") ("metadata" "!" STRING ("," ("metadata" "!" INT))? | INT_TYPE INT "," INT_TYPE INT) "}")?
		public Group getGroup_1_1_3_1() { return cGroup_1_1_3_1; }

		//"!" "{" | "!{"
		public Alternatives getAlternatives_1_1_3_1_0() { return cAlternatives_1_1_3_1_0; }

		//"!" "{"
		public Group getGroup_1_1_3_1_0_0() { return cGroup_1_1_3_1_0_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_1_1_3_1_0_0_0() { return cExclamationMarkKeyword_1_1_3_1_0_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_1_3_1_0_0_1() { return cLeftCurlyBracketKeyword_1_1_3_1_0_0_1; }

		//"!{"
		public Keyword getExclamationMarkLeftCurlyBracketKeyword_1_1_3_1_0_1() { return cExclamationMarkLeftCurlyBracketKeyword_1_1_3_1_0_1; }

		//"metadata" "!" STRING ("," ("metadata" "!" INT))? | INT_TYPE INT "," INT_TYPE INT
		public Alternatives getAlternatives_1_1_3_1_1() { return cAlternatives_1_1_3_1_1; }

		//"metadata" "!" STRING ("," ("metadata" "!" INT))?
		public Group getGroup_1_1_3_1_1_0() { return cGroup_1_1_3_1_1_0; }

		//"metadata"
		public Keyword getMetadataKeyword_1_1_3_1_1_0_0() { return cMetadataKeyword_1_1_3_1_1_0_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_1_1_3_1_1_0_1() { return cExclamationMarkKeyword_1_1_3_1_1_0_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_1_3_1_1_0_2() { return cSTRINGTerminalRuleCall_1_1_3_1_1_0_2; }

		//("," ("metadata" "!" INT))?
		public Group getGroup_1_1_3_1_1_0_3() { return cGroup_1_1_3_1_1_0_3; }

		//","
		public Keyword getCommaKeyword_1_1_3_1_1_0_3_0() { return cCommaKeyword_1_1_3_1_1_0_3_0; }

		//"metadata" "!" INT
		public Group getGroup_1_1_3_1_1_0_3_1() { return cGroup_1_1_3_1_1_0_3_1; }

		//"metadata"
		public Keyword getMetadataKeyword_1_1_3_1_1_0_3_1_0() { return cMetadataKeyword_1_1_3_1_1_0_3_1_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_1_1_3_1_1_0_3_1_1() { return cExclamationMarkKeyword_1_1_3_1_1_0_3_1_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_1_3_1_1_0_3_1_2() { return cINTTerminalRuleCall_1_1_3_1_1_0_3_1_2; }

		//INT_TYPE INT "," INT_TYPE INT
		public Group getGroup_1_1_3_1_1_1() { return cGroup_1_1_3_1_1_1; }

		//INT_TYPE
		public RuleCall getINT_TYPETerminalRuleCall_1_1_3_1_1_1_0() { return cINT_TYPETerminalRuleCall_1_1_3_1_1_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_1_3_1_1_1_1() { return cINTTerminalRuleCall_1_1_3_1_1_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_3_1_1_1_2() { return cCommaKeyword_1_1_3_1_1_1_2; }

		//INT_TYPE
		public RuleCall getINT_TYPETerminalRuleCall_1_1_3_1_1_1_3() { return cINT_TYPETerminalRuleCall_1_1_3_1_1_1_3; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_1_3_1_1_1_4() { return cINTTerminalRuleCall_1_1_3_1_1_1_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_1_3_1_2() { return cRightCurlyBracketKeyword_1_1_3_1_2; }
	}

	public class ALIGNMENTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ALIGNMENT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAlignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ALIGNMENT:
		//
		//	"align" //must be a power of 2
		//
		//	INT;
		public ParserRule getRule() { return rule; }

		//"align" //must be a power of 2
		//
		//INT
		public Group getGroup() { return cGroup; }

		//"align"
		public Keyword getAlignKeyword_0() { return cAlignKeyword_0; }

		////must be a power of 2
		//
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class GetElementPtrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GetElementPtr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGetelementptrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cInboundsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Group cGroup_3_0_0 = (Group)cAlternatives_3_0.eContents().get(0);
		private final Assignment cElementtypeAssignment_3_0_0_0 = (Assignment)cGroup_3_0_0.eContents().get(0);
		private final RuleCall cElementtypeTypeUseParserRuleCall_3_0_0_0_0 = (RuleCall)cElementtypeAssignment_3_0_0_0.eContents().get(0);
		private final Assignment cTypesAssignment_3_0_0_1 = (Assignment)cGroup_3_0_0.eContents().get(1);
		private final RuleCall cTypesTypeListParserRuleCall_3_0_0_1_0 = (RuleCall)cTypesAssignment_3_0_0_1.eContents().get(0);
		private final Assignment cElementarrayAssignment_3_0_1 = (Assignment)cAlternatives_3_0.eContents().get(1);
		private final RuleCall cElementarrayArrayParserRuleCall_3_0_1_0 = (RuleCall)cElementarrayAssignment_3_0_1.eContents().get(0);
		private final Assignment cElementAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cElementValueParserRuleCall_3_1_0 = (RuleCall)cElementAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cIndicetypesAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cIndicetypesTypeUseParserRuleCall_3_2_1_0 = (RuleCall)cIndicetypesAssignment_3_2_1.eContents().get(0);
		private final Assignment cIndicesAssignment_3_2_2 = (Assignment)cGroup_3_2.eContents().get(2);
		private final RuleCall cIndicesValueParserRuleCall_3_2_2_0 = (RuleCall)cIndicesAssignment_3_2_2.eContents().get(0);
		
		//GetElementPtr:
		//
		//	"getelementptr" "inbounds"? "("? ((elementtype=TypeUse types=TypeList? | elementarray=Array) element=Value (","
		//
		//	indicetypes+=TypeUse indices+=Value)*);
		public ParserRule getRule() { return rule; }

		//"getelementptr" "inbounds"? "("? ((elementtype=TypeUse types=TypeList? | elementarray=Array) element=Value (","
		//
		//indicetypes+=TypeUse indices+=Value)*)
		public Group getGroup() { return cGroup; }

		//"getelementptr"
		public Keyword getGetelementptrKeyword_0() { return cGetelementptrKeyword_0; }

		//"inbounds"?
		public Keyword getInboundsKeyword_1() { return cInboundsKeyword_1; }

		//"("?
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(elementtype=TypeUse types=TypeList? | elementarray=Array) element=Value ("," indicetypes+=TypeUse indices+=Value)*
		public Group getGroup_3() { return cGroup_3; }

		//elementtype=TypeUse types=TypeList? | elementarray=Array
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }

		//elementtype=TypeUse types=TypeList?
		public Group getGroup_3_0_0() { return cGroup_3_0_0; }

		//elementtype=TypeUse
		public Assignment getElementtypeAssignment_3_0_0_0() { return cElementtypeAssignment_3_0_0_0; }

		//TypeUse
		public RuleCall getElementtypeTypeUseParserRuleCall_3_0_0_0_0() { return cElementtypeTypeUseParserRuleCall_3_0_0_0_0; }

		//types=TypeList?
		public Assignment getTypesAssignment_3_0_0_1() { return cTypesAssignment_3_0_0_1; }

		//TypeList
		public RuleCall getTypesTypeListParserRuleCall_3_0_0_1_0() { return cTypesTypeListParserRuleCall_3_0_0_1_0; }

		//elementarray=Array
		public Assignment getElementarrayAssignment_3_0_1() { return cElementarrayAssignment_3_0_1; }

		//Array
		public RuleCall getElementarrayArrayParserRuleCall_3_0_1_0() { return cElementarrayArrayParserRuleCall_3_0_1_0; }

		//element=Value
		public Assignment getElementAssignment_3_1() { return cElementAssignment_3_1; }

		//Value
		public RuleCall getElementValueParserRuleCall_3_1_0() { return cElementValueParserRuleCall_3_1_0; }

		//("," indicetypes+=TypeUse indices+=Value)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//indicetypes+=TypeUse
		public Assignment getIndicetypesAssignment_3_2_1() { return cIndicetypesAssignment_3_2_1; }

		//TypeUse
		public RuleCall getIndicetypesTypeUseParserRuleCall_3_2_1_0() { return cIndicetypesTypeUseParserRuleCall_3_2_1_0; }

		//indices+=Value
		public Assignment getIndicesAssignment_3_2_2() { return cIndicesAssignment_3_2_2; }

		//Value
		public RuleCall getIndicesValueParserRuleCall_3_2_2_0() { return cIndicesValueParserRuleCall_3_2_2_0; }
	}

	public class ExtractValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExtractValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtractvalueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cArrayAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cArrayArrayParserRuleCall_1_0_0 = (RuleCall)cArrayAssignment_1_0.eContents().get(0);
		private final Assignment cStructAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cStructStructureParserRuleCall_1_1_0 = (RuleCall)cStructAssignment_1_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cIndexAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cIndexINTTerminalRuleCall_3_1_0 = (RuleCall)cIndexAssignment_3_1.eContents().get(0);
		
		//ExtractValue:
		//
		//	"extractvalue" (array=Array | struct=Structure) value=Value ("," index+=INT)+;
		public ParserRule getRule() { return rule; }

		//"extractvalue" (array=Array | struct=Structure) value=Value ("," index+=INT)+
		public Group getGroup() { return cGroup; }

		//"extractvalue"
		public Keyword getExtractvalueKeyword_0() { return cExtractvalueKeyword_0; }

		//array=Array | struct=Structure
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//array=Array
		public Assignment getArrayAssignment_1_0() { return cArrayAssignment_1_0; }

		//Array
		public RuleCall getArrayArrayParserRuleCall_1_0_0() { return cArrayArrayParserRuleCall_1_0_0; }

		//struct=Structure
		public Assignment getStructAssignment_1_1() { return cStructAssignment_1_1; }

		//Structure
		public RuleCall getStructStructureParserRuleCall_1_1_0() { return cStructStructureParserRuleCall_1_1_0; }

		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }

		//("," index+=INT)+
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//index+=INT
		public Assignment getIndexAssignment_3_1() { return cIndexAssignment_3_1; }

		//INT
		public RuleCall getIndexINTTerminalRuleCall_3_1_0() { return cIndexINTTerminalRuleCall_3_1_0; }
	}

	public class InsertValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InsertValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInsertvalueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStructAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStructStructureParserRuleCall_1_0 = (RuleCall)cStructAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInserttypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInserttypeTypeUseParserRuleCall_4_0 = (RuleCall)cInserttypeAssignment_4.eContents().get(0);
		private final Assignment cInsertvalueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cInsertvalueValueParserRuleCall_5_0 = (RuleCall)cInsertvalueAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cIndexAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cIndexINTTerminalRuleCall_6_1_0 = (RuleCall)cIndexAssignment_6_1.eContents().get(0);
		
		//InsertValue:
		//
		//	"insertvalue" struct=Structure value=Value "," inserttype=TypeUse insertvalue=Value ("," index+=INT)+;
		public ParserRule getRule() { return rule; }

		//"insertvalue" struct=Structure value=Value "," inserttype=TypeUse insertvalue=Value ("," index+=INT)+
		public Group getGroup() { return cGroup; }

		//"insertvalue"
		public Keyword getInsertvalueKeyword_0() { return cInsertvalueKeyword_0; }

		//struct=Structure
		public Assignment getStructAssignment_1() { return cStructAssignment_1; }

		//Structure
		public RuleCall getStructStructureParserRuleCall_1_0() { return cStructStructureParserRuleCall_1_0; }

		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//inserttype=TypeUse
		public Assignment getInserttypeAssignment_4() { return cInserttypeAssignment_4; }

		//TypeUse
		public RuleCall getInserttypeTypeUseParserRuleCall_4_0() { return cInserttypeTypeUseParserRuleCall_4_0; }

		//insertvalue=Value
		public Assignment getInsertvalueAssignment_5() { return cInsertvalueAssignment_5; }

		//Value
		public RuleCall getInsertvalueValueParserRuleCall_5_0() { return cInsertvalueValueParserRuleCall_5_0; }

		//("," index+=INT)+
		public Group getGroup_6() { return cGroup_6; }

		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }

		//index+=INT
		public Assignment getIndexAssignment_6_1() { return cIndexAssignment_6_1; }

		//INT
		public RuleCall getIndexINTTerminalRuleCall_6_1_0() { return cIndexINTTerminalRuleCall_6_1_0; }
	}

	public class FenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Fence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFenceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSinglethreadKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOrderingAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOrderingATOMIC_ORDERINGParserRuleCall_2_0 = (RuleCall)cOrderingAssignment_2.eContents().get(0);
		
		//Fence:
		//
		//	"fence" "singlethread"? ordering=ATOMIC_ORDERING;
		public ParserRule getRule() { return rule; }

		//"fence" "singlethread"? ordering=ATOMIC_ORDERING
		public Group getGroup() { return cGroup; }

		//"fence"
		public Keyword getFenceKeyword_0() { return cFenceKeyword_0; }

		//"singlethread"?
		public Keyword getSinglethreadKeyword_1() { return cSinglethreadKeyword_1; }

		//ordering=ATOMIC_ORDERING
		public Assignment getOrderingAssignment_2() { return cOrderingAssignment_2; }

		//ATOMIC_ORDERING
		public RuleCall getOrderingATOMIC_ORDERINGParserRuleCall_2_0() { return cOrderingATOMIC_ORDERINGParserRuleCall_2_0; }
	}

	public class CmpXchgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CmpXchg");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCmpxchgKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cVolatileKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAdresstypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAdresstypeTypeUseParserRuleCall_2_0 = (RuleCall)cAdresstypeAssignment_2.eContents().get(0);
		private final Assignment cAdressAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAdressValueParserRuleCall_3_0 = (RuleCall)cAdressAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cComparetypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cComparetypeTypeUseParserRuleCall_5_0 = (RuleCall)cComparetypeAssignment_5.eContents().get(0);
		private final Assignment cComparevalueAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cComparevalueValueParserRuleCall_6_0 = (RuleCall)cComparevalueAssignment_6.eContents().get(0);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cNewtypeAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cNewtypeTypeUseParserRuleCall_8_0 = (RuleCall)cNewtypeAssignment_8.eContents().get(0);
		private final Assignment cNewvalueAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cNewvalueValueParserRuleCall_9_0 = (RuleCall)cNewvalueAssignment_9.eContents().get(0);
		private final Keyword cSinglethreadKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cOrderingAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cOrderingATOMIC_ORDERINGParserRuleCall_11_0 = (RuleCall)cOrderingAssignment_11.eContents().get(0);
		
		//CmpXchg:
		//
		//	"cmpxchg" "volatile"? adresstype=TypeUse adress=Value "," comparetype=TypeUse comparevalue=Value "," newtype=TypeUse
		//
		//	newvalue=Value "singlethread"? ordering=ATOMIC_ORDERING;
		public ParserRule getRule() { return rule; }

		//"cmpxchg" "volatile"? adresstype=TypeUse adress=Value "," comparetype=TypeUse comparevalue=Value "," newtype=TypeUse
		//
		//newvalue=Value "singlethread"? ordering=ATOMIC_ORDERING
		public Group getGroup() { return cGroup; }

		//"cmpxchg"
		public Keyword getCmpxchgKeyword_0() { return cCmpxchgKeyword_0; }

		//"volatile"?
		public Keyword getVolatileKeyword_1() { return cVolatileKeyword_1; }

		//adresstype=TypeUse
		public Assignment getAdresstypeAssignment_2() { return cAdresstypeAssignment_2; }

		//TypeUse
		public RuleCall getAdresstypeTypeUseParserRuleCall_2_0() { return cAdresstypeTypeUseParserRuleCall_2_0; }

		//adress=Value
		public Assignment getAdressAssignment_3() { return cAdressAssignment_3; }

		//Value
		public RuleCall getAdressValueParserRuleCall_3_0() { return cAdressValueParserRuleCall_3_0; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//comparetype=TypeUse
		public Assignment getComparetypeAssignment_5() { return cComparetypeAssignment_5; }

		//TypeUse
		public RuleCall getComparetypeTypeUseParserRuleCall_5_0() { return cComparetypeTypeUseParserRuleCall_5_0; }

		//comparevalue=Value
		public Assignment getComparevalueAssignment_6() { return cComparevalueAssignment_6; }

		//Value
		public RuleCall getComparevalueValueParserRuleCall_6_0() { return cComparevalueValueParserRuleCall_6_0; }

		//","
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }

		//newtype=TypeUse
		public Assignment getNewtypeAssignment_8() { return cNewtypeAssignment_8; }

		//TypeUse
		public RuleCall getNewtypeTypeUseParserRuleCall_8_0() { return cNewtypeTypeUseParserRuleCall_8_0; }

		//newvalue=Value
		public Assignment getNewvalueAssignment_9() { return cNewvalueAssignment_9; }

		//Value
		public RuleCall getNewvalueValueParserRuleCall_9_0() { return cNewvalueValueParserRuleCall_9_0; }

		//"singlethread"?
		public Keyword getSinglethreadKeyword_10() { return cSinglethreadKeyword_10; }

		//ordering=ATOMIC_ORDERING
		public Assignment getOrderingAssignment_11() { return cOrderingAssignment_11; }

		//ATOMIC_ORDERING
		public RuleCall getOrderingATOMIC_ORDERINGParserRuleCall_11_0() { return cOrderingATOMIC_ORDERINGParserRuleCall_11_0; }
	}

	public class AtomicRMWElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtomicRMW");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAtomicrmwKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cVolatileKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cBIN_OPParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cAdresstypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAdresstypeTypeUseParserRuleCall_3_0 = (RuleCall)cAdresstypeAssignment_3.eContents().get(0);
		private final Assignment cAdressAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAdressValueParserRuleCall_4_0 = (RuleCall)cAdressAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOptypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOptypeTypeUseParserRuleCall_6_0 = (RuleCall)cOptypeAssignment_6.eContents().get(0);
		private final Assignment cOpvalueAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cOpvalueValueParserRuleCall_7_0 = (RuleCall)cOpvalueAssignment_7.eContents().get(0);
		private final Keyword cSinglethreadKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cOrderingAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cOrderingATOMIC_ORDERINGParserRuleCall_9_0 = (RuleCall)cOrderingAssignment_9.eContents().get(0);
		
		//AtomicRMW:
		//
		//	"atomicrmw" "volatile"? BIN_OP adresstype=TypeUse adress=Value "," optype=TypeUse opvalue=Value "singlethread"?
		//
		//	ordering=ATOMIC_ORDERING;
		public ParserRule getRule() { return rule; }

		//"atomicrmw" "volatile"? BIN_OP adresstype=TypeUse adress=Value "," optype=TypeUse opvalue=Value "singlethread"?
		//
		//ordering=ATOMIC_ORDERING
		public Group getGroup() { return cGroup; }

		//"atomicrmw"
		public Keyword getAtomicrmwKeyword_0() { return cAtomicrmwKeyword_0; }

		//"volatile"?
		public Keyword getVolatileKeyword_1() { return cVolatileKeyword_1; }

		//BIN_OP
		public RuleCall getBIN_OPParserRuleCall_2() { return cBIN_OPParserRuleCall_2; }

		//adresstype=TypeUse
		public Assignment getAdresstypeAssignment_3() { return cAdresstypeAssignment_3; }

		//TypeUse
		public RuleCall getAdresstypeTypeUseParserRuleCall_3_0() { return cAdresstypeTypeUseParserRuleCall_3_0; }

		//adress=Value
		public Assignment getAdressAssignment_4() { return cAdressAssignment_4; }

		//Value
		public RuleCall getAdressValueParserRuleCall_4_0() { return cAdressValueParserRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//optype=TypeUse
		public Assignment getOptypeAssignment_6() { return cOptypeAssignment_6; }

		//TypeUse
		public RuleCall getOptypeTypeUseParserRuleCall_6_0() { return cOptypeTypeUseParserRuleCall_6_0; }

		//opvalue=Value
		public Assignment getOpvalueAssignment_7() { return cOpvalueAssignment_7; }

		//Value
		public RuleCall getOpvalueValueParserRuleCall_7_0() { return cOpvalueValueParserRuleCall_7_0; }

		//"singlethread"?
		public Keyword getSinglethreadKeyword_8() { return cSinglethreadKeyword_8; }

		//ordering=ATOMIC_ORDERING
		public Assignment getOrderingAssignment_9() { return cOrderingAssignment_9; }

		//ATOMIC_ORDERING
		public RuleCall getOrderingATOMIC_ORDERINGParserRuleCall_9_0() { return cOrderingATOMIC_ORDERINGParserRuleCall_9_0; }
	}

	public class LoadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Load");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLoadKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cVolatileKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cAdresstypeAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cAdresstypeTypeUseParserRuleCall_0_2_0 = (RuleCall)cAdresstypeAssignment_0_2.eContents().get(0);
		private final Assignment cTypesAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cTypesTypeListParserRuleCall_0_3_0 = (RuleCall)cTypesAssignment_0_3.eContents().get(0);
		private final Assignment cAdressAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cAdressValueParserRuleCall_0_4_0 = (RuleCall)cAdressAssignment_0_4.eContents().get(0);
		private final Group cGroup_0_5 = (Group)cGroup_0.eContents().get(5);
		private final Keyword cCommaKeyword_0_5_0 = (Keyword)cGroup_0_5.eContents().get(0);
		private final Alternatives cAlternatives_0_5_1 = (Alternatives)cGroup_0_5.eContents().get(1);
		private final RuleCall cALIGNMENTParserRuleCall_0_5_1_0 = (RuleCall)cAlternatives_0_5_1.eContents().get(0);
		private final RuleCall cMetadataValueParserRuleCall_0_5_1_1 = (RuleCall)cAlternatives_0_5_1.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLoadKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAtomicKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cVolatileKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cAdresstypeAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cAdresstypeTypeUseParserRuleCall_1_3_0 = (RuleCall)cAdresstypeAssignment_1_3.eContents().get(0);
		private final Assignment cAdressAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cAdressValueParserRuleCall_1_4_0 = (RuleCall)cAdressAssignment_1_4.eContents().get(0);
		private final Assignment cTypesAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cTypesTypeListParserRuleCall_1_5_0 = (RuleCall)cTypesAssignment_1_5.eContents().get(0);
		private final Keyword cSinglethreadKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Assignment cOrderingAssignment_1_7 = (Assignment)cGroup_1.eContents().get(7);
		private final RuleCall cOrderingATOMIC_ORDERINGParserRuleCall_1_7_0 = (RuleCall)cOrderingAssignment_1_7.eContents().get(0);
		private final Group cGroup_1_8 = (Group)cGroup_1.eContents().get(8);
		private final Keyword cCommaKeyword_1_8_0 = (Keyword)cGroup_1_8.eContents().get(0);
		private final Keyword cAlignKeyword_1_8_1 = (Keyword)cGroup_1_8.eContents().get(1);
		private final Assignment cIndexAssignment_1_8_2 = (Assignment)cGroup_1_8.eContents().get(2);
		private final RuleCall cIndexINTTerminalRuleCall_1_8_2_0 = (RuleCall)cIndexAssignment_1_8_2.eContents().get(0);
		
		//Load:
		//
		//	"load" "volatile"? adresstype=TypeUse types=TypeList? adress=Value ("," (ALIGNMENT | MetadataValue+))* | "load"
		//
		//	"atomic" "volatile"? adresstype=TypeUse adress=Value types=TypeList? "singlethread"? ordering=ATOMIC_ORDERING (","
		//
		//	"align" index=INT)?;
		public ParserRule getRule() { return rule; }

		//"load" "volatile"? adresstype=TypeUse types=TypeList? adress=Value ("," (ALIGNMENT | MetadataValue+))* | "load" "atomic"
		//
		//"volatile"? adresstype=TypeUse adress=Value types=TypeList? "singlethread"? ordering=ATOMIC_ORDERING ("," "align"
		//
		//index=INT)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//"load" "volatile"? adresstype=TypeUse types=TypeList? adress=Value ("," (ALIGNMENT | MetadataValue+))*
		public Group getGroup_0() { return cGroup_0; }

		//"load"
		public Keyword getLoadKeyword_0_0() { return cLoadKeyword_0_0; }

		//"volatile"?
		public Keyword getVolatileKeyword_0_1() { return cVolatileKeyword_0_1; }

		//adresstype=TypeUse
		public Assignment getAdresstypeAssignment_0_2() { return cAdresstypeAssignment_0_2; }

		//TypeUse
		public RuleCall getAdresstypeTypeUseParserRuleCall_0_2_0() { return cAdresstypeTypeUseParserRuleCall_0_2_0; }

		//types=TypeList?
		public Assignment getTypesAssignment_0_3() { return cTypesAssignment_0_3; }

		//TypeList
		public RuleCall getTypesTypeListParserRuleCall_0_3_0() { return cTypesTypeListParserRuleCall_0_3_0; }

		//adress=Value
		public Assignment getAdressAssignment_0_4() { return cAdressAssignment_0_4; }

		//Value
		public RuleCall getAdressValueParserRuleCall_0_4_0() { return cAdressValueParserRuleCall_0_4_0; }

		//("," (ALIGNMENT | MetadataValue+))*
		public Group getGroup_0_5() { return cGroup_0_5; }

		//","
		public Keyword getCommaKeyword_0_5_0() { return cCommaKeyword_0_5_0; }

		//ALIGNMENT | MetadataValue+
		public Alternatives getAlternatives_0_5_1() { return cAlternatives_0_5_1; }

		//ALIGNMENT
		public RuleCall getALIGNMENTParserRuleCall_0_5_1_0() { return cALIGNMENTParserRuleCall_0_5_1_0; }

		//MetadataValue+
		public RuleCall getMetadataValueParserRuleCall_0_5_1_1() { return cMetadataValueParserRuleCall_0_5_1_1; }

		//"load" "atomic" "volatile"? adresstype=TypeUse adress=Value types=TypeList? "singlethread"? ordering=ATOMIC_ORDERING
		//
		//("," "align" index=INT)?
		public Group getGroup_1() { return cGroup_1; }

		//"load"
		public Keyword getLoadKeyword_1_0() { return cLoadKeyword_1_0; }

		//"atomic"
		public Keyword getAtomicKeyword_1_1() { return cAtomicKeyword_1_1; }

		//"volatile"?
		public Keyword getVolatileKeyword_1_2() { return cVolatileKeyword_1_2; }

		//adresstype=TypeUse
		public Assignment getAdresstypeAssignment_1_3() { return cAdresstypeAssignment_1_3; }

		//TypeUse
		public RuleCall getAdresstypeTypeUseParserRuleCall_1_3_0() { return cAdresstypeTypeUseParserRuleCall_1_3_0; }

		//adress=Value
		public Assignment getAdressAssignment_1_4() { return cAdressAssignment_1_4; }

		//Value
		public RuleCall getAdressValueParserRuleCall_1_4_0() { return cAdressValueParserRuleCall_1_4_0; }

		//types=TypeList?
		public Assignment getTypesAssignment_1_5() { return cTypesAssignment_1_5; }

		//TypeList
		public RuleCall getTypesTypeListParserRuleCall_1_5_0() { return cTypesTypeListParserRuleCall_1_5_0; }

		//"singlethread"?
		public Keyword getSinglethreadKeyword_1_6() { return cSinglethreadKeyword_1_6; }

		//ordering=ATOMIC_ORDERING
		public Assignment getOrderingAssignment_1_7() { return cOrderingAssignment_1_7; }

		//ATOMIC_ORDERING
		public RuleCall getOrderingATOMIC_ORDERINGParserRuleCall_1_7_0() { return cOrderingATOMIC_ORDERINGParserRuleCall_1_7_0; }

		//("," "align" index=INT)?
		public Group getGroup_1_8() { return cGroup_1_8; }

		//","
		public Keyword getCommaKeyword_1_8_0() { return cCommaKeyword_1_8_0; }

		//"align"
		public Keyword getAlignKeyword_1_8_1() { return cAlignKeyword_1_8_1; }

		//index=INT
		public Assignment getIndexAssignment_1_8_2() { return cIndexAssignment_1_8_2; }

		//INT
		public RuleCall getIndexINTTerminalRuleCall_1_8_2_0() { return cIndexINTTerminalRuleCall_1_8_2_0; }
	}

	public class StoreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Store");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cStoreKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cVolatileKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNewtypeAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cNewtypeTypeUseParserRuleCall_0_2_0 = (RuleCall)cNewtypeAssignment_0_2.eContents().get(0);
		private final Assignment cTypesAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cTypesTypeListParserRuleCall_0_3_0 = (RuleCall)cTypesAssignment_0_3.eContents().get(0);
		private final Alternatives cAlternatives_0_4 = (Alternatives)cGroup_0.eContents().get(4);
		private final Assignment cNewvalueAssignment_0_4_0 = (Assignment)cAlternatives_0_4.eContents().get(0);
		private final RuleCall cNewvalueValueParserRuleCall_0_4_0_0 = (RuleCall)cNewvalueAssignment_0_4_0.eContents().get(0);
		private final Group cGroup_0_4_1 = (Group)cAlternatives_0_4.eContents().get(1);
		private final Assignment cNewelementAssignment_0_4_1_0 = (Assignment)cGroup_0_4_1.eContents().get(0);
		private final RuleCall cNewelementGetElementPtrParserRuleCall_0_4_1_0_0 = (RuleCall)cNewelementAssignment_0_4_1_0.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_4_1_1 = (Keyword)cGroup_0_4_1.eContents().get(1);
		private final Keyword cCommaKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Assignment cAdresstypeAssignment_0_6 = (Assignment)cGroup_0.eContents().get(6);
		private final RuleCall cAdresstypeTypeUseParserRuleCall_0_6_0 = (RuleCall)cAdresstypeAssignment_0_6.eContents().get(0);
		private final Assignment cTypesAssignment_0_7 = (Assignment)cGroup_0.eContents().get(7);
		private final RuleCall cTypesTypeListParserRuleCall_0_7_0 = (RuleCall)cTypesAssignment_0_7.eContents().get(0);
		private final Assignment cAdressAssignment_0_8 = (Assignment)cGroup_0.eContents().get(8);
		private final RuleCall cAdressValueParserRuleCall_0_8_0 = (RuleCall)cAdressAssignment_0_8.eContents().get(0);
		private final Group cGroup_0_9 = (Group)cGroup_0.eContents().get(9);
		private final Keyword cCommaKeyword_0_9_0 = (Keyword)cGroup_0_9.eContents().get(0);
		private final Alternatives cAlternatives_0_9_1 = (Alternatives)cGroup_0_9.eContents().get(1);
		private final RuleCall cALIGNMENTParserRuleCall_0_9_1_0 = (RuleCall)cAlternatives_0_9_1.eContents().get(0);
		private final RuleCall cMetadataValueParserRuleCall_0_9_1_1 = (RuleCall)cAlternatives_0_9_1.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cStoreKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAtomicKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cVolatileKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cNewtypeAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cNewtypeTypeUseParserRuleCall_1_3_0 = (RuleCall)cNewtypeAssignment_1_3.eContents().get(0);
		private final Assignment cTypesAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cTypesTypeListParserRuleCall_1_4_0 = (RuleCall)cTypesAssignment_1_4.eContents().get(0);
		private final Assignment cNewvalueAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cNewvalueValueParserRuleCall_1_5_0 = (RuleCall)cNewvalueAssignment_1_5.eContents().get(0);
		private final Keyword cCommaKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Assignment cAdresstypeAssignment_1_7 = (Assignment)cGroup_1.eContents().get(7);
		private final RuleCall cAdresstypeTypeUseParserRuleCall_1_7_0 = (RuleCall)cAdresstypeAssignment_1_7.eContents().get(0);
		private final Assignment cTypesAssignment_1_8 = (Assignment)cGroup_1.eContents().get(8);
		private final RuleCall cTypesTypeListParserRuleCall_1_8_0 = (RuleCall)cTypesAssignment_1_8.eContents().get(0);
		private final Assignment cAdressAssignment_1_9 = (Assignment)cGroup_1.eContents().get(9);
		private final RuleCall cAdressValueParserRuleCall_1_9_0 = (RuleCall)cAdressAssignment_1_9.eContents().get(0);
		private final Keyword cSinglethreadKeyword_1_10 = (Keyword)cGroup_1.eContents().get(10);
		private final Assignment cOrderingAssignment_1_11 = (Assignment)cGroup_1.eContents().get(11);
		private final RuleCall cOrderingATOMIC_ORDERINGParserRuleCall_1_11_0 = (RuleCall)cOrderingAssignment_1_11.eContents().get(0);
		private final Group cGroup_1_12 = (Group)cGroup_1.eContents().get(12);
		private final Keyword cCommaKeyword_1_12_0 = (Keyword)cGroup_1_12.eContents().get(0);
		private final Keyword cAlignKeyword_1_12_1 = (Keyword)cGroup_1_12.eContents().get(1);
		private final Assignment cIndexAssignment_1_12_2 = (Assignment)cGroup_1_12.eContents().get(2);
		private final RuleCall cIndexINTTerminalRuleCall_1_12_2_0 = (RuleCall)cIndexAssignment_1_12_2.eContents().get(0);
		
		//Store:
		//
		//	"store" "volatile"? newtype=TypeUse types+=TypeList? (newvalue=Value | newelement=GetElementPtr ")") ","
		//
		//	adresstype=TypeUse types+=TypeList? adress=Value ("," (ALIGNMENT | MetadataValue+))* | "store" "atomic" "volatile"?
		//
		//	newtype=TypeUse types+=TypeList? newvalue=Value "," adresstype=TypeUse types+=TypeList? adress=Value "singlethread"?
		//
		//	ordering=ATOMIC_ORDERING ("," "align" index=INT)?;
		public ParserRule getRule() { return rule; }

		//"store" "volatile"? newtype=TypeUse types+=TypeList? (newvalue=Value | newelement=GetElementPtr ")") ","
		//
		//adresstype=TypeUse types+=TypeList? adress=Value ("," (ALIGNMENT | MetadataValue+))* | "store" "atomic" "volatile"?
		//
		//newtype=TypeUse types+=TypeList? newvalue=Value "," adresstype=TypeUse types+=TypeList? adress=Value "singlethread"?
		//
		//ordering=ATOMIC_ORDERING ("," "align" index=INT)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//"store" "volatile"? newtype=TypeUse types+=TypeList? (newvalue=Value | newelement=GetElementPtr ")") ","
		//
		//adresstype=TypeUse types+=TypeList? adress=Value ("," (ALIGNMENT | MetadataValue+))*
		public Group getGroup_0() { return cGroup_0; }

		//"store"
		public Keyword getStoreKeyword_0_0() { return cStoreKeyword_0_0; }

		//"volatile"?
		public Keyword getVolatileKeyword_0_1() { return cVolatileKeyword_0_1; }

		//newtype=TypeUse
		public Assignment getNewtypeAssignment_0_2() { return cNewtypeAssignment_0_2; }

		//TypeUse
		public RuleCall getNewtypeTypeUseParserRuleCall_0_2_0() { return cNewtypeTypeUseParserRuleCall_0_2_0; }

		//types+=TypeList?
		public Assignment getTypesAssignment_0_3() { return cTypesAssignment_0_3; }

		//TypeList
		public RuleCall getTypesTypeListParserRuleCall_0_3_0() { return cTypesTypeListParserRuleCall_0_3_0; }

		//newvalue=Value | newelement=GetElementPtr ")"
		public Alternatives getAlternatives_0_4() { return cAlternatives_0_4; }

		//newvalue=Value
		public Assignment getNewvalueAssignment_0_4_0() { return cNewvalueAssignment_0_4_0; }

		//Value
		public RuleCall getNewvalueValueParserRuleCall_0_4_0_0() { return cNewvalueValueParserRuleCall_0_4_0_0; }

		//newelement=GetElementPtr ")"
		public Group getGroup_0_4_1() { return cGroup_0_4_1; }

		//newelement=GetElementPtr
		public Assignment getNewelementAssignment_0_4_1_0() { return cNewelementAssignment_0_4_1_0; }

		//GetElementPtr
		public RuleCall getNewelementGetElementPtrParserRuleCall_0_4_1_0_0() { return cNewelementGetElementPtrParserRuleCall_0_4_1_0_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_4_1_1() { return cRightParenthesisKeyword_0_4_1_1; }

		//","
		public Keyword getCommaKeyword_0_5() { return cCommaKeyword_0_5; }

		//adresstype=TypeUse
		public Assignment getAdresstypeAssignment_0_6() { return cAdresstypeAssignment_0_6; }

		//TypeUse
		public RuleCall getAdresstypeTypeUseParserRuleCall_0_6_0() { return cAdresstypeTypeUseParserRuleCall_0_6_0; }

		//types+=TypeList?
		public Assignment getTypesAssignment_0_7() { return cTypesAssignment_0_7; }

		//TypeList
		public RuleCall getTypesTypeListParserRuleCall_0_7_0() { return cTypesTypeListParserRuleCall_0_7_0; }

		//adress=Value
		public Assignment getAdressAssignment_0_8() { return cAdressAssignment_0_8; }

		//Value
		public RuleCall getAdressValueParserRuleCall_0_8_0() { return cAdressValueParserRuleCall_0_8_0; }

		//("," (ALIGNMENT | MetadataValue+))*
		public Group getGroup_0_9() { return cGroup_0_9; }

		//","
		public Keyword getCommaKeyword_0_9_0() { return cCommaKeyword_0_9_0; }

		//ALIGNMENT | MetadataValue+
		public Alternatives getAlternatives_0_9_1() { return cAlternatives_0_9_1; }

		//ALIGNMENT
		public RuleCall getALIGNMENTParserRuleCall_0_9_1_0() { return cALIGNMENTParserRuleCall_0_9_1_0; }

		//MetadataValue+
		public RuleCall getMetadataValueParserRuleCall_0_9_1_1() { return cMetadataValueParserRuleCall_0_9_1_1; }

		//"store" "atomic" "volatile"? newtype=TypeUse types+=TypeList? newvalue=Value "," adresstype=TypeUse types+=TypeList?
		//
		//adress=Value "singlethread"? ordering=ATOMIC_ORDERING ("," "align" index=INT)?
		public Group getGroup_1() { return cGroup_1; }

		//"store"
		public Keyword getStoreKeyword_1_0() { return cStoreKeyword_1_0; }

		//"atomic"
		public Keyword getAtomicKeyword_1_1() { return cAtomicKeyword_1_1; }

		//"volatile"?
		public Keyword getVolatileKeyword_1_2() { return cVolatileKeyword_1_2; }

		//newtype=TypeUse
		public Assignment getNewtypeAssignment_1_3() { return cNewtypeAssignment_1_3; }

		//TypeUse
		public RuleCall getNewtypeTypeUseParserRuleCall_1_3_0() { return cNewtypeTypeUseParserRuleCall_1_3_0; }

		//types+=TypeList?
		public Assignment getTypesAssignment_1_4() { return cTypesAssignment_1_4; }

		//TypeList
		public RuleCall getTypesTypeListParserRuleCall_1_4_0() { return cTypesTypeListParserRuleCall_1_4_0; }

		//newvalue=Value
		public Assignment getNewvalueAssignment_1_5() { return cNewvalueAssignment_1_5; }

		//Value
		public RuleCall getNewvalueValueParserRuleCall_1_5_0() { return cNewvalueValueParserRuleCall_1_5_0; }

		//","
		public Keyword getCommaKeyword_1_6() { return cCommaKeyword_1_6; }

		//adresstype=TypeUse
		public Assignment getAdresstypeAssignment_1_7() { return cAdresstypeAssignment_1_7; }

		//TypeUse
		public RuleCall getAdresstypeTypeUseParserRuleCall_1_7_0() { return cAdresstypeTypeUseParserRuleCall_1_7_0; }

		//types+=TypeList?
		public Assignment getTypesAssignment_1_8() { return cTypesAssignment_1_8; }

		//TypeList
		public RuleCall getTypesTypeListParserRuleCall_1_8_0() { return cTypesTypeListParserRuleCall_1_8_0; }

		//adress=Value
		public Assignment getAdressAssignment_1_9() { return cAdressAssignment_1_9; }

		//Value
		public RuleCall getAdressValueParserRuleCall_1_9_0() { return cAdressValueParserRuleCall_1_9_0; }

		//"singlethread"?
		public Keyword getSinglethreadKeyword_1_10() { return cSinglethreadKeyword_1_10; }

		//ordering=ATOMIC_ORDERING
		public Assignment getOrderingAssignment_1_11() { return cOrderingAssignment_1_11; }

		//ATOMIC_ORDERING
		public RuleCall getOrderingATOMIC_ORDERINGParserRuleCall_1_11_0() { return cOrderingATOMIC_ORDERINGParserRuleCall_1_11_0; }

		//("," "align" index=INT)?
		public Group getGroup_1_12() { return cGroup_1_12; }

		//","
		public Keyword getCommaKeyword_1_12_0() { return cCommaKeyword_1_12_0; }

		//"align"
		public Keyword getAlignKeyword_1_12_1() { return cAlignKeyword_1_12_1; }

		//index=INT
		public Assignment getIndexAssignment_1_12_2() { return cIndexAssignment_1_12_2; }

		//INT
		public RuleCall getIndexINTTerminalRuleCall_1_12_2_0() { return cIndexINTTerminalRuleCall_1_12_2_0; }
	}

	public class CallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Call");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTailKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cCallKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cCallingConvParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cRETURN_ATTRIBUTESParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cAdresstypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAdresstypeTypeUseParserRuleCall_4_0 = (RuleCall)cAdresstypeAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cAdressAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cAdressValueParserRuleCall_5_0_0 = (RuleCall)cAdressAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Keyword cAsmKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Keyword cSideeffectKeyword_5_1_1 = (Keyword)cGroup_5_1.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_5_1_2 = (RuleCall)cGroup_5_1.eContents().get(2);
		private final Keyword cCommaKeyword_5_1_3 = (Keyword)cGroup_5_1.eContents().get(3);
		private final RuleCall cSTRINGTerminalRuleCall_5_1_4 = (RuleCall)cGroup_5_1.eContents().get(4);
		private final Assignment cPListAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPListParameterListParserRuleCall_6_0 = (RuleCall)cPListAssignment_6.eContents().get(0);
		private final RuleCall cFUNCTION_ATTRIBUTESParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCommaKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cSrclocKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_8_3 = (RuleCall)cGroup_8.eContents().get(3);
		
		//Call:
		//
		//	"tail"? "call" CallingConv? RETURN_ATTRIBUTES? adresstype=TypeUse (adress=Value | "asm" "sideeffect"? STRING ","
		//
		//	STRING) pList=ParameterList FUNCTION_ATTRIBUTES* ("," "!srcloc" "!" INT)*;
		public ParserRule getRule() { return rule; }

		//"tail"? "call" CallingConv? RETURN_ATTRIBUTES? adresstype=TypeUse (adress=Value | "asm" "sideeffect"? STRING "," STRING)
		//
		//pList=ParameterList FUNCTION_ATTRIBUTES* ("," "!srcloc" "!" INT)*
		public Group getGroup() { return cGroup; }

		//"tail"?
		public Keyword getTailKeyword_0() { return cTailKeyword_0; }

		//"call"
		public Keyword getCallKeyword_1() { return cCallKeyword_1; }

		//CallingConv?
		public RuleCall getCallingConvParserRuleCall_2() { return cCallingConvParserRuleCall_2; }

		//RETURN_ATTRIBUTES?
		public RuleCall getRETURN_ATTRIBUTESParserRuleCall_3() { return cRETURN_ATTRIBUTESParserRuleCall_3; }

		//adresstype=TypeUse
		public Assignment getAdresstypeAssignment_4() { return cAdresstypeAssignment_4; }

		//TypeUse
		public RuleCall getAdresstypeTypeUseParserRuleCall_4_0() { return cAdresstypeTypeUseParserRuleCall_4_0; }

		//adress=Value | "asm" "sideeffect"? STRING "," STRING
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//adress=Value
		public Assignment getAdressAssignment_5_0() { return cAdressAssignment_5_0; }

		//Value
		public RuleCall getAdressValueParserRuleCall_5_0_0() { return cAdressValueParserRuleCall_5_0_0; }

		//"asm" "sideeffect"? STRING "," STRING
		public Group getGroup_5_1() { return cGroup_5_1; }

		//"asm"
		public Keyword getAsmKeyword_5_1_0() { return cAsmKeyword_5_1_0; }

		//"sideeffect"?
		public Keyword getSideeffectKeyword_5_1_1() { return cSideeffectKeyword_5_1_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_5_1_2() { return cSTRINGTerminalRuleCall_5_1_2; }

		//","
		public Keyword getCommaKeyword_5_1_3() { return cCommaKeyword_5_1_3; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_5_1_4() { return cSTRINGTerminalRuleCall_5_1_4; }

		//pList=ParameterList
		public Assignment getPListAssignment_6() { return cPListAssignment_6; }

		//ParameterList
		public RuleCall getPListParameterListParserRuleCall_6_0() { return cPListParameterListParserRuleCall_6_0; }

		//FUNCTION_ATTRIBUTES*
		public RuleCall getFUNCTION_ATTRIBUTESParserRuleCall_7() { return cFUNCTION_ATTRIBUTESParserRuleCall_7; }

		//("," "!srcloc" "!" INT)*
		public Group getGroup_8() { return cGroup_8; }

		//","
		public Keyword getCommaKeyword_8_0() { return cCommaKeyword_8_0; }

		//"!srcloc"
		public Keyword getSrclocKeyword_8_1() { return cSrclocKeyword_8_1; }

		//"!"
		public Keyword getExclamationMarkKeyword_8_2() { return cExclamationMarkKeyword_8_2; }

		//INT
		public RuleCall getINTTerminalRuleCall_8_3() { return cINTTerminalRuleCall_8_3; }
	}

	public class AllocElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Alloc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAllocaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cTypeTypeUseParserRuleCall_1_0_0 = (RuleCall)cTypeAssignment_1_0.eContents().get(0);
		private final Assignment cTypelistAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypelistTypeListParserRuleCall_1_1_0 = (RuleCall)cTypelistAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNumelementstypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNumelementstypeTypeUseParserRuleCall_2_1_0 = (RuleCall)cNumelementstypeAssignment_2_1.eContents().get(0);
		private final Assignment cNumelementsvalueAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cNumelementsvalueValueParserRuleCall_2_2_0 = (RuleCall)cNumelementsvalueAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cALIGNMENTParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		
		//Alloc:
		//
		//	"alloca" (type=TypeUse typelist=TypeList?) ("," numelementstype=TypeUse numelementsvalue=Value)? ("," ALIGNMENT)?;
		public ParserRule getRule() { return rule; }

		//"alloca" (type=TypeUse typelist=TypeList?) ("," numelementstype=TypeUse numelementsvalue=Value)? ("," ALIGNMENT)?
		public Group getGroup() { return cGroup; }

		//"alloca"
		public Keyword getAllocaKeyword_0() { return cAllocaKeyword_0; }

		//type=TypeUse typelist=TypeList?
		public Group getGroup_1() { return cGroup_1; }

		//type=TypeUse
		public Assignment getTypeAssignment_1_0() { return cTypeAssignment_1_0; }

		//TypeUse
		public RuleCall getTypeTypeUseParserRuleCall_1_0_0() { return cTypeTypeUseParserRuleCall_1_0_0; }

		//typelist=TypeList?
		public Assignment getTypelistAssignment_1_1() { return cTypelistAssignment_1_1; }

		//TypeList
		public RuleCall getTypelistTypeListParserRuleCall_1_1_0() { return cTypelistTypeListParserRuleCall_1_1_0; }

		//("," numelementstype=TypeUse numelementsvalue=Value)?
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//numelementstype=TypeUse
		public Assignment getNumelementstypeAssignment_2_1() { return cNumelementstypeAssignment_2_1; }

		//TypeUse
		public RuleCall getNumelementstypeTypeUseParserRuleCall_2_1_0() { return cNumelementstypeTypeUseParserRuleCall_2_1_0; }

		//numelementsvalue=Value
		public Assignment getNumelementsvalueAssignment_2_2() { return cNumelementsvalueAssignment_2_2; }

		//Value
		public RuleCall getNumelementsvalueValueParserRuleCall_2_2_0() { return cNumelementsvalueValueParserRuleCall_2_2_0; }

		//("," ALIGNMENT)?
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//ALIGNMENT
		public RuleCall getALIGNMENTParserRuleCall_3_1() { return cALIGNMENTParserRuleCall_3_1; }
	}

	public class PHIElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PHI");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPhiKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeUseParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValuesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValuesValuePairParserRuleCall_3_0 = (RuleCall)cValuesAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cValuesAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cValuesValuePairParserRuleCall_5_2_0 = (RuleCall)cValuesAssignment_5_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		
		//PHI:
		//
		//	"phi" type=TypeUse "[" values+=ValuePair "]" ("," "[" values+=ValuePair "]")*;
		public ParserRule getRule() { return rule; }

		//"phi" type=TypeUse "[" values+=ValuePair "]" ("," "[" values+=ValuePair "]")*
		public Group getGroup() { return cGroup; }

		//"phi"
		public Keyword getPhiKeyword_0() { return cPhiKeyword_0; }

		//type=TypeUse
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//TypeUse
		public RuleCall getTypeTypeUseParserRuleCall_1_0() { return cTypeTypeUseParserRuleCall_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//values+=ValuePair
		public Assignment getValuesAssignment_3() { return cValuesAssignment_3; }

		//ValuePair
		public RuleCall getValuesValuePairParserRuleCall_3_0() { return cValuesValuePairParserRuleCall_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }

		//("," "[" values+=ValuePair "]")*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_5_1() { return cLeftSquareBracketKeyword_5_1; }

		//values+=ValuePair
		public Assignment getValuesAssignment_5_2() { return cValuesAssignment_5_2; }

		//ValuePair
		public RuleCall getValuesValuePairParserRuleCall_5_2_0() { return cValuesValuePairParserRuleCall_5_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5_3() { return cRightSquareBracketKeyword_5_3; }
	}

	public class ValuePairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValuePair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValue1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValue1ValueParserRuleCall_0_0 = (RuleCall)cValue1Assignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValue2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValue2ValueParserRuleCall_2_0 = (RuleCall)cValue2Assignment_2.eContents().get(0);
		
		//ValuePair:
		//
		//	value1=Value "," value2=Value;
		public ParserRule getRule() { return rule; }

		//value1=Value "," value2=Value
		public Group getGroup() { return cGroup; }

		//value1=Value
		public Assignment getValue1Assignment_0() { return cValue1Assignment_0; }

		//Value
		public RuleCall getValue1ValueParserRuleCall_0_0() { return cValue1ValueParserRuleCall_0_0; }

		//","
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }

		//value2=Value
		public Assignment getValue2Assignment_2() { return cValue2Assignment_2; }

		//Value
		public RuleCall getValue2ValueParserRuleCall_2_0() { return cValue2ValueParserRuleCall_2_0; }
	}

	public class LandingPadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LandingPad");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLandingpadKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStructAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStructStructureParserRuleCall_1_0 = (RuleCall)cStructAssignment_1.eContents().get(0);
		private final Keyword cPersonalityKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPersonalitytypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPersonalitytypeTypeUseParserRuleCall_3_0 = (RuleCall)cPersonalitytypeAssignment_3.eContents().get(0);
		private final Assignment cPersonalityvalueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPersonalityvalueValueParserRuleCall_4_0 = (RuleCall)cPersonalityvalueAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Keyword cCleanupKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Assignment cClauseAssignment_5_0_1 = (Assignment)cGroup_5_0.eContents().get(1);
		private final RuleCall cClauseClauseParserRuleCall_5_0_1_0 = (RuleCall)cClauseAssignment_5_0_1.eContents().get(0);
		private final Assignment cClauseAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cClauseClauseParserRuleCall_5_1_0 = (RuleCall)cClauseAssignment_5_1.eContents().get(0);
		
		//LandingPad:
		//
		//	"landingpad" struct=Structure "personality" personalitytype=TypeUse personalityvalue=Value ("cleanup" clause+=Clause*
		//
		//	| clause+=Clause+);
		public ParserRule getRule() { return rule; }

		//"landingpad" struct=Structure "personality" personalitytype=TypeUse personalityvalue=Value ("cleanup" clause+=Clause* |
		//
		//clause+=Clause+)
		public Group getGroup() { return cGroup; }

		//"landingpad"
		public Keyword getLandingpadKeyword_0() { return cLandingpadKeyword_0; }

		//struct=Structure
		public Assignment getStructAssignment_1() { return cStructAssignment_1; }

		//Structure
		public RuleCall getStructStructureParserRuleCall_1_0() { return cStructStructureParserRuleCall_1_0; }

		//"personality"
		public Keyword getPersonalityKeyword_2() { return cPersonalityKeyword_2; }

		//personalitytype=TypeUse
		public Assignment getPersonalitytypeAssignment_3() { return cPersonalitytypeAssignment_3; }

		//TypeUse
		public RuleCall getPersonalitytypeTypeUseParserRuleCall_3_0() { return cPersonalitytypeTypeUseParserRuleCall_3_0; }

		//personalityvalue=Value
		public Assignment getPersonalityvalueAssignment_4() { return cPersonalityvalueAssignment_4; }

		//Value
		public RuleCall getPersonalityvalueValueParserRuleCall_4_0() { return cPersonalityvalueValueParserRuleCall_4_0; }

		//"cleanup" clause+=Clause* | clause+=Clause+
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//"cleanup" clause+=Clause*
		public Group getGroup_5_0() { return cGroup_5_0; }

		//"cleanup"
		public Keyword getCleanupKeyword_5_0_0() { return cCleanupKeyword_5_0_0; }

		//clause+=Clause*
		public Assignment getClauseAssignment_5_0_1() { return cClauseAssignment_5_0_1; }

		//Clause
		public RuleCall getClauseClauseParserRuleCall_5_0_1_0() { return cClauseClauseParserRuleCall_5_0_1_0; }

		//clause+=Clause+
		public Assignment getClauseAssignment_5_1() { return cClauseAssignment_5_1; }

		//Clause
		public RuleCall getClauseClauseParserRuleCall_5_1_0() { return cClauseClauseParserRuleCall_5_1_0; }
	}

	public class ClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Clause");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cCatchKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTypeTypeUseParserRuleCall_0_1_0 = (RuleCall)cTypeAssignment_0_1.eContents().get(0);
		private final Assignment cValueAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_0_2_0 = (RuleCall)cValueAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFilterKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFilterarrayAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFilterarrayArrayParserRuleCall_1_1_0 = (RuleCall)cFilterarrayAssignment_1_1.eContents().get(0);
		private final Assignment cConstantAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cConstantValueParserRuleCall_1_2_0 = (RuleCall)cConstantAssignment_1_2.eContents().get(0);
		
		//Clause:
		//
		//	"catch" type=TypeUse value=Value | "filter" filterarray=Array constant=Value;
		public ParserRule getRule() { return rule; }

		//"catch" type=TypeUse value=Value | "filter" filterarray=Array constant=Value
		public Alternatives getAlternatives() { return cAlternatives; }

		//"catch" type=TypeUse value=Value
		public Group getGroup_0() { return cGroup_0; }

		//"catch"
		public Keyword getCatchKeyword_0_0() { return cCatchKeyword_0_0; }

		//type=TypeUse
		public Assignment getTypeAssignment_0_1() { return cTypeAssignment_0_1; }

		//TypeUse
		public RuleCall getTypeTypeUseParserRuleCall_0_1_0() { return cTypeTypeUseParserRuleCall_0_1_0; }

		//value=Value
		public Assignment getValueAssignment_0_2() { return cValueAssignment_0_2; }

		//Value
		public RuleCall getValueValueParserRuleCall_0_2_0() { return cValueValueParserRuleCall_0_2_0; }

		//"filter" filterarray=Array constant=Value
		public Group getGroup_1() { return cGroup_1; }

		//"filter"
		public Keyword getFilterKeyword_1_0() { return cFilterKeyword_1_0; }

		//filterarray=Array
		public Assignment getFilterarrayAssignment_1_1() { return cFilterarrayAssignment_1_1; }

		//Array
		public RuleCall getFilterarrayArrayParserRuleCall_1_1_0() { return cFilterarrayArrayParserRuleCall_1_1_0; }

		//constant=Value
		public Assignment getConstantAssignment_1_2() { return cConstantAssignment_1_2; }

		//Value
		public RuleCall getConstantValueParserRuleCall_1_2_0() { return cConstantValueParserRuleCall_1_2_0; }
	}

	public class SelectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Select");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditiontypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditiontypeTypeUseParserRuleCall_1_0 = (RuleCall)cConditiontypeAssignment_1.eContents().get(0);
		private final Assignment cConditionvalueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionvalueValueParserRuleCall_2_0 = (RuleCall)cConditionvalueAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVal1typeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVal1typeTypeUseParserRuleCall_4_0 = (RuleCall)cVal1typeAssignment_4.eContents().get(0);
		private final Assignment cVal1valueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cVal1valueValueParserRuleCall_5_0 = (RuleCall)cVal1valueAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cVal2typeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cVal2typeTypeUseParserRuleCall_7_0 = (RuleCall)cVal2typeAssignment_7.eContents().get(0);
		private final Assignment cVal2valueAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cVal2valueValueParserRuleCall_8_0 = (RuleCall)cVal2valueAssignment_8.eContents().get(0);
		
		//Select:
		//
		//	"select" conditiontype=TypeUse conditionvalue=Value "," val1type=TypeUse val1value=Value "," val2type=TypeUse
		//
		//	val2value=Value;
		public ParserRule getRule() { return rule; }

		//"select" conditiontype=TypeUse conditionvalue=Value "," val1type=TypeUse val1value=Value "," val2type=TypeUse
		//
		//val2value=Value
		public Group getGroup() { return cGroup; }

		//"select"
		public Keyword getSelectKeyword_0() { return cSelectKeyword_0; }

		//conditiontype=TypeUse
		public Assignment getConditiontypeAssignment_1() { return cConditiontypeAssignment_1; }

		//TypeUse
		public RuleCall getConditiontypeTypeUseParserRuleCall_1_0() { return cConditiontypeTypeUseParserRuleCall_1_0; }

		//conditionvalue=Value
		public Assignment getConditionvalueAssignment_2() { return cConditionvalueAssignment_2; }

		//Value
		public RuleCall getConditionvalueValueParserRuleCall_2_0() { return cConditionvalueValueParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//val1type=TypeUse
		public Assignment getVal1typeAssignment_4() { return cVal1typeAssignment_4; }

		//TypeUse
		public RuleCall getVal1typeTypeUseParserRuleCall_4_0() { return cVal1typeTypeUseParserRuleCall_4_0; }

		//val1value=Value
		public Assignment getVal1valueAssignment_5() { return cVal1valueAssignment_5; }

		//Value
		public RuleCall getVal1valueValueParserRuleCall_5_0() { return cVal1valueValueParserRuleCall_5_0; }

		//","
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }

		//val2type=TypeUse
		public Assignment getVal2typeAssignment_7() { return cVal2typeAssignment_7; }

		//TypeUse
		public RuleCall getVal2typeTypeUseParserRuleCall_7_0() { return cVal2typeTypeUseParserRuleCall_7_0; }

		//val2value=Value
		public Assignment getVal2valueAssignment_8() { return cVal2valueAssignment_8; }

		//Value
		public RuleCall getVal2valueValueParserRuleCall_8_0() { return cVal2valueValueParserRuleCall_8_0; }
	}

	public class VA_ArgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VA_Arg");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVa_argKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cListtypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cListtypeTypeUseParserRuleCall_1_0 = (RuleCall)cListtypeAssignment_1.eContents().get(0);
		private final Assignment cListvalueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cListvalueValueParserRuleCall_2_0 = (RuleCall)cListvalueAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cArgTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cArgTypeTypeUseParserRuleCall_4_0 = (RuleCall)cArgTypeAssignment_4.eContents().get(0);
		
		//VA_Arg:
		//
		//	"va_arg" listtype=TypeUse listvalue=Value "," argType=TypeUse;
		public ParserRule getRule() { return rule; }

		//"va_arg" listtype=TypeUse listvalue=Value "," argType=TypeUse
		public Group getGroup() { return cGroup; }

		//"va_arg"
		public Keyword getVa_argKeyword_0() { return cVa_argKeyword_0; }

		//listtype=TypeUse
		public Assignment getListtypeAssignment_1() { return cListtypeAssignment_1; }

		//TypeUse
		public RuleCall getListtypeTypeUseParserRuleCall_1_0() { return cListtypeTypeUseParserRuleCall_1_0; }

		//listvalue=Value
		public Assignment getListvalueAssignment_2() { return cListvalueAssignment_2; }

		//Value
		public RuleCall getListvalueValueParserRuleCall_2_0() { return cListvalueValueParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//argType=TypeUse
		public Assignment getArgTypeAssignment_4() { return cArgTypeAssignment_4; }

		//TypeUse
		public RuleCall getArgTypeTypeUseParserRuleCall_4_0() { return cArgTypeTypeUseParserRuleCall_4_0; }
	}

	public class ExtractElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExtractElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtractelementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVectortypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVectortypeTypeUseParserRuleCall_1_0 = (RuleCall)cVectortypeAssignment_1.eContents().get(0);
		private final Assignment cVectorvalueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVectorvalueValueParserRuleCall_2_0 = (RuleCall)cVectorvalueAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIndextypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIndextypeTypeUseParserRuleCall_4_0 = (RuleCall)cIndextypeAssignment_4.eContents().get(0);
		private final Assignment cIndexAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cIndexValueParserRuleCall_5_0 = (RuleCall)cIndexAssignment_5.eContents().get(0);
		
		//ExtractElement:
		//
		//	"extractelement" vectortype=TypeUse vectorvalue=Value "," indextype=TypeUse index=Value;
		public ParserRule getRule() { return rule; }

		//"extractelement" vectortype=TypeUse vectorvalue=Value "," indextype=TypeUse index=Value
		public Group getGroup() { return cGroup; }

		//"extractelement"
		public Keyword getExtractelementKeyword_0() { return cExtractelementKeyword_0; }

		//vectortype=TypeUse
		public Assignment getVectortypeAssignment_1() { return cVectortypeAssignment_1; }

		//TypeUse
		public RuleCall getVectortypeTypeUseParserRuleCall_1_0() { return cVectortypeTypeUseParserRuleCall_1_0; }

		//vectorvalue=Value
		public Assignment getVectorvalueAssignment_2() { return cVectorvalueAssignment_2; }

		//Value
		public RuleCall getVectorvalueValueParserRuleCall_2_0() { return cVectorvalueValueParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//indextype=TypeUse
		public Assignment getIndextypeAssignment_4() { return cIndextypeAssignment_4; }

		//TypeUse
		public RuleCall getIndextypeTypeUseParserRuleCall_4_0() { return cIndextypeTypeUseParserRuleCall_4_0; }

		//index=Value
		public Assignment getIndexAssignment_5() { return cIndexAssignment_5; }

		//Value
		public RuleCall getIndexValueParserRuleCall_5_0() { return cIndexValueParserRuleCall_5_0; }
	}

	public class InsertElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InsertElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInsertelementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVectortypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVectortypeTypeUseParserRuleCall_1_0 = (RuleCall)cVectortypeAssignment_1.eContents().get(0);
		private final Assignment cVectorvalueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVectorvalueValueParserRuleCall_2_0 = (RuleCall)cVectorvalueAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cScalartypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cScalartypeTypeUseParserRuleCall_4_0 = (RuleCall)cScalartypeAssignment_4.eContents().get(0);
		private final Assignment cScalarvalueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cScalarvalueValueParserRuleCall_5_0 = (RuleCall)cScalarvalueAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cIndextypeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cIndextypeTypeUseParserRuleCall_7_0 = (RuleCall)cIndextypeAssignment_7.eContents().get(0);
		private final Assignment cIndexAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cIndexValueParserRuleCall_8_0 = (RuleCall)cIndexAssignment_8.eContents().get(0);
		
		//InsertElement:
		//
		//	"insertelement" vectortype=TypeUse vectorvalue=Value "," scalartype=TypeUse scalarvalue=Value "," indextype=TypeUse
		//
		//	index=Value;
		public ParserRule getRule() { return rule; }

		//"insertelement" vectortype=TypeUse vectorvalue=Value "," scalartype=TypeUse scalarvalue=Value "," indextype=TypeUse
		//
		//index=Value
		public Group getGroup() { return cGroup; }

		//"insertelement"
		public Keyword getInsertelementKeyword_0() { return cInsertelementKeyword_0; }

		//vectortype=TypeUse
		public Assignment getVectortypeAssignment_1() { return cVectortypeAssignment_1; }

		//TypeUse
		public RuleCall getVectortypeTypeUseParserRuleCall_1_0() { return cVectortypeTypeUseParserRuleCall_1_0; }

		//vectorvalue=Value
		public Assignment getVectorvalueAssignment_2() { return cVectorvalueAssignment_2; }

		//Value
		public RuleCall getVectorvalueValueParserRuleCall_2_0() { return cVectorvalueValueParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//scalartype=TypeUse
		public Assignment getScalartypeAssignment_4() { return cScalartypeAssignment_4; }

		//TypeUse
		public RuleCall getScalartypeTypeUseParserRuleCall_4_0() { return cScalartypeTypeUseParserRuleCall_4_0; }

		//scalarvalue=Value
		public Assignment getScalarvalueAssignment_5() { return cScalarvalueAssignment_5; }

		//Value
		public RuleCall getScalarvalueValueParserRuleCall_5_0() { return cScalarvalueValueParserRuleCall_5_0; }

		//","
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }

		//indextype=TypeUse
		public Assignment getIndextypeAssignment_7() { return cIndextypeAssignment_7; }

		//TypeUse
		public RuleCall getIndextypeTypeUseParserRuleCall_7_0() { return cIndextypeTypeUseParserRuleCall_7_0; }

		//index=Value
		public Assignment getIndexAssignment_8() { return cIndexAssignment_8; }

		//Value
		public RuleCall getIndexValueParserRuleCall_8_0() { return cIndexValueParserRuleCall_8_0; }
	}

	public class ShuffleVectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShuffleVector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cShufflevectorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVal1typeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVal1typeTypeUseParserRuleCall_1_0 = (RuleCall)cVal1typeAssignment_1.eContents().get(0);
		private final Assignment cVal1valueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVal1valueValueParserRuleCall_2_0 = (RuleCall)cVal1valueAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVal2typeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVal2typeTypeUseParserRuleCall_4_0 = (RuleCall)cVal2typeAssignment_4.eContents().get(0);
		private final Assignment cVal2valueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cVal2valueValueParserRuleCall_5_0 = (RuleCall)cVal2valueAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cMasktypeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cMasktypeTypeUseParserRuleCall_7_0 = (RuleCall)cMasktypeAssignment_7.eContents().get(0);
		private final Assignment cMaskvalueAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cMaskvalueValueParserRuleCall_8_0 = (RuleCall)cMaskvalueAssignment_8.eContents().get(0);
		
		//ShuffleVector:
		//
		//	"shufflevector" val1type=TypeUse val1value=Value "," val2type=TypeUse val2value=Value "," masktype=TypeUse
		//
		//	maskvalue=Value;
		public ParserRule getRule() { return rule; }

		//"shufflevector" val1type=TypeUse val1value=Value "," val2type=TypeUse val2value=Value "," masktype=TypeUse
		//
		//maskvalue=Value
		public Group getGroup() { return cGroup; }

		//"shufflevector"
		public Keyword getShufflevectorKeyword_0() { return cShufflevectorKeyword_0; }

		//val1type=TypeUse
		public Assignment getVal1typeAssignment_1() { return cVal1typeAssignment_1; }

		//TypeUse
		public RuleCall getVal1typeTypeUseParserRuleCall_1_0() { return cVal1typeTypeUseParserRuleCall_1_0; }

		//val1value=Value
		public Assignment getVal1valueAssignment_2() { return cVal1valueAssignment_2; }

		//Value
		public RuleCall getVal1valueValueParserRuleCall_2_0() { return cVal1valueValueParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//val2type=TypeUse
		public Assignment getVal2typeAssignment_4() { return cVal2typeAssignment_4; }

		//TypeUse
		public RuleCall getVal2typeTypeUseParserRuleCall_4_0() { return cVal2typeTypeUseParserRuleCall_4_0; }

		//val2value=Value
		public Assignment getVal2valueAssignment_5() { return cVal2valueAssignment_5; }

		//Value
		public RuleCall getVal2valueValueParserRuleCall_5_0() { return cVal2valueValueParserRuleCall_5_0; }

		//","
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }

		//masktype=TypeUse
		public Assignment getMasktypeAssignment_7() { return cMasktypeAssignment_7; }

		//TypeUse
		public RuleCall getMasktypeTypeUseParserRuleCall_7_0() { return cMasktypeTypeUseParserRuleCall_7_0; }

		//maskvalue=Value
		public Assignment getMaskvalueAssignment_8() { return cMaskvalueAssignment_8; }

		//Value
		public RuleCall getMaskvalueValueParserRuleCall_8_0() { return cMaskvalueValueParserRuleCall_8_0; }
	}

	public class CompareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Compare");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cIcmpKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cI_PREDICATESParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Assignment cComptypeAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cComptypeTypeUseParserRuleCall_0_2_0 = (RuleCall)cComptypeAssignment_0_2.eContents().get(0);
		private final Assignment cValue1Assignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cValue1ValueParserRuleCall_0_3_0 = (RuleCall)cValue1Assignment_0_3.eContents().get(0);
		private final Keyword cCommaKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cValue2Assignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cValue2ValueParserRuleCall_0_5_0 = (RuleCall)cValue2Assignment_0_5.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFcmpKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cF_PREDICATESParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cComptypeAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cComptypeTypeUseParserRuleCall_1_2_0 = (RuleCall)cComptypeAssignment_1_2.eContents().get(0);
		private final Assignment cValue1Assignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cValue1ValueParserRuleCall_1_3_0 = (RuleCall)cValue1Assignment_1_3.eContents().get(0);
		private final Keyword cCommaKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cValue2Assignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cValue2ValueParserRuleCall_1_5_0 = (RuleCall)cValue2Assignment_1_5.eContents().get(0);
		
		//Compare:
		//
		//	"icmp" I_PREDICATES comptype=TypeUse value1=Value "," value2=Value | "fcmp" F_PREDICATES comptype=TypeUse
		//
		//	value1=Value "," value2=Value;
		public ParserRule getRule() { return rule; }

		//"icmp" I_PREDICATES comptype=TypeUse value1=Value "," value2=Value | "fcmp" F_PREDICATES comptype=TypeUse value1=Value
		//
		//"," value2=Value
		public Alternatives getAlternatives() { return cAlternatives; }

		//"icmp" I_PREDICATES comptype=TypeUse value1=Value "," value2=Value
		public Group getGroup_0() { return cGroup_0; }

		//"icmp"
		public Keyword getIcmpKeyword_0_0() { return cIcmpKeyword_0_0; }

		//I_PREDICATES
		public RuleCall getI_PREDICATESParserRuleCall_0_1() { return cI_PREDICATESParserRuleCall_0_1; }

		//comptype=TypeUse
		public Assignment getComptypeAssignment_0_2() { return cComptypeAssignment_0_2; }

		//TypeUse
		public RuleCall getComptypeTypeUseParserRuleCall_0_2_0() { return cComptypeTypeUseParserRuleCall_0_2_0; }

		//value1=Value
		public Assignment getValue1Assignment_0_3() { return cValue1Assignment_0_3; }

		//Value
		public RuleCall getValue1ValueParserRuleCall_0_3_0() { return cValue1ValueParserRuleCall_0_3_0; }

		//","
		public Keyword getCommaKeyword_0_4() { return cCommaKeyword_0_4; }

		//value2=Value
		public Assignment getValue2Assignment_0_5() { return cValue2Assignment_0_5; }

		//Value
		public RuleCall getValue2ValueParserRuleCall_0_5_0() { return cValue2ValueParserRuleCall_0_5_0; }

		//"fcmp" F_PREDICATES comptype=TypeUse value1=Value "," value2=Value
		public Group getGroup_1() { return cGroup_1; }

		//"fcmp"
		public Keyword getFcmpKeyword_1_0() { return cFcmpKeyword_1_0; }

		//F_PREDICATES
		public RuleCall getF_PREDICATESParserRuleCall_1_1() { return cF_PREDICATESParserRuleCall_1_1; }

		//comptype=TypeUse
		public Assignment getComptypeAssignment_1_2() { return cComptypeAssignment_1_2; }

		//TypeUse
		public RuleCall getComptypeTypeUseParserRuleCall_1_2_0() { return cComptypeTypeUseParserRuleCall_1_2_0; }

		//value1=Value
		public Assignment getValue1Assignment_1_3() { return cValue1Assignment_1_3; }

		//Value
		public RuleCall getValue1ValueParserRuleCall_1_3_0() { return cValue1ValueParserRuleCall_1_3_0; }

		//","
		public Keyword getCommaKeyword_1_4() { return cCommaKeyword_1_4; }

		//value2=Value
		public Assignment getValue2Assignment_1_5() { return cValue2Assignment_1_5; }

		//Value
		public RuleCall getValue2ValueParserRuleCall_1_5_0() { return cValue2ValueParserRuleCall_1_5_0; }
	}

	public class IndirectBranchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IndirectBranch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIndirectbrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAdresstypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAdresstypeTypeUseParserRuleCall_1_0 = (RuleCall)cAdresstypeAssignment_1.eContents().get(0);
		private final Assignment cAdressAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAdressValueParserRuleCall_2_0 = (RuleCall)cAdressAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLListAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLListLabelListParserRuleCall_5_0 = (RuleCall)cLListAssignment_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//IndirectBranch:
		//
		//	"indirectbr" adresstype=TypeUse adress=Value "," "[" lList=LabelList? "]";
		public ParserRule getRule() { return rule; }

		//"indirectbr" adresstype=TypeUse adress=Value "," "[" lList=LabelList? "]"
		public Group getGroup() { return cGroup; }

		//"indirectbr"
		public Keyword getIndirectbrKeyword_0() { return cIndirectbrKeyword_0; }

		//adresstype=TypeUse
		public Assignment getAdresstypeAssignment_1() { return cAdresstypeAssignment_1; }

		//TypeUse
		public RuleCall getAdresstypeTypeUseParserRuleCall_1_0() { return cAdresstypeTypeUseParserRuleCall_1_0; }

		//adress=Value
		public Assignment getAdressAssignment_2() { return cAdressAssignment_2; }

		//Value
		public RuleCall getAdressValueParserRuleCall_2_0() { return cAdressValueParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//"["
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }

		//lList=LabelList?
		public Assignment getLListAssignment_5() { return cLListAssignment_5; }

		//LabelList
		public RuleCall getLListLabelListParserRuleCall_5_0() { return cLListLabelListParserRuleCall_5_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}

	public class LabelListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LabelList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLabeltypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLabeltypeTypeUseParserRuleCall_0_0 = (RuleCall)cLabeltypeAssignment_0.eContents().get(0);
		private final Assignment cLabelsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLabelsValueParserRuleCall_1_0 = (RuleCall)cLabelsAssignment_1.eContents().get(0);
		
		//LabelList:
		//
		//	(labeltype+=TypeUse labels+=Value)+;
		public ParserRule getRule() { return rule; }

		//(labeltype+=TypeUse labels+=Value)+
		public Group getGroup() { return cGroup; }

		//labeltype+=TypeUse
		public Assignment getLabeltypeAssignment_0() { return cLabeltypeAssignment_0; }

		//TypeUse
		public RuleCall getLabeltypeTypeUseParserRuleCall_0_0() { return cLabeltypeTypeUseParserRuleCall_0_0; }

		//labels+=Value
		public Assignment getLabelsAssignment_1() { return cLabelsAssignment_1; }

		//Value
		public RuleCall getLabelsValueParserRuleCall_1_0() { return cLabelsValueParserRuleCall_1_0; }
	}

	public class SwitchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Switch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwitchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cComptypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cComptypeTypeUseParserRuleCall_1_0 = (RuleCall)cComptypeAssignment_1.eContents().get(0);
		private final Assignment cCompvalueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCompvalueValueParserRuleCall_2_0 = (RuleCall)cCompvalueAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDefaulttypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDefaulttypeTypeUseParserRuleCall_4_0 = (RuleCall)cDefaulttypeAssignment_4.eContents().get(0);
		private final Assignment cDefaultvalueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDefaultvalueValueParserRuleCall_5_0 = (RuleCall)cDefaultvalueAssignment_5.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cJTableAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cJTableJumpTableParserRuleCall_7_0 = (RuleCall)cJTableAssignment_7.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Switch:
		//
		//	"switch" comptype=TypeUse compvalue=Value "," defaulttype=TypeUse defaultvalue=Value "[" jTable=JumpTable? "]";
		public ParserRule getRule() { return rule; }

		//"switch" comptype=TypeUse compvalue=Value "," defaulttype=TypeUse defaultvalue=Value "[" jTable=JumpTable? "]"
		public Group getGroup() { return cGroup; }

		//"switch"
		public Keyword getSwitchKeyword_0() { return cSwitchKeyword_0; }

		//comptype=TypeUse
		public Assignment getComptypeAssignment_1() { return cComptypeAssignment_1; }

		//TypeUse
		public RuleCall getComptypeTypeUseParserRuleCall_1_0() { return cComptypeTypeUseParserRuleCall_1_0; }

		//compvalue=Value
		public Assignment getCompvalueAssignment_2() { return cCompvalueAssignment_2; }

		//Value
		public RuleCall getCompvalueValueParserRuleCall_2_0() { return cCompvalueValueParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//defaulttype=TypeUse
		public Assignment getDefaulttypeAssignment_4() { return cDefaulttypeAssignment_4; }

		//TypeUse
		public RuleCall getDefaulttypeTypeUseParserRuleCall_4_0() { return cDefaulttypeTypeUseParserRuleCall_4_0; }

		//defaultvalue=Value
		public Assignment getDefaultvalueAssignment_5() { return cDefaultvalueAssignment_5; }

		//Value
		public RuleCall getDefaultvalueValueParserRuleCall_5_0() { return cDefaultvalueValueParserRuleCall_5_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_6() { return cLeftSquareBracketKeyword_6; }

		//jTable=JumpTable?
		public Assignment getJTableAssignment_7() { return cJTableAssignment_7; }

		//JumpTable
		public RuleCall getJTableJumpTableParserRuleCall_7_0() { return cJTableJumpTableParserRuleCall_7_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_8() { return cRightSquareBracketKeyword_8; }
	}

	public class JumpTableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JumpTable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cJtypesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cJtypesTypeUseParserRuleCall_0_0 = (RuleCall)cJtypesAssignment_0.eContents().get(0);
		private final Assignment cJvaluesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cJvaluesValueParserRuleCall_1_0 = (RuleCall)cJvaluesAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDestinationtypesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDestinationtypesTypeUseParserRuleCall_3_0 = (RuleCall)cDestinationtypesAssignment_3.eContents().get(0);
		private final Assignment cDestinationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDestinationsValueParserRuleCall_4_0 = (RuleCall)cDestinationsAssignment_4.eContents().get(0);
		
		//JumpTable:
		//
		//	(jtypes+=TypeUse jvalues+=Value "," destinationtypes+=TypeUse destinations+=Value)+;
		public ParserRule getRule() { return rule; }

		//(jtypes+=TypeUse jvalues+=Value "," destinationtypes+=TypeUse destinations+=Value)+
		public Group getGroup() { return cGroup; }

		//jtypes+=TypeUse
		public Assignment getJtypesAssignment_0() { return cJtypesAssignment_0; }

		//TypeUse
		public RuleCall getJtypesTypeUseParserRuleCall_0_0() { return cJtypesTypeUseParserRuleCall_0_0; }

		//jvalues+=Value
		public Assignment getJvaluesAssignment_1() { return cJvaluesAssignment_1; }

		//Value
		public RuleCall getJvaluesValueParserRuleCall_1_0() { return cJvaluesValueParserRuleCall_1_0; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//destinationtypes+=TypeUse
		public Assignment getDestinationtypesAssignment_3() { return cDestinationtypesAssignment_3; }

		//TypeUse
		public RuleCall getDestinationtypesTypeUseParserRuleCall_3_0() { return cDestinationtypesTypeUseParserRuleCall_3_0; }

		//destinations+=Value
		public Assignment getDestinationsAssignment_4() { return cDestinationsAssignment_4; }

		//Value
		public RuleCall getDestinationsValueParserRuleCall_4_0() { return cDestinationsValueParserRuleCall_4_0; }
	}

	public class InvokeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Invoke");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInvokeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cCallingConvParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cRETURN_ATTRIBUTESParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cFunctiontypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFunctiontypeTypeUseParserRuleCall_3_0 = (RuleCall)cFunctiontypeAssignment_3.eContents().get(0);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameAddressParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Assignment cPListAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPListParameterListParserRuleCall_5_0 = (RuleCall)cPListAssignment_5.eContents().get(0);
		private final RuleCall cFUNCTION_ATTRIBUTESParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Keyword cToKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cTotypeAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cTotypeTypeUseParserRuleCall_8_0 = (RuleCall)cTotypeAssignment_8.eContents().get(0);
		private final Assignment cTovalueAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cTovalueValueParserRuleCall_9_0 = (RuleCall)cTovalueAssignment_9.eContents().get(0);
		private final Keyword cUnwindKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cUnwindtypeAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cUnwindtypeTypeUseParserRuleCall_11_0 = (RuleCall)cUnwindtypeAssignment_11.eContents().get(0);
		private final Assignment cUnwindvalueAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cUnwindvalueValueParserRuleCall_12_0 = (RuleCall)cUnwindvalueAssignment_12.eContents().get(0);
		
		//Invoke:
		//
		//	"invoke" CallingConv? RETURN_ATTRIBUTES? functiontype=TypeUse name=Address pList=ParameterList FUNCTION_ATTRIBUTES*
		//
		//	"to" totype=TypeUse tovalue=Value "unwind" unwindtype=TypeUse unwindvalue=Value;
		public ParserRule getRule() { return rule; }

		//"invoke" CallingConv? RETURN_ATTRIBUTES? functiontype=TypeUse name=Address pList=ParameterList FUNCTION_ATTRIBUTES* "to"
		//
		//totype=TypeUse tovalue=Value "unwind" unwindtype=TypeUse unwindvalue=Value
		public Group getGroup() { return cGroup; }

		//"invoke"
		public Keyword getInvokeKeyword_0() { return cInvokeKeyword_0; }

		//CallingConv?
		public RuleCall getCallingConvParserRuleCall_1() { return cCallingConvParserRuleCall_1; }

		//RETURN_ATTRIBUTES?
		public RuleCall getRETURN_ATTRIBUTESParserRuleCall_2() { return cRETURN_ATTRIBUTESParserRuleCall_2; }

		//functiontype=TypeUse
		public Assignment getFunctiontypeAssignment_3() { return cFunctiontypeAssignment_3; }

		//TypeUse
		public RuleCall getFunctiontypeTypeUseParserRuleCall_3_0() { return cFunctiontypeTypeUseParserRuleCall_3_0; }

		//name=Address
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//Address
		public RuleCall getNameAddressParserRuleCall_4_0() { return cNameAddressParserRuleCall_4_0; }

		//pList=ParameterList
		public Assignment getPListAssignment_5() { return cPListAssignment_5; }

		//ParameterList
		public RuleCall getPListParameterListParserRuleCall_5_0() { return cPListParameterListParserRuleCall_5_0; }

		//FUNCTION_ATTRIBUTES*
		public RuleCall getFUNCTION_ATTRIBUTESParserRuleCall_6() { return cFUNCTION_ATTRIBUTESParserRuleCall_6; }

		//"to"
		public Keyword getToKeyword_7() { return cToKeyword_7; }

		//totype=TypeUse
		public Assignment getTotypeAssignment_8() { return cTotypeAssignment_8; }

		//TypeUse
		public RuleCall getTotypeTypeUseParserRuleCall_8_0() { return cTotypeTypeUseParserRuleCall_8_0; }

		//tovalue=Value
		public Assignment getTovalueAssignment_9() { return cTovalueAssignment_9; }

		//Value
		public RuleCall getTovalueValueParserRuleCall_9_0() { return cTovalueValueParserRuleCall_9_0; }

		//"unwind"
		public Keyword getUnwindKeyword_10() { return cUnwindKeyword_10; }

		//unwindtype=TypeUse
		public Assignment getUnwindtypeAssignment_11() { return cUnwindtypeAssignment_11; }

		//TypeUse
		public RuleCall getUnwindtypeTypeUseParserRuleCall_11_0() { return cUnwindtypeTypeUseParserRuleCall_11_0; }

		//unwindvalue=Value
		public Assignment getUnwindvalueAssignment_12() { return cUnwindvalueAssignment_12; }

		//Value
		public RuleCall getUnwindvalueValueParserRuleCall_12_0() { return cUnwindvalueValueParserRuleCall_12_0; }
	}

	public class ResumeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Resume");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cResumeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cResumestructAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cResumestructStructureParserRuleCall_1_0 = (RuleCall)cResumestructAssignment_1.eContents().get(0);
		private final Assignment cResumevalueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cResumevalueValueParserRuleCall_2_0 = (RuleCall)cResumevalueAssignment_2.eContents().get(0);
		
		//Resume:
		//
		//	"resume" resumestruct=Structure resumevalue=Value;
		public ParserRule getRule() { return rule; }

		//"resume" resumestruct=Structure resumevalue=Value
		public Group getGroup() { return cGroup; }

		//"resume"
		public Keyword getResumeKeyword_0() { return cResumeKeyword_0; }

		//resumestruct=Structure
		public Assignment getResumestructAssignment_1() { return cResumestructAssignment_1; }

		//Structure
		public RuleCall getResumestructStructureParserRuleCall_1_0() { return cResumestructStructureParserRuleCall_1_0; }

		//resumevalue=Value
		public Assignment getResumevalueAssignment_2() { return cResumevalueAssignment_2; }

		//Value
		public RuleCall getResumevalueValueParserRuleCall_2_0() { return cResumevalueValueParserRuleCall_2_0; }
	}

	public class UnreachableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Unreachable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnreachableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cUnreachableKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Unreachable:
		//
		//	{Unreachable} "unreachable";
		public ParserRule getRule() { return rule; }

		//{Unreachable} "unreachable"
		public Group getGroup() { return cGroup; }

		//{Unreachable}
		public Action getUnreachableAction_0() { return cUnreachableAction_0; }

		//"unreachable"
		public Keyword getUnreachableKeyword_1() { return cUnreachableKeyword_1; }
	}

	public class ReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Return");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cReturnAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cRetKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cVoidKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cCommaKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Keyword cDbgKeyword_0_3_1 = (Keyword)cGroup_0_3.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0_3_2 = (Keyword)cGroup_0_3.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_0_3_3 = (RuleCall)cGroup_0_3.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cRetKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cReturntypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cReturntypeTypeUseParserRuleCall_1_1_0 = (RuleCall)cReturntypeAssignment_1_1.eContents().get(0);
		private final Assignment cReturnvalueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cReturnvalueValueParserRuleCall_1_2_0 = (RuleCall)cReturnvalueAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cCommaKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Keyword cDbgKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_1_3_2 = (Keyword)cGroup_1_3.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_1_3_3 = (RuleCall)cGroup_1_3.eContents().get(3);
		
		//Return:
		//
		//	{Return} "ret" "void" ("," "!dbg" "!" INT)? | "ret" returntype=TypeUse returnvalue=Value ("," "!dbg" "!" INT)?;
		public ParserRule getRule() { return rule; }

		//{Return} "ret" "void" ("," "!dbg" "!" INT)? | "ret" returntype=TypeUse returnvalue=Value ("," "!dbg" "!" INT)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Return} "ret" "void" ("," "!dbg" "!" INT)?
		public Group getGroup_0() { return cGroup_0; }

		//{Return}
		public Action getReturnAction_0_0() { return cReturnAction_0_0; }

		//"ret"
		public Keyword getRetKeyword_0_1() { return cRetKeyword_0_1; }

		//"void"
		public Keyword getVoidKeyword_0_2() { return cVoidKeyword_0_2; }

		//("," "!dbg" "!" INT)?
		public Group getGroup_0_3() { return cGroup_0_3; }

		//","
		public Keyword getCommaKeyword_0_3_0() { return cCommaKeyword_0_3_0; }

		//"!dbg"
		public Keyword getDbgKeyword_0_3_1() { return cDbgKeyword_0_3_1; }

		//"!"
		public Keyword getExclamationMarkKeyword_0_3_2() { return cExclamationMarkKeyword_0_3_2; }

		//INT
		public RuleCall getINTTerminalRuleCall_0_3_3() { return cINTTerminalRuleCall_0_3_3; }

		//"ret" returntype=TypeUse returnvalue=Value ("," "!dbg" "!" INT)?
		public Group getGroup_1() { return cGroup_1; }

		//"ret"
		public Keyword getRetKeyword_1_0() { return cRetKeyword_1_0; }

		//returntype=TypeUse
		public Assignment getReturntypeAssignment_1_1() { return cReturntypeAssignment_1_1; }

		//TypeUse
		public RuleCall getReturntypeTypeUseParserRuleCall_1_1_0() { return cReturntypeTypeUseParserRuleCall_1_1_0; }

		//returnvalue=Value
		public Assignment getReturnvalueAssignment_1_2() { return cReturnvalueAssignment_1_2; }

		//Value
		public RuleCall getReturnvalueValueParserRuleCall_1_2_0() { return cReturnvalueValueParserRuleCall_1_2_0; }

		//("," "!dbg" "!" INT)?
		public Group getGroup_1_3() { return cGroup_1_3; }

		//","
		public Keyword getCommaKeyword_1_3_0() { return cCommaKeyword_1_3_0; }

		//"!dbg"
		public Keyword getDbgKeyword_1_3_1() { return cDbgKeyword_1_3_1; }

		//"!"
		public Keyword getExclamationMarkKeyword_1_3_2() { return cExclamationMarkKeyword_1_3_2; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_3_3() { return cINTTerminalRuleCall_1_3_3; }
	}

	public class BranchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Branch");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cBrKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLabelKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cDestinationAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cDestinationValueParserRuleCall_0_2_0 = (RuleCall)cDestinationAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cBrKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINT_TYPETerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cCondvalueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cCondvalueValueParserRuleCall_1_2_0 = (RuleCall)cCondvalueAssignment_1_2.eContents().get(0);
		private final Keyword cCommaKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cLabelTruetypeAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cLabelTruetypeTypeUseParserRuleCall_1_4_0 = (RuleCall)cLabelTruetypeAssignment_1_4.eContents().get(0);
		private final Assignment cLabelTrueAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cLabelTrueValueParserRuleCall_1_5_0 = (RuleCall)cLabelTrueAssignment_1_5.eContents().get(0);
		private final Keyword cCommaKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Assignment cLabelFalsetypeAssignment_1_7 = (Assignment)cGroup_1.eContents().get(7);
		private final RuleCall cLabelFalsetypeTypeUseParserRuleCall_1_7_0 = (RuleCall)cLabelFalsetypeAssignment_1_7.eContents().get(0);
		private final Assignment cLabelFalseAssignment_1_8 = (Assignment)cGroup_1.eContents().get(8);
		private final RuleCall cLabelFalseValueParserRuleCall_1_8_0 = (RuleCall)cLabelFalseAssignment_1_8.eContents().get(0);
		
		//Branch:
		//
		//	"br" "label" destination=Value | "br" INT_TYPE condvalue=Value "," labelTruetype=TypeUse labelTrue=Value ","
		//
		//	labelFalsetype=TypeUse labelFalse=Value;
		public ParserRule getRule() { return rule; }

		//"br" "label" destination=Value | "br" INT_TYPE condvalue=Value "," labelTruetype=TypeUse labelTrue=Value ","
		//
		//labelFalsetype=TypeUse labelFalse=Value
		public Alternatives getAlternatives() { return cAlternatives; }

		//"br" "label" destination=Value
		public Group getGroup_0() { return cGroup_0; }

		//"br"
		public Keyword getBrKeyword_0_0() { return cBrKeyword_0_0; }

		//"label"
		public Keyword getLabelKeyword_0_1() { return cLabelKeyword_0_1; }

		//destination=Value
		public Assignment getDestinationAssignment_0_2() { return cDestinationAssignment_0_2; }

		//Value
		public RuleCall getDestinationValueParserRuleCall_0_2_0() { return cDestinationValueParserRuleCall_0_2_0; }

		//"br" INT_TYPE condvalue=Value "," labelTruetype=TypeUse labelTrue=Value "," labelFalsetype=TypeUse labelFalse=Value
		public Group getGroup_1() { return cGroup_1; }

		//"br"
		public Keyword getBrKeyword_1_0() { return cBrKeyword_1_0; }

		//INT_TYPE
		public RuleCall getINT_TYPETerminalRuleCall_1_1() { return cINT_TYPETerminalRuleCall_1_1; }

		//condvalue=Value
		public Assignment getCondvalueAssignment_1_2() { return cCondvalueAssignment_1_2; }

		//Value
		public RuleCall getCondvalueValueParserRuleCall_1_2_0() { return cCondvalueValueParserRuleCall_1_2_0; }

		//","
		public Keyword getCommaKeyword_1_3() { return cCommaKeyword_1_3; }

		//labelTruetype=TypeUse
		public Assignment getLabelTruetypeAssignment_1_4() { return cLabelTruetypeAssignment_1_4; }

		//TypeUse
		public RuleCall getLabelTruetypeTypeUseParserRuleCall_1_4_0() { return cLabelTruetypeTypeUseParserRuleCall_1_4_0; }

		//labelTrue=Value
		public Assignment getLabelTrueAssignment_1_5() { return cLabelTrueAssignment_1_5; }

		//Value
		public RuleCall getLabelTrueValueParserRuleCall_1_5_0() { return cLabelTrueValueParserRuleCall_1_5_0; }

		//","
		public Keyword getCommaKeyword_1_6() { return cCommaKeyword_1_6; }

		//labelFalsetype=TypeUse
		public Assignment getLabelFalsetypeAssignment_1_7() { return cLabelFalsetypeAssignment_1_7; }

		//TypeUse
		public RuleCall getLabelFalsetypeTypeUseParserRuleCall_1_7_0() { return cLabelFalsetypeTypeUseParserRuleCall_1_7_0; }

		//labelFalse=Value
		public Assignment getLabelFalseAssignment_1_8() { return cLabelFalseAssignment_1_8; }

		//Value
		public RuleCall getLabelFalseValueParserRuleCall_1_8_0() { return cLabelFalseValueParserRuleCall_1_8_0; }
	}

	public class ATOMIC_ORDERINGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ATOMIC_ORDERING");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cUnorderedKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cMonotonicKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAquireKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cReleaseKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cAcq_relKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cSeq_cstKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//ATOMIC_ORDERING:
		//
		//	"unordered" | "monotonic" | "aquire" | "release" | "acq_rel" | "seq_cst";
		public ParserRule getRule() { return rule; }

		//"unordered" | "monotonic" | "aquire" | "release" | "acq_rel" | "seq_cst"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"unordered"
		public Keyword getUnorderedKeyword_0() { return cUnorderedKeyword_0; }

		//"monotonic"
		public Keyword getMonotonicKeyword_1() { return cMonotonicKeyword_1; }

		//"aquire"
		public Keyword getAquireKeyword_2() { return cAquireKeyword_2; }

		//"release"
		public Keyword getReleaseKeyword_3() { return cReleaseKeyword_3; }

		//"acq_rel"
		public Keyword getAcq_relKeyword_4() { return cAcq_relKeyword_4; }

		//"seq_cst"
		public Keyword getSeq_cstKeyword_5() { return cSeq_cstKeyword_5; }
	}

	public class BIN_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BIN_OP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cXchgKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAddKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSubKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cAndKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cNandKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cOrKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cXorKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cMaxKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cMinKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cUmaxKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cUminKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		
		//BIN_OP:
		//
		//	"xchg" | "add" | "sub" | "and" | "nand" | "or" | "xor" | "max" | "min" | "umax" | "umin";
		public ParserRule getRule() { return rule; }

		//"xchg" | "add" | "sub" | "and" | "nand" | "or" | "xor" | "max" | "min" | "umax" | "umin"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"xchg"
		public Keyword getXchgKeyword_0() { return cXchgKeyword_0; }

		//"add"
		public Keyword getAddKeyword_1() { return cAddKeyword_1; }

		//"sub"
		public Keyword getSubKeyword_2() { return cSubKeyword_2; }

		//"and"
		public Keyword getAndKeyword_3() { return cAndKeyword_3; }

		//"nand"
		public Keyword getNandKeyword_4() { return cNandKeyword_4; }

		//"or"
		public Keyword getOrKeyword_5() { return cOrKeyword_5; }

		//"xor"
		public Keyword getXorKeyword_6() { return cXorKeyword_6; }

		//"max"
		public Keyword getMaxKeyword_7() { return cMaxKeyword_7; }

		//"min"
		public Keyword getMinKeyword_8() { return cMinKeyword_8; }

		//"umax"
		public Keyword getUmaxKeyword_9() { return cUmaxKeyword_9; }

		//"umin"
		public Keyword getUminKeyword_10() { return cUminKeyword_10; }
	}

	public class RETURN_ATTRIBUTESElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RETURN_ATTRIBUTES");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cZeroextKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSignextKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cInregKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cByvalKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cSretKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cNoaliasKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cNocaptureKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cNestKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//RETURN_ATTRIBUTES:
		//
		//	"zeroext" | "signext" | "inreg" | "byval" | "sret" | "noalias" | "nocapture" | "nest";
		public ParserRule getRule() { return rule; }

		//"zeroext" | "signext" | "inreg" | "byval" | "sret" | "noalias" | "nocapture" | "nest"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"zeroext"
		public Keyword getZeroextKeyword_0() { return cZeroextKeyword_0; }

		//"signext"
		public Keyword getSignextKeyword_1() { return cSignextKeyword_1; }

		//"inreg"
		public Keyword getInregKeyword_2() { return cInregKeyword_2; }

		//"byval"
		public Keyword getByvalKeyword_3() { return cByvalKeyword_3; }

		//"sret"
		public Keyword getSretKeyword_4() { return cSretKeyword_4; }

		//"noalias"
		public Keyword getNoaliasKeyword_5() { return cNoaliasKeyword_5; }

		//"nocapture"
		public Keyword getNocaptureKeyword_6() { return cNocaptureKeyword_6; }

		//"nest"
		public Keyword getNestKeyword_7() { return cNestKeyword_7; }
	}

	public class CallingConvElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CallingConv");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCccKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFastccKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cColdccKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cX86_stdcallccKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cX86_fastcallccKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cX86_thiscallccKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cArm_apcsccKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cArm_aapcsccKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cArm_aapcs_vfpccKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cMsp430_intrccKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cPtx_kernelKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cPtx_deviceKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cSpir_funcKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cSpir_kernelKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Group cGroup_14 = (Group)cAlternatives.eContents().get(14);
		private final Keyword cCcKeyword_14_0 = (Keyword)cGroup_14.eContents().get(0);
		private final Keyword cLessThanSignKeyword_14_1 = (Keyword)cGroup_14.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_14_2 = (RuleCall)cGroup_14.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_14_3 = (Keyword)cGroup_14.eContents().get(3);
		private final RuleCall cINTTerminalRuleCall_14_4 = (RuleCall)cGroup_14.eContents().get(4);
		
		//CallingConv:
		//
		//	"ccc" | "fastcc" | "coldcc" | "x86_stdcallcc" | "x86_fastcallcc" | "x86_thiscallcc" | "arm_apcscc" | "arm_aapcscc" |
		//
		//	"arm_aapcs_vfpcc" | "msp430_intrcc" | "ptx_kernel" | "ptx_device" | "spir_func" | "spir_kernel" | "cc" "<" INT ">"
		//
		//	INT;
		public ParserRule getRule() { return rule; }

		//"ccc" | "fastcc" | "coldcc" | "x86_stdcallcc" | "x86_fastcallcc" | "x86_thiscallcc" | "arm_apcscc" | "arm_aapcscc" |
		//
		//"arm_aapcs_vfpcc" | "msp430_intrcc" | "ptx_kernel" | "ptx_device" | "spir_func" | "spir_kernel" | "cc" "<" INT ">" INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//"ccc"
		public Keyword getCccKeyword_0() { return cCccKeyword_0; }

		//"fastcc"
		public Keyword getFastccKeyword_1() { return cFastccKeyword_1; }

		//"coldcc"
		public Keyword getColdccKeyword_2() { return cColdccKeyword_2; }

		//"x86_stdcallcc"
		public Keyword getX86_stdcallccKeyword_3() { return cX86_stdcallccKeyword_3; }

		//"x86_fastcallcc"
		public Keyword getX86_fastcallccKeyword_4() { return cX86_fastcallccKeyword_4; }

		//"x86_thiscallcc"
		public Keyword getX86_thiscallccKeyword_5() { return cX86_thiscallccKeyword_5; }

		//"arm_apcscc"
		public Keyword getArm_apcsccKeyword_6() { return cArm_apcsccKeyword_6; }

		//"arm_aapcscc"
		public Keyword getArm_aapcsccKeyword_7() { return cArm_aapcsccKeyword_7; }

		//"arm_aapcs_vfpcc"
		public Keyword getArm_aapcs_vfpccKeyword_8() { return cArm_aapcs_vfpccKeyword_8; }

		//"msp430_intrcc"
		public Keyword getMsp430_intrccKeyword_9() { return cMsp430_intrccKeyword_9; }

		//"ptx_kernel"
		public Keyword getPtx_kernelKeyword_10() { return cPtx_kernelKeyword_10; }

		//"ptx_device"
		public Keyword getPtx_deviceKeyword_11() { return cPtx_deviceKeyword_11; }

		//"spir_func"
		public Keyword getSpir_funcKeyword_12() { return cSpir_funcKeyword_12; }

		//"spir_kernel"
		public Keyword getSpir_kernelKeyword_13() { return cSpir_kernelKeyword_13; }

		//"cc" "<" INT ">" INT
		public Group getGroup_14() { return cGroup_14; }

		//"cc"
		public Keyword getCcKeyword_14_0() { return cCcKeyword_14_0; }

		//"<"
		public Keyword getLessThanSignKeyword_14_1() { return cLessThanSignKeyword_14_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_14_2() { return cINTTerminalRuleCall_14_2; }

		//">"
		public Keyword getGreaterThanSignKeyword_14_3() { return cGreaterThanSignKeyword_14_3; }

		//INT
		public RuleCall getINTTerminalRuleCall_14_4() { return cINTTerminalRuleCall_14_4; }
	}

	public class FUNCTION_ATTRIBUTESElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FUNCTION_ATTRIBUTES");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAddress_safetyKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cAlignstackKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Keyword cGreaterThanSignKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Keyword cAlwaysinlineKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cNonlazybindKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cInlinehintKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cNakedKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cNoimplicitfloatKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cNoinlineKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cNoredzoneKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cNoreturnKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cNounwindKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cOptsizeKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cReadnoneKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cReadonlyKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cReturns_twiceKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cSspKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cSspreqKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cUwtableKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		
		//FUNCTION_ATTRIBUTES:
		//
		//	"address_safety" | "alignstack" "(" "<" INT ">" ")" | "alwaysinline" | "nonlazybind" | "inlinehint" | "naked" |
		//
		//	"noimplicitfloat" | "noinline" | "noredzone" | "noreturn" | "nounwind" | "optsize" | "readnone" | "readonly" |
		//
		//	"returns_twice" | "ssp" | "sspreq" | "uwtable";
		public ParserRule getRule() { return rule; }

		//"address_safety" | "alignstack" "(" "<" INT ">" ")" | "alwaysinline" | "nonlazybind" | "inlinehint" | "naked" |
		//
		//"noimplicitfloat" | "noinline" | "noredzone" | "noreturn" | "nounwind" | "optsize" | "readnone" | "readonly" |
		//
		//"returns_twice" | "ssp" | "sspreq" | "uwtable"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"address_safety"
		public Keyword getAddress_safetyKeyword_0() { return cAddress_safetyKeyword_0; }

		//"alignstack" "(" "<" INT ">" ")"
		public Group getGroup_1() { return cGroup_1; }

		//"alignstack"
		public Keyword getAlignstackKeyword_1_0() { return cAlignstackKeyword_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//"<"
		public Keyword getLessThanSignKeyword_1_2() { return cLessThanSignKeyword_1_2; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_3() { return cINTTerminalRuleCall_1_3; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_4() { return cGreaterThanSignKeyword_1_4; }

		//")"
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }

		//"alwaysinline"
		public Keyword getAlwaysinlineKeyword_2() { return cAlwaysinlineKeyword_2; }

		//"nonlazybind"
		public Keyword getNonlazybindKeyword_3() { return cNonlazybindKeyword_3; }

		//"inlinehint"
		public Keyword getInlinehintKeyword_4() { return cInlinehintKeyword_4; }

		//"naked"
		public Keyword getNakedKeyword_5() { return cNakedKeyword_5; }

		//"noimplicitfloat"
		public Keyword getNoimplicitfloatKeyword_6() { return cNoimplicitfloatKeyword_6; }

		//"noinline"
		public Keyword getNoinlineKeyword_7() { return cNoinlineKeyword_7; }

		//"noredzone"
		public Keyword getNoredzoneKeyword_8() { return cNoredzoneKeyword_8; }

		//"noreturn"
		public Keyword getNoreturnKeyword_9() { return cNoreturnKeyword_9; }

		//"nounwind"
		public Keyword getNounwindKeyword_10() { return cNounwindKeyword_10; }

		//"optsize"
		public Keyword getOptsizeKeyword_11() { return cOptsizeKeyword_11; }

		//"readnone"
		public Keyword getReadnoneKeyword_12() { return cReadnoneKeyword_12; }

		//"readonly"
		public Keyword getReadonlyKeyword_13() { return cReadonlyKeyword_13; }

		//"returns_twice"
		public Keyword getReturns_twiceKeyword_14() { return cReturns_twiceKeyword_14; }

		//"ssp"
		public Keyword getSspKeyword_15() { return cSspKeyword_15; }

		//"sspreq"
		public Keyword getSspreqKeyword_16() { return cSspreqKeyword_16; }

		//"uwtable"
		public Keyword getUwtableKeyword_17() { return cUwtableKeyword_17; }
	}

	public class Cast_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Cast_OP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTruncKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cZextKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSextKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cFptruncKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cFpextKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cFptouiKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cFptosiKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cUitofpKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cSitofpKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cPtrtointKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cInttoptrKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cBitcastKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		
		//Cast_OP:
		//
		//	"trunc" | "zext" | "sext" | "fptrunc" | "fpext" | "fptoui" | "fptosi" | "uitofp" | "sitofp" | "ptrtoint" | "inttoptr"
		//
		//	| "bitcast";
		public ParserRule getRule() { return rule; }

		//"trunc" | "zext" | "sext" | "fptrunc" | "fpext" | "fptoui" | "fptosi" | "uitofp" | "sitofp" | "ptrtoint" | "inttoptr" |
		//
		//"bitcast"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"trunc"
		public Keyword getTruncKeyword_0() { return cTruncKeyword_0; }

		//"zext"
		public Keyword getZextKeyword_1() { return cZextKeyword_1; }

		//"sext"
		public Keyword getSextKeyword_2() { return cSextKeyword_2; }

		//"fptrunc"
		public Keyword getFptruncKeyword_3() { return cFptruncKeyword_3; }

		//"fpext"
		public Keyword getFpextKeyword_4() { return cFpextKeyword_4; }

		//"fptoui"
		public Keyword getFptouiKeyword_5() { return cFptouiKeyword_5; }

		//"fptosi"
		public Keyword getFptosiKeyword_6() { return cFptosiKeyword_6; }

		//"uitofp"
		public Keyword getUitofpKeyword_7() { return cUitofpKeyword_7; }

		//"sitofp"
		public Keyword getSitofpKeyword_8() { return cSitofpKeyword_8; }

		//"ptrtoint"
		public Keyword getPtrtointKeyword_9() { return cPtrtointKeyword_9; }

		//"inttoptr"
		public Keyword getInttoptrKeyword_10() { return cInttoptrKeyword_10; }

		//"bitcast"
		public Keyword getBitcastKeyword_11() { return cBitcastKeyword_11; }
	}

	public class I_PREDICATESElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "I_PREDICATES");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cNeKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cUgtKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cUgeKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cUltKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cUleKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cSgtKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cSgeKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cSltKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cSleKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		
		//I_PREDICATES:
		//
		//	"eq" | "ne" | "ugt" | "uge" | "ult" | "ule" | "sgt" | "sge" | "slt" | "sle";
		public ParserRule getRule() { return rule; }

		//"eq" | "ne" | "ugt" | "uge" | "ult" | "ule" | "sgt" | "sge" | "slt" | "sle"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"eq"
		public Keyword getEqKeyword_0() { return cEqKeyword_0; }

		//"ne"
		public Keyword getNeKeyword_1() { return cNeKeyword_1; }

		//"ugt"
		public Keyword getUgtKeyword_2() { return cUgtKeyword_2; }

		//"uge"
		public Keyword getUgeKeyword_3() { return cUgeKeyword_3; }

		//"ult"
		public Keyword getUltKeyword_4() { return cUltKeyword_4; }

		//"ule"
		public Keyword getUleKeyword_5() { return cUleKeyword_5; }

		//"sgt"
		public Keyword getSgtKeyword_6() { return cSgtKeyword_6; }

		//"sge"
		public Keyword getSgeKeyword_7() { return cSgeKeyword_7; }

		//"slt"
		public Keyword getSltKeyword_8() { return cSltKeyword_8; }

		//"sle"
		public Keyword getSleKeyword_9() { return cSleKeyword_9; }
	}

	public class F_PREDICATESElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "F_PREDICATES");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cFalseKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOeqKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cOgtKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cOgeKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cOltKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cOleKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cOneKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cOrdKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cUeqKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cUgtKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cUgeKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cUltKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cUleKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cUneKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cUnoKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cTrueKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		
		//F_PREDICATES:
		//
		//	"false" | "oeq" | "ogt" | "oge" | "olt" | "ole" | "one" | "ord" | "ueq" | "ugt" | "uge" | "ult" | "ule" | "une" |
		//
		//	"uno" | "true";
		public ParserRule getRule() { return rule; }

		//"false" | "oeq" | "ogt" | "oge" | "olt" | "ole" | "one" | "ord" | "ueq" | "ugt" | "uge" | "ult" | "ule" | "une" | "uno"
		//
		//| "true"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"false"
		public Keyword getFalseKeyword_0() { return cFalseKeyword_0; }

		//"oeq"
		public Keyword getOeqKeyword_1() { return cOeqKeyword_1; }

		//"ogt"
		public Keyword getOgtKeyword_2() { return cOgtKeyword_2; }

		//"oge"
		public Keyword getOgeKeyword_3() { return cOgeKeyword_3; }

		//"olt"
		public Keyword getOltKeyword_4() { return cOltKeyword_4; }

		//"ole"
		public Keyword getOleKeyword_5() { return cOleKeyword_5; }

		//"one"
		public Keyword getOneKeyword_6() { return cOneKeyword_6; }

		//"ord"
		public Keyword getOrdKeyword_7() { return cOrdKeyword_7; }

		//"ueq"
		public Keyword getUeqKeyword_8() { return cUeqKeyword_8; }

		//"ugt"
		public Keyword getUgtKeyword_9() { return cUgtKeyword_9; }

		//"uge"
		public Keyword getUgeKeyword_10() { return cUgeKeyword_10; }

		//"ult"
		public Keyword getUltKeyword_11() { return cUltKeyword_11; }

		//"ule"
		public Keyword getUleKeyword_12() { return cUleKeyword_12; }

		//"une"
		public Keyword getUneKeyword_13() { return cUneKeyword_13; }

		//"uno"
		public Keyword getUnoKeyword_14() { return cUnoKeyword_14; }

		//"true"
		public Keyword getTrueKeyword_15() { return cTrueKeyword_15; }
	}

	public class VISIBILITYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VISIBILITY");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cDefaultKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHiddenKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cProtectedKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//VISIBILITY:
		//
		//	"default" | "hidden" | "protected";
		public ParserRule getRule() { return rule; }

		//"default" | "hidden" | "protected"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"default"
		public Keyword getDefaultKeyword_0() { return cDefaultKeyword_0; }

		//"hidden"
		public Keyword getHiddenKeyword_1() { return cHiddenKeyword_1; }

		//"protected"
		public Keyword getProtectedKeyword_2() { return cProtectedKeyword_2; }
	}

	public class LINKAGEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LINKAGE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPrivateKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLinker_privateKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLinker_private_weakKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cAvailable_externallyKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cLinkonceKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cCommonKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cAppendingKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cExtern_weakKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cLinkonce_odrKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cLinkonce_odr_auto_hideKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cDllimportKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cDllexportKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final RuleCall cALIAS_LINKAGEParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		
		//LINKAGE:
		//
		//	"private" | "linker_private" | "linker_private_weak" | "available_externally" | "linkonce" | "common" | "appending" |
		//
		//	"extern_weak" | "linkonce_odr" | "linkonce_odr_auto_hide" | "dllimport" | "dllexport" | ALIAS_LINKAGE;
		public ParserRule getRule() { return rule; }

		//"private" | "linker_private" | "linker_private_weak" | "available_externally" | "linkonce" | "common" | "appending" |
		//
		//"extern_weak" | "linkonce_odr" | "linkonce_odr_auto_hide" | "dllimport" | "dllexport" | ALIAS_LINKAGE
		public Alternatives getAlternatives() { return cAlternatives; }

		//"private"
		public Keyword getPrivateKeyword_0() { return cPrivateKeyword_0; }

		//"linker_private"
		public Keyword getLinker_privateKeyword_1() { return cLinker_privateKeyword_1; }

		//"linker_private_weak"
		public Keyword getLinker_private_weakKeyword_2() { return cLinker_private_weakKeyword_2; }

		//"available_externally"
		public Keyword getAvailable_externallyKeyword_3() { return cAvailable_externallyKeyword_3; }

		//"linkonce"
		public Keyword getLinkonceKeyword_4() { return cLinkonceKeyword_4; }

		//"common"
		public Keyword getCommonKeyword_5() { return cCommonKeyword_5; }

		//"appending"
		public Keyword getAppendingKeyword_6() { return cAppendingKeyword_6; }

		//"extern_weak"
		public Keyword getExtern_weakKeyword_7() { return cExtern_weakKeyword_7; }

		//"linkonce_odr"
		public Keyword getLinkonce_odrKeyword_8() { return cLinkonce_odrKeyword_8; }

		//"linkonce_odr_auto_hide"
		public Keyword getLinkonce_odr_auto_hideKeyword_9() { return cLinkonce_odr_auto_hideKeyword_9; }

		//"dllimport"
		public Keyword getDllimportKeyword_10() { return cDllimportKeyword_10; }

		//"dllexport"
		public Keyword getDllexportKeyword_11() { return cDllexportKeyword_11; }

		//ALIAS_LINKAGE
		public RuleCall getALIAS_LINKAGEParserRuleCall_12() { return cALIAS_LINKAGEParserRuleCall_12; }
	}

	public class ALIAS_LINKAGEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ALIAS_LINKAGE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cExternalKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cInternalKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cWeakKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cWeak_odrKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//ALIAS_LINKAGE:
		//
		//	"external" | "internal" | "weak" | "weak_odr";
		public ParserRule getRule() { return rule; }

		//"external" | "internal" | "weak" | "weak_odr"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"external"
		public Keyword getExternalKeyword_0() { return cExternalKeyword_0; }

		//"internal"
		public Keyword getInternalKeyword_1() { return cInternalKeyword_1; }

		//"weak"
		public Keyword getWeakKeyword_2() { return cWeakKeyword_2; }

		//"weak_odr"
		public Keyword getWeak_odrKeyword_3() { return cWeak_odrKeyword_3; }
	}
	
	
	private LLVMElements pLLVM;
	private TerminalRule tINT;
	private TerminalRule tVALID_ID;
	private TerminalRule tINT_TYPE;
	private TerminalRule tSTRING;
	private TerminalRule tCSTRING;
	private TerminalRule tOREST;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tPOINTER;
	private ID_FQNElements pID_FQN;
	private AbstractElementElements pAbstractElement;
	private TopLevelEntityElements pTopLevelEntity;
	private MainLevelEntityElements pMainLevelEntity;
	private TypeDefinitionElements pTypeDefinition;
	private GlobalDefinitionElements pGlobalDefinition;
	private FunctionDefinitionElements pFunctionDefinition;
	private AliasDefinitionElements pAliasDefinition;
	private TypeUseElements pTypeUse;
	private AddressUseElements pAddressUse;
	private AddressElements pAddress;
	private PredefinedElements pPredefined;
	private Primitive_TypeElements pPrimitive_Type;
	private InitializersElements pInitializers;
	private FloatingPoint_TypeElements pFloatingPoint_Type;
	private Predefined_TypesElements pPredefined_Types;
	private VectorElements pVector;
	private ArrayElements pArray;
	private Aggregate_TypesElements pAggregate_Types;
	private ConstantElements pConstant;
	private NonConstantValueElements pNonConstantValue;
	private ValueElements pValue;
	private ValueStructElements pValueStruct;
	private StructureElements pStructure;
	private OpaqueElements pOpaque;
	private ParameterListElements pParameterList;
	private TypeListElements pTypeList;
	private FunctionBodyElements pFunctionBody;
	private BasicBlockElements pBasicBlock;
	private InstructionUseElements pInstructionUse;
	private Ret_InstrElements pRet_Instr;
	private InstructionElements pInstruction;
	private ARITHMETIC_OPElements pARITHMETIC_OP;
	private LOGICAL_OPElements pLOGICAL_OP;
	private CastElements pCast;
	private MetadataValueElements pMetadataValue;
	private ALIGNMENTElements pALIGNMENT;
	private GetElementPtrElements pGetElementPtr;
	private ExtractValueElements pExtractValue;
	private InsertValueElements pInsertValue;
	private FenceElements pFence;
	private CmpXchgElements pCmpXchg;
	private AtomicRMWElements pAtomicRMW;
	private LoadElements pLoad;
	private StoreElements pStore;
	private CallElements pCall;
	private AllocElements pAlloc;
	private PHIElements pPHI;
	private ValuePairElements pValuePair;
	private LandingPadElements pLandingPad;
	private ClauseElements pClause;
	private SelectElements pSelect;
	private VA_ArgElements pVA_Arg;
	private ExtractElementElements pExtractElement;
	private InsertElementElements pInsertElement;
	private ShuffleVectorElements pShuffleVector;
	private CompareElements pCompare;
	private IndirectBranchElements pIndirectBranch;
	private LabelListElements pLabelList;
	private SwitchElements pSwitch;
	private JumpTableElements pJumpTable;
	private InvokeElements pInvoke;
	private ResumeElements pResume;
	private UnreachableElements pUnreachable;
	private ReturnElements pReturn;
	private BranchElements pBranch;
	private ATOMIC_ORDERINGElements pATOMIC_ORDERING;
	private BIN_OPElements pBIN_OP;
	private RETURN_ATTRIBUTESElements pRETURN_ATTRIBUTES;
	private CallingConvElements pCallingConv;
	private FUNCTION_ATTRIBUTESElements pFUNCTION_ATTRIBUTES;
	private Cast_OPElements pCast_OP;
	private I_PREDICATESElements pI_PREDICATES;
	private F_PREDICATESElements pF_PREDICATES;
	private VISIBILITYElements pVISIBILITY;
	private LINKAGEElements pLINKAGE;
	private ALIAS_LINKAGEElements pALIAS_LINKAGE;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public LLVMGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.upb.llvm_parser.LLVM".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//LLVM:
	//
	//	elements+=AbstractElement*;
	public LLVMElements getLLVMAccess() {
		return (pLLVM != null) ? pLLVM : (pLLVM = new LLVMElements());
	}
	
	public ParserRule getLLVMRule() {
		return getLLVMAccess().getRule();
	}

	//terminal INT returns ecore::EInt:
	//
	//	"-"? "0".."9"+;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal VALID_ID:
	//
	//	(("%" | "@") "."* (("a".."z" | "A".."Z" | "_" | "0".."9")+ | STRING) | "(" VALID_ID POINTER? ")") ("." (("a".."z" |
	//
	//	"A".."Z" | "_" | "0".."9")+ | "(" ("a".."z" | "A".."Z" | "_" | "0".."9")+ POINTER? ")"))*;
	public TerminalRule getVALID_IDRule() {
		return (tVALID_ID != null) ? tVALID_ID : (tVALID_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "VALID_ID"));
	} 

	//terminal INT_TYPE:
	//
	//	"i" "0".."9"+ POINTER?;
	public TerminalRule getINT_TYPERule() {
		return (tINT_TYPE != null) ? tINT_TYPE : (tINT_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT_TYPE"));
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "0" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" |
	//
	//	"t" | "n" | "f" | "r" | "u" | "0" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal CSTRING:
	//
	//	"c" STRING;
	public TerminalRule getCSTRINGRule() {
		return (tCSTRING != null) ? tCSTRING : (tCSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CSTRING"));
	} 

	//terminal OREST:
	//
	//	"(...)" POINTER?;
	public TerminalRule getORESTRule() {
		return (tOREST != null) ? tOREST : (tOREST = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OREST"));
	} 

	//terminal SL_COMMENT:
	//
	//	";" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal POINTER:
	//
	//	"*"+;
	public TerminalRule getPOINTERRule() {
		return (tPOINTER != null) ? tPOINTER : (tPOINTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "POINTER"));
	} 

	//ID_FQN:
	//
	//	(ID | "catch" | "invoke" | "resume" | "switch" | "true" | "false") ("." (ID | "catch" | "invoke" | "resume" |
	//
	//	"switch" | "true" | "false"))*;
	public ID_FQNElements getID_FQNAccess() {
		return (pID_FQN != null) ? pID_FQN : (pID_FQN = new ID_FQNElements());
	}
	
	public ParserRule getID_FQNRule() {
		return getID_FQNAccess().getRule();
	}

	//AbstractElement:
	//
	//	TopLevelEntity SL_COMMENT? | MainLevelEntity SL_COMMENT?;
	public AbstractElementElements getAbstractElementAccess() {
		return (pAbstractElement != null) ? pAbstractElement : (pAbstractElement = new AbstractElementElements());
	}
	
	public ParserRule getAbstractElementRule() {
		return getAbstractElementAccess().getRule();
	}

	//TopLevelEntity:
	//
	//	"module" "asm" module=STRING | "target" ("datalayout" | "triple") "=" target=STRING | "deplibs" "=" "[" libs+=STRING
	//
	//	("," libs+=STRING)* "]";
	public TopLevelEntityElements getTopLevelEntityAccess() {
		return (pTopLevelEntity != null) ? pTopLevelEntity : (pTopLevelEntity = new TopLevelEntityElements());
	}
	
	public ParserRule getTopLevelEntityRule() {
		return getTopLevelEntityAccess().getRule();
	}

	/// *
	//
	// * This rule is used to devide the Function Definitions form the Variable Definitions.
	//
	// * / MainLevelEntity:
	//
	//	TypeDefinition | GlobalDefinition | FunctionDefinition | AliasDefinition;
	public MainLevelEntityElements getMainLevelEntityAccess() {
		return (pMainLevelEntity != null) ? pMainLevelEntity : (pMainLevelEntity = new MainLevelEntityElements());
	}
	
	public ParserRule getMainLevelEntityRule() {
		return getMainLevelEntityAccess().getRule();
	}

	//TypeDefinition:
	//
	//	address=Address "=" ("type" (struct=Structure | Opaque));
	public TypeDefinitionElements getTypeDefinitionAccess() {
		return (pTypeDefinition != null) ? pTypeDefinition : (pTypeDefinition = new TypeDefinitionElements());
	}
	
	public ParserRule getTypeDefinitionRule() {
		return getTypeDefinitionAccess().getRule();
	}

	//GlobalDefinition:
	//
	//	adress=Address "=" (LINKAGE | "global" | "unnamed_addr" | "constant")* type=(TypeUse | Aggregate_Types) value=Value
	//
	//	("," ALIGNMENT)?;
	public GlobalDefinitionElements getGlobalDefinitionAccess() {
		return (pGlobalDefinition != null) ? pGlobalDefinition : (pGlobalDefinition = new GlobalDefinitionElements());
	}
	
	public ParserRule getGlobalDefinitionRule() {
		return getGlobalDefinitionAccess().getRule();
	}

	//FunctionDefinition:
	//
	//	"define" LINKAGE? VISIBILITY? CallingConv? RETURN_ATTRIBUTES? returnType=TypeUse address=Address pl=ParameterList
	//
	//	"unnamed_addr"? FUNCTION_ATTRIBUTES* ("section " STRING)? ALIGNMENT? body=FunctionBody | "declare" LINKAGE?
	//
	//	VISIBILITY? CallingConv? RETURN_ATTRIBUTES? returnType=TypeUse address=Address (tList=TypeList | OREST)
	//
	//	"unnamed_addr"? FUNCTION_ATTRIBUTES* ("section " STRING)? ALIGNMENT?;
	public FunctionDefinitionElements getFunctionDefinitionAccess() {
		return (pFunctionDefinition != null) ? pFunctionDefinition : (pFunctionDefinition = new FunctionDefinitionElements());
	}
	
	public ParserRule getFunctionDefinitionRule() {
		return getFunctionDefinitionAccess().getRule();
	}

	//AliasDefinition:
	//
	//	address=Address "=" "alias" ALIAS_LINKAGE? VISIBILITY? aliastype=TypeUse aliasvalue=Value aliasee=TypeUse;
	public AliasDefinitionElements getAliasDefinitionAccess() {
		return (pAliasDefinition != null) ? pAliasDefinition : (pAliasDefinition = new AliasDefinitionElements());
	}
	
	public ParserRule getAliasDefinitionRule() {
		return getAliasDefinitionAccess().getRule();
	}

	//TypeUse:
	//
	//	(Predefined | AddressUse) OREST?;
	public TypeUseElements getTypeUseAccess() {
		return (pTypeUse != null) ? pTypeUse : (pTypeUse = new TypeUseElements());
	}
	
	public ParserRule getTypeUseRule() {
		return getTypeUseAccess().getRule();
	}

	//AddressUse:
	//
	//	address=[Address|VALID_ID] pointer=POINTER?;
	public AddressUseElements getAddressUseAccess() {
		return (pAddressUse != null) ? pAddressUse : (pAddressUse = new AddressUseElements());
	}
	
	public ParserRule getAddressUseRule() {
		return getAddressUseAccess().getRule();
	}

	//Address:
	//
	//	name=VALID_ID;
	public AddressElements getAddressAccess() {
		return (pAddress != null) ? pAddress : (pAddress = new AddressElements());
	}
	
	public ParserRule getAddressRule() {
		return getAddressAccess().getRule();
	}

	//Predefined:
	//
	//	type=Predefined_Types pointer=POINTER?;
	public PredefinedElements getPredefinedAccess() {
		return (pPredefined != null) ? pPredefined : (pPredefined = new PredefinedElements());
	}
	
	public ParserRule getPredefinedRule() {
		return getPredefinedAccess().getRule();
	}

	//Primitive_Type:
	//
	//	"void" | "null" | "label" | "undef" | "true" | "false";
	public Primitive_TypeElements getPrimitive_TypeAccess() {
		return (pPrimitive_Type != null) ? pPrimitive_Type : (pPrimitive_Type = new Primitive_TypeElements());
	}
	
	public ParserRule getPrimitive_TypeRule() {
		return getPrimitive_TypeAccess().getRule();
	}

	//Initializers:
	//
	//	"zeroinitializer";
	public InitializersElements getInitializersAccess() {
		return (pInitializers != null) ? pInitializers : (pInitializers = new InitializersElements());
	}
	
	public ParserRule getInitializersRule() {
		return getInitializersAccess().getRule();
	}

	//FloatingPoint_Type:
	//
	//	"half" | "float" | "double" | "x86_fp80" | "fp128" | "ppc_fp128";
	public FloatingPoint_TypeElements getFloatingPoint_TypeAccess() {
		return (pFloatingPoint_Type != null) ? pFloatingPoint_Type : (pFloatingPoint_Type = new FloatingPoint_TypeElements());
	}
	
	public ParserRule getFloatingPoint_TypeRule() {
		return getFloatingPoint_TypeAccess().getRule();
	}

	//Predefined_Types:
	//
	//	Primitive_Type | INT_TYPE | FloatingPoint_Type;
	public Predefined_TypesElements getPredefined_TypesAccess() {
		return (pPredefined_Types != null) ? pPredefined_Types : (pPredefined_Types = new Predefined_TypesElements());
	}
	
	public ParserRule getPredefined_TypesRule() {
		return getPredefined_TypesAccess().getRule();
	}

	//Vector:
	//
	//	"<" INT "x" type=TypeUse ">";
	public VectorElements getVectorAccess() {
		return (pVector != null) ? pVector : (pVector = new VectorElements());
	}
	
	public ParserRule getVectorRule() {
		return getVectorAccess().getRule();
	}

	//Array:
	//
	//	{Array} ("[" INT "x" type=TypeUse "]" | "[]" | "[" "]") POINTER?;
	public ArrayElements getArrayAccess() {
		return (pArray != null) ? pArray : (pArray = new ArrayElements());
	}
	
	public ParserRule getArrayRule() {
		return getArrayAccess().getRule();
	}

	//Aggregate_Types:
	//
	//	Structure | Array | Vector;
	public Aggregate_TypesElements getAggregate_TypesAccess() {
		return (pAggregate_Types != null) ? pAggregate_Types : (pAggregate_Types = new Aggregate_TypesElements());
	}
	
	public ParserRule getAggregate_TypesRule() {
		return getAggregate_TypesAccess().getRule();
	}

	//Constant:
	//
	//	value=INT;
	public ConstantElements getConstantAccess() {
		return (pConstant != null) ? pConstant : (pConstant = new ConstantElements());
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	//NonConstantValue:
	//
	//	name=VALID_ID pointer=POINTER?;
	public NonConstantValueElements getNonConstantValueAccess() {
		return (pNonConstantValue != null) ? pNonConstantValue : (pNonConstantValue = new NonConstantValueElements());
	}
	
	public ParserRule getNonConstantValueRule() {
		return getNonConstantValueAccess().getRule();
	}

	//Value:
	//
	//	Cast | Constant | NonConstantValue | primitive=(Primitive_Type | Initializers);
	public ValueElements getValueAccess() {
		return (pValue != null) ? pValue : (pValue = new ValueElements());
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//ValueStruct:
	//
	//	"{" types+=TypeUse "()*"? Value+=Value ("," types+=TypeUse "()*"? Value+=Value) "}";
	public ValueStructElements getValueStructAccess() {
		return (pValueStruct != null) ? pValueStruct : (pValueStruct = new ValueStructElements());
	}
	
	public ParserRule getValueStructRule() {
		return getValueStructAccess().getRule();
	}

	//Structure:
	//
	//	{Structure} "{" (types+=TypeUse ("," types+=TypeUse)*)? "}" POINTER?;
	public StructureElements getStructureAccess() {
		return (pStructure != null) ? pStructure : (pStructure = new StructureElements());
	}
	
	public ParserRule getStructureRule() {
		return getStructureAccess().getRule();
	}

	//Opaque:
	//
	//	"opaque";
	public OpaqueElements getOpaqueAccess() {
		return (pOpaque != null) ? pOpaque : (pOpaque = new OpaqueElements());
	}
	
	public ParserRule getOpaqueRule() {
		return getOpaqueAccess().getRule();
	}

	//ParameterList:
	//
	//	{ParameterList} ("()" | "(" (types+=TypeUse Lists+=TypeList? RETURN_ATTRIBUTES* variables+=Value ("," types+=TypeUse
	//
	//	Lists+=TypeList? RETURN_ATTRIBUTES* variables+=Value)*)? ")");
	public ParameterListElements getParameterListAccess() {
		return (pParameterList != null) ? pParameterList : (pParameterList = new ParameterListElements());
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}

	//TypeList:
	//
	//	{TypeList} ("()" | "(" (types+=TypeUse typelists+=TypeList? RETURN_ATTRIBUTES? ("," types+=TypeUse
	//
	//	typelists+=TypeList? RETURN_ATTRIBUTES?)*)? (")" | ")*" | ")**" | ")***" | ")****" | ")*****"));
	public TypeListElements getTypeListAccess() {
		return (pTypeList != null) ? pTypeList : (pTypeList = new TypeListElements());
	}
	
	public ParserRule getTypeListRule() {
		return getTypeListAccess().getRule();
	}

	//FunctionBody:
	//
	//	meta+=MetadataValue* "{" blocks+=BasicBlock+ "}" meta+=MetadataValue*;
	public FunctionBodyElements getFunctionBodyAccess() {
		return (pFunctionBody != null) ? pFunctionBody : (pFunctionBody = new FunctionBodyElements());
	}
	
	public ParserRule getFunctionBodyRule() {
		return getFunctionBodyAccess().getRule();
	}

	//BasicBlock:
	//
	//	(label=ID_FQN ":") instructions+=(InstructionUse | Instruction)* (retadr=VALID_ID "=")? terminator=Ret_Instr;
	public BasicBlockElements getBasicBlockAccess() {
		return (pBasicBlock != null) ? pBasicBlock : (pBasicBlock = new BasicBlockElements());
	}
	
	public ParserRule getBasicBlockRule() {
		return getBasicBlockAccess().getRule();
	}

	//InstructionUse:
	//
	//	reg_or_var=VALID_ID "=" instruction=Instruction;
	public InstructionUseElements getInstructionUseAccess() {
		return (pInstructionUse != null) ? pInstructionUse : (pInstructionUse = new InstructionUseElements());
	}
	
	public ParserRule getInstructionUseRule() {
		return getInstructionUseAccess().getRule();
	}

	//Ret_Instr:
	//
	//	Return | Branch | Switch | IndirectBranch | Invoke | Resume | Unreachable;
	public Ret_InstrElements getRet_InstrAccess() {
		return (pRet_Instr != null) ? pRet_Instr : (pRet_Instr = new Ret_InstrElements());
	}
	
	public ParserRule getRet_InstrRule() {
		return getRet_InstrAccess().getRule();
	}

	//Instruction:
	//
	//	"volatile"? Load | "volatile"? Store | Fence | GetElementPtr | LOGICAL_OP | ARITHMETIC_OP | Compare | Cast |
	//
	//	ShuffleVector | InsertElement | ExtractElement | InsertValue | ExtractValue | Alloc | CmpXchg | AtomicRMW | PHI |
	//
	//	Select | Call | VA_Arg | LandingPad;
	public InstructionElements getInstructionAccess() {
		return (pInstruction != null) ? pInstruction : (pInstruction = new InstructionElements());
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}

	//ARITHMETIC_OP:
	//
	//	("add" | "fadd" | "sub" | "fsub" | "mul" | "fmul" | "udiv" | "sdiv" | "fdiv" | "urem" | "srem" | "frem") (("nsw" |
	//
	//	"nuw") ("nuw" | "nsw")?)? optype=TypeUse value1=Value "," value2=Value;
	public ARITHMETIC_OPElements getARITHMETIC_OPAccess() {
		return (pARITHMETIC_OP != null) ? pARITHMETIC_OP : (pARITHMETIC_OP = new ARITHMETIC_OPElements());
	}
	
	public ParserRule getARITHMETIC_OPRule() {
		return getARITHMETIC_OPAccess().getRule();
	}

	//LOGICAL_OP:
	//
	//	("shl" | "lshr" | "ashr" | "and" | "or" | "xor") optype=TypeUse value1=Value "," value2=Value;
	public LOGICAL_OPElements getLOGICAL_OPAccess() {
		return (pLOGICAL_OP != null) ? pLOGICAL_OP : (pLOGICAL_OP = new LOGICAL_OPElements());
	}
	
	public ParserRule getLOGICAL_OPRule() {
		return getLOGICAL_OPAccess().getRule();
	}

	//Cast:
	//
	//	Cast_OP ("(" from=TypeUse value=Value "to" to=TypeUse ")" | from=TypeUse value=Value "to" to=TypeUse);
	public CastElements getCastAccess() {
		return (pCast != null) ? pCast : (pCast = new CastElements());
	}
	
	public ParserRule getCastRule() {
		return getCastAccess().getRule();
	}

	//MetadataValue:
	//
	//	("!" INT | "!{" ID_FQN "}" | "!" ID_FQN) ("=" ("!" INT | "!{" ID_FQN "}" | "!" ID_FQN | "metadata" (("!" "{" | "!{")
	//
	//	("metadata" "!" STRING ("," ("metadata" "!" INT))? | INT_TYPE INT "," INT_TYPE INT) "}")?))?;
	public MetadataValueElements getMetadataValueAccess() {
		return (pMetadataValue != null) ? pMetadataValue : (pMetadataValue = new MetadataValueElements());
	}
	
	public ParserRule getMetadataValueRule() {
		return getMetadataValueAccess().getRule();
	}

	//ALIGNMENT:
	//
	//	"align" //must be a power of 2
	//
	//	INT;
	public ALIGNMENTElements getALIGNMENTAccess() {
		return (pALIGNMENT != null) ? pALIGNMENT : (pALIGNMENT = new ALIGNMENTElements());
	}
	
	public ParserRule getALIGNMENTRule() {
		return getALIGNMENTAccess().getRule();
	}

	//GetElementPtr:
	//
	//	"getelementptr" "inbounds"? "("? ((elementtype=TypeUse types=TypeList? | elementarray=Array) element=Value (","
	//
	//	indicetypes+=TypeUse indices+=Value)*);
	public GetElementPtrElements getGetElementPtrAccess() {
		return (pGetElementPtr != null) ? pGetElementPtr : (pGetElementPtr = new GetElementPtrElements());
	}
	
	public ParserRule getGetElementPtrRule() {
		return getGetElementPtrAccess().getRule();
	}

	//ExtractValue:
	//
	//	"extractvalue" (array=Array | struct=Structure) value=Value ("," index+=INT)+;
	public ExtractValueElements getExtractValueAccess() {
		return (pExtractValue != null) ? pExtractValue : (pExtractValue = new ExtractValueElements());
	}
	
	public ParserRule getExtractValueRule() {
		return getExtractValueAccess().getRule();
	}

	//InsertValue:
	//
	//	"insertvalue" struct=Structure value=Value "," inserttype=TypeUse insertvalue=Value ("," index+=INT)+;
	public InsertValueElements getInsertValueAccess() {
		return (pInsertValue != null) ? pInsertValue : (pInsertValue = new InsertValueElements());
	}
	
	public ParserRule getInsertValueRule() {
		return getInsertValueAccess().getRule();
	}

	//Fence:
	//
	//	"fence" "singlethread"? ordering=ATOMIC_ORDERING;
	public FenceElements getFenceAccess() {
		return (pFence != null) ? pFence : (pFence = new FenceElements());
	}
	
	public ParserRule getFenceRule() {
		return getFenceAccess().getRule();
	}

	//CmpXchg:
	//
	//	"cmpxchg" "volatile"? adresstype=TypeUse adress=Value "," comparetype=TypeUse comparevalue=Value "," newtype=TypeUse
	//
	//	newvalue=Value "singlethread"? ordering=ATOMIC_ORDERING;
	public CmpXchgElements getCmpXchgAccess() {
		return (pCmpXchg != null) ? pCmpXchg : (pCmpXchg = new CmpXchgElements());
	}
	
	public ParserRule getCmpXchgRule() {
		return getCmpXchgAccess().getRule();
	}

	//AtomicRMW:
	//
	//	"atomicrmw" "volatile"? BIN_OP adresstype=TypeUse adress=Value "," optype=TypeUse opvalue=Value "singlethread"?
	//
	//	ordering=ATOMIC_ORDERING;
	public AtomicRMWElements getAtomicRMWAccess() {
		return (pAtomicRMW != null) ? pAtomicRMW : (pAtomicRMW = new AtomicRMWElements());
	}
	
	public ParserRule getAtomicRMWRule() {
		return getAtomicRMWAccess().getRule();
	}

	//Load:
	//
	//	"load" "volatile"? adresstype=TypeUse types=TypeList? adress=Value ("," (ALIGNMENT | MetadataValue+))* | "load"
	//
	//	"atomic" "volatile"? adresstype=TypeUse adress=Value types=TypeList? "singlethread"? ordering=ATOMIC_ORDERING (","
	//
	//	"align" index=INT)?;
	public LoadElements getLoadAccess() {
		return (pLoad != null) ? pLoad : (pLoad = new LoadElements());
	}
	
	public ParserRule getLoadRule() {
		return getLoadAccess().getRule();
	}

	//Store:
	//
	//	"store" "volatile"? newtype=TypeUse types+=TypeList? (newvalue=Value | newelement=GetElementPtr ")") ","
	//
	//	adresstype=TypeUse types+=TypeList? adress=Value ("," (ALIGNMENT | MetadataValue+))* | "store" "atomic" "volatile"?
	//
	//	newtype=TypeUse types+=TypeList? newvalue=Value "," adresstype=TypeUse types+=TypeList? adress=Value "singlethread"?
	//
	//	ordering=ATOMIC_ORDERING ("," "align" index=INT)?;
	public StoreElements getStoreAccess() {
		return (pStore != null) ? pStore : (pStore = new StoreElements());
	}
	
	public ParserRule getStoreRule() {
		return getStoreAccess().getRule();
	}

	//Call:
	//
	//	"tail"? "call" CallingConv? RETURN_ATTRIBUTES? adresstype=TypeUse (adress=Value | "asm" "sideeffect"? STRING ","
	//
	//	STRING) pList=ParameterList FUNCTION_ATTRIBUTES* ("," "!srcloc" "!" INT)*;
	public CallElements getCallAccess() {
		return (pCall != null) ? pCall : (pCall = new CallElements());
	}
	
	public ParserRule getCallRule() {
		return getCallAccess().getRule();
	}

	//Alloc:
	//
	//	"alloca" (type=TypeUse typelist=TypeList?) ("," numelementstype=TypeUse numelementsvalue=Value)? ("," ALIGNMENT)?;
	public AllocElements getAllocAccess() {
		return (pAlloc != null) ? pAlloc : (pAlloc = new AllocElements());
	}
	
	public ParserRule getAllocRule() {
		return getAllocAccess().getRule();
	}

	//PHI:
	//
	//	"phi" type=TypeUse "[" values+=ValuePair "]" ("," "[" values+=ValuePair "]")*;
	public PHIElements getPHIAccess() {
		return (pPHI != null) ? pPHI : (pPHI = new PHIElements());
	}
	
	public ParserRule getPHIRule() {
		return getPHIAccess().getRule();
	}

	//ValuePair:
	//
	//	value1=Value "," value2=Value;
	public ValuePairElements getValuePairAccess() {
		return (pValuePair != null) ? pValuePair : (pValuePair = new ValuePairElements());
	}
	
	public ParserRule getValuePairRule() {
		return getValuePairAccess().getRule();
	}

	//LandingPad:
	//
	//	"landingpad" struct=Structure "personality" personalitytype=TypeUse personalityvalue=Value ("cleanup" clause+=Clause*
	//
	//	| clause+=Clause+);
	public LandingPadElements getLandingPadAccess() {
		return (pLandingPad != null) ? pLandingPad : (pLandingPad = new LandingPadElements());
	}
	
	public ParserRule getLandingPadRule() {
		return getLandingPadAccess().getRule();
	}

	//Clause:
	//
	//	"catch" type=TypeUse value=Value | "filter" filterarray=Array constant=Value;
	public ClauseElements getClauseAccess() {
		return (pClause != null) ? pClause : (pClause = new ClauseElements());
	}
	
	public ParserRule getClauseRule() {
		return getClauseAccess().getRule();
	}

	//Select:
	//
	//	"select" conditiontype=TypeUse conditionvalue=Value "," val1type=TypeUse val1value=Value "," val2type=TypeUse
	//
	//	val2value=Value;
	public SelectElements getSelectAccess() {
		return (pSelect != null) ? pSelect : (pSelect = new SelectElements());
	}
	
	public ParserRule getSelectRule() {
		return getSelectAccess().getRule();
	}

	//VA_Arg:
	//
	//	"va_arg" listtype=TypeUse listvalue=Value "," argType=TypeUse;
	public VA_ArgElements getVA_ArgAccess() {
		return (pVA_Arg != null) ? pVA_Arg : (pVA_Arg = new VA_ArgElements());
	}
	
	public ParserRule getVA_ArgRule() {
		return getVA_ArgAccess().getRule();
	}

	//ExtractElement:
	//
	//	"extractelement" vectortype=TypeUse vectorvalue=Value "," indextype=TypeUse index=Value;
	public ExtractElementElements getExtractElementAccess() {
		return (pExtractElement != null) ? pExtractElement : (pExtractElement = new ExtractElementElements());
	}
	
	public ParserRule getExtractElementRule() {
		return getExtractElementAccess().getRule();
	}

	//InsertElement:
	//
	//	"insertelement" vectortype=TypeUse vectorvalue=Value "," scalartype=TypeUse scalarvalue=Value "," indextype=TypeUse
	//
	//	index=Value;
	public InsertElementElements getInsertElementAccess() {
		return (pInsertElement != null) ? pInsertElement : (pInsertElement = new InsertElementElements());
	}
	
	public ParserRule getInsertElementRule() {
		return getInsertElementAccess().getRule();
	}

	//ShuffleVector:
	//
	//	"shufflevector" val1type=TypeUse val1value=Value "," val2type=TypeUse val2value=Value "," masktype=TypeUse
	//
	//	maskvalue=Value;
	public ShuffleVectorElements getShuffleVectorAccess() {
		return (pShuffleVector != null) ? pShuffleVector : (pShuffleVector = new ShuffleVectorElements());
	}
	
	public ParserRule getShuffleVectorRule() {
		return getShuffleVectorAccess().getRule();
	}

	//Compare:
	//
	//	"icmp" I_PREDICATES comptype=TypeUse value1=Value "," value2=Value | "fcmp" F_PREDICATES comptype=TypeUse
	//
	//	value1=Value "," value2=Value;
	public CompareElements getCompareAccess() {
		return (pCompare != null) ? pCompare : (pCompare = new CompareElements());
	}
	
	public ParserRule getCompareRule() {
		return getCompareAccess().getRule();
	}

	//IndirectBranch:
	//
	//	"indirectbr" adresstype=TypeUse adress=Value "," "[" lList=LabelList? "]";
	public IndirectBranchElements getIndirectBranchAccess() {
		return (pIndirectBranch != null) ? pIndirectBranch : (pIndirectBranch = new IndirectBranchElements());
	}
	
	public ParserRule getIndirectBranchRule() {
		return getIndirectBranchAccess().getRule();
	}

	//LabelList:
	//
	//	(labeltype+=TypeUse labels+=Value)+;
	public LabelListElements getLabelListAccess() {
		return (pLabelList != null) ? pLabelList : (pLabelList = new LabelListElements());
	}
	
	public ParserRule getLabelListRule() {
		return getLabelListAccess().getRule();
	}

	//Switch:
	//
	//	"switch" comptype=TypeUse compvalue=Value "," defaulttype=TypeUse defaultvalue=Value "[" jTable=JumpTable? "]";
	public SwitchElements getSwitchAccess() {
		return (pSwitch != null) ? pSwitch : (pSwitch = new SwitchElements());
	}
	
	public ParserRule getSwitchRule() {
		return getSwitchAccess().getRule();
	}

	//JumpTable:
	//
	//	(jtypes+=TypeUse jvalues+=Value "," destinationtypes+=TypeUse destinations+=Value)+;
	public JumpTableElements getJumpTableAccess() {
		return (pJumpTable != null) ? pJumpTable : (pJumpTable = new JumpTableElements());
	}
	
	public ParserRule getJumpTableRule() {
		return getJumpTableAccess().getRule();
	}

	//Invoke:
	//
	//	"invoke" CallingConv? RETURN_ATTRIBUTES? functiontype=TypeUse name=Address pList=ParameterList FUNCTION_ATTRIBUTES*
	//
	//	"to" totype=TypeUse tovalue=Value "unwind" unwindtype=TypeUse unwindvalue=Value;
	public InvokeElements getInvokeAccess() {
		return (pInvoke != null) ? pInvoke : (pInvoke = new InvokeElements());
	}
	
	public ParserRule getInvokeRule() {
		return getInvokeAccess().getRule();
	}

	//Resume:
	//
	//	"resume" resumestruct=Structure resumevalue=Value;
	public ResumeElements getResumeAccess() {
		return (pResume != null) ? pResume : (pResume = new ResumeElements());
	}
	
	public ParserRule getResumeRule() {
		return getResumeAccess().getRule();
	}

	//Unreachable:
	//
	//	{Unreachable} "unreachable";
	public UnreachableElements getUnreachableAccess() {
		return (pUnreachable != null) ? pUnreachable : (pUnreachable = new UnreachableElements());
	}
	
	public ParserRule getUnreachableRule() {
		return getUnreachableAccess().getRule();
	}

	//Return:
	//
	//	{Return} "ret" "void" ("," "!dbg" "!" INT)? | "ret" returntype=TypeUse returnvalue=Value ("," "!dbg" "!" INT)?;
	public ReturnElements getReturnAccess() {
		return (pReturn != null) ? pReturn : (pReturn = new ReturnElements());
	}
	
	public ParserRule getReturnRule() {
		return getReturnAccess().getRule();
	}

	//Branch:
	//
	//	"br" "label" destination=Value | "br" INT_TYPE condvalue=Value "," labelTruetype=TypeUse labelTrue=Value ","
	//
	//	labelFalsetype=TypeUse labelFalse=Value;
	public BranchElements getBranchAccess() {
		return (pBranch != null) ? pBranch : (pBranch = new BranchElements());
	}
	
	public ParserRule getBranchRule() {
		return getBranchAccess().getRule();
	}

	//ATOMIC_ORDERING:
	//
	//	"unordered" | "monotonic" | "aquire" | "release" | "acq_rel" | "seq_cst";
	public ATOMIC_ORDERINGElements getATOMIC_ORDERINGAccess() {
		return (pATOMIC_ORDERING != null) ? pATOMIC_ORDERING : (pATOMIC_ORDERING = new ATOMIC_ORDERINGElements());
	}
	
	public ParserRule getATOMIC_ORDERINGRule() {
		return getATOMIC_ORDERINGAccess().getRule();
	}

	//BIN_OP:
	//
	//	"xchg" | "add" | "sub" | "and" | "nand" | "or" | "xor" | "max" | "min" | "umax" | "umin";
	public BIN_OPElements getBIN_OPAccess() {
		return (pBIN_OP != null) ? pBIN_OP : (pBIN_OP = new BIN_OPElements());
	}
	
	public ParserRule getBIN_OPRule() {
		return getBIN_OPAccess().getRule();
	}

	//RETURN_ATTRIBUTES:
	//
	//	"zeroext" | "signext" | "inreg" | "byval" | "sret" | "noalias" | "nocapture" | "nest";
	public RETURN_ATTRIBUTESElements getRETURN_ATTRIBUTESAccess() {
		return (pRETURN_ATTRIBUTES != null) ? pRETURN_ATTRIBUTES : (pRETURN_ATTRIBUTES = new RETURN_ATTRIBUTESElements());
	}
	
	public ParserRule getRETURN_ATTRIBUTESRule() {
		return getRETURN_ATTRIBUTESAccess().getRule();
	}

	//CallingConv:
	//
	//	"ccc" | "fastcc" | "coldcc" | "x86_stdcallcc" | "x86_fastcallcc" | "x86_thiscallcc" | "arm_apcscc" | "arm_aapcscc" |
	//
	//	"arm_aapcs_vfpcc" | "msp430_intrcc" | "ptx_kernel" | "ptx_device" | "spir_func" | "spir_kernel" | "cc" "<" INT ">"
	//
	//	INT;
	public CallingConvElements getCallingConvAccess() {
		return (pCallingConv != null) ? pCallingConv : (pCallingConv = new CallingConvElements());
	}
	
	public ParserRule getCallingConvRule() {
		return getCallingConvAccess().getRule();
	}

	//FUNCTION_ATTRIBUTES:
	//
	//	"address_safety" | "alignstack" "(" "<" INT ">" ")" | "alwaysinline" | "nonlazybind" | "inlinehint" | "naked" |
	//
	//	"noimplicitfloat" | "noinline" | "noredzone" | "noreturn" | "nounwind" | "optsize" | "readnone" | "readonly" |
	//
	//	"returns_twice" | "ssp" | "sspreq" | "uwtable";
	public FUNCTION_ATTRIBUTESElements getFUNCTION_ATTRIBUTESAccess() {
		return (pFUNCTION_ATTRIBUTES != null) ? pFUNCTION_ATTRIBUTES : (pFUNCTION_ATTRIBUTES = new FUNCTION_ATTRIBUTESElements());
	}
	
	public ParserRule getFUNCTION_ATTRIBUTESRule() {
		return getFUNCTION_ATTRIBUTESAccess().getRule();
	}

	//Cast_OP:
	//
	//	"trunc" | "zext" | "sext" | "fptrunc" | "fpext" | "fptoui" | "fptosi" | "uitofp" | "sitofp" | "ptrtoint" | "inttoptr"
	//
	//	| "bitcast";
	public Cast_OPElements getCast_OPAccess() {
		return (pCast_OP != null) ? pCast_OP : (pCast_OP = new Cast_OPElements());
	}
	
	public ParserRule getCast_OPRule() {
		return getCast_OPAccess().getRule();
	}

	//I_PREDICATES:
	//
	//	"eq" | "ne" | "ugt" | "uge" | "ult" | "ule" | "sgt" | "sge" | "slt" | "sle";
	public I_PREDICATESElements getI_PREDICATESAccess() {
		return (pI_PREDICATES != null) ? pI_PREDICATES : (pI_PREDICATES = new I_PREDICATESElements());
	}
	
	public ParserRule getI_PREDICATESRule() {
		return getI_PREDICATESAccess().getRule();
	}

	//F_PREDICATES:
	//
	//	"false" | "oeq" | "ogt" | "oge" | "olt" | "ole" | "one" | "ord" | "ueq" | "ugt" | "uge" | "ult" | "ule" | "une" |
	//
	//	"uno" | "true";
	public F_PREDICATESElements getF_PREDICATESAccess() {
		return (pF_PREDICATES != null) ? pF_PREDICATES : (pF_PREDICATES = new F_PREDICATESElements());
	}
	
	public ParserRule getF_PREDICATESRule() {
		return getF_PREDICATESAccess().getRule();
	}

	//VISIBILITY:
	//
	//	"default" | "hidden" | "protected";
	public VISIBILITYElements getVISIBILITYAccess() {
		return (pVISIBILITY != null) ? pVISIBILITY : (pVISIBILITY = new VISIBILITYElements());
	}
	
	public ParserRule getVISIBILITYRule() {
		return getVISIBILITYAccess().getRule();
	}

	//LINKAGE:
	//
	//	"private" | "linker_private" | "linker_private_weak" | "available_externally" | "linkonce" | "common" | "appending" |
	//
	//	"extern_weak" | "linkonce_odr" | "linkonce_odr_auto_hide" | "dllimport" | "dllexport" | ALIAS_LINKAGE;
	public LINKAGEElements getLINKAGEAccess() {
		return (pLINKAGE != null) ? pLINKAGE : (pLINKAGE = new LINKAGEElements());
	}
	
	public ParserRule getLINKAGERule() {
		return getLINKAGEAccess().getRule();
	}

	//ALIAS_LINKAGE:
	//
	//	"external" | "internal" | "weak" | "weak_odr";
	public ALIAS_LINKAGEElements getALIAS_LINKAGEAccess() {
		return (pALIAS_LINKAGE != null) ? pALIAS_LINKAGE : (pALIAS_LINKAGE = new ALIAS_LINKAGEElements());
	}
	
	public ParserRule getALIAS_LINKAGERule() {
		return getALIAS_LINKAGEAccess().getRule();
	}

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
