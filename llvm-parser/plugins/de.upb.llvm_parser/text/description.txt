Model LLVM

This model description is not a real EMF artifact. It was generated by the
org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's
code generator can be extended.
This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.

Package llvm <http://www.upb.de/llvm_parser/llvm>

  Class LLVM
    Reference elements : AbstractElement<<0..*>>

  Class AbstractElement

  Class TopLevelEntity -> AbstractElement
    Attribute module : EString
    Attribute target : EString
    Attribute libs : EString<<0..*>>

  Class MainLevelEntity -> AbstractElement
    Attribute meta : EString<<0..*>>

  Class TypeDefinition -> MainLevelEntity
    Reference address : Address
    Reference struct : Structure

  Class GlobalDefinition -> MainLevelEntity
    Reference adress : Address
    Reference type : EObject
    Reference value : EObject

  Class FunctionDefinition -> MainLevelEntity
    Reference returnType : TypeUse
    Reference address : Address
    Reference pl : ParameterList
    Reference body : FunctionBody
    Reference tList : TypeList

  Class AliasDefinition -> MainLevelEntity
    Reference address : Address
    Reference aliastype : TypeUse
    Reference aliasvalue : Value
    Reference aliasee : TypeUse

  Class TypeUse
    Attribute pointer : EString

  Class AddressUse -> TypeUse
    Reference address : Address

  Class Address
    Attribute name : EString

  Class Predefined -> TypeUse
    Attribute type : EString

  Class Vector -> Aggregate_Types
    Reference type : TypeUse

  Class Array -> Aggregate_Types
    Reference type : TypeUse

  Class Aggregate_Types

  Class Constant -> Value
    Attribute value : EInt

  Class NonConstantValue -> Value
    Attribute pointer : EString

  Class Value
    Attribute name : EString

  Class ValueStruct
    Reference types : TypeUse<<0..*>>
    Reference value : Value<<0..*>>

  Class Structure -> Aggregate_Types
    Reference types : EObject<<0..*>>

  Class ParameterList
    Reference types : TypeUse<<0..*>>
    Reference Lists : TypeList<<0..*>>
    Reference variables : Value<<0..*>>

  Class TypeList
    Reference types : TypeUse<<0..*>>
    Reference typelists : TypeList<<0..*>>

  Class FunctionBody
    Attribute meta : EString<<0..*>>
    Reference blocks : BasicBlock<<0..*>>

  Class Instruction

  Class BasicBlock
    Attribute label : EString
    Reference instructions : EObject<<0..*>>
    Attribute retadr : EString
    Reference terminator : ReturnInstruction

  Class InstructionUse
    Attribute reg_or_var : EString
    Reference instruction : StandartInstruction

  Class ReturnInstruction -> Instruction

  Class StandartInstruction -> Instruction

  Class ArithmeticOperation -> StandartInstruction
    Reference optype : TypeUse
    Reference value1 : Value
    Reference value2 : Value

  Class LogicOperation -> StandartInstruction
    Reference optype : TypeUse
    Reference value1 : Value
    Reference value2 : Value

  Class Cast -> Value, StandartInstruction
    Reference from : EObject
    Reference value : Value
    Reference to : TypeUse

  Class GetElementPtr -> StandartInstruction
    Reference aggregate : EObject
    Reference aggregatename : Value
    Reference indTypes : TypeUse<<0..*>>
    Reference indizies : Value<<0..*>>

  Class NestedGetElementPtr -> Value
    Reference aggregate : EObject
    Reference aggregatename : Value
    Reference indTypes : TypeUse<<0..*>>
    Reference indizies : Value<<0..*>>

  Class ExtractValue -> StandartInstruction
    Reference array : Array
    Reference struct : Structure
    Reference value : Value
    Attribute index : EInt<<0..*>>

  Class InsertValue -> StandartInstruction
    Reference struct : Structure
    Reference value : Value
    Reference inserttype : TypeUse
    Reference insertvalue : Value
    Attribute index : EInt<<0..*>>

  Class Fence -> StandartInstruction
    Attribute ordering : EString

  Class CmpXchg -> StandartInstruction
    Reference adresstype : TypeUse
    Reference adress : Value
    Reference comparetype : TypeUse
    Reference comparevalue : Value
    Reference newtype : TypeUse
    Reference newvalue : Value
    Attribute ordering : EString

  Class AtomicRMW -> StandartInstruction
    Reference adresstype : TypeUse
    Reference adress : Value
    Reference optype : TypeUse
    Reference opvalue : Value
    Attribute ordering : EString

  Class Load -> StandartInstruction
    Reference adresstype : TypeUse
    Reference types : TypeList
    Reference adress : Value
    Attribute ordering : EString
    Attribute index : EInt

  Class Store -> StandartInstruction
    Reference newtype : TypeUse
    Reference types : TypeList<<0..*>>
    Reference newvalue : Value
    Reference adresstype : TypeUse
    Reference adress : Value
    Attribute ordering : EString
    Attribute index : EInt

  Class Call -> StandartInstruction
    Reference adresstype : TypeUse
    Reference adress : Value
    Reference pList : ParameterList

  Class Alloc -> StandartInstruction
    Reference type : TypeUse
    Reference typelist : TypeList
    Reference numelementstype : TypeUse
    Reference numelementsvalue : Value

  Class Phi -> StandartInstruction
    Reference type : TypeUse
    Reference firstclass : Value<<0..*>>
    Reference values : Value<<0..*>>

  Class LandingPad -> StandartInstruction
    Reference struct : Structure
    Reference personalitytype : TypeUse
    Reference personalityvalue : Value
    Reference clause : Clause<<0..*>>

  Class Clause
    Reference type : TypeUse
    Reference value : Value
    Reference filterarray : Array
    Reference constant : Value

  Class Select -> StandartInstruction
    Reference conditiontype : TypeUse
    Reference conditionvalue : Value
    Reference val1type : TypeUse
    Reference val1value : Value
    Reference val2type : TypeUse
    Reference val2value : Value

  Class VariableAttributeAccess -> StandartInstruction
    Reference listtype : TypeUse
    Reference listvalue : Value
    Reference argType : TypeUse

  Class ExtractElement -> StandartInstruction
    Reference vectortype : TypeUse
    Reference vectorvalue : Value
    Reference indextype : TypeUse
    Reference index : Value

  Class InsertElement -> StandartInstruction
    Reference vectortype : TypeUse
    Reference vectorvalue : Value
    Reference scalartype : TypeUse
    Reference scalarvalue : Value
    Reference indextype : TypeUse
    Reference index : Value

  Class ShuffleVector -> StandartInstruction
    Reference val1type : TypeUse
    Reference val1value : Value
    Reference val2type : TypeUse
    Reference val2value : Value
    Reference masktype : TypeUse
    Reference maskvalue : Value

  Class Compare -> StandartInstruction
    Reference comptype : TypeUse
    Reference value1 : Value
    Reference value2 : Value

  Class IndirectBranch -> ReturnInstruction
    Reference adresstype : TypeUse
    Reference adress : Value
    Reference labeltype : TypeUse<<0..*>>
    Reference labels : Value<<0..*>>

  Class Switch -> ReturnInstruction
    Reference comptype : TypeUse
    Reference compvalue : Value
    Reference defaulttype : TypeUse
    Reference defaultvalue : Value
    Reference jtypes : TypeUse<<0..*>>
    Reference jvalues : Value<<0..*>>
    Reference destinationtypes : TypeUse<<0..*>>
    Reference destinations : Value<<0..*>>

  Class Invoke -> ReturnInstruction
    Reference functiontype : TypeUse
    Reference name : Address
    Reference pList : ParameterList
    Reference totype : TypeUse
    Reference tovalue : Value
    Reference unwindtype : TypeUse
    Reference unwindvalue : Value

  Class Resume -> ReturnInstruction
    Reference resumestruct : Structure
    Reference resumevalue : Value

  Class Unreachable -> ReturnInstruction

  Class Return -> ReturnInstruction
    Reference returntype : TypeUse
    Reference returnvalue : Value

  Class Branch -> ReturnInstruction
    Reference destination : Value
    Reference condvalue : Value
    Reference labelTruetype : TypeUse
    Reference labelTrue : Value
    Reference labelFalsetype : TypeUse
    Reference labelFalse : Value
