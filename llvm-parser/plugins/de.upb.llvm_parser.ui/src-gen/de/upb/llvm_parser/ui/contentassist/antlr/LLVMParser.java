/*
* generated by Xtext
*/
package de.upb.llvm_parser.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import de.upb.llvm_parser.services.LLVMGrammarAccess;

public class LLVMParser extends AbstractContentAssistParser {
	
	@Inject
	private LLVMGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected de.upb.llvm_parser.ui.contentassist.antlr.internal.InternalLLVMParser createParser() {
		de.upb.llvm_parser.ui.contentassist.antlr.internal.InternalLLVMParser result = new de.upb.llvm_parser.ui.contentassist.antlr.internal.InternalLLVMParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getAbstractElementAccess().getAlternatives(), "rule__AbstractElement__Alternatives");
					put(grammarAccess.getTopLevelEntityAccess().getAlternatives(), "rule__TopLevelEntity__Alternatives");
					put(grammarAccess.getTopLevelEntityAccess().getAlternatives_1_1(), "rule__TopLevelEntity__Alternatives_1_1");
					put(grammarAccess.getMainLevelEntityAccess().getAlternatives(), "rule__MainLevelEntity__Alternatives");
					put(grammarAccess.getTypeDefinitionAccess().getAlternatives_2(), "rule__TypeDefinition__Alternatives_2");
					put(grammarAccess.getTypeDefinitionAccess().getAlternatives_3_1(), "rule__TypeDefinition__Alternatives_3_1");
					put(grammarAccess.getFunctionDefinitionAccess().getAlternatives(), "rule__FunctionDefinition__Alternatives");
					put(grammarAccess.getFunctionDefinitionAccess().getAlternatives_1_7(), "rule__FunctionDefinition__Alternatives_1_7");
					put(grammarAccess.getTypeUseAccess().getAlternatives(), "rule__TypeUse__Alternatives");
					put(grammarAccess.getPrimitive_TypeAccess().getAlternatives(), "rule__Primitive_Type__Alternatives");
					put(grammarAccess.getFloatingPoint_TypeAccess().getAlternatives(), "rule__FloatingPoint_Type__Alternatives");
					put(grammarAccess.getPredefined_TypesAccess().getAlternatives(), "rule__Predefined_Types__Alternatives");
					put(grammarAccess.getAggregate_TypesAccess().getAlternatives(), "rule__Aggregate_Types__Alternatives");
					put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
					put(grammarAccess.getTypeListAccess().getAlternatives_1(), "rule__TypeList__Alternatives_1");
					put(grammarAccess.getTypeListAccess().getAlternatives_1_1_2(), "rule__TypeList__Alternatives_1_1_2");
					put(grammarAccess.getRETURN_ATTRIBUTESAccess().getAlternatives(), "rule__RETURN_ATTRIBUTES__Alternatives");
					put(grammarAccess.getCallingConvAccess().getAlternatives(), "rule__CallingConv__Alternatives");
					put(grammarAccess.getFUNCTION_ATTRIBUTESAccess().getAlternatives(), "rule__FUNCTION_ATTRIBUTES__Alternatives");
					put(grammarAccess.getVISIBILITYAccess().getAlternatives(), "rule__VISIBILITY__Alternatives");
					put(grammarAccess.getLINKAGEAccess().getAlternatives(), "rule__LINKAGE__Alternatives");
					put(grammarAccess.getALIAS_LINKAGEAccess().getAlternatives(), "rule__ALIAS_LINKAGE__Alternatives");
					put(grammarAccess.getAbstractElementAccess().getGroup_0(), "rule__AbstractElement__Group_0__0");
					put(grammarAccess.getAbstractElementAccess().getGroup_1(), "rule__AbstractElement__Group_1__0");
					put(grammarAccess.getTopLevelEntityAccess().getGroup_0(), "rule__TopLevelEntity__Group_0__0");
					put(grammarAccess.getTopLevelEntityAccess().getGroup_1(), "rule__TopLevelEntity__Group_1__0");
					put(grammarAccess.getTopLevelEntityAccess().getGroup_2(), "rule__TopLevelEntity__Group_2__0");
					put(grammarAccess.getTopLevelEntityAccess().getGroup_2_4(), "rule__TopLevelEntity__Group_2_4__0");
					put(grammarAccess.getTypeDefinitionAccess().getGroup(), "rule__TypeDefinition__Group__0");
					put(grammarAccess.getTypeDefinitionAccess().getGroup_3(), "rule__TypeDefinition__Group_3__0");
					put(grammarAccess.getFunctionDefinitionAccess().getGroup_0(), "rule__FunctionDefinition__Group_0__0");
					put(grammarAccess.getFunctionDefinitionAccess().getGroup_0_10(), "rule__FunctionDefinition__Group_0_10__0");
					put(grammarAccess.getFunctionDefinitionAccess().getGroup_1(), "rule__FunctionDefinition__Group_1__0");
					put(grammarAccess.getFunctionDefinitionAccess().getGroup_1_10(), "rule__FunctionDefinition__Group_1_10__0");
					put(grammarAccess.getAliasDefinitionAccess().getGroup(), "rule__AliasDefinition__Group__0");
					put(grammarAccess.getAddressUseAccess().getGroup(), "rule__AddressUse__Group__0");
					put(grammarAccess.getPredefinedAccess().getGroup(), "rule__Predefined__Group__0");
					put(grammarAccess.getVectorAccess().getGroup(), "rule__Vector__Group__0");
					put(grammarAccess.getArrayAccess().getGroup(), "rule__Array__Group__0");
					put(grammarAccess.getEmptyArrayAccess().getGroup(), "rule__EmptyArray__Group__0");
					put(grammarAccess.getNonConstantValueAccess().getGroup(), "rule__NonConstantValue__Group__0");
					put(grammarAccess.getStructureAccess().getGroup(), "rule__Structure__Group__0");
					put(grammarAccess.getStructureAccess().getGroup_2(), "rule__Structure__Group_2__0");
					put(grammarAccess.getStructureAccess().getGroup_2_1(), "rule__Structure__Group_2_1__0");
					put(grammarAccess.getParameterListAccess().getGroup(), "rule__ParameterList__Group__0");
					put(grammarAccess.getParameterListAccess().getGroup_2(), "rule__ParameterList__Group_2__0");
					put(grammarAccess.getParameterListAccess().getGroup_2_4(), "rule__ParameterList__Group_2_4__0");
					put(grammarAccess.getFunctionBodyAccess().getGroup(), "rule__FunctionBody__Group__0");
					put(grammarAccess.getBasicBlockAccess().getGroup(), "rule__BasicBlock__Group__0");
					put(grammarAccess.getTypeListAccess().getGroup(), "rule__TypeList__Group__0");
					put(grammarAccess.getTypeListAccess().getGroup_1_1(), "rule__TypeList__Group_1_1__0");
					put(grammarAccess.getTypeListAccess().getGroup_1_1_1(), "rule__TypeList__Group_1_1_1__0");
					put(grammarAccess.getTypeListAccess().getGroup_1_1_1_3(), "rule__TypeList__Group_1_1_1_3__0");
					put(grammarAccess.getCallingConvAccess().getGroup_14(), "rule__CallingConv__Group_14__0");
					put(grammarAccess.getFUNCTION_ATTRIBUTESAccess().getGroup_1(), "rule__FUNCTION_ATTRIBUTES__Group_1__0");
					put(grammarAccess.getALIGNMENTAccess().getGroup(), "rule__ALIGNMENT__Group__0");
					put(grammarAccess.getLLVMAccess().getElementsAssignment(), "rule__LLVM__ElementsAssignment");
					put(grammarAccess.getTopLevelEntityAccess().getModuleAssignment_0_2(), "rule__TopLevelEntity__ModuleAssignment_0_2");
					put(grammarAccess.getTopLevelEntityAccess().getTargetAssignment_1_3(), "rule__TopLevelEntity__TargetAssignment_1_3");
					put(grammarAccess.getTopLevelEntityAccess().getLibsAssignment_2_3(), "rule__TopLevelEntity__LibsAssignment_2_3");
					put(grammarAccess.getTopLevelEntityAccess().getLibsAssignment_2_4_1(), "rule__TopLevelEntity__LibsAssignment_2_4_1");
					put(grammarAccess.getTypeDefinitionAccess().getAddressAssignment_0(), "rule__TypeDefinition__AddressAssignment_0");
					put(grammarAccess.getTypeDefinitionAccess().getStructAssignment_3_1_0(), "rule__TypeDefinition__StructAssignment_3_1_0");
					put(grammarAccess.getFunctionDefinitionAccess().getReturnTypeAssignment_0_5(), "rule__FunctionDefinition__ReturnTypeAssignment_0_5");
					put(grammarAccess.getFunctionDefinitionAccess().getAddressAssignment_0_6(), "rule__FunctionDefinition__AddressAssignment_0_6");
					put(grammarAccess.getFunctionDefinitionAccess().getPlAssignment_0_7(), "rule__FunctionDefinition__PlAssignment_0_7");
					put(grammarAccess.getFunctionDefinitionAccess().getBodyAssignment_0_12(), "rule__FunctionDefinition__BodyAssignment_0_12");
					put(grammarAccess.getFunctionDefinitionAccess().getReturnTypeAssignment_1_5(), "rule__FunctionDefinition__ReturnTypeAssignment_1_5");
					put(grammarAccess.getFunctionDefinitionAccess().getAddressAssignment_1_6(), "rule__FunctionDefinition__AddressAssignment_1_6");
					put(grammarAccess.getFunctionDefinitionAccess().getTListAssignment_1_7_0(), "rule__FunctionDefinition__TListAssignment_1_7_0");
					put(grammarAccess.getAliasDefinitionAccess().getAddressAssignment_0(), "rule__AliasDefinition__AddressAssignment_0");
					put(grammarAccess.getAliasDefinitionAccess().getAliastypeAssignment_5(), "rule__AliasDefinition__AliastypeAssignment_5");
					put(grammarAccess.getAliasDefinitionAccess().getAliasvalueAssignment_6(), "rule__AliasDefinition__AliasvalueAssignment_6");
					put(grammarAccess.getAliasDefinitionAccess().getAliaseeAssignment_7(), "rule__AliasDefinition__AliaseeAssignment_7");
					put(grammarAccess.getAddressUseAccess().getAddressAssignment_0(), "rule__AddressUse__AddressAssignment_0");
					put(grammarAccess.getAddressUseAccess().getPointerAssignment_1(), "rule__AddressUse__PointerAssignment_1");
					put(grammarAccess.getAddressAccess().getNameAssignment(), "rule__Address__NameAssignment");
					put(grammarAccess.getPredefinedAccess().getTypeAssignment_0(), "rule__Predefined__TypeAssignment_0");
					put(grammarAccess.getPredefinedAccess().getPointerAssignment_1(), "rule__Predefined__PointerAssignment_1");
					put(grammarAccess.getConstantAccess().getValueAssignment(), "rule__Constant__ValueAssignment");
					put(grammarAccess.getNonConstantValueAccess().getNameAssignment_0(), "rule__NonConstantValue__NameAssignment_0");
					put(grammarAccess.getNonConstantValueAccess().getPointerAssignment_1(), "rule__NonConstantValue__PointerAssignment_1");
					put(grammarAccess.getStructureAccess().getTypesAssignment_2_0(), "rule__Structure__TypesAssignment_2_0");
					put(grammarAccess.getStructureAccess().getTypesAssignment_2_1_1(), "rule__Structure__TypesAssignment_2_1_1");
					put(grammarAccess.getParameterListAccess().getTypesAssignment_2_0(), "rule__ParameterList__TypesAssignment_2_0");
					put(grammarAccess.getParameterListAccess().getListsAssignment_2_1(), "rule__ParameterList__ListsAssignment_2_1");
					put(grammarAccess.getParameterListAccess().getVariablesAssignment_2_3(), "rule__ParameterList__VariablesAssignment_2_3");
					put(grammarAccess.getParameterListAccess().getTypesAssignment_2_4_1(), "rule__ParameterList__TypesAssignment_2_4_1");
					put(grammarAccess.getParameterListAccess().getListsAssignment_2_4_2(), "rule__ParameterList__ListsAssignment_2_4_2");
					put(grammarAccess.getParameterListAccess().getVariablesAssignment_2_4_4(), "rule__ParameterList__VariablesAssignment_2_4_4");
					put(grammarAccess.getFunctionBodyAccess().getBlocksAssignment_1(), "rule__FunctionBody__BlocksAssignment_1");
					put(grammarAccess.getBasicBlockAccess().getLabelAssignment_0(), "rule__BasicBlock__LabelAssignment_0");
					put(grammarAccess.getTypeListAccess().getTypesAssignment_1_1_1_0(), "rule__TypeList__TypesAssignment_1_1_1_0");
					put(grammarAccess.getTypeListAccess().getTypelistsAssignment_1_1_1_1(), "rule__TypeList__TypelistsAssignment_1_1_1_1");
					put(grammarAccess.getTypeListAccess().getTypesAssignment_1_1_1_3_1(), "rule__TypeList__TypesAssignment_1_1_1_3_1");
					put(grammarAccess.getTypeListAccess().getTypelistsAssignment_1_1_1_3_2(), "rule__TypeList__TypelistsAssignment_1_1_1_3_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			de.upb.llvm_parser.ui.contentassist.antlr.internal.InternalLLVMParser typedParser = (de.upb.llvm_parser.ui.contentassist.antlr.internal.InternalLLVMParser) parser;
			typedParser.entryRuleLLVM();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public LLVMGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(LLVMGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
