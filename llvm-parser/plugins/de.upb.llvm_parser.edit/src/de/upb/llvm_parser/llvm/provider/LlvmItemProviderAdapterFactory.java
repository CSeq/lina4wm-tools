/**
 */
package de.upb.llvm_parser.llvm.provider;

import de.upb.llvm_parser.llvm.util.LlvmAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class LlvmItemProviderAdapterFactory extends LlvmAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LlvmItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.upb.llvm_parser.llvm.LLVM} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LLVMItemProvider llvmItemProvider;

	/**
	 * This creates an adapter for a {@link de.upb.llvm_parser.llvm.LLVM}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLLVMAdapter() {
		if (llvmItemProvider == null) {
			llvmItemProvider = new LLVMItemProvider(this);
		}

		return llvmItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.upb.llvm_parser.llvm.AbstractElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AbstractElementItemProvider abstractElementItemProvider;

	/**
	 * This creates an adapter for a {@link de.upb.llvm_parser.llvm.AbstractElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAbstractElementAdapter() {
		if (abstractElementItemProvider == null) {
			abstractElementItemProvider = new AbstractElementItemProvider(this);
		}

		return abstractElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.upb.llvm_parser.llvm.TopLevelEntity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TopLevelEntityItemProvider topLevelEntityItemProvider;

	/**
	 * This creates an adapter for a {@link de.upb.llvm_parser.llvm.TopLevelEntity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTopLevelEntityAdapter() {
		if (topLevelEntityItemProvider == null) {
			topLevelEntityItemProvider = new TopLevelEntityItemProvider(this);
		}

		return topLevelEntityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.upb.llvm_parser.llvm.MainLevelEntity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MainLevelEntityItemProvider mainLevelEntityItemProvider;

	/**
	 * This creates an adapter for a {@link de.upb.llvm_parser.llvm.MainLevelEntity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMainLevelEntityAdapter() {
		if (mainLevelEntityItemProvider == null) {
			mainLevelEntityItemProvider = new MainLevelEntityItemProvider(this);
		}

		return mainLevelEntityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.upb.llvm_parser.llvm.TypeDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeDefinitionItemProvider typeDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link de.upb.llvm_parser.llvm.TypeDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeDefinitionAdapter() {
		if (typeDefinitionItemProvider == null) {
			typeDefinitionItemProvider = new TypeDefinitionItemProvider(this);
		}

		return typeDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.upb.llvm_parser.llvm.FunctionDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunctionDefinitionItemProvider functionDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link de.upb.llvm_parser.llvm.FunctionDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFunctionDefinitionAdapter() {
		if (functionDefinitionItemProvider == null) {
			functionDefinitionItemProvider = new FunctionDefinitionItemProvider(this);
		}

		return functionDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.upb.llvm_parser.llvm.AliasDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AliasDefinitionItemProvider aliasDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link de.upb.llvm_parser.llvm.AliasDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAliasDefinitionAdapter() {
		if (aliasDefinitionItemProvider == null) {
			aliasDefinitionItemProvider = new AliasDefinitionItemProvider(this);
		}

		return aliasDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.upb.llvm_parser.llvm.TypeUse} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeUseItemProvider typeUseItemProvider;

	/**
	 * This creates an adapter for a {@link de.upb.llvm_parser.llvm.TypeUse}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeUseAdapter() {
		if (typeUseItemProvider == null) {
			typeUseItemProvider = new TypeUseItemProvider(this);
		}

		return typeUseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.upb.llvm_parser.llvm.AddressUse} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AddressUseItemProvider addressUseItemProvider;

	/**
	 * This creates an adapter for a {@link de.upb.llvm_parser.llvm.AddressUse}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAddressUseAdapter() {
		if (addressUseItemProvider == null) {
			addressUseItemProvider = new AddressUseItemProvider(this);
		}

		return addressUseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.upb.llvm_parser.llvm.Address} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AddressItemProvider addressItemProvider;

	/**
	 * This creates an adapter for a {@link de.upb.llvm_parser.llvm.Address}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAddressAdapter() {
		if (addressItemProvider == null) {
			addressItemProvider = new AddressItemProvider(this);
		}

		return addressItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.upb.llvm_parser.llvm.Predefined} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PredefinedItemProvider predefinedItemProvider;

	/**
	 * This creates an adapter for a {@link de.upb.llvm_parser.llvm.Predefined}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPredefinedAdapter() {
		if (predefinedItemProvider == null) {
			predefinedItemProvider = new PredefinedItemProvider(this);
		}

		return predefinedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.upb.llvm_parser.llvm.Vector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VectorItemProvider vectorItemProvider;

	/**
	 * This creates an adapter for a {@link de.upb.llvm_parser.llvm.Vector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVectorAdapter() {
		if (vectorItemProvider == null) {
			vectorItemProvider = new VectorItemProvider(this);
		}

		return vectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.upb.llvm_parser.llvm.Constant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstantItemProvider constantItemProvider;

	/**
	 * This creates an adapter for a {@link de.upb.llvm_parser.llvm.Constant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstantAdapter() {
		if (constantItemProvider == null) {
			constantItemProvider = new ConstantItemProvider(this);
		}

		return constantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.upb.llvm_parser.llvm.NonConstantValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NonConstantValueItemProvider nonConstantValueItemProvider;

	/**
	 * This creates an adapter for a {@link de.upb.llvm_parser.llvm.NonConstantValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNonConstantValueAdapter() {
		if (nonConstantValueItemProvider == null) {
			nonConstantValueItemProvider = new NonConstantValueItemProvider(this);
		}

		return nonConstantValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.upb.llvm_parser.llvm.Value} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValueItemProvider valueItemProvider;

	/**
	 * This creates an adapter for a {@link de.upb.llvm_parser.llvm.Value}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValueAdapter() {
		if (valueItemProvider == null) {
			valueItemProvider = new ValueItemProvider(this);
		}

		return valueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.upb.llvm_parser.llvm.Array} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArrayItemProvider arrayItemProvider;

	/**
	 * This creates an adapter for a {@link de.upb.llvm_parser.llvm.Array}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArrayAdapter() {
		if (arrayItemProvider == null) {
			arrayItemProvider = new ArrayItemProvider(this);
		}

		return arrayItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.upb.llvm_parser.llvm.Aggregate_Types} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Aggregate_TypesItemProvider aggregate_TypesItemProvider;

	/**
	 * This creates an adapter for a {@link de.upb.llvm_parser.llvm.Aggregate_Types}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAggregate_TypesAdapter() {
		if (aggregate_TypesItemProvider == null) {
			aggregate_TypesItemProvider = new Aggregate_TypesItemProvider(this);
		}

		return aggregate_TypesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.upb.llvm_parser.llvm.Structure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StructureItemProvider structureItemProvider;

	/**
	 * This creates an adapter for a {@link de.upb.llvm_parser.llvm.Structure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStructureAdapter() {
		if (structureItemProvider == null) {
			structureItemProvider = new StructureItemProvider(this);
		}

		return structureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.upb.llvm_parser.llvm.ParameterList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterListItemProvider parameterListItemProvider;

	/**
	 * This creates an adapter for a {@link de.upb.llvm_parser.llvm.ParameterList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterListAdapter() {
		if (parameterListItemProvider == null) {
			parameterListItemProvider = new ParameterListItemProvider(this);
		}

		return parameterListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.upb.llvm_parser.llvm.FunctionBody} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunctionBodyItemProvider functionBodyItemProvider;

	/**
	 * This creates an adapter for a {@link de.upb.llvm_parser.llvm.FunctionBody}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFunctionBodyAdapter() {
		if (functionBodyItemProvider == null) {
			functionBodyItemProvider = new FunctionBodyItemProvider(this);
		}

		return functionBodyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.upb.llvm_parser.llvm.BasicBlock} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BasicBlockItemProvider basicBlockItemProvider;

	/**
	 * This creates an adapter for a {@link de.upb.llvm_parser.llvm.BasicBlock}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBasicBlockAdapter() {
		if (basicBlockItemProvider == null) {
			basicBlockItemProvider = new BasicBlockItemProvider(this);
		}

		return basicBlockItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.upb.llvm_parser.llvm.TypeList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeListItemProvider typeListItemProvider;

	/**
	 * This creates an adapter for a {@link de.upb.llvm_parser.llvm.TypeList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeListAdapter() {
		if (typeListItemProvider == null) {
			typeListItemProvider = new TypeListItemProvider(this);
		}

		return typeListItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (llvmItemProvider != null) llvmItemProvider.dispose();
		if (abstractElementItemProvider != null) abstractElementItemProvider.dispose();
		if (topLevelEntityItemProvider != null) topLevelEntityItemProvider.dispose();
		if (mainLevelEntityItemProvider != null) mainLevelEntityItemProvider.dispose();
		if (typeDefinitionItemProvider != null) typeDefinitionItemProvider.dispose();
		if (functionDefinitionItemProvider != null) functionDefinitionItemProvider.dispose();
		if (aliasDefinitionItemProvider != null) aliasDefinitionItemProvider.dispose();
		if (typeUseItemProvider != null) typeUseItemProvider.dispose();
		if (addressUseItemProvider != null) addressUseItemProvider.dispose();
		if (addressItemProvider != null) addressItemProvider.dispose();
		if (predefinedItemProvider != null) predefinedItemProvider.dispose();
		if (vectorItemProvider != null) vectorItemProvider.dispose();
		if (arrayItemProvider != null) arrayItemProvider.dispose();
		if (aggregate_TypesItemProvider != null) aggregate_TypesItemProvider.dispose();
		if (constantItemProvider != null) constantItemProvider.dispose();
		if (nonConstantValueItemProvider != null) nonConstantValueItemProvider.dispose();
		if (valueItemProvider != null) valueItemProvider.dispose();
		if (structureItemProvider != null) structureItemProvider.dispose();
		if (parameterListItemProvider != null) parameterListItemProvider.dispose();
		if (functionBodyItemProvider != null) functionBodyItemProvider.dispose();
		if (basicBlockItemProvider != null) basicBlockItemProvider.dispose();
		if (typeListItemProvider != null) typeListItemProvider.dispose();
	}

}
