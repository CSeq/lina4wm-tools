/*
* generated by Xtext
*/
grammar InternalLLVM;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package de.upb.llvm_parser.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.upb.llvm_parser.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.upb.llvm_parser.services.LLVMGrammarAccess;

}

@parser::members {

 	private LLVMGrammarAccess grammarAccess;
 	
    public InternalLLVMParser(TokenStream input, LLVMGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "LLVM";	
   	}
   	
   	@Override
   	protected LLVMGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleLLVM
entryRuleLLVM returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLLVMRule()); }
	 iv_ruleLLVM=ruleLLVM 
	 { $current=$iv_ruleLLVM.current; } 
	 EOF 
;

// Rule LLVM
ruleLLVM returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getLLVMAccess().getElementsToplevelentityParserRuleCall_0()); 
	    }
		lv_elements_0_0=ruletoplevelentity		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLLVMRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_0_0, 
        		"toplevelentity");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuletoplevelentity
entryRuletoplevelentity returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getToplevelentityRule()); } 
	 iv_ruletoplevelentity=ruletoplevelentity 
	 { $current=$iv_ruletoplevelentity.current.getText(); }  
	 EOF 
;

// Rule toplevelentity
ruletoplevelentity returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='module' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getToplevelentityAccess().getModuleKeyword_0_0()); 
    }

	kw='asm' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getToplevelentityAccess().getAsmKeyword_0_1()); 
    }
    this_STRING_2=RULE_STRING    {
		$current.merge(this_STRING_2);
    }

    { 
    newLeafNode(this_STRING_2, grammarAccess.getToplevelentityAccess().getSTRINGTerminalRuleCall_0_2()); 
    }
)
    |(
	kw='target' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getToplevelentityAccess().getTargetKeyword_1_0()); 
    }

	kw='triple' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getToplevelentityAccess().getTripleKeyword_1_1()); 
    }

	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getToplevelentityAccess().getEqualsSignKeyword_1_2()); 
    }
    this_STRING_6=RULE_STRING    {
		$current.merge(this_STRING_6);
    }

    { 
    newLeafNode(this_STRING_6, grammarAccess.getToplevelentityAccess().getSTRINGTerminalRuleCall_1_3()); 
    }
)
    |(
	kw='target' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getToplevelentityAccess().getTargetKeyword_2_0()); 
    }

	kw='datalayout' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getToplevelentityAccess().getDatalayoutKeyword_2_1()); 
    }

	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getToplevelentityAccess().getEqualsSignKeyword_2_2()); 
    }
    this_STRING_10=RULE_STRING    {
		$current.merge(this_STRING_10);
    }

    { 
    newLeafNode(this_STRING_10, grammarAccess.getToplevelentityAccess().getSTRINGTerminalRuleCall_2_3()); 
    }
)
    |(
	kw='deplibs' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getToplevelentityAccess().getDeplibsKeyword_3_0()); 
    }

	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getToplevelentityAccess().getEqualsSignKeyword_3_1()); 
    }

	kw='[' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getToplevelentityAccess().getLeftSquareBracketKeyword_3_2()); 
    }

	kw=']' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getToplevelentityAccess().getRightSquareBracketKeyword_3_3()); 
    }
)
    |(
	kw='deplibs' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getToplevelentityAccess().getDeplibsKeyword_4_0()); 
    }

	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getToplevelentityAccess().getEqualsSignKeyword_4_1()); 
    }

	kw='[' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getToplevelentityAccess().getLeftSquareBracketKeyword_4_2()); 
    }
    this_STRING_18=RULE_STRING    {
		$current.merge(this_STRING_18);
    }

    { 
    newLeafNode(this_STRING_18, grammarAccess.getToplevelentityAccess().getSTRINGTerminalRuleCall_4_3()); 
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getToplevelentityAccess().getCommaKeyword_4_4_0()); 
    }
    this_STRING_20=RULE_STRING    {
		$current.merge(this_STRING_20);
    }

    { 
    newLeafNode(this_STRING_20, grammarAccess.getToplevelentityAccess().getSTRINGTerminalRuleCall_4_4_1()); 
    }
)*
	kw=']' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getToplevelentityAccess().getRightSquareBracketKeyword_4_5()); 
    }
)
    |(
	kw='declare' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getToplevelentityAccess().getDeclareKeyword_5_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getToplevelentityAccess().getFunctionHeaderParserRuleCall_5_1()); 
    }
    this_FunctionHeader_23=ruleFunctionHeader    {
		$current.merge(this_FunctionHeader_23);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
    { 
        newCompositeNode(grammarAccess.getToplevelentityAccess().getLocalVarParserRuleCall_6_0()); 
    }
    this_LocalVar_24=ruleLocalVar    {
		$current.merge(this_LocalVar_24);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getToplevelentityAccess().getEqualsSignKeyword_6_1()); 
    }

	kw='type' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getToplevelentityAccess().getTypeKeyword_6_2()); 
    }

    { 
        newCompositeNode(grammarAccess.getToplevelentityAccess().getTypeParserRuleCall_6_3()); 
    }
    this_Type_27=ruleType    {
		$current.merge(this_Type_27);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
	kw='define' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getToplevelentityAccess().getDefineKeyword_7_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getToplevelentityAccess().getFunctionHeaderParserRuleCall_7_1()); 
    }
    this_FunctionHeader_29=ruleFunctionHeader    {
		$current.merge(this_FunctionHeader_29);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getToplevelentityAccess().getLeftCurlyBracketKeyword_7_2()); 
    }
))
    ;





// Entry rule entryRuleTypeAndValue
entryRuleTypeAndValue returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeAndValueRule()); } 
	 iv_ruleTypeAndValue=ruleTypeAndValue 
	 { $current=$iv_ruleTypeAndValue.current.getText(); }  
	 EOF 
;

// Rule TypeAndValue
ruleTypeAndValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTypeAndValueAccess().getTypeParserRuleCall_0()); 
    }
    this_Type_0=ruleType    {
		$current.merge(this_Type_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='%foo' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeAndValueAccess().getFooKeyword_1()); 
    }
)
    ;









// Entry rule entryRuleMDNodeNumber
entryRuleMDNodeNumber returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMDNodeNumberRule()); } 
	 iv_ruleMDNodeNumber=ruleMDNodeNumber 
	 { $current=$iv_ruleMDNodeNumber.current.getText(); }  
	 EOF 
;

// Rule MDNodeNumber
ruleMDNodeNumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_WS_0=RULE_WS    {
		$current.merge(this_WS_0);
    }

    { 
    newLeafNode(this_WS_0, grammarAccess.getMDNodeNumberAccess().getWSTerminalRuleCall()); 
    }

    ;







// Entry rule entryRuleGlobalType
entryRuleGlobalType returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getGlobalTypeRule()); } 
	 iv_ruleGlobalType=ruleGlobalType 
	 { $current=$iv_ruleGlobalType.current.getText(); }  
	 EOF 
;

// Rule GlobalType
ruleGlobalType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='constant' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getGlobalTypeAccess().getConstantKeyword_0()); 
    }

    |
	kw='global' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getGlobalTypeAccess().getGlobalKeyword_1()); 
    }
)
    ;







// Entry rule entryRuleAliasee
entryRuleAliasee returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAliaseeRule()); } 
	 iv_ruleAliasee=ruleAliasee 
	 { $current=$iv_ruleAliasee.current.getText(); }  
	 EOF 
;

// Rule Aliasee
ruleAliasee returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAliaseeAccess().getTypeAndValueParserRuleCall_0()); 
    }
    this_TypeAndValue_0=ruleTypeAndValue    {
		$current.merge(this_TypeAndValue_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |(
	kw='bitcast' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAliaseeAccess().getBitcastKeyword_1_0()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAliaseeAccess().getLeftParenthesisKeyword_1_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getAliaseeAccess().getTypeAndValueParserRuleCall_1_2()); 
    }
    this_TypeAndValue_3=ruleTypeAndValue    {
		$current.merge(this_TypeAndValue_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='to' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAliaseeAccess().getToKeyword_1_3()); 
    }

    { 
        newCompositeNode(grammarAccess.getAliaseeAccess().getTypeParserRuleCall_1_4()); 
    }
    this_Type_5=ruleType    {
		$current.merge(this_Type_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAliaseeAccess().getRightParenthesisKeyword_1_5()); 
    }
)
    |(
	kw='getelementptr' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAliaseeAccess().getGetelementptrKeyword_2_0()); 
    }
(
	kw='inbounds' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAliaseeAccess().getInboundsKeyword_2_1()); 
    }
)?
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAliaseeAccess().getLeftParenthesisKeyword_2_2()); 
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAliaseeAccess().getRightParenthesisKeyword_2_3()); 
    }
))
    ;







// Entry rule entryRuleConst
entryRuleConst returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstRule()); } 
	 iv_ruleConst=ruleConst 
	 { $current=$iv_ruleConst.current.getText(); }  
	 EOF 
;

// Rule Const
ruleConst returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_WS_0=RULE_WS    {
		$current.merge(this_WS_0);
    }

    { 
    newLeafNode(this_WS_0, grammarAccess.getConstAccess().getWSTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleOptionalUnNammedAddr
entryRuleOptionalUnNammedAddr returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOptionalUnNammedAddrRule()); } 
	 iv_ruleOptionalUnNammedAddr=ruleOptionalUnNammedAddr 
	 { $current=$iv_ruleOptionalUnNammedAddr.current.getText(); }  
	 EOF 
;

// Rule OptionalUnNammedAddr
ruleOptionalUnNammedAddr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_WS_0=RULE_WS    {
		$current.merge(this_WS_0);
    }

    { 
    newLeafNode(this_WS_0, grammarAccess.getOptionalUnNammedAddrAccess().getWSTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleGlobalVar
entryRuleGlobalVar returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getGlobalVarRule()); } 
	 iv_ruleGlobalVar=ruleGlobalVar 
	 { $current=$iv_ruleGlobalVar.current.getText(); }  
	 EOF 
;

// Rule GlobalVar
ruleGlobalVar returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getGlobalVarAccess().getOptionalLinkageParserRuleCall_0()); 
    }
    this_OptionalLinkage_0=ruleOptionalLinkage    {
		$current.merge(this_OptionalLinkage_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getGlobalVarAccess().getOptionalVisibilityParserRuleCall_1()); 
    }
    this_OptionalVisibility_1=ruleOptionalVisibility    {
		$current.merge(this_OptionalVisibility_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getGlobalVarAccess().getOptionalThreadLocalParserRuleCall_2()); 
    }
    this_OptionalThreadLocal_2=ruleOptionalThreadLocal    {
		$current.merge(this_OptionalThreadLocal_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getGlobalVarAccess().getOptionalAddrSpaceParserRuleCall_3()); 
    }
    this_OptionalAddrSpace_3=ruleOptionalAddrSpace    {
		$current.merge(this_OptionalAddrSpace_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getGlobalVarAccess().getOptionalUnNammedAddrParserRuleCall_4()); 
    }
    this_OptionalUnNammedAddr_4=ruleOptionalUnNammedAddr    {
		$current.merge(this_OptionalUnNammedAddr_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='constant' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getGlobalVarAccess().getConstantKeyword_5_0()); 
    }

    |
	kw='global' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getGlobalVarAccess().getGlobalKeyword_5_1()); 
    }
))
    ;





// Entry rule entryRuleUInt32
entryRuleUInt32 returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUInt32Rule()); } 
	 iv_ruleUInt32=ruleUInt32 
	 { $current=$iv_ruleUInt32.current.getText(); }  
	 EOF 
;

// Rule UInt32
ruleUInt32 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getUInt32Access().getINTTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleTLSModel
entryRuleTLSModel returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTLSModelRule()); } 
	 iv_ruleTLSModel=ruleTLSModel 
	 { $current=$iv_ruleTLSModel.current.getText(); }  
	 EOF 
;

// Rule TLSModel
ruleTLSModel returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='localdynamic' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTLSModelAccess().getLocaldynamicKeyword_0()); 
    }

    |
	kw='initialexec' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTLSModelAccess().getInitialexecKeyword_1()); 
    }

    |
	kw='localexec' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTLSModelAccess().getLocalexecKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleOptionalThreadLocal
entryRuleOptionalThreadLocal returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOptionalThreadLocalRule()); } 
	 iv_ruleOptionalThreadLocal=ruleOptionalThreadLocal 
	 { $current=$iv_ruleOptionalThreadLocal.current.getText(); }  
	 EOF 
;

// Rule OptionalThreadLocal
ruleOptionalThreadLocal returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_WS_0=RULE_WS    {
		$current.merge(this_WS_0);
    }

    { 
    newLeafNode(this_WS_0, grammarAccess.getOptionalThreadLocalAccess().getWSTerminalRuleCall_0()); 
    }

    |
	kw='thread_local' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOptionalThreadLocalAccess().getThread_localKeyword_1()); 
    }

    |(
	kw='thread_local' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOptionalThreadLocalAccess().getThread_localKeyword_2_0()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOptionalThreadLocalAccess().getLeftParenthesisKeyword_2_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getOptionalThreadLocalAccess().getTLSModelParserRuleCall_2_2()); 
    }
    this_TLSModel_4=ruleTLSModel    {
		$current.merge(this_TLSModel_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOptionalThreadLocalAccess().getRightParenthesisKeyword_2_3()); 
    }
))
    ;





// Entry rule entryRuleOptionalLinkage
entryRuleOptionalLinkage returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOptionalLinkageRule()); } 
	 iv_ruleOptionalLinkage=ruleOptionalLinkage 
	 { $current=$iv_ruleOptionalLinkage.current.getText(); }  
	 EOF 
;

// Rule OptionalLinkage
ruleOptionalLinkage returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_WS_0=RULE_WS    {
		$current.merge(this_WS_0);
    }

    { 
    newLeafNode(this_WS_0, grammarAccess.getOptionalLinkageAccess().getWSTerminalRuleCall_0()); 
    }

    |
	kw='private' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOptionalLinkageAccess().getPrivateKeyword_1()); 
    }

    |
	kw='linker_private' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOptionalLinkageAccess().getLinker_privateKeyword_2()); 
    }

    |
	kw='linker_private_weak' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOptionalLinkageAccess().getLinker_private_weakKeyword_3()); 
    }

    |
	kw='internal' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOptionalLinkageAccess().getInternalKeyword_4()); 
    }

    |
	kw='weak' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOptionalLinkageAccess().getWeakKeyword_5()); 
    }

    |
	kw='weak_odr' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOptionalLinkageAccess().getWeak_odrKeyword_6()); 
    }

    |
	kw='linkonce' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOptionalLinkageAccess().getLinkonceKeyword_7()); 
    }

    |
	kw='linkonce_odr' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOptionalLinkageAccess().getLinkonce_odrKeyword_8()); 
    }

    |
	kw='linkonce_odr_auto_hide' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOptionalLinkageAccess().getLinkonce_odr_auto_hideKeyword_9()); 
    }

    |
	kw='available_externally' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOptionalLinkageAccess().getAvailable_externallyKeyword_10()); 
    }

    |
	kw='appending' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOptionalLinkageAccess().getAppendingKeyword_11()); 
    }

    |
	kw='dllexport' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOptionalLinkageAccess().getDllexportKeyword_12()); 
    }

    |
	kw='common' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOptionalLinkageAccess().getCommonKeyword_13()); 
    }

    |
	kw='dllimport' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOptionalLinkageAccess().getDllimportKeyword_14()); 
    }

    |
	kw='extern_weak' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOptionalLinkageAccess().getExtern_weakKeyword_15()); 
    }

    |
	kw='external' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOptionalLinkageAccess().getExternalKeyword_16()); 
    }
)
    ;





// Entry rule entryRuleOptionalAddrSpace
entryRuleOptionalAddrSpace returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOptionalAddrSpaceRule()); } 
	 iv_ruleOptionalAddrSpace=ruleOptionalAddrSpace 
	 { $current=$iv_ruleOptionalAddrSpace.current.getText(); }  
	 EOF 
;

// Rule OptionalAddrSpace
ruleOptionalAddrSpace returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_WS_0=RULE_WS    {
		$current.merge(this_WS_0);
    }

    { 
    newLeafNode(this_WS_0, grammarAccess.getOptionalAddrSpaceAccess().getWSTerminalRuleCall_0()); 
    }

    |(
	kw='addrspace' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOptionalAddrSpaceAccess().getAddrspaceKeyword_1_0()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOptionalAddrSpaceAccess().getLeftParenthesisKeyword_1_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getOptionalAddrSpaceAccess().getUInt32ParserRuleCall_1_2()); 
    }
    this_UInt32_3=ruleUInt32    {
		$current.merge(this_UInt32_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOptionalAddrSpaceAccess().getRightParenthesisKeyword_1_3()); 
    }
))
    ;





// Entry rule entryRuleOptionalVisibility
entryRuleOptionalVisibility returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOptionalVisibilityRule()); } 
	 iv_ruleOptionalVisibility=ruleOptionalVisibility 
	 { $current=$iv_ruleOptionalVisibility.current.getText(); }  
	 EOF 
;

// Rule OptionalVisibility
ruleOptionalVisibility returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_WS_0=RULE_WS    {
		$current.merge(this_WS_0);
    }

    { 
    newLeafNode(this_WS_0, grammarAccess.getOptionalVisibilityAccess().getWSTerminalRuleCall_0()); 
    }

    |
	kw='default' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOptionalVisibilityAccess().getDefaultKeyword_1()); 
    }

    |
	kw='hidden' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOptionalVisibilityAccess().getHiddenKeyword_2()); 
    }

    |
	kw='protected' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOptionalVisibilityAccess().getProtectedKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleOptionalCallingConv
entryRuleOptionalCallingConv returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOptionalCallingConvRule()); } 
	 iv_ruleOptionalCallingConv=ruleOptionalCallingConv 
	 { $current=$iv_ruleOptionalCallingConv.current.getText(); }  
	 EOF 
;

// Rule OptionalCallingConv
ruleOptionalCallingConv returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_WS_0=RULE_WS    {
		$current.merge(this_WS_0);
    }

    { 
    newLeafNode(this_WS_0, grammarAccess.getOptionalCallingConvAccess().getWSTerminalRuleCall_0()); 
    }

    |
	kw='ccc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOptionalCallingConvAccess().getCccKeyword_1()); 
    }

    |
	kw='fastcc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOptionalCallingConvAccess().getFastccKeyword_2()); 
    }

    |
	kw='coldcc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOptionalCallingConvAccess().getColdccKeyword_3()); 
    }

    |
	kw='x86_stdcallcc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOptionalCallingConvAccess().getX86_stdcallccKeyword_4()); 
    }

    |
	kw='x86_fastcallcc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOptionalCallingConvAccess().getX86_fastcallccKeyword_5()); 
    }

    |
	kw='x86_thiscallcc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOptionalCallingConvAccess().getX86_thiscallccKeyword_6()); 
    }

    |
	kw='arm_apcscc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOptionalCallingConvAccess().getArm_apcsccKeyword_7()); 
    }

    |
	kw='arm_aapcscc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOptionalCallingConvAccess().getArm_aapcsccKeyword_8()); 
    }

    |
	kw='arm_aapcs_vfpcc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOptionalCallingConvAccess().getArm_aapcs_vfpccKeyword_9()); 
    }

    |
	kw='msp430_intrcc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOptionalCallingConvAccess().getMsp430_intrccKeyword_10()); 
    }

    |
	kw='ptx_kernel' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOptionalCallingConvAccess().getPtx_kernelKeyword_11()); 
    }

    |
	kw='ptx_device' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOptionalCallingConvAccess().getPtx_deviceKeyword_12()); 
    }

    |
	kw='spir_func' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOptionalCallingConvAccess().getSpir_funcKeyword_13()); 
    }

    |
	kw='spir_kernel' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOptionalCallingConvAccess().getSpir_kernelKeyword_14()); 
    }

    |(
	kw='cc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOptionalCallingConvAccess().getCcKeyword_15_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getOptionalCallingConvAccess().getUINTParserRuleCall_15_1()); 
    }
    this_UINT_16=ruleUINT    {
		$current.merge(this_UINT_16);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))
    ;





// Entry rule entryRuleUINT
entryRuleUINT returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUINTRule()); } 
	 iv_ruleUINT=ruleUINT 
	 { $current=$iv_ruleUINT.current.getText(); }  
	 EOF 
;

// Rule UINT
ruleUINT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getUINTAccess().getINTTerminalRuleCall()); 
    }

    ;















// Entry rule entryRuleLocalVar
entryRuleLocalVar returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocalVarRule()); } 
	 iv_ruleLocalVar=ruleLocalVar 
	 { $current=$iv_ruleLocalVar.current.getText(); }  
	 EOF 
;

// Rule LocalVar
ruleLocalVar returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLocalVarAccess().getKeyword()); 
    }

    ;





// Entry rule entryRuleType
entryRuleType returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); } 
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current.getText(); }  
	 EOF 
;

// Rule Type
ruleType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='float' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeAccess().getFloatKeyword_0()); 
    }

    |
	kw='void' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeAccess().getVoidKeyword_1()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getStructTypeParserRuleCall_2()); 
    }
    this_StructType_2=ruleStructType    {
		$current.merge(this_StructType_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |(
	kw='[' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeAccess().getLeftSquareBracketKeyword_3_0()); 
    }

	kw=']' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeAccess().getRightSquareBracketKeyword_3_1()); 
    }
)
    |(
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeAccess().getLessThanSignKeyword_4_0()); 
    }

	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeAccess().getGreaterThanSignKeyword_4_1()); 
    }
)
    |
	kw='%foo' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeAccess().getFooKeyword_5()); 
    }

    |
	kw='%4' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeAccess().getPercentSignDigitFourKeyword_6()); 
    }

    |(
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getTypesParserRuleCall_7_0()); 
    }
    this_Types_9=ruleTypes    {
		$current.merge(this_Types_9);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeAccess().getLeftParenthesisKeyword_7_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getTypeAccess().getArgTypeListIParserRuleCall_7_2()); 
    }
    this_ArgTypeListI_11=ruleArgTypeListI    {
		$current.merge(this_ArgTypeListI_11);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeAccess().getRightParenthesisKeyword_7_3()); 
    }

    { 
        newCompositeNode(grammarAccess.getTypeAccess().getOptFuncAttrsParserRuleCall_7_4()); 
    }
    this_OptFuncAttrs_13=ruleOptFuncAttrs    {
		$current.merge(this_OptFuncAttrs_13);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
	kw='[' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeAccess().getLeftSquareBracketKeyword_8_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getTypeAccess().getAPSINTVALParserRuleCall_8_1()); 
    }
    this_APSINTVAL_15=ruleAPSINTVAL    {
		$current.merge(this_APSINTVAL_15);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='x' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeAccess().getXKeyword_8_2()); 
    }

    { 
        newCompositeNode(grammarAccess.getTypeAccess().getTypesParserRuleCall_8_3()); 
    }
    this_Types_17=ruleTypes    {
		$current.merge(this_Types_17);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=']' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeAccess().getRightSquareBracketKeyword_8_4()); 
    }
)
    |(
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeAccess().getLessThanSignKeyword_9_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getTypeAccess().getAPSINTVALParserRuleCall_9_1()); 
    }
    this_APSINTVAL_20=ruleAPSINTVAL    {
		$current.merge(this_APSINTVAL_20);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='x' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeAccess().getXKeyword_9_2()); 
    }

    { 
        newCompositeNode(grammarAccess.getTypeAccess().getTypesParserRuleCall_9_3()); 
    }
    this_Types_22=ruleTypes    {
		$current.merge(this_Types_22);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeAccess().getGreaterThanSignKeyword_9_4()); 
    }
))
    ;





// Entry rule entryRuleOptFuncAttrs
entryRuleOptFuncAttrs returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOptFuncAttrsRule()); } 
	 iv_ruleOptFuncAttrs=ruleOptFuncAttrs 
	 { $current=$iv_ruleOptFuncAttrs.current.getText(); }  
	 EOF 
;

// Rule OptFuncAttrs
ruleOptFuncAttrs returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_WS_0=RULE_WS    {
		$current.merge(this_WS_0);
    }

    { 
    newLeafNode(this_WS_0, grammarAccess.getOptFuncAttrsAccess().getWSTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleAPSINTVAL
entryRuleAPSINTVAL returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAPSINTVALRule()); } 
	 iv_ruleAPSINTVAL=ruleAPSINTVAL 
	 { $current=$iv_ruleAPSINTVAL.current.getText(); }  
	 EOF 
;

// Rule APSINTVAL
ruleAPSINTVAL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_WS_0=RULE_WS    {
		$current.merge(this_WS_0);
    }

    { 
    newLeafNode(this_WS_0, grammarAccess.getAPSINTVALAccess().getWSTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleTypes
entryRuleTypes returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypesRule()); } 
	 iv_ruleTypes=ruleTypes 
	 { $current=$iv_ruleTypes.current.getText(); }  
	 EOF 
;

// Rule Types
ruleTypes returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_WS_0=RULE_WS    {
		$current.merge(this_WS_0);
    }

    { 
    newLeafNode(this_WS_0, grammarAccess.getTypesAccess().getWSTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleParameterList
entryRuleParameterList returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterListRule()); } 
	 iv_ruleParameterList=ruleParameterList 
	 { $current=$iv_ruleParameterList.current.getText(); }  
	 EOF 
;

// Rule ParameterList
ruleParameterList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getParameterListAccess().getLeftParenthesisKeyword_0_0()); 
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getParameterListAccess().getRightParenthesisKeyword_0_1()); 
    }
)
    |(
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getParameterListAccess().getLeftParenthesisKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getParameterListAccess().getArgParserRuleCall_1_1()); 
    }
    this_Arg_3=ruleArg    {
		$current.merge(this_Arg_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getParameterListAccess().getCommaKeyword_1_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getParameterListAccess().getArgParserRuleCall_1_2_1()); 
    }
    this_Arg_5=ruleArg    {
		$current.merge(this_Arg_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getParameterListAccess().getRightParenthesisKeyword_1_3()); 
    }
))
    ;





// Entry rule entryRuleArg
entryRuleArg returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getArgRule()); } 
	 iv_ruleArg=ruleArg 
	 { $current=$iv_ruleArg.current.getText(); }  
	 EOF 
;

// Rule Arg
ruleArg returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getArgAccess().getTypeParserRuleCall_0()); 
    }
    this_Type_0=ruleType    {
		$current.merge(this_Type_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getArgAccess().getOptionalAttributesParserRuleCall_1()); 
    }
    this_OptionalAttributes_1=ruleOptionalAttributes    {
		$current.merge(this_OptionalAttributes_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getArgAccess().getValueParserRuleCall_2()); 
    }
    this_Value_2=ruleValue    {
		$current.merge(this_Value_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getArgAccess().getOptionalAttributesParserRuleCall_3()); 
    }
    this_OptionalAttributes_3=ruleOptionalAttributes    {
		$current.merge(this_OptionalAttributes_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleValue
entryRuleValue returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueRule()); } 
	 iv_ruleValue=ruleValue 
	 { $current=$iv_ruleValue.current.getText(); }  
	 EOF 
;

// Rule Value
ruleValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_WS_0=RULE_WS    {
		$current.merge(this_WS_0);
    }

    { 
    newLeafNode(this_WS_0, grammarAccess.getValueAccess().getWSTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleOptionalAttributes
entryRuleOptionalAttributes returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOptionalAttributesRule()); } 
	 iv_ruleOptionalAttributes=ruleOptionalAttributes 
	 { $current=$iv_ruleOptionalAttributes.current.getText(); }  
	 EOF 
;

// Rule OptionalAttributes
ruleOptionalAttributes returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_WS_0=RULE_WS    {
		$current.merge(this_WS_0);
    }

    { 
    newLeafNode(this_WS_0, grammarAccess.getOptionalAttributesAccess().getWSTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleArgumentList
entryRuleArgumentList returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getArgumentListRule()); } 
	 iv_ruleArgumentList=ruleArgumentList 
	 { $current=$iv_ruleArgumentList.current.getText(); }  
	 EOF 
;

// Rule ArgumentList
ruleArgumentList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getArgumentListAccess().getLeftParenthesisKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getArgumentListAccess().getArgTypeListIParserRuleCall_1()); 
    }
    this_ArgTypeListI_1=ruleArgTypeListI    {
		$current.merge(this_ArgTypeListI_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getArgumentListAccess().getRightParenthesisKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleArgTypeListI
entryRuleArgTypeListI returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getArgTypeListIRule()); } 
	 iv_ruleArgTypeListI=ruleArgTypeListI 
	 { $current=$iv_ruleArgTypeListI.current.getText(); }  
	 EOF 
;

// Rule ArgTypeListI
ruleArgTypeListI returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_WS_0=RULE_WS    {
		$current.merge(this_WS_0);
    }

    { 
    newLeafNode(this_WS_0, grammarAccess.getArgTypeListIAccess().getWSTerminalRuleCall_0()); 
    }

    |
	kw='...' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getArgTypeListIAccess().getFullStopFullStopFullStopKeyword_1()); 
    }

    |(
    { 
        newCompositeNode(grammarAccess.getArgTypeListIAccess().getArgTypeListParserRuleCall_2_0()); 
    }
    this_ArgTypeList_2=ruleArgTypeList    {
		$current.merge(this_ArgTypeList_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getArgTypeListIAccess().getCommaKeyword_2_1()); 
    }

	kw='...' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getArgTypeListIAccess().getFullStopFullStopFullStopKeyword_2_2()); 
    }
)
    |(
    { 
        newCompositeNode(grammarAccess.getArgTypeListIAccess().getArgTypeParserRuleCall_3_0()); 
    }
    this_ArgType_5=ruleArgType    {
		$current.merge(this_ArgType_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getArgTypeListIAccess().getCommaKeyword_3_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getArgTypeListIAccess().getArgTypeParserRuleCall_3_1_1()); 
    }
    this_ArgType_7=ruleArgType    {
		$current.merge(this_ArgType_7);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*))
    ;





// Entry rule entryRuleArgType
entryRuleArgType returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getArgTypeRule()); } 
	 iv_ruleArgType=ruleArgType 
	 { $current=$iv_ruleArgType.current.getText(); }  
	 EOF 
;

// Rule ArgType
ruleArgType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_WS_0=RULE_WS    {
		$current.merge(this_WS_0);
    }

    { 
    newLeafNode(this_WS_0, grammarAccess.getArgTypeAccess().getWSTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleArgTypeList
entryRuleArgTypeList returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getArgTypeListRule()); } 
	 iv_ruleArgTypeList=ruleArgTypeList 
	 { $current=$iv_ruleArgTypeList.current.getText(); }  
	 EOF 
;

// Rule ArgTypeList
ruleArgTypeList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_WS_0=RULE_WS    {
		$current.merge(this_WS_0);
    }

    { 
    newLeafNode(this_WS_0, grammarAccess.getArgTypeListAccess().getWSTerminalRuleCall()); 
    }

    ;







// Entry rule entryRuleStructType
entryRuleStructType returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStructTypeRule()); } 
	 iv_ruleStructType=ruleStructType 
	 { $current=$iv_ruleStructType.current.getText(); }  
	 EOF 
;

// Rule StructType
ruleStructType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStructTypeAccess().getLeftCurlyBracketKeyword_0_0()); 
    }

	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStructTypeAccess().getRightCurlyBracketKeyword_0_1()); 
    }
)
    |(
	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStructTypeAccess().getLeftCurlyBracketKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getStructTypeAccess().getTypeParserRuleCall_1_1()); 
    }
    this_Type_3=ruleType    {
		$current.merge(this_Type_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStructTypeAccess().getCommaKeyword_1_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getStructTypeAccess().getTypeParserRuleCall_1_2_1()); 
    }
    this_Type_5=ruleType    {
		$current.merge(this_Type_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStructTypeAccess().getRightCurlyBracketKeyword_1_3()); 
    }
)
    |(
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStructTypeAccess().getLessThanSignKeyword_2_0()); 
    }

	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStructTypeAccess().getLeftCurlyBracketKeyword_2_1()); 
    }

	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStructTypeAccess().getRightCurlyBracketKeyword_2_2()); 
    }

	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStructTypeAccess().getGreaterThanSignKeyword_2_3()); 
    }
)
    |(
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStructTypeAccess().getLessThanSignKeyword_3_0()); 
    }

	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStructTypeAccess().getLeftCurlyBracketKeyword_3_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getStructTypeAccess().getTypeParserRuleCall_3_2()); 
    }
    this_Type_13=ruleType    {
		$current.merge(this_Type_13);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStructTypeAccess().getCommaKeyword_3_3_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getStructTypeAccess().getTypeParserRuleCall_3_3_1()); 
    }
    this_Type_15=ruleType    {
		$current.merge(this_Type_15);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStructTypeAccess().getRightCurlyBracketKeyword_3_4()); 
    }

	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStructTypeAccess().getGreaterThanSignKeyword_3_5()); 
    }
))
    ;







// Entry rule entryRuleAlignStack
entryRuleAlignStack returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAlignStackRule()); } 
	 iv_ruleAlignStack=ruleAlignStack 
	 { $current=$iv_ruleAlignStack.current.getText(); }  
	 EOF 
;

// Rule AlignStack
ruleAlignStack returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_WS_0=RULE_WS    {
		$current.merge(this_WS_0);
    }

    { 
    newLeafNode(this_WS_0, grammarAccess.getAlignStackAccess().getWSTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleSideEffect
entryRuleSideEffect returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSideEffectRule()); } 
	 iv_ruleSideEffect=ruleSideEffect 
	 { $current=$iv_ruleSideEffect.current.getText(); }  
	 EOF 
;

// Rule SideEffect
ruleSideEffect returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_WS_0=RULE_WS    {
		$current.merge(this_WS_0);
    }

    { 
    newLeafNode(this_WS_0, grammarAccess.getSideEffectAccess().getWSTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleConstVector
entryRuleConstVector returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstVectorRule()); } 
	 iv_ruleConstVector=ruleConstVector 
	 { $current=$iv_ruleConstVector.current.getText(); }  
	 EOF 
;

// Rule ConstVector
ruleConstVector returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_WS_0=RULE_WS    {
		$current.merge(this_WS_0);
    }

    { 
    newLeafNode(this_WS_0, grammarAccess.getConstVectorAccess().getWSTerminalRuleCall()); 
    }

    ;









// Entry rule entryRuleFunctionHeader
entryRuleFunctionHeader returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionHeaderRule()); } 
	 iv_ruleFunctionHeader=ruleFunctionHeader 
	 { $current=$iv_ruleFunctionHeader.current.getText(); }  
	 EOF 
;

// Rule FunctionHeader
ruleFunctionHeader returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFunctionHeaderAccess().getOptionalLinkageParserRuleCall_0()); 
    }
    this_OptionalLinkage_0=ruleOptionalLinkage    {
		$current.merge(this_OptionalLinkage_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getFunctionHeaderAccess().getOptionalVisibilityParserRuleCall_1()); 
    }
    this_OptionalVisibility_1=ruleOptionalVisibility    {
		$current.merge(this_OptionalVisibility_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getFunctionHeaderAccess().getOptionalCallingConvParserRuleCall_2()); 
    }
    this_OptionalCallingConv_2=ruleOptionalCallingConv    {
		$current.merge(this_OptionalCallingConv_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getFunctionHeaderAccess().getOptRetAttrsParserRuleCall_3()); 
    }
    this_OptRetAttrs_3=ruleOptRetAttrs    {
		$current.merge(this_OptRetAttrs_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getFunctionHeaderAccess().getOptionalUnNammedAddrParserRuleCall_4()); 
    }
    this_OptionalUnNammedAddr_4=ruleOptionalUnNammedAddr    {
		$current.merge(this_OptionalUnNammedAddr_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getFunctionHeaderAccess().getTypeParserRuleCall_5()); 
    }
    this_Type_5=ruleType    {
		$current.merge(this_Type_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getFunctionHeaderAccess().getGlobalNameParserRuleCall_6()); 
    }
    this_GlobalName_6=ruleGlobalName    {
		$current.merge(this_GlobalName_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFunctionHeaderAccess().getLeftParenthesisKeyword_7()); 
    }

    { 
        newCompositeNode(grammarAccess.getFunctionHeaderAccess().getArgumentListParserRuleCall_8()); 
    }
    this_ArgumentList_8=ruleArgumentList    {
		$current.merge(this_ArgumentList_8);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFunctionHeaderAccess().getRightParenthesisKeyword_9()); 
    }

    { 
        newCompositeNode(grammarAccess.getFunctionHeaderAccess().getOptFuncAttrsParserRuleCall_10()); 
    }
    this_OptFuncAttrs_10=ruleOptFuncAttrs    {
		$current.merge(this_OptFuncAttrs_10);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getFunctionHeaderAccess().getOptSectionParserRuleCall_11()); 
    }
    this_OptSection_11=ruleOptSection    {
		$current.merge(this_OptSection_11);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getFunctionHeaderAccess().getOptionalAlignParserRuleCall_12()); 
    }
    this_OptionalAlign_12=ruleOptionalAlign    {
		$current.merge(this_OptionalAlign_12);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getFunctionHeaderAccess().getOptGCParserRuleCall_13()); 
    }
    this_OptGC_13=ruleOptGC    {
		$current.merge(this_OptGC_13);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleOptGC
entryRuleOptGC returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOptGCRule()); } 
	 iv_ruleOptGC=ruleOptGC 
	 { $current=$iv_ruleOptGC.current.getText(); }  
	 EOF 
;

// Rule OptGC
ruleOptGC returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_WS_0=RULE_WS    {
		$current.merge(this_WS_0);
    }

    { 
    newLeafNode(this_WS_0, grammarAccess.getOptGCAccess().getWSTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleOptionalAlign
entryRuleOptionalAlign returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOptionalAlignRule()); } 
	 iv_ruleOptionalAlign=ruleOptionalAlign 
	 { $current=$iv_ruleOptionalAlign.current.getText(); }  
	 EOF 
;

// Rule OptionalAlign
ruleOptionalAlign returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_WS_0=RULE_WS    {
		$current.merge(this_WS_0);
    }

    { 
    newLeafNode(this_WS_0, grammarAccess.getOptionalAlignAccess().getWSTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleOptSection
entryRuleOptSection returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOptSectionRule()); } 
	 iv_ruleOptSection=ruleOptSection 
	 { $current=$iv_ruleOptSection.current.getText(); }  
	 EOF 
;

// Rule OptSection
ruleOptSection returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_WS_0=RULE_WS    {
		$current.merge(this_WS_0);
    }

    { 
    newLeafNode(this_WS_0, grammarAccess.getOptSectionAccess().getWSTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleGlobalName
entryRuleGlobalName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getGlobalNameRule()); } 
	 iv_ruleGlobalName=ruleGlobalName 
	 { $current=$iv_ruleGlobalName.current.getText(); }  
	 EOF 
;

// Rule GlobalName
ruleGlobalName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_WS_0=RULE_WS    {
		$current.merge(this_WS_0);
    }

    { 
    newLeafNode(this_WS_0, grammarAccess.getGlobalNameAccess().getWSTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleOptRetAttrs
entryRuleOptRetAttrs returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOptRetAttrsRule()); } 
	 iv_ruleOptRetAttrs=ruleOptRetAttrs 
	 { $current=$iv_ruleOptRetAttrs.current.getText(); }  
	 EOF 
;

// Rule OptRetAttrs
ruleOptRetAttrs returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_WS_0=RULE_WS    {
		$current.merge(this_WS_0);
    }

    { 
    newLeafNode(this_WS_0, grammarAccess.getOptRetAttrsAccess().getWSTerminalRuleCall()); 
    }

    ;







// Entry rule entryRuleBasicBlock
entryRuleBasicBlock returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBasicBlockRule()); } 
	 iv_ruleBasicBlock=ruleBasicBlock 
	 { $current=$iv_ruleBasicBlock.current.getText(); }  
	 EOF 
;

// Rule BasicBlock
ruleBasicBlock returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getBasicBlockAccess().getLabelStrParserRuleCall_0()); 
    }
    this_LabelStr_0=ruleLabelStr    {
		$current.merge(this_LabelStr_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getBasicBlockAccess().getInstructionParserRuleCall_1()); 
    }
    this_Instruction_1=ruleInstruction    {
		$current.merge(this_Instruction_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleLabelStr
entryRuleLabelStr returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLabelStrRule()); } 
	 iv_ruleLabelStr=ruleLabelStr 
	 { $current=$iv_ruleLabelStr.current.getText(); }  
	 EOF 
;

// Rule LabelStr
ruleLabelStr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_WS_0=RULE_WS    {
		$current.merge(this_WS_0);
    }

    { 
    newLeafNode(this_WS_0, grammarAccess.getLabelStrAccess().getWSTerminalRuleCall()); 
    }

    ;









// Entry rule entryRuleInstruction
entryRuleInstruction returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstructionRule()); } 
	 iv_ruleInstruction=ruleInstruction 
	 { $current=$iv_ruleInstruction.current.getText(); }  
	 EOF 
;

// Rule Instruction
ruleInstruction returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='switch' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInstructionAccess().getSwitchKeyword_0_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getTypeAndValueParserRuleCall_0_1()); 
    }
    this_TypeAndValue_1=ruleTypeAndValue    {
		$current.merge(this_TypeAndValue_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInstructionAccess().getCommaKeyword_0_2()); 
    }

    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getTypeAndValueParserRuleCall_0_3()); 
    }
    this_TypeAndValue_3=ruleTypeAndValue    {
		$current.merge(this_TypeAndValue_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='[' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInstructionAccess().getLeftSquareBracketKeyword_0_4()); 
    }

    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getJumpTableParserRuleCall_0_5()); 
    }
    this_JumpTable_5=ruleJumpTable    {
		$current.merge(this_JumpTable_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=']' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInstructionAccess().getRightSquareBracketKeyword_0_6()); 
    }
)
    |(
	kw='indirectbr' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInstructionAccess().getIndirectbrKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getTypeAndValueParserRuleCall_1_1()); 
    }
    this_TypeAndValue_8=ruleTypeAndValue    {
		$current.merge(this_TypeAndValue_8);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInstructionAccess().getCommaKeyword_1_2()); 
    }

	kw='[' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInstructionAccess().getLeftSquareBracketKeyword_1_3()); 
    }

    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getLabelListParserRuleCall_1_4()); 
    }
    this_LabelList_11=ruleLabelList    {
		$current.merge(this_LabelList_11);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=']' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInstructionAccess().getRightSquareBracketKeyword_1_5()); 
    }
))
    ;





// Entry rule entryRuleLabelList
entryRuleLabelList returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLabelListRule()); } 
	 iv_ruleLabelList=ruleLabelList 
	 { $current=$iv_ruleLabelList.current.getText(); }  
	 EOF 
;

// Rule LabelList
ruleLabelList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_WS_0=RULE_WS    {
		$current.merge(this_WS_0);
    }

    { 
    newLeafNode(this_WS_0, grammarAccess.getLabelListAccess().getWSTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleJumpTable
entryRuleJumpTable returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getJumpTableRule()); } 
	 iv_ruleJumpTable=ruleJumpTable 
	 { $current=$iv_ruleJumpTable.current.getText(); }  
	 EOF 
;

// Rule JumpTable
ruleJumpTable returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getJumpTableAccess().getTypeAndValueParserRuleCall_0()); 
    }
    this_TypeAndValue_0=ruleTypeAndValue    {
		$current.merge(this_TypeAndValue_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getJumpTableAccess().getCommaKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getJumpTableAccess().getTypeAndValueParserRuleCall_2()); 
    }
    this_TypeAndValue_2=ruleTypeAndValue    {
		$current.merge(this_TypeAndValue_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
    ;











// Entry rule entryRuleArithmeticOps
entryRuleArithmeticOps returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getArithmeticOpsRule()); } 
	 iv_ruleArithmeticOps=ruleArithmeticOps 
	 { $current=$iv_ruleArithmeticOps.current.getText(); }  
	 EOF 
;

// Rule ArithmeticOps
ruleArithmeticOps returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_WS_0=RULE_WS    {
		$current.merge(this_WS_0);
    }

    { 
    newLeafNode(this_WS_0, grammarAccess.getArithmeticOpsAccess().getWSTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleLocalVarID
entryRuleLocalVarID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocalVarIDRule()); } 
	 iv_ruleLocalVarID=ruleLocalVarID 
	 { $current=$iv_ruleLocalVarID.current.getText(); }  
	 EOF 
;

// Rule LocalVarID
ruleLocalVarID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_WS_0=RULE_WS    {
		$current.merge(this_WS_0);
    }

    { 
    newLeafNode(this_WS_0, grammarAccess.getLocalVarIDAccess().getWSTerminalRuleCall()); 
    }

    ;









// Entry rule entryRuleFPredicates
entryRuleFPredicates returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFPredicatesRule()); } 
	 iv_ruleFPredicates=ruleFPredicates 
	 { $current=$iv_ruleFPredicates.current.getText(); }  
	 EOF 
;

// Rule FPredicates
ruleFPredicates returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_WS_0=RULE_WS    {
		$current.merge(this_WS_0);
    }

    { 
    newLeafNode(this_WS_0, grammarAccess.getFPredicatesAccess().getWSTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleIPredicates
entryRuleIPredicates returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIPredicatesRule()); } 
	 iv_ruleIPredicates=ruleIPredicates 
	 { $current=$iv_ruleIPredicates.current.getText(); }  
	 EOF 
;

// Rule IPredicates
ruleIPredicates returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_WS_0=RULE_WS    {
		$current.merge(this_WS_0);
    }

    { 
    newLeafNode(this_WS_0, grammarAccess.getIPredicatesAccess().getWSTerminalRuleCall()); 
    }

    ;







// Entry rule entryRuleCastOpc
entryRuleCastOpc returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCastOpcRule()); } 
	 iv_ruleCastOpc=ruleCastOpc 
	 { $current=$iv_ruleCastOpc.current.getText(); }  
	 EOF 
;

// Rule CastOpc
ruleCastOpc returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_WS_0=RULE_WS    {
		$current.merge(this_WS_0);
    }

    { 
    newLeafNode(this_WS_0, grammarAccess.getCastOpcAccess().getWSTerminalRuleCall()); 
    }

    ;



















// Entry rule entryRuleClause
entryRuleClause returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getClauseRule()); } 
	 iv_ruleClause=ruleClause 
	 { $current=$iv_ruleClause.current.getText(); }  
	 EOF 
;

// Rule Clause
ruleClause returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='catch' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getClauseAccess().getCatchKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getClauseAccess().getTypeAndValueParserRuleCall_1()); 
    }
    this_TypeAndValue_1=ruleTypeAndValue    {
		$current.merge(this_TypeAndValue_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='filter' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getClauseAccess().getFilterKeyword_2()); 
    }

	kw='filter' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getClauseAccess().getFilterKeyword_3()); 
    }

    { 
        newCompositeNode(grammarAccess.getClauseAccess().getTypeAndValueParserRuleCall_4()); 
    }
    this_TypeAndValue_4=ruleTypeAndValue    {
		$current.merge(this_TypeAndValue_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getClauseAccess().getCommaKeyword_5_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getClauseAccess().getTypeAndValueParserRuleCall_5_1()); 
    }
    this_TypeAndValue_6=ruleTypeAndValue    {
		$current.merge(this_TypeAndValue_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;









// Entry rule entryRuleOptionalInfo
entryRuleOptionalInfo returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOptionalInfoRule()); } 
	 iv_ruleOptionalInfo=ruleOptionalInfo 
	 { $current=$iv_ruleOptionalInfo.current.getText(); }  
	 EOF 
;

// Rule OptionalInfo
ruleOptionalInfo returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_WS_0=RULE_WS    {
		$current.merge(this_WS_0);
    }

    { 
    newLeafNode(this_WS_0, grammarAccess.getOptionalInfoAccess().getWSTerminalRuleCall()); 
    }

    ;













// Entry rule entryRuleBinOp
entryRuleBinOp returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBinOpRule()); } 
	 iv_ruleBinOp=ruleBinOp 
	 { $current=$iv_ruleBinOp.current.getText(); }  
	 EOF 
;

// Rule BinOp
ruleBinOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_WS_0=RULE_WS    {
		$current.merge(this_WS_0);
    }

    { 
    newLeafNode(this_WS_0, grammarAccess.getBinOpAccess().getWSTerminalRuleCall()); 
    }

    ;







// Entry rule entryRuleAtomicOrdering
entryRuleAtomicOrdering returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtomicOrderingRule()); } 
	 iv_ruleAtomicOrdering=ruleAtomicOrdering 
	 { $current=$iv_ruleAtomicOrdering.current.getText(); }  
	 EOF 
;

// Rule AtomicOrdering
ruleAtomicOrdering returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_WS_0=RULE_WS    {
		$current.merge(this_WS_0);
    }

    { 
    newLeafNode(this_WS_0, grammarAccess.getAtomicOrderingAccess().getWSTerminalRuleCall()); 
    }

    ;













// Entry rule entryRuleElement
entryRuleElement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getElementRule()); } 
	 iv_ruleElement=ruleElement 
	 { $current=$iv_ruleElement.current.getText(); }  
	 EOF 
;

// Rule Element
ruleElement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='null' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getElementAccess().getNullKeyword_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getElementAccess().getTypeAndValueParserRuleCall_1()); 
    }
    this_TypeAndValue_1=ruleTypeAndValue    {
		$current.merge(this_TypeAndValue_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


