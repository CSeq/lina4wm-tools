/*
* generated by Xtext
*/
package de.upb.llvm_parser.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class LLVMGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class LLVMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LLVM");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsAbstractElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//LLVM:
		//	elements+=AbstractElement*;
		public ParserRule getRule() { return rule; }

		//elements+=AbstractElement*
		public Assignment getElementsAssignment() { return cElementsAssignment; }

		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_0() { return cElementsAbstractElementParserRuleCall_0; }
	}

	public class NUMBERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NUMBER");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//NUMBER returns EBigDecimal:
		//	"-"? INT ("." INT)?;
		public ParserRule getRule() { return rule; }

		//"-"? INT ("." INT)?
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//("." INT)?
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
	}

	public class CallingConvElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CallingConv");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCccKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFastccKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cColdccKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cX86_stdcallccKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cX86_fastcallccKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cX86_thiscallccKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cArm_apcsccKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cArm_aapcsccKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cArm_aapcs_vfpccKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cMsp430_intrccKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cPtx_kernelKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cPtx_deviceKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cSpir_funcKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cSpir_kernelKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Group cGroup_14 = (Group)cAlternatives.eContents().get(14);
		private final Keyword cCcKeyword_14_0 = (Keyword)cGroup_14.eContents().get(0);
		private final Keyword cLessThanSignKeyword_14_1 = (Keyword)cGroup_14.eContents().get(1);
		private final RuleCall cNUMBERParserRuleCall_14_2 = (RuleCall)cGroup_14.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_14_3 = (Keyword)cGroup_14.eContents().get(3);
		private final RuleCall cNUMBERParserRuleCall_14_4 = (RuleCall)cGroup_14.eContents().get(4);
		
		//CallingConv:
		//	"ccc" | "fastcc" | "coldcc" | "x86_stdcallcc" | "x86_fastcallcc" | "x86_thiscallcc" | "arm_apcscc" | "arm_aapcscc" |
		//	"arm_aapcs_vfpcc" | "msp430_intrcc" | "ptx_kernel" | "ptx_device" | "spir_func" | "spir_kernel" | "cc" "<" NUMBER ">"
		//	NUMBER;
		public ParserRule getRule() { return rule; }

		//"ccc" | "fastcc" | "coldcc" | "x86_stdcallcc" | "x86_fastcallcc" | "x86_thiscallcc" | "arm_apcscc" | "arm_aapcscc" |
		//"arm_aapcs_vfpcc" | "msp430_intrcc" | "ptx_kernel" | "ptx_device" | "spir_func" | "spir_kernel" | "cc" "<" NUMBER ">"
		//NUMBER
		public Alternatives getAlternatives() { return cAlternatives; }

		//"ccc"
		public Keyword getCccKeyword_0() { return cCccKeyword_0; }

		//"fastcc"
		public Keyword getFastccKeyword_1() { return cFastccKeyword_1; }

		//"coldcc"
		public Keyword getColdccKeyword_2() { return cColdccKeyword_2; }

		//"x86_stdcallcc"
		public Keyword getX86_stdcallccKeyword_3() { return cX86_stdcallccKeyword_3; }

		//"x86_fastcallcc"
		public Keyword getX86_fastcallccKeyword_4() { return cX86_fastcallccKeyword_4; }

		//"x86_thiscallcc"
		public Keyword getX86_thiscallccKeyword_5() { return cX86_thiscallccKeyword_5; }

		//"arm_apcscc"
		public Keyword getArm_apcsccKeyword_6() { return cArm_apcsccKeyword_6; }

		//"arm_aapcscc"
		public Keyword getArm_aapcsccKeyword_7() { return cArm_aapcsccKeyword_7; }

		//"arm_aapcs_vfpcc"
		public Keyword getArm_aapcs_vfpccKeyword_8() { return cArm_aapcs_vfpccKeyword_8; }

		//"msp430_intrcc"
		public Keyword getMsp430_intrccKeyword_9() { return cMsp430_intrccKeyword_9; }

		//"ptx_kernel"
		public Keyword getPtx_kernelKeyword_10() { return cPtx_kernelKeyword_10; }

		//"ptx_device"
		public Keyword getPtx_deviceKeyword_11() { return cPtx_deviceKeyword_11; }

		//"spir_func"
		public Keyword getSpir_funcKeyword_12() { return cSpir_funcKeyword_12; }

		//"spir_kernel"
		public Keyword getSpir_kernelKeyword_13() { return cSpir_kernelKeyword_13; }

		//"cc" "<" NUMBER ">" NUMBER
		public Group getGroup_14() { return cGroup_14; }

		//"cc"
		public Keyword getCcKeyword_14_0() { return cCcKeyword_14_0; }

		//"<"
		public Keyword getLessThanSignKeyword_14_1() { return cLessThanSignKeyword_14_1; }

		//NUMBER
		public RuleCall getNUMBERParserRuleCall_14_2() { return cNUMBERParserRuleCall_14_2; }

		//">"
		public Keyword getGreaterThanSignKeyword_14_3() { return cGreaterThanSignKeyword_14_3; }

		//NUMBER
		public RuleCall getNUMBERParserRuleCall_14_4() { return cNUMBERParserRuleCall_14_4; }
	}

	public class FUNCTION_ATTRIBUTESElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FUNCTION_ATTRIBUTES");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAddress_safetyKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cAlignstackKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cNUMBERParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Keyword cGreaterThanSignKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Keyword cAlwaysinlineKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cNonlazybindKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cInlinehintKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cNakedKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cNoimplicitfloatKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cNoinlineKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cNoredzoneKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cNoreturnKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cNounwindKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cOptsizeKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cReadnoneKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cReadonlyKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cReturns_twiceKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cSspKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cSspreqKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cUwtableKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		
		//FUNCTION_ATTRIBUTES:
		//	"address_safety" | "alignstack" "(" "<" NUMBER ">" ")" | "alwaysinline" | "nonlazybind" | "inlinehint" | "naked" |
		//	"noimplicitfloat" | "noinline" | "noredzone" | "noreturn" | "nounwind" | "optsize" | "readnone" | "readonly" |
		//	"returns_twice" | "ssp" | "sspreq" | "uwtable";
		public ParserRule getRule() { return rule; }

		//"address_safety" | "alignstack" "(" "<" NUMBER ">" ")" | "alwaysinline" | "nonlazybind" | "inlinehint" | "naked" |
		//"noimplicitfloat" | "noinline" | "noredzone" | "noreturn" | "nounwind" | "optsize" | "readnone" | "readonly" |
		//"returns_twice" | "ssp" | "sspreq" | "uwtable"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"address_safety"
		public Keyword getAddress_safetyKeyword_0() { return cAddress_safetyKeyword_0; }

		//"alignstack" "(" "<" NUMBER ">" ")"
		public Group getGroup_1() { return cGroup_1; }

		//"alignstack"
		public Keyword getAlignstackKeyword_1_0() { return cAlignstackKeyword_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//"<"
		public Keyword getLessThanSignKeyword_1_2() { return cLessThanSignKeyword_1_2; }

		//NUMBER
		public RuleCall getNUMBERParserRuleCall_1_3() { return cNUMBERParserRuleCall_1_3; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_4() { return cGreaterThanSignKeyword_1_4; }

		//")"
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }

		//"alwaysinline"
		public Keyword getAlwaysinlineKeyword_2() { return cAlwaysinlineKeyword_2; }

		//"nonlazybind"
		public Keyword getNonlazybindKeyword_3() { return cNonlazybindKeyword_3; }

		//"inlinehint"
		public Keyword getInlinehintKeyword_4() { return cInlinehintKeyword_4; }

		//"naked"
		public Keyword getNakedKeyword_5() { return cNakedKeyword_5; }

		//"noimplicitfloat"
		public Keyword getNoimplicitfloatKeyword_6() { return cNoimplicitfloatKeyword_6; }

		//"noinline"
		public Keyword getNoinlineKeyword_7() { return cNoinlineKeyword_7; }

		//"noredzone"
		public Keyword getNoredzoneKeyword_8() { return cNoredzoneKeyword_8; }

		//"noreturn"
		public Keyword getNoreturnKeyword_9() { return cNoreturnKeyword_9; }

		//"nounwind"
		public Keyword getNounwindKeyword_10() { return cNounwindKeyword_10; }

		//"optsize"
		public Keyword getOptsizeKeyword_11() { return cOptsizeKeyword_11; }

		//"readnone"
		public Keyword getReadnoneKeyword_12() { return cReadnoneKeyword_12; }

		//"readonly"
		public Keyword getReadonlyKeyword_13() { return cReadonlyKeyword_13; }

		//"returns_twice"
		public Keyword getReturns_twiceKeyword_14() { return cReturns_twiceKeyword_14; }

		//"ssp"
		public Keyword getSspKeyword_15() { return cSspKeyword_15; }

		//"sspreq"
		public Keyword getSspreqKeyword_16() { return cSspreqKeyword_16; }

		//"uwtable"
		public Keyword getUwtableKeyword_17() { return cUwtableKeyword_17; }
	}

	public class KEYWORDSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "KEYWORDS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cALIAS_LINKAGETerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cATOMIC_ORDERINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBIN_OPTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRETURN_ATTRIBUTESTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCAST_OPTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cI_PREDICATESTerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cVISIBILITYTerminalRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cLINKAGETerminalRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//KEYWORDS:
		//	ALIAS_LINKAGE | ATOMIC_ORDERING | BIN_OP | RETURN_ATTRIBUTES | CAST_OP | I_PREDICATES | VISIBILITY | LINKAGE;
		public ParserRule getRule() { return rule; }

		//ALIAS_LINKAGE | ATOMIC_ORDERING | BIN_OP | RETURN_ATTRIBUTES | CAST_OP | I_PREDICATES | VISIBILITY | LINKAGE
		public Alternatives getAlternatives() { return cAlternatives; }

		//ALIAS_LINKAGE
		public RuleCall getALIAS_LINKAGETerminalRuleCall_0() { return cALIAS_LINKAGETerminalRuleCall_0; }

		//ATOMIC_ORDERING
		public RuleCall getATOMIC_ORDERINGTerminalRuleCall_1() { return cATOMIC_ORDERINGTerminalRuleCall_1; }

		//BIN_OP
		public RuleCall getBIN_OPTerminalRuleCall_2() { return cBIN_OPTerminalRuleCall_2; }

		//RETURN_ATTRIBUTES
		public RuleCall getRETURN_ATTRIBUTESTerminalRuleCall_3() { return cRETURN_ATTRIBUTESTerminalRuleCall_3; }

		//CAST_OP
		public RuleCall getCAST_OPTerminalRuleCall_4() { return cCAST_OPTerminalRuleCall_4; }

		//I_PREDICATES
		public RuleCall getI_PREDICATESTerminalRuleCall_5() { return cI_PREDICATESTerminalRuleCall_5; }

		//VISIBILITY
		public RuleCall getVISIBILITYTerminalRuleCall_6() { return cVISIBILITYTerminalRuleCall_6; }

		//LINKAGE
		public RuleCall getLINKAGETerminalRuleCall_7() { return cLINKAGETerminalRuleCall_7; }
	}

	public class LABEL_IDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LABEL_ID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cKEYWORDSParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cINT_TYPETerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cBOOLTerminalRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final Keyword cCatchKeyword_0_4 = (Keyword)cAlternatives_0.eContents().get(4);
		private final Keyword cInvokeKeyword_0_5 = (Keyword)cAlternatives_0.eContents().get(5);
		private final Keyword cResumeKeyword_0_6 = (Keyword)cAlternatives_0.eContents().get(6);
		private final Keyword cSwitchKeyword_0_7 = (Keyword)cAlternatives_0.eContents().get(7);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final RuleCall cKEYWORDSParserRuleCall_1_1_0 = (RuleCall)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cINT_TYPETerminalRuleCall_1_1_1 = (RuleCall)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_1_2 = (RuleCall)cAlternatives_1_1.eContents().get(2);
		private final RuleCall cBOOLTerminalRuleCall_1_1_3 = (RuleCall)cAlternatives_1_1.eContents().get(3);
		private final Keyword cCatchKeyword_1_1_4 = (Keyword)cAlternatives_1_1.eContents().get(4);
		private final Keyword cInvokeKeyword_1_1_5 = (Keyword)cAlternatives_1_1.eContents().get(5);
		private final Keyword cResumeKeyword_1_1_6 = (Keyword)cAlternatives_1_1.eContents().get(6);
		private final Keyword cSwitchKeyword_1_1_7 = (Keyword)cAlternatives_1_1.eContents().get(7);
		
		//LABEL_ID:
		//	(KEYWORDS | INT_TYPE | ID | BOOL | "catch" | "invoke" | "resume" | "switch") ("." (KEYWORDS | INT_TYPE | ID | BOOL |
		//	"catch" | "invoke" | "resume" | "switch"))*;
		public ParserRule getRule() { return rule; }

		//(KEYWORDS | INT_TYPE | ID | BOOL | "catch" | "invoke" | "resume" | "switch") ("." (KEYWORDS | INT_TYPE | ID | BOOL |
		//"catch" | "invoke" | "resume" | "switch"))*
		public Group getGroup() { return cGroup; }

		//KEYWORDS | INT_TYPE | ID | BOOL | "catch" | "invoke" | "resume" | "switch"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//KEYWORDS
		public RuleCall getKEYWORDSParserRuleCall_0_0() { return cKEYWORDSParserRuleCall_0_0; }

		//INT_TYPE
		public RuleCall getINT_TYPETerminalRuleCall_0_1() { return cINT_TYPETerminalRuleCall_0_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_0_2() { return cIDTerminalRuleCall_0_2; }

		//BOOL
		public RuleCall getBOOLTerminalRuleCall_0_3() { return cBOOLTerminalRuleCall_0_3; }

		//"catch"
		public Keyword getCatchKeyword_0_4() { return cCatchKeyword_0_4; }

		//"invoke"
		public Keyword getInvokeKeyword_0_5() { return cInvokeKeyword_0_5; }

		//"resume"
		public Keyword getResumeKeyword_0_6() { return cResumeKeyword_0_6; }

		//"switch"
		public Keyword getSwitchKeyword_0_7() { return cSwitchKeyword_0_7; }

		//("." (KEYWORDS | INT_TYPE | ID | BOOL | "catch" | "invoke" | "resume" | "switch"))*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//KEYWORDS | INT_TYPE | ID | BOOL | "catch" | "invoke" | "resume" | "switch"
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//KEYWORDS
		public RuleCall getKEYWORDSParserRuleCall_1_1_0() { return cKEYWORDSParserRuleCall_1_1_0; }

		//INT_TYPE
		public RuleCall getINT_TYPETerminalRuleCall_1_1_1() { return cINT_TYPETerminalRuleCall_1_1_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1_2() { return cIDTerminalRuleCall_1_1_2; }

		//BOOL
		public RuleCall getBOOLTerminalRuleCall_1_1_3() { return cBOOLTerminalRuleCall_1_1_3; }

		//"catch"
		public Keyword getCatchKeyword_1_1_4() { return cCatchKeyword_1_1_4; }

		//"invoke"
		public Keyword getInvokeKeyword_1_1_5() { return cInvokeKeyword_1_1_5; }

		//"resume"
		public Keyword getResumeKeyword_1_1_6() { return cResumeKeyword_1_1_6; }

		//"switch"
		public Keyword getSwitchKeyword_1_1_7() { return cSwitchKeyword_1_1_7; }
	}

	public class AbstractElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cTopLevelEntityParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cSL_COMMENTTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cMainLevelEntityParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cSL_COMMENTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//AbstractElement:
		//	TopLevelEntity SL_COMMENT? | MainLevelEntity SL_COMMENT?;
		public ParserRule getRule() { return rule; }

		//TopLevelEntity SL_COMMENT? | MainLevelEntity SL_COMMENT?
		public Alternatives getAlternatives() { return cAlternatives; }

		//TopLevelEntity SL_COMMENT?
		public Group getGroup_0() { return cGroup_0; }

		//TopLevelEntity
		public RuleCall getTopLevelEntityParserRuleCall_0_0() { return cTopLevelEntityParserRuleCall_0_0; }

		//SL_COMMENT?
		public RuleCall getSL_COMMENTTerminalRuleCall_0_1() { return cSL_COMMENTTerminalRuleCall_0_1; }

		//MainLevelEntity SL_COMMENT?
		public Group getGroup_1() { return cGroup_1; }

		//MainLevelEntity
		public RuleCall getMainLevelEntityParserRuleCall_1_0() { return cMainLevelEntityParserRuleCall_1_0; }

		//SL_COMMENT?
		public RuleCall getSL_COMMENTTerminalRuleCall_1_1() { return cSL_COMMENTTerminalRuleCall_1_1; }
	}

	public class TopLevelEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TopLevelEntity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cModuleKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cAsmKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cModuleAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cModuleSTRINGTerminalRuleCall_0_2_0 = (RuleCall)cModuleAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cTargetKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cDatalayoutKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cTripleKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cTargetAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cTargetSTRINGTerminalRuleCall_1_3_0 = (RuleCall)cTargetAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cDeplibsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cLibsAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cLibsSTRINGTerminalRuleCall_2_3_0 = (RuleCall)cLibsAssignment_2_3.eContents().get(0);
		private final Group cGroup_2_4 = (Group)cGroup_2.eContents().get(4);
		private final Keyword cCommaKeyword_2_4_0 = (Keyword)cGroup_2_4.eContents().get(0);
		private final Assignment cLibsAssignment_2_4_1 = (Assignment)cGroup_2_4.eContents().get(1);
		private final RuleCall cLibsSTRINGTerminalRuleCall_2_4_1_0 = (RuleCall)cLibsAssignment_2_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		
		//TopLevelEntity:
		//	"module" "asm" module=STRING | "target" ("datalayout" | "triple") "=" target=STRING | "deplibs" "=" "[" libs+=STRING
		//	("," libs+=STRING)* "]";
		public ParserRule getRule() { return rule; }

		//"module" "asm" module=STRING | "target" ("datalayout" | "triple") "=" target=STRING | "deplibs" "=" "[" libs+=STRING
		//("," libs+=STRING)* "]"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"module" "asm" module=STRING
		public Group getGroup_0() { return cGroup_0; }

		//"module"
		public Keyword getModuleKeyword_0_0() { return cModuleKeyword_0_0; }

		//"asm"
		public Keyword getAsmKeyword_0_1() { return cAsmKeyword_0_1; }

		//module=STRING
		public Assignment getModuleAssignment_0_2() { return cModuleAssignment_0_2; }

		//STRING
		public RuleCall getModuleSTRINGTerminalRuleCall_0_2_0() { return cModuleSTRINGTerminalRuleCall_0_2_0; }

		//"target" ("datalayout" | "triple") "=" target=STRING
		public Group getGroup_1() { return cGroup_1; }

		//"target"
		public Keyword getTargetKeyword_1_0() { return cTargetKeyword_1_0; }

		//"datalayout" | "triple"
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//"datalayout"
		public Keyword getDatalayoutKeyword_1_1_0() { return cDatalayoutKeyword_1_1_0; }

		//"triple"
		public Keyword getTripleKeyword_1_1_1() { return cTripleKeyword_1_1_1; }

		//"="
		public Keyword getEqualsSignKeyword_1_2() { return cEqualsSignKeyword_1_2; }

		//target=STRING
		public Assignment getTargetAssignment_1_3() { return cTargetAssignment_1_3; }

		//STRING
		public RuleCall getTargetSTRINGTerminalRuleCall_1_3_0() { return cTargetSTRINGTerminalRuleCall_1_3_0; }

		//"deplibs" "=" "[" libs+=STRING ("," libs+=STRING)* "]"
		public Group getGroup_2() { return cGroup_2; }

		//"deplibs"
		public Keyword getDeplibsKeyword_2_0() { return cDeplibsKeyword_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1() { return cEqualsSignKeyword_2_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_2() { return cLeftSquareBracketKeyword_2_2; }

		//libs+=STRING
		public Assignment getLibsAssignment_2_3() { return cLibsAssignment_2_3; }

		//STRING
		public RuleCall getLibsSTRINGTerminalRuleCall_2_3_0() { return cLibsSTRINGTerminalRuleCall_2_3_0; }

		//("," libs+=STRING)*
		public Group getGroup_2_4() { return cGroup_2_4; }

		//","
		public Keyword getCommaKeyword_2_4_0() { return cCommaKeyword_2_4_0; }

		//libs+=STRING
		public Assignment getLibsAssignment_2_4_1() { return cLibsAssignment_2_4_1; }

		//STRING
		public RuleCall getLibsSTRINGTerminalRuleCall_2_4_1_0() { return cLibsSTRINGTerminalRuleCall_2_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_5() { return cRightSquareBracketKeyword_2_5; }
	}

	public class MainLevelEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MainLevelEntity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGlobalDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFunctionDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAliasDefinitionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMetadataValueParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		/// *
		// * This rule is used to devide the Function Definitions form the Variable Definitions.
		// * / MainLevelEntity:
		//	TypeDefinition | GlobalDefinition | FunctionDefinition | AliasDefinition | MetadataValue;
		public ParserRule getRule() { return rule; }

		//TypeDefinition | GlobalDefinition | FunctionDefinition | AliasDefinition | MetadataValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//TypeDefinition
		public RuleCall getTypeDefinitionParserRuleCall_0() { return cTypeDefinitionParserRuleCall_0; }

		//GlobalDefinition
		public RuleCall getGlobalDefinitionParserRuleCall_1() { return cGlobalDefinitionParserRuleCall_1; }

		//FunctionDefinition
		public RuleCall getFunctionDefinitionParserRuleCall_2() { return cFunctionDefinitionParserRuleCall_2; }

		//AliasDefinition
		public RuleCall getAliasDefinitionParserRuleCall_3() { return cAliasDefinitionParserRuleCall_3; }

		//MetadataValue
		public RuleCall getMetadataValueParserRuleCall_4() { return cMetadataValueParserRuleCall_4; }
	}

	public class TypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAddressAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAddressAddressParserRuleCall_0_0 = (RuleCall)cAddressAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cTypeKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Assignment cStructAssignment_2_1_0 = (Assignment)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cStructStructureParserRuleCall_2_1_0_0 = (RuleCall)cStructAssignment_2_1_0.eContents().get(0);
		private final Keyword cOpaqueKeyword_2_1_1 = (Keyword)cAlternatives_2_1.eContents().get(1);
		
		//TypeDefinition:
		//	address=Address "=" ("type" (struct=Structure | "opaque"));
		public ParserRule getRule() { return rule; }

		//address=Address "=" ("type" (struct=Structure | "opaque"))
		public Group getGroup() { return cGroup; }

		//address=Address
		public Assignment getAddressAssignment_0() { return cAddressAssignment_0; }

		//Address
		public RuleCall getAddressAddressParserRuleCall_0_0() { return cAddressAddressParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"type" (struct=Structure | "opaque")
		public Group getGroup_2() { return cGroup_2; }

		//"type"
		public Keyword getTypeKeyword_2_0() { return cTypeKeyword_2_0; }

		//struct=Structure | "opaque"
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }

		//struct=Structure
		public Assignment getStructAssignment_2_1_0() { return cStructAssignment_2_1_0; }

		//Structure
		public RuleCall getStructStructureParserRuleCall_2_1_0_0() { return cStructStructureParserRuleCall_2_1_0_0; }

		//"opaque"
		public Keyword getOpaqueKeyword_2_1_1() { return cOpaqueKeyword_2_1_1; }
	}

	public class GlobalDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GlobalDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAddressAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAddressAddressParserRuleCall_0_0 = (RuleCall)cAddressAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cLINKAGETerminalRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cALIAS_LINKAGETerminalRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		private final Keyword cGlobalKeyword_2_2 = (Keyword)cAlternatives_2.eContents().get(2);
		private final Keyword cUnnamed_addrKeyword_2_3 = (Keyword)cAlternatives_2.eContents().get(3);
		private final Keyword cConstantKeyword_2_4 = (Keyword)cAlternatives_2.eContents().get(4);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueParameterParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cAlignKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cAlignAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cAlignNUMBERParserRuleCall_4_2_0 = (RuleCall)cAlignAssignment_4_2.eContents().get(0);
		
		//GlobalDefinition:
		//	address=Address "=" (LINKAGE | ALIAS_LINKAGE | "global" | "unnamed_addr" | "constant")* value=Parameter ("," "align"
		//	align=NUMBER)?;
		public ParserRule getRule() { return rule; }

		//address=Address "=" (LINKAGE | ALIAS_LINKAGE | "global" | "unnamed_addr" | "constant")* value=Parameter ("," "align"
		//align=NUMBER)?
		public Group getGroup() { return cGroup; }

		//address=Address
		public Assignment getAddressAssignment_0() { return cAddressAssignment_0; }

		//Address
		public RuleCall getAddressAddressParserRuleCall_0_0() { return cAddressAddressParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//(LINKAGE | ALIAS_LINKAGE | "global" | "unnamed_addr" | "constant")*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//LINKAGE
		public RuleCall getLINKAGETerminalRuleCall_2_0() { return cLINKAGETerminalRuleCall_2_0; }

		//ALIAS_LINKAGE
		public RuleCall getALIAS_LINKAGETerminalRuleCall_2_1() { return cALIAS_LINKAGETerminalRuleCall_2_1; }

		//"global"
		public Keyword getGlobalKeyword_2_2() { return cGlobalKeyword_2_2; }

		//"unnamed_addr"
		public Keyword getUnnamed_addrKeyword_2_3() { return cUnnamed_addrKeyword_2_3; }

		//"constant"
		public Keyword getConstantKeyword_2_4() { return cConstantKeyword_2_4; }

		//value=Parameter
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//Parameter
		public RuleCall getValueParameterParserRuleCall_3_0() { return cValueParameterParserRuleCall_3_0; }

		//("," "align" align=NUMBER)?
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//"align"
		public Keyword getAlignKeyword_4_1() { return cAlignKeyword_4_1; }

		//align=NUMBER
		public Assignment getAlignAssignment_4_2() { return cAlignAssignment_4_2; }

		//NUMBER
		public RuleCall getAlignNUMBERParserRuleCall_4_2_0() { return cAlignNUMBERParserRuleCall_4_2_0; }
	}

	public class FunctionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cDefineKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final RuleCall cLINKAGETerminalRuleCall_0_1_0 = (RuleCall)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cALIAS_LINKAGETerminalRuleCall_0_1_1 = (RuleCall)cAlternatives_0_1.eContents().get(1);
		private final RuleCall cVISIBILITYTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cCallingConvParserRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final RuleCall cRETURN_ATTRIBUTESTerminalRuleCall_0_4 = (RuleCall)cGroup_0.eContents().get(4);
		private final Assignment cReturnTypeAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cReturnTypeTypeUseParserRuleCall_0_5_0 = (RuleCall)cReturnTypeAssignment_0_5.eContents().get(0);
		private final Assignment cAddressAssignment_0_6 = (Assignment)cGroup_0.eContents().get(6);
		private final RuleCall cAddressAddressParserRuleCall_0_6_0 = (RuleCall)cAddressAssignment_0_6.eContents().get(0);
		private final Alternatives cAlternatives_0_7 = (Alternatives)cGroup_0.eContents().get(7);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_0_7_0 = (Keyword)cAlternatives_0_7.eContents().get(0);
		private final Group cGroup_0_7_1 = (Group)cAlternatives_0_7.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_7_1_0 = (Keyword)cGroup_0_7_1.eContents().get(0);
		private final Assignment cParameterAssignment_0_7_1_1 = (Assignment)cGroup_0_7_1.eContents().get(1);
		private final RuleCall cParameterFunctionParameterListParserRuleCall_0_7_1_1_0 = (RuleCall)cParameterAssignment_0_7_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_7_1_2 = (Keyword)cGroup_0_7_1.eContents().get(2);
		private final Keyword cUnnamed_addrKeyword_0_8 = (Keyword)cGroup_0.eContents().get(8);
		private final RuleCall cFUNCTION_ATTRIBUTESParserRuleCall_0_9 = (RuleCall)cGroup_0.eContents().get(9);
		private final Group cGroup_0_10 = (Group)cGroup_0.eContents().get(10);
		private final Keyword cSectionKeyword_0_10_0 = (Keyword)cGroup_0_10.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_0_10_1 = (RuleCall)cGroup_0_10.eContents().get(1);
		private final Group cGroup_0_11 = (Group)cGroup_0.eContents().get(11);
		private final Keyword cAlignKeyword_0_11_0 = (Keyword)cGroup_0_11.eContents().get(0);
		private final Assignment cAlignAssignment_0_11_1 = (Assignment)cGroup_0_11.eContents().get(1);
		private final RuleCall cAlignNUMBERParserRuleCall_0_11_1_0 = (RuleCall)cAlignAssignment_0_11_1.eContents().get(0);
		private final Assignment cBodyAssignment_0_12 = (Assignment)cGroup_0.eContents().get(12);
		private final RuleCall cBodyFunctionBodyParserRuleCall_0_12_0 = (RuleCall)cBodyAssignment_0_12.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cDeclareKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final RuleCall cLINKAGETerminalRuleCall_1_1_0 = (RuleCall)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cALIAS_LINKAGETerminalRuleCall_1_1_1 = (RuleCall)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cVISIBILITYTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final RuleCall cCallingConvParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final RuleCall cRETURN_ATTRIBUTESTerminalRuleCall_1_4 = (RuleCall)cGroup_1.eContents().get(4);
		private final Assignment cReturnTypeAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cReturnTypeTypeUseParserRuleCall_1_5_0 = (RuleCall)cReturnTypeAssignment_1_5.eContents().get(0);
		private final Assignment cAddressAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cAddressAddressParserRuleCall_1_6_0 = (RuleCall)cAddressAssignment_1_6.eContents().get(0);
		private final Alternatives cAlternatives_1_7 = (Alternatives)cGroup_1.eContents().get(7);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_1_7_0 = (Keyword)cAlternatives_1_7.eContents().get(0);
		private final Group cGroup_1_7_1 = (Group)cAlternatives_1_7.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_7_1_0 = (Keyword)cGroup_1_7_1.eContents().get(0);
		private final Assignment cParameterAssignment_1_7_1_1 = (Assignment)cGroup_1_7_1.eContents().get(1);
		private final RuleCall cParameterFunctionParameterListParserRuleCall_1_7_1_1_0 = (RuleCall)cParameterAssignment_1_7_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_7_1_2 = (Keyword)cGroup_1_7_1.eContents().get(2);
		private final Keyword cUnnamed_addrKeyword_1_8 = (Keyword)cGroup_1.eContents().get(8);
		private final RuleCall cFUNCTION_ATTRIBUTESParserRuleCall_1_9 = (RuleCall)cGroup_1.eContents().get(9);
		private final Group cGroup_1_10 = (Group)cGroup_1.eContents().get(10);
		private final Keyword cSectionKeyword_1_10_0 = (Keyword)cGroup_1_10.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1_10_1 = (RuleCall)cGroup_1_10.eContents().get(1);
		private final Group cGroup_1_11 = (Group)cGroup_1.eContents().get(11);
		private final Keyword cAlignKeyword_1_11_0 = (Keyword)cGroup_1_11.eContents().get(0);
		private final Assignment cAlignAssignment_1_11_1 = (Assignment)cGroup_1_11.eContents().get(1);
		private final RuleCall cAlignNUMBERParserRuleCall_1_11_1_0 = (RuleCall)cAlignAssignment_1_11_1.eContents().get(0);
		
		//FunctionDefinition:
		//	"define" (LINKAGE | ALIAS_LINKAGE)? VISIBILITY? CallingConv? RETURN_ATTRIBUTES? returnType=TypeUse address=Address
		//	("()" | "(" parameter=FunctionParameterList? ")") "unnamed_addr"? FUNCTION_ATTRIBUTES* ("section " STRING)? ("align"
		//	align=NUMBER)? body=FunctionBody | "declare" (LINKAGE | ALIAS_LINKAGE)? VISIBILITY? CallingConv? RETURN_ATTRIBUTES?
		//	returnType=TypeUse address=Address ("()" | "(" parameter=FunctionParameterList? ")") "unnamed_addr"?
		//	FUNCTION_ATTRIBUTES* ("section " STRING)? ("align" align=NUMBER)?;
		public ParserRule getRule() { return rule; }

		//"define" (LINKAGE | ALIAS_LINKAGE)? VISIBILITY? CallingConv? RETURN_ATTRIBUTES? returnType=TypeUse address=Address ("()"
		//| "(" parameter=FunctionParameterList? ")") "unnamed_addr"? FUNCTION_ATTRIBUTES* ("section " STRING)? ("align"
		//align=NUMBER)? body=FunctionBody | "declare" (LINKAGE | ALIAS_LINKAGE)? VISIBILITY? CallingConv? RETURN_ATTRIBUTES?
		//returnType=TypeUse address=Address ("()" | "(" parameter=FunctionParameterList? ")") "unnamed_addr"?
		//FUNCTION_ATTRIBUTES* ("section " STRING)? ("align" align=NUMBER)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//"define" (LINKAGE | ALIAS_LINKAGE)? VISIBILITY? CallingConv? RETURN_ATTRIBUTES? returnType=TypeUse address=Address ("()"
		//| "(" parameter=FunctionParameterList? ")") "unnamed_addr"? FUNCTION_ATTRIBUTES* ("section " STRING)? ("align"
		//align=NUMBER)? body=FunctionBody
		public Group getGroup_0() { return cGroup_0; }

		//"define"
		public Keyword getDefineKeyword_0_0() { return cDefineKeyword_0_0; }

		//(LINKAGE | ALIAS_LINKAGE)?
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }

		//LINKAGE
		public RuleCall getLINKAGETerminalRuleCall_0_1_0() { return cLINKAGETerminalRuleCall_0_1_0; }

		//ALIAS_LINKAGE
		public RuleCall getALIAS_LINKAGETerminalRuleCall_0_1_1() { return cALIAS_LINKAGETerminalRuleCall_0_1_1; }

		//VISIBILITY?
		public RuleCall getVISIBILITYTerminalRuleCall_0_2() { return cVISIBILITYTerminalRuleCall_0_2; }

		//CallingConv?
		public RuleCall getCallingConvParserRuleCall_0_3() { return cCallingConvParserRuleCall_0_3; }

		//RETURN_ATTRIBUTES?
		public RuleCall getRETURN_ATTRIBUTESTerminalRuleCall_0_4() { return cRETURN_ATTRIBUTESTerminalRuleCall_0_4; }

		//returnType=TypeUse
		public Assignment getReturnTypeAssignment_0_5() { return cReturnTypeAssignment_0_5; }

		//TypeUse
		public RuleCall getReturnTypeTypeUseParserRuleCall_0_5_0() { return cReturnTypeTypeUseParserRuleCall_0_5_0; }

		//address=Address
		public Assignment getAddressAssignment_0_6() { return cAddressAssignment_0_6; }

		//Address
		public RuleCall getAddressAddressParserRuleCall_0_6_0() { return cAddressAddressParserRuleCall_0_6_0; }

		//"()" | "(" parameter=FunctionParameterList? ")"
		public Alternatives getAlternatives_0_7() { return cAlternatives_0_7; }

		//"()"
		public Keyword getLeftParenthesisRightParenthesisKeyword_0_7_0() { return cLeftParenthesisRightParenthesisKeyword_0_7_0; }

		//"(" parameter=FunctionParameterList? ")"
		public Group getGroup_0_7_1() { return cGroup_0_7_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_7_1_0() { return cLeftParenthesisKeyword_0_7_1_0; }

		//parameter=FunctionParameterList?
		public Assignment getParameterAssignment_0_7_1_1() { return cParameterAssignment_0_7_1_1; }

		//FunctionParameterList
		public RuleCall getParameterFunctionParameterListParserRuleCall_0_7_1_1_0() { return cParameterFunctionParameterListParserRuleCall_0_7_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_7_1_2() { return cRightParenthesisKeyword_0_7_1_2; }

		//"unnamed_addr"?
		public Keyword getUnnamed_addrKeyword_0_8() { return cUnnamed_addrKeyword_0_8; }

		//FUNCTION_ATTRIBUTES*
		public RuleCall getFUNCTION_ATTRIBUTESParserRuleCall_0_9() { return cFUNCTION_ATTRIBUTESParserRuleCall_0_9; }

		//("section " STRING)?
		public Group getGroup_0_10() { return cGroup_0_10; }

		//"section "
		public Keyword getSectionKeyword_0_10_0() { return cSectionKeyword_0_10_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0_10_1() { return cSTRINGTerminalRuleCall_0_10_1; }

		//("align" align=NUMBER)?
		public Group getGroup_0_11() { return cGroup_0_11; }

		//"align"
		public Keyword getAlignKeyword_0_11_0() { return cAlignKeyword_0_11_0; }

		//align=NUMBER
		public Assignment getAlignAssignment_0_11_1() { return cAlignAssignment_0_11_1; }

		//NUMBER
		public RuleCall getAlignNUMBERParserRuleCall_0_11_1_0() { return cAlignNUMBERParserRuleCall_0_11_1_0; }

		//body=FunctionBody
		public Assignment getBodyAssignment_0_12() { return cBodyAssignment_0_12; }

		//FunctionBody
		public RuleCall getBodyFunctionBodyParserRuleCall_0_12_0() { return cBodyFunctionBodyParserRuleCall_0_12_0; }

		//"declare" (LINKAGE | ALIAS_LINKAGE)? VISIBILITY? CallingConv? RETURN_ATTRIBUTES? returnType=TypeUse address=Address
		//("()" | "(" parameter=FunctionParameterList? ")") "unnamed_addr"? FUNCTION_ATTRIBUTES* ("section " STRING)? ("align"
		//align=NUMBER)?
		public Group getGroup_1() { return cGroup_1; }

		//"declare"
		public Keyword getDeclareKeyword_1_0() { return cDeclareKeyword_1_0; }

		//(LINKAGE | ALIAS_LINKAGE)?
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//LINKAGE
		public RuleCall getLINKAGETerminalRuleCall_1_1_0() { return cLINKAGETerminalRuleCall_1_1_0; }

		//ALIAS_LINKAGE
		public RuleCall getALIAS_LINKAGETerminalRuleCall_1_1_1() { return cALIAS_LINKAGETerminalRuleCall_1_1_1; }

		//VISIBILITY?
		public RuleCall getVISIBILITYTerminalRuleCall_1_2() { return cVISIBILITYTerminalRuleCall_1_2; }

		//CallingConv?
		public RuleCall getCallingConvParserRuleCall_1_3() { return cCallingConvParserRuleCall_1_3; }

		//RETURN_ATTRIBUTES?
		public RuleCall getRETURN_ATTRIBUTESTerminalRuleCall_1_4() { return cRETURN_ATTRIBUTESTerminalRuleCall_1_4; }

		//returnType=TypeUse
		public Assignment getReturnTypeAssignment_1_5() { return cReturnTypeAssignment_1_5; }

		//TypeUse
		public RuleCall getReturnTypeTypeUseParserRuleCall_1_5_0() { return cReturnTypeTypeUseParserRuleCall_1_5_0; }

		//address=Address
		public Assignment getAddressAssignment_1_6() { return cAddressAssignment_1_6; }

		//Address
		public RuleCall getAddressAddressParserRuleCall_1_6_0() { return cAddressAddressParserRuleCall_1_6_0; }

		//"()" | "(" parameter=FunctionParameterList? ")"
		public Alternatives getAlternatives_1_7() { return cAlternatives_1_7; }

		//"()"
		public Keyword getLeftParenthesisRightParenthesisKeyword_1_7_0() { return cLeftParenthesisRightParenthesisKeyword_1_7_0; }

		//"(" parameter=FunctionParameterList? ")"
		public Group getGroup_1_7_1() { return cGroup_1_7_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_7_1_0() { return cLeftParenthesisKeyword_1_7_1_0; }

		//parameter=FunctionParameterList?
		public Assignment getParameterAssignment_1_7_1_1() { return cParameterAssignment_1_7_1_1; }

		//FunctionParameterList
		public RuleCall getParameterFunctionParameterListParserRuleCall_1_7_1_1_0() { return cParameterFunctionParameterListParserRuleCall_1_7_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_7_1_2() { return cRightParenthesisKeyword_1_7_1_2; }

		//"unnamed_addr"?
		public Keyword getUnnamed_addrKeyword_1_8() { return cUnnamed_addrKeyword_1_8; }

		//FUNCTION_ATTRIBUTES*
		public RuleCall getFUNCTION_ATTRIBUTESParserRuleCall_1_9() { return cFUNCTION_ATTRIBUTESParserRuleCall_1_9; }

		//("section " STRING)?
		public Group getGroup_1_10() { return cGroup_1_10; }

		//"section "
		public Keyword getSectionKeyword_1_10_0() { return cSectionKeyword_1_10_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_10_1() { return cSTRINGTerminalRuleCall_1_10_1; }

		//("align" align=NUMBER)?
		public Group getGroup_1_11() { return cGroup_1_11; }

		//"align"
		public Keyword getAlignKeyword_1_11_0() { return cAlignKeyword_1_11_0; }

		//align=NUMBER
		public Assignment getAlignAssignment_1_11_1() { return cAlignAssignment_1_11_1; }

		//NUMBER
		public RuleCall getAlignNUMBERParserRuleCall_1_11_1_0() { return cAlignNUMBERParserRuleCall_1_11_1_0; }
	}

	public class AliasDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AliasDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAddressAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAddressAddressParserRuleCall_0_0 = (RuleCall)cAddressAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAliasKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cALIAS_LINKAGETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cVISIBILITYTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cAliastypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAliastypeTypeUseParserRuleCall_5_0 = (RuleCall)cAliastypeAssignment_5.eContents().get(0);
		private final Assignment cAliasvalueAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAliasvalueValueParserRuleCall_6_0 = (RuleCall)cAliasvalueAssignment_6.eContents().get(0);
		private final Assignment cAliaseeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cAliaseeTypeUseParserRuleCall_7_0 = (RuleCall)cAliaseeAssignment_7.eContents().get(0);
		
		//AliasDefinition:
		//	address=Address "=" "alias" ALIAS_LINKAGE? VISIBILITY? aliastype=TypeUse aliasvalue=Value aliasee=TypeUse;
		public ParserRule getRule() { return rule; }

		//address=Address "=" "alias" ALIAS_LINKAGE? VISIBILITY? aliastype=TypeUse aliasvalue=Value aliasee=TypeUse
		public Group getGroup() { return cGroup; }

		//address=Address
		public Assignment getAddressAssignment_0() { return cAddressAssignment_0; }

		//Address
		public RuleCall getAddressAddressParserRuleCall_0_0() { return cAddressAddressParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"alias"
		public Keyword getAliasKeyword_2() { return cAliasKeyword_2; }

		//ALIAS_LINKAGE?
		public RuleCall getALIAS_LINKAGETerminalRuleCall_3() { return cALIAS_LINKAGETerminalRuleCall_3; }

		//VISIBILITY?
		public RuleCall getVISIBILITYTerminalRuleCall_4() { return cVISIBILITYTerminalRuleCall_4; }

		//aliastype=TypeUse
		public Assignment getAliastypeAssignment_5() { return cAliastypeAssignment_5; }

		//TypeUse
		public RuleCall getAliastypeTypeUseParserRuleCall_5_0() { return cAliastypeTypeUseParserRuleCall_5_0; }

		//aliasvalue=Value
		public Assignment getAliasvalueAssignment_6() { return cAliasvalueAssignment_6; }

		//Value
		public RuleCall getAliasvalueValueParserRuleCall_6_0() { return cAliasvalueValueParserRuleCall_6_0; }

		//aliasee=TypeUse
		public Assignment getAliaseeAssignment_7() { return cAliaseeAssignment_7; }

		//TypeUse
		public RuleCall getAliaseeTypeUseParserRuleCall_7_0() { return cAliaseeTypeUseParserRuleCall_7_0; }
	}

	public class TypeUseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeUse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cPredefinedParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cAddressUseParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Assignment cFunctionInputAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunctionInputUNKNOWN_TYPETerminalRuleCall_1_0 = (RuleCall)cFunctionInputAssignment_1.eContents().get(0);
		
		//TypeUse:
		//	(Predefined | AddressUse) functionInput=UNKNOWN_TYPE?;
		public ParserRule getRule() { return rule; }

		//(Predefined | AddressUse) functionInput=UNKNOWN_TYPE?
		public Group getGroup() { return cGroup; }

		//Predefined | AddressUse
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//Predefined
		public RuleCall getPredefinedParserRuleCall_0_0() { return cPredefinedParserRuleCall_0_0; }

		//AddressUse
		public RuleCall getAddressUseParserRuleCall_0_1() { return cAddressUseParserRuleCall_0_1; }

		//functionInput=UNKNOWN_TYPE?
		public Assignment getFunctionInputAssignment_1() { return cFunctionInputAssignment_1; }

		//UNKNOWN_TYPE
		public RuleCall getFunctionInputUNKNOWN_TYPETerminalRuleCall_1_0() { return cFunctionInputUNKNOWN_TYPETerminalRuleCall_1_0; }
	}

	public class AddressUseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AddressUse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAddressAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cAddressAddressCrossReference_0_0 = (CrossReference)cAddressAssignment_0.eContents().get(0);
		private final RuleCall cAddressAddressVALID_IDTerminalRuleCall_0_0_1 = (RuleCall)cAddressAddressCrossReference_0_0.eContents().get(1);
		private final Assignment cPointerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPointerPOINTERTerminalRuleCall_1_0 = (RuleCall)cPointerAssignment_1.eContents().get(0);
		
		//AddressUse:
		//	address=[Address|VALID_ID] pointer=POINTER?;
		public ParserRule getRule() { return rule; }

		//address=[Address|VALID_ID] pointer=POINTER?
		public Group getGroup() { return cGroup; }

		//address=[Address|VALID_ID]
		public Assignment getAddressAssignment_0() { return cAddressAssignment_0; }

		//[Address|VALID_ID]
		public CrossReference getAddressAddressCrossReference_0_0() { return cAddressAddressCrossReference_0_0; }

		//VALID_ID
		public RuleCall getAddressAddressVALID_IDTerminalRuleCall_0_0_1() { return cAddressAddressVALID_IDTerminalRuleCall_0_0_1; }

		//pointer=POINTER?
		public Assignment getPointerAssignment_1() { return cPointerAssignment_1; }

		//POINTER
		public RuleCall getPointerPOINTERTerminalRuleCall_1_0() { return cPointerPOINTERTerminalRuleCall_1_0; }
	}

	public class AddressElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Address");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameVALID_IDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Address:
		//	name=VALID_ID;
		public ParserRule getRule() { return rule; }

		//name=VALID_ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//VALID_ID
		public RuleCall getNameVALID_IDTerminalRuleCall_0() { return cNameVALID_IDTerminalRuleCall_0; }
	}

	public class PredefinedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Predefined");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cTypeAlternatives_0_0 = (Alternatives)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypePRIMITIVE_VALUETerminalRuleCall_0_0_0 = (RuleCall)cTypeAlternatives_0_0.eContents().get(0);
		private final RuleCall cTypeINT_TYPETerminalRuleCall_0_0_1 = (RuleCall)cTypeAlternatives_0_0.eContents().get(1);
		private final RuleCall cTypeFLOATING_POINT_TYPETerminalRuleCall_0_0_2 = (RuleCall)cTypeAlternatives_0_0.eContents().get(2);
		private final Assignment cPointerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPointerPOINTERTerminalRuleCall_1_0 = (RuleCall)cPointerAssignment_1.eContents().get(0);
		
		//Predefined:
		//	type=(PRIMITIVE_VALUE | INT_TYPE | FLOATING_POINT_TYPE) pointer=POINTER?;
		public ParserRule getRule() { return rule; }

		//type=(PRIMITIVE_VALUE | INT_TYPE | FLOATING_POINT_TYPE) pointer=POINTER?
		public Group getGroup() { return cGroup; }

		//type=(PRIMITIVE_VALUE | INT_TYPE | FLOATING_POINT_TYPE)
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//PRIMITIVE_VALUE | INT_TYPE | FLOATING_POINT_TYPE
		public Alternatives getTypeAlternatives_0_0() { return cTypeAlternatives_0_0; }

		//PRIMITIVE_VALUE
		public RuleCall getTypePRIMITIVE_VALUETerminalRuleCall_0_0_0() { return cTypePRIMITIVE_VALUETerminalRuleCall_0_0_0; }

		//INT_TYPE
		public RuleCall getTypeINT_TYPETerminalRuleCall_0_0_1() { return cTypeINT_TYPETerminalRuleCall_0_0_1; }

		//FLOATING_POINT_TYPE
		public RuleCall getTypeFLOATING_POINT_TYPETerminalRuleCall_0_0_2() { return cTypeFLOATING_POINT_TYPETerminalRuleCall_0_0_2; }

		//pointer=POINTER?
		public Assignment getPointerAssignment_1() { return cPointerAssignment_1; }

		//POINTER
		public RuleCall getPointerPOINTERTerminalRuleCall_1_0() { return cPointerPOINTERTerminalRuleCall_1_0; }
	}

	public class VectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Vector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLengthAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLengthNUMBERParserRuleCall_1_0 = (RuleCall)cLengthAssignment_1.eContents().get(0);
		private final Keyword cXKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeUseParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Vector:
		//	"<" length=NUMBER "x" type=TypeUse ">";
		public ParserRule getRule() { return rule; }

		//"<" length=NUMBER "x" type=TypeUse ">"
		public Group getGroup() { return cGroup; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//length=NUMBER
		public Assignment getLengthAssignment_1() { return cLengthAssignment_1; }

		//NUMBER
		public RuleCall getLengthNUMBERParserRuleCall_1_0() { return cLengthNUMBERParserRuleCall_1_0; }

		//"x"
		public Keyword getXKeyword_2() { return cXKeyword_2; }

		//type=TypeUse
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//TypeUse
		public RuleCall getTypeTypeUseParserRuleCall_3_0() { return cTypeTypeUseParserRuleCall_3_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
	}

	public class ArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Array");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArrayAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cLengthAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cLengthNUMBERParserRuleCall_1_0_1_0 = (RuleCall)cLengthAssignment_1_0_1.eContents().get(0);
		private final Keyword cXKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Assignment cTypeAssignment_1_0_3 = (Assignment)cGroup_1_0.eContents().get(3);
		private final Alternatives cTypeAlternatives_1_0_3_0 = (Alternatives)cTypeAssignment_1_0_3.eContents().get(0);
		private final RuleCall cTypeTypeUseParserRuleCall_1_0_3_0_0 = (RuleCall)cTypeAlternatives_1_0_3_0.eContents().get(0);
		private final RuleCall cTypeAggregate_TypeParserRuleCall_1_0_3_0_1 = (RuleCall)cTypeAlternatives_1_0_3_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_0_4 = (Keyword)cGroup_1_0.eContents().get(4);
		private final Keyword cLeftSquareBracketRightSquareBracketKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final RuleCall cPOINTERTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Array:
		//	{Array} ("[" length=NUMBER "x" type=(TypeUse | Aggregate_Type) "]" | "[]" | "[" "]") POINTER?;
		public ParserRule getRule() { return rule; }

		//{Array} ("[" length=NUMBER "x" type=(TypeUse | Aggregate_Type) "]" | "[]" | "[" "]") POINTER?
		public Group getGroup() { return cGroup; }

		//{Array}
		public Action getArrayAction_0() { return cArrayAction_0; }

		//"[" length=NUMBER "x" type=(TypeUse | Aggregate_Type) "]" | "[]" | "[" "]"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"[" length=NUMBER "x" type=(TypeUse | Aggregate_Type) "]"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0_0() { return cLeftSquareBracketKeyword_1_0_0; }

		//length=NUMBER
		public Assignment getLengthAssignment_1_0_1() { return cLengthAssignment_1_0_1; }

		//NUMBER
		public RuleCall getLengthNUMBERParserRuleCall_1_0_1_0() { return cLengthNUMBERParserRuleCall_1_0_1_0; }

		//"x"
		public Keyword getXKeyword_1_0_2() { return cXKeyword_1_0_2; }

		//type=(TypeUse | Aggregate_Type)
		public Assignment getTypeAssignment_1_0_3() { return cTypeAssignment_1_0_3; }

		//TypeUse | Aggregate_Type
		public Alternatives getTypeAlternatives_1_0_3_0() { return cTypeAlternatives_1_0_3_0; }

		//TypeUse
		public RuleCall getTypeTypeUseParserRuleCall_1_0_3_0_0() { return cTypeTypeUseParserRuleCall_1_0_3_0_0; }

		//Aggregate_Type
		public RuleCall getTypeAggregate_TypeParserRuleCall_1_0_3_0_1() { return cTypeAggregate_TypeParserRuleCall_1_0_3_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_0_4() { return cRightSquareBracketKeyword_1_0_4; }

		//"[]"
		public Keyword getLeftSquareBracketRightSquareBracketKeyword_1_1() { return cLeftSquareBracketRightSquareBracketKeyword_1_1; }

		//"[" "]"
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_2_0() { return cLeftSquareBracketKeyword_1_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2_1() { return cRightSquareBracketKeyword_1_2_1; }

		//POINTER?
		public RuleCall getPOINTERTerminalRuleCall_2() { return cPOINTERTerminalRuleCall_2; }
	}

	public class Aggregate_TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Aggregate_Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStructureParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArrayParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVectorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Aggregate_Type:
		//	Structure | Array | Vector;
		public ParserRule getRule() { return rule; }

		//Structure | Array | Vector
		public Alternatives getAlternatives() { return cAlternatives; }

		//Structure
		public RuleCall getStructureParserRuleCall_0() { return cStructureParserRuleCall_0; }

		//Array
		public RuleCall getArrayParserRuleCall_1() { return cArrayParserRuleCall_1; }

		//Vector
		public RuleCall getVectorParserRuleCall_2() { return cVectorParserRuleCall_2; }
	}

	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constant");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueNUMBERParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Constant:
		//	value=NUMBER;
		public ParserRule getRule() { return rule; }

		//value=NUMBER
		public Assignment getValueAssignment() { return cValueAssignment; }

		//NUMBER
		public RuleCall getValueNUMBERParserRuleCall_0() { return cValueNUMBERParserRuleCall_0; }
	}

	public class PrimitiveValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_0 = (RuleCall)cValueAlternatives_0.eContents().get(0);
		private final RuleCall cValuePRIMITIVE_VALUETerminalRuleCall_0_1 = (RuleCall)cValueAlternatives_0.eContents().get(1);
		private final RuleCall cValueINITIALIZERTerminalRuleCall_0_2 = (RuleCall)cValueAlternatives_0.eContents().get(2);
		private final RuleCall cValueBOOLTerminalRuleCall_0_3 = (RuleCall)cValueAlternatives_0.eContents().get(3);
		
		//PrimitiveValue:
		//	value=(STRING | PRIMITIVE_VALUE | INITIALIZER | BOOL);
		public ParserRule getRule() { return rule; }

		//value=(STRING | PRIMITIVE_VALUE | INITIALIZER | BOOL)
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING | PRIMITIVE_VALUE | INITIALIZER | BOOL
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_0() { return cValueSTRINGTerminalRuleCall_0_0; }

		//PRIMITIVE_VALUE
		public RuleCall getValuePRIMITIVE_VALUETerminalRuleCall_0_1() { return cValuePRIMITIVE_VALUETerminalRuleCall_0_1; }

		//INITIALIZER
		public RuleCall getValueINITIALIZERTerminalRuleCall_0_2() { return cValueINITIALIZERTerminalRuleCall_0_2; }

		//BOOL
		public RuleCall getValueBOOLTerminalRuleCall_0_3() { return cValueBOOLTerminalRuleCall_0_3; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNestedCastParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNestedGetElementPtrParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConstantParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAddressUseParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPrimitiveValueParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cValueStructParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Value:
		//	NestedCast | NestedGetElementPtr | Constant | AddressUse | PrimitiveValue | ValueStruct;
		public ParserRule getRule() { return rule; }

		//NestedCast | NestedGetElementPtr | Constant | AddressUse | PrimitiveValue | ValueStruct
		public Alternatives getAlternatives() { return cAlternatives; }

		//NestedCast
		public RuleCall getNestedCastParserRuleCall_0() { return cNestedCastParserRuleCall_0; }

		//NestedGetElementPtr
		public RuleCall getNestedGetElementPtrParserRuleCall_1() { return cNestedGetElementPtrParserRuleCall_1; }

		//Constant
		public RuleCall getConstantParserRuleCall_2() { return cConstantParserRuleCall_2; }

		//AddressUse
		public RuleCall getAddressUseParserRuleCall_3() { return cAddressUseParserRuleCall_3; }

		//PrimitiveValue
		public RuleCall getPrimitiveValueParserRuleCall_4() { return cPrimitiveValueParserRuleCall_4; }

		//ValueStruct
		public RuleCall getValueStructParserRuleCall_5() { return cValueStructParserRuleCall_5; }
	}

	public class ValueStructElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueStruct");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValuesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValuesParameterParserRuleCall_1_0 = (RuleCall)cValuesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValuesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValuesParameterParserRuleCall_2_1_0 = (RuleCall)cValuesAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ValueStruct:
		//	"{" values+=Parameter ("," values+=Parameter)* "}";
		public ParserRule getRule() { return rule; }

		//"{" values+=Parameter ("," values+=Parameter)* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//values+=Parameter
		public Assignment getValuesAssignment_1() { return cValuesAssignment_1; }

		//Parameter
		public RuleCall getValuesParameterParserRuleCall_1_0() { return cValuesParameterParserRuleCall_1_0; }

		//("," values+=Parameter)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//values+=Parameter
		public Assignment getValuesAssignment_2_1() { return cValuesAssignment_2_1; }

		//Parameter
		public RuleCall getValuesParameterParserRuleCall_2_1_0() { return cValuesParameterParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class StructureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Structure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStructureAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cTypesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Alternatives cTypesAlternatives_2_0_0 = (Alternatives)cTypesAssignment_2_0.eContents().get(0);
		private final RuleCall cTypesTypeUseParserRuleCall_2_0_0_0 = (RuleCall)cTypesAlternatives_2_0_0.eContents().get(0);
		private final RuleCall cTypesAggregate_TypeParserRuleCall_2_0_0_1 = (RuleCall)cTypesAlternatives_2_0_0.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cTypesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final Alternatives cTypesAlternatives_2_1_1_0 = (Alternatives)cTypesAssignment_2_1_1.eContents().get(0);
		private final RuleCall cTypesTypeUseParserRuleCall_2_1_1_0_0 = (RuleCall)cTypesAlternatives_2_1_1_0.eContents().get(0);
		private final RuleCall cTypesAggregate_TypeParserRuleCall_2_1_1_0_1 = (RuleCall)cTypesAlternatives_2_1_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cPOINTERTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Structure:
		//	{Structure} "{" (types+=(TypeUse | Aggregate_Type) ("," types+=(TypeUse | Aggregate_Type))*)? "}" POINTER?;
		public ParserRule getRule() { return rule; }

		//{Structure} "{" (types+=(TypeUse | Aggregate_Type) ("," types+=(TypeUse | Aggregate_Type))*)? "}" POINTER?
		public Group getGroup() { return cGroup; }

		//{Structure}
		public Action getStructureAction_0() { return cStructureAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(types+=(TypeUse | Aggregate_Type) ("," types+=(TypeUse | Aggregate_Type))*)?
		public Group getGroup_2() { return cGroup_2; }

		//types+=(TypeUse | Aggregate_Type)
		public Assignment getTypesAssignment_2_0() { return cTypesAssignment_2_0; }

		//TypeUse | Aggregate_Type
		public Alternatives getTypesAlternatives_2_0_0() { return cTypesAlternatives_2_0_0; }

		//TypeUse
		public RuleCall getTypesTypeUseParserRuleCall_2_0_0_0() { return cTypesTypeUseParserRuleCall_2_0_0_0; }

		//Aggregate_Type
		public RuleCall getTypesAggregate_TypeParserRuleCall_2_0_0_1() { return cTypesAggregate_TypeParserRuleCall_2_0_0_1; }

		//("," types+=(TypeUse | Aggregate_Type))*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//types+=(TypeUse | Aggregate_Type)
		public Assignment getTypesAssignment_2_1_1() { return cTypesAssignment_2_1_1; }

		//TypeUse | Aggregate_Type
		public Alternatives getTypesAlternatives_2_1_1_0() { return cTypesAlternatives_2_1_1_0; }

		//TypeUse
		public RuleCall getTypesTypeUseParserRuleCall_2_1_1_0_0() { return cTypesTypeUseParserRuleCall_2_1_1_0_0; }

		//Aggregate_Type
		public RuleCall getTypesAggregate_TypeParserRuleCall_2_1_1_0_1() { return cTypesAggregate_TypeParserRuleCall_2_1_1_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }

		//POINTER?
		public RuleCall getPOINTERTerminalRuleCall_4() { return cPOINTERTerminalRuleCall_4; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cTypeAlternatives_0_0 = (Alternatives)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeTypeUseParserRuleCall_0_0_0 = (RuleCall)cTypeAlternatives_0_0.eContents().get(0);
		private final RuleCall cTypeAggregate_TypeParserRuleCall_0_0_1 = (RuleCall)cTypeAlternatives_0_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cRETURN_ATTRIBUTESTerminalRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final Assignment cValueAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_1_0_1_0 = (RuleCall)cValueAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cValueAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cValueValueParserRuleCall_1_1_0_0 = (RuleCall)cValueAssignment_1_1_0.eContents().get(0);
		private final RuleCall cRETURN_ATTRIBUTESTerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		
		//Parameter:
		//	type=(TypeUse | Aggregate_Type) (RETURN_ATTRIBUTES+ value=Value | value=Value? RETURN_ATTRIBUTES*);
		public ParserRule getRule() { return rule; }

		//type=(TypeUse | Aggregate_Type) (RETURN_ATTRIBUTES+ value=Value | value=Value? RETURN_ATTRIBUTES*)
		public Group getGroup() { return cGroup; }

		//type=(TypeUse | Aggregate_Type)
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//TypeUse | Aggregate_Type
		public Alternatives getTypeAlternatives_0_0() { return cTypeAlternatives_0_0; }

		//TypeUse
		public RuleCall getTypeTypeUseParserRuleCall_0_0_0() { return cTypeTypeUseParserRuleCall_0_0_0; }

		//Aggregate_Type
		public RuleCall getTypeAggregate_TypeParserRuleCall_0_0_1() { return cTypeAggregate_TypeParserRuleCall_0_0_1; }

		//RETURN_ATTRIBUTES+ value=Value | value=Value? RETURN_ATTRIBUTES*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//RETURN_ATTRIBUTES+ value=Value
		public Group getGroup_1_0() { return cGroup_1_0; }

		//RETURN_ATTRIBUTES+
		public RuleCall getRETURN_ATTRIBUTESTerminalRuleCall_1_0_0() { return cRETURN_ATTRIBUTESTerminalRuleCall_1_0_0; }

		//value=Value
		public Assignment getValueAssignment_1_0_1() { return cValueAssignment_1_0_1; }

		//Value
		public RuleCall getValueValueParserRuleCall_1_0_1_0() { return cValueValueParserRuleCall_1_0_1_0; }

		//value=Value? RETURN_ATTRIBUTES*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//value=Value?
		public Assignment getValueAssignment_1_1_0() { return cValueAssignment_1_1_0; }

		//Value
		public RuleCall getValueValueParserRuleCall_1_1_0_0() { return cValueValueParserRuleCall_1_1_0_0; }

		//RETURN_ATTRIBUTES*
		public RuleCall getRETURN_ATTRIBUTESTerminalRuleCall_1_1_1() { return cRETURN_ATTRIBUTESTerminalRuleCall_1_1_1; }
	}

	public class ParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterListAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Assignment cParamsAssignment_1_1_1_0 = (Assignment)cGroup_1_1_1.eContents().get(0);
		private final RuleCall cParamsParameterParserRuleCall_1_1_1_0_0 = (RuleCall)cParamsAssignment_1_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1_1 = (Group)cGroup_1_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_1_0 = (Keyword)cGroup_1_1_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_1_1_1_1 = (Assignment)cGroup_1_1_1_1.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_1_1_1_1_1_0 = (RuleCall)cParamsAssignment_1_1_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//ParameterList:
		//	{ParameterList} ("()" | "(" (params+=Parameter ("," params+=Parameter)*)? ")");
		public ParserRule getRule() { return rule; }

		//{ParameterList} ("()" | "(" (params+=Parameter ("," params+=Parameter)*)? ")")
		public Group getGroup() { return cGroup; }

		//{ParameterList}
		public Action getParameterListAction_0() { return cParameterListAction_0; }

		//"()" | "(" (params+=Parameter ("," params+=Parameter)*)? ")"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"()"
		public Keyword getLeftParenthesisRightParenthesisKeyword_1_0() { return cLeftParenthesisRightParenthesisKeyword_1_0; }

		//"(" (params+=Parameter ("," params+=Parameter)*)? ")"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }

		//(params+=Parameter ("," params+=Parameter)*)?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//params+=Parameter
		public Assignment getParamsAssignment_1_1_1_0() { return cParamsAssignment_1_1_1_0; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_1_1_1_0_0() { return cParamsParameterParserRuleCall_1_1_1_0_0; }

		//("," params+=Parameter)*
		public Group getGroup_1_1_1_1() { return cGroup_1_1_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_1_1_0() { return cCommaKeyword_1_1_1_1_0; }

		//params+=Parameter
		public Assignment getParamsAssignment_1_1_1_1_1() { return cParamsAssignment_1_1_1_1_1; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_1_1_1_1_1_0() { return cParamsParameterParserRuleCall_1_1_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1_2() { return cRightParenthesisKeyword_1_1_2; }
	}

	public class FunctionParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeUseParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cRETURN_ATTRIBUTESTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueAddressParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//FunctionParameter:
		//	type=TypeUse RETURN_ATTRIBUTES* value=Address?;
		public ParserRule getRule() { return rule; }

		//type=TypeUse RETURN_ATTRIBUTES* value=Address?
		public Group getGroup() { return cGroup; }

		//type=TypeUse
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//TypeUse
		public RuleCall getTypeTypeUseParserRuleCall_0_0() { return cTypeTypeUseParserRuleCall_0_0; }

		//RETURN_ATTRIBUTES*
		public RuleCall getRETURN_ATTRIBUTESTerminalRuleCall_1() { return cRETURN_ATTRIBUTESTerminalRuleCall_1; }

		//value=Address?
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Address
		public RuleCall getValueAddressParserRuleCall_2_0() { return cValueAddressParserRuleCall_2_0; }
	}

	public class FunctionParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionParameterListAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cParamsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParamsFunctionParameterParserRuleCall_1_0 = (RuleCall)cParamsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParamsFunctionParameterParserRuleCall_2_1_0 = (RuleCall)cParamsAssignment_2_1.eContents().get(0);
		
		//FunctionParameterList:
		//	{FunctionParameterList} params+=FunctionParameter ("," params+=FunctionParameter)*;
		public ParserRule getRule() { return rule; }

		//{FunctionParameterList} params+=FunctionParameter ("," params+=FunctionParameter)*
		public Group getGroup() { return cGroup; }

		//{FunctionParameterList}
		public Action getFunctionParameterListAction_0() { return cFunctionParameterListAction_0; }

		//params+=FunctionParameter
		public Assignment getParamsAssignment_1() { return cParamsAssignment_1; }

		//FunctionParameter
		public RuleCall getParamsFunctionParameterParserRuleCall_1_0() { return cParamsFunctionParameterParserRuleCall_1_0; }

		//("," params+=FunctionParameter)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//params+=FunctionParameter
		public Assignment getParamsAssignment_2_1() { return cParamsAssignment_2_1; }

		//FunctionParameter
		public RuleCall getParamsFunctionParameterParserRuleCall_2_1_0() { return cParamsFunctionParameterParserRuleCall_2_1_0; }
	}

	public class FunctionBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMetaAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMetaMetadataValueParserRuleCall_0_0 = (RuleCall)cMetaAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBlocksAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlocksBasicBlockParserRuleCall_2_0 = (RuleCall)cBlocksAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FunctionBody:
		//	meta+=MetadataValue* "{" blocks+=BasicBlock+ "}";
		public ParserRule getRule() { return rule; }

		//meta+=MetadataValue* "{" blocks+=BasicBlock+ "}"
		public Group getGroup() { return cGroup; }

		//meta+=MetadataValue*
		public Assignment getMetaAssignment_0() { return cMetaAssignment_0; }

		//MetadataValue
		public RuleCall getMetaMetadataValueParserRuleCall_0_0() { return cMetaMetadataValueParserRuleCall_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//blocks+=BasicBlock+
		public Assignment getBlocksAssignment_2() { return cBlocksAssignment_2; }

		//BasicBlock
		public RuleCall getBlocksBasicBlockParserRuleCall_2_0() { return cBlocksBasicBlockParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Instruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStoreParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLoadParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGetElementPtrParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAllocParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCmpXchgParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cAtomicRMWParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cFenceParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cReturnParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cBranchParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cSwitchParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cIndirectBranchParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cInvokeParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cResumeParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cUnreachableParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cLogicOperationParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cArithmeticOperationParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cCompareParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cCastParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cShuffleVectorParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cInsertElementParserRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		private final RuleCall cExtractElementParserRuleCall_20 = (RuleCall)cAlternatives.eContents().get(20);
		private final RuleCall cInsertValueParserRuleCall_21 = (RuleCall)cAlternatives.eContents().get(21);
		private final RuleCall cExtractValueParserRuleCall_22 = (RuleCall)cAlternatives.eContents().get(22);
		private final RuleCall cPhiParserRuleCall_23 = (RuleCall)cAlternatives.eContents().get(23);
		private final RuleCall cSelectParserRuleCall_24 = (RuleCall)cAlternatives.eContents().get(24);
		private final RuleCall cCallParserRuleCall_25 = (RuleCall)cAlternatives.eContents().get(25);
		private final RuleCall cVariableAttributeAccessParserRuleCall_26 = (RuleCall)cAlternatives.eContents().get(26);
		private final RuleCall cLandingPadParserRuleCall_27 = (RuleCall)cAlternatives.eContents().get(27);
		
		//Instruction:
		//	Store | Load | GetElementPtr | Alloc | CmpXchg | AtomicRMW | Fence | Return | Branch | Switch | IndirectBranch |
		//	Invoke | Resume | Unreachable | LogicOperation | ArithmeticOperation | Compare | Cast | ShuffleVector | InsertElement
		//	| ExtractElement | InsertValue | ExtractValue | Phi | Select | Call | VariableAttributeAccess | LandingPad;
		public ParserRule getRule() { return rule; }

		//Store | Load | GetElementPtr | Alloc | CmpXchg | AtomicRMW | Fence | Return | Branch | Switch | IndirectBranch | Invoke
		//| Resume | Unreachable | LogicOperation | ArithmeticOperation | Compare | Cast | ShuffleVector | InsertElement |
		//ExtractElement | InsertValue | ExtractValue | Phi | Select | Call | VariableAttributeAccess | LandingPad
		public Alternatives getAlternatives() { return cAlternatives; }

		//Store
		public RuleCall getStoreParserRuleCall_0() { return cStoreParserRuleCall_0; }

		//Load
		public RuleCall getLoadParserRuleCall_1() { return cLoadParserRuleCall_1; }

		//GetElementPtr
		public RuleCall getGetElementPtrParserRuleCall_2() { return cGetElementPtrParserRuleCall_2; }

		//Alloc
		public RuleCall getAllocParserRuleCall_3() { return cAllocParserRuleCall_3; }

		//CmpXchg
		public RuleCall getCmpXchgParserRuleCall_4() { return cCmpXchgParserRuleCall_4; }

		//AtomicRMW
		public RuleCall getAtomicRMWParserRuleCall_5() { return cAtomicRMWParserRuleCall_5; }

		//Fence
		public RuleCall getFenceParserRuleCall_6() { return cFenceParserRuleCall_6; }

		//Return
		public RuleCall getReturnParserRuleCall_7() { return cReturnParserRuleCall_7; }

		//Branch
		public RuleCall getBranchParserRuleCall_8() { return cBranchParserRuleCall_8; }

		//Switch
		public RuleCall getSwitchParserRuleCall_9() { return cSwitchParserRuleCall_9; }

		//IndirectBranch
		public RuleCall getIndirectBranchParserRuleCall_10() { return cIndirectBranchParserRuleCall_10; }

		//Invoke
		public RuleCall getInvokeParserRuleCall_11() { return cInvokeParserRuleCall_11; }

		//Resume
		public RuleCall getResumeParserRuleCall_12() { return cResumeParserRuleCall_12; }

		//Unreachable
		public RuleCall getUnreachableParserRuleCall_13() { return cUnreachableParserRuleCall_13; }

		//LogicOperation
		public RuleCall getLogicOperationParserRuleCall_14() { return cLogicOperationParserRuleCall_14; }

		//ArithmeticOperation
		public RuleCall getArithmeticOperationParserRuleCall_15() { return cArithmeticOperationParserRuleCall_15; }

		//Compare
		public RuleCall getCompareParserRuleCall_16() { return cCompareParserRuleCall_16; }

		//Cast
		public RuleCall getCastParserRuleCall_17() { return cCastParserRuleCall_17; }

		//ShuffleVector
		public RuleCall getShuffleVectorParserRuleCall_18() { return cShuffleVectorParserRuleCall_18; }

		//InsertElement
		public RuleCall getInsertElementParserRuleCall_19() { return cInsertElementParserRuleCall_19; }

		//ExtractElement
		public RuleCall getExtractElementParserRuleCall_20() { return cExtractElementParserRuleCall_20; }

		//InsertValue
		public RuleCall getInsertValueParserRuleCall_21() { return cInsertValueParserRuleCall_21; }

		//ExtractValue
		public RuleCall getExtractValueParserRuleCall_22() { return cExtractValueParserRuleCall_22; }

		//Phi
		public RuleCall getPhiParserRuleCall_23() { return cPhiParserRuleCall_23; }

		//Select
		public RuleCall getSelectParserRuleCall_24() { return cSelectParserRuleCall_24; }

		//Call
		public RuleCall getCallParserRuleCall_25() { return cCallParserRuleCall_25; }

		//VariableAttributeAccess
		public RuleCall getVariableAttributeAccessParserRuleCall_26() { return cVariableAttributeAccessParserRuleCall_26; }

		//LandingPad
		public RuleCall getLandingPadParserRuleCall_27() { return cLandingPadParserRuleCall_27; }
	}

	public class BasicBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BasicBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cLabelAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cLabelLABEL_IDParserRuleCall_0_0_0 = (RuleCall)cLabelAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cInstructionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInstructionsInstructionParserRuleCall_1_0 = (RuleCall)cInstructionsAssignment_1.eContents().get(0);
		
		//BasicBlock:
		//	(label=LABEL_ID ":") instructions+=Instruction+;
		public ParserRule getRule() { return rule; }

		//(label=LABEL_ID ":") instructions+=Instruction+
		public Group getGroup() { return cGroup; }

		//label=LABEL_ID ":"
		public Group getGroup_0() { return cGroup_0; }

		//label=LABEL_ID
		public Assignment getLabelAssignment_0_0() { return cLabelAssignment_0_0; }

		//LABEL_ID
		public RuleCall getLabelLABEL_IDParserRuleCall_0_0_0() { return cLabelLABEL_IDParserRuleCall_0_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//instructions+=Instruction+
		public Assignment getInstructionsAssignment_1() { return cInstructionsAssignment_1; }

		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_1_0() { return cInstructionsInstructionParserRuleCall_1_0; }
	}

	public class ArithmeticOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArithmeticOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cResultAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cResultAddressParserRuleCall_0_0 = (RuleCall)cResultAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cOperationAlternatives_2_0 = (Alternatives)cOperationAssignment_2.eContents().get(0);
		private final Keyword cOperationAddKeyword_2_0_0 = (Keyword)cOperationAlternatives_2_0.eContents().get(0);
		private final Keyword cOperationFaddKeyword_2_0_1 = (Keyword)cOperationAlternatives_2_0.eContents().get(1);
		private final Keyword cOperationSubKeyword_2_0_2 = (Keyword)cOperationAlternatives_2_0.eContents().get(2);
		private final Keyword cOperationFsubKeyword_2_0_3 = (Keyword)cOperationAlternatives_2_0.eContents().get(3);
		private final Keyword cOperationMulKeyword_2_0_4 = (Keyword)cOperationAlternatives_2_0.eContents().get(4);
		private final Keyword cOperationFmulKeyword_2_0_5 = (Keyword)cOperationAlternatives_2_0.eContents().get(5);
		private final Keyword cOperationUdivKeyword_2_0_6 = (Keyword)cOperationAlternatives_2_0.eContents().get(6);
		private final Keyword cOperationSdivKeyword_2_0_7 = (Keyword)cOperationAlternatives_2_0.eContents().get(7);
		private final Keyword cOperationFdivKeyword_2_0_8 = (Keyword)cOperationAlternatives_2_0.eContents().get(8);
		private final Keyword cOperationUremKeyword_2_0_9 = (Keyword)cOperationAlternatives_2_0.eContents().get(9);
		private final Keyword cOperationSremKeyword_2_0_10 = (Keyword)cOperationAlternatives_2_0.eContents().get(10);
		private final Keyword cOperationFremKeyword_2_0_11 = (Keyword)cOperationAlternatives_2_0.eContents().get(11);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Keyword cNswKeyword_3_0_0 = (Keyword)cAlternatives_3_0.eContents().get(0);
		private final Keyword cNuwKeyword_3_0_1 = (Keyword)cAlternatives_3_0.eContents().get(1);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Keyword cNuwKeyword_3_1_0 = (Keyword)cAlternatives_3_1.eContents().get(0);
		private final Keyword cNswKeyword_3_1_1 = (Keyword)cAlternatives_3_1.eContents().get(1);
		private final Assignment cOptypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOptypeTypeUseParserRuleCall_4_0 = (RuleCall)cOptypeAssignment_4.eContents().get(0);
		private final Assignment cValue1Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValue1ValueParserRuleCall_5_0 = (RuleCall)cValue1Assignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cValue2Assignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cValue2ValueParserRuleCall_7_0 = (RuleCall)cValue2Assignment_7.eContents().get(0);
		
		//ArithmeticOperation:
		//	result=Address "=" operation=("add" | "fadd" | "sub" | "fsub" | "mul" | "fmul" | "udiv" | "sdiv" | "fdiv" | "urem" |
		//	"srem" | "frem") (("nsw" | "nuw") ("nuw" | "nsw")?)? optype=TypeUse value1=Value "," value2=Value;
		public ParserRule getRule() { return rule; }

		//result=Address "=" operation=("add" | "fadd" | "sub" | "fsub" | "mul" | "fmul" | "udiv" | "sdiv" | "fdiv" | "urem" |
		//"srem" | "frem") (("nsw" | "nuw") ("nuw" | "nsw")?)? optype=TypeUse value1=Value "," value2=Value
		public Group getGroup() { return cGroup; }

		//result=Address
		public Assignment getResultAssignment_0() { return cResultAssignment_0; }

		//Address
		public RuleCall getResultAddressParserRuleCall_0_0() { return cResultAddressParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//operation=("add" | "fadd" | "sub" | "fsub" | "mul" | "fmul" | "udiv" | "sdiv" | "fdiv" | "urem" | "srem" | "frem")
		public Assignment getOperationAssignment_2() { return cOperationAssignment_2; }

		//"add" | "fadd" | "sub" | "fsub" | "mul" | "fmul" | "udiv" | "sdiv" | "fdiv" | "urem" | "srem" | "frem"
		public Alternatives getOperationAlternatives_2_0() { return cOperationAlternatives_2_0; }

		//"add"
		public Keyword getOperationAddKeyword_2_0_0() { return cOperationAddKeyword_2_0_0; }

		//"fadd"
		public Keyword getOperationFaddKeyword_2_0_1() { return cOperationFaddKeyword_2_0_1; }

		//"sub"
		public Keyword getOperationSubKeyword_2_0_2() { return cOperationSubKeyword_2_0_2; }

		//"fsub"
		public Keyword getOperationFsubKeyword_2_0_3() { return cOperationFsubKeyword_2_0_3; }

		//"mul"
		public Keyword getOperationMulKeyword_2_0_4() { return cOperationMulKeyword_2_0_4; }

		//"fmul"
		public Keyword getOperationFmulKeyword_2_0_5() { return cOperationFmulKeyword_2_0_5; }

		//"udiv"
		public Keyword getOperationUdivKeyword_2_0_6() { return cOperationUdivKeyword_2_0_6; }

		//"sdiv"
		public Keyword getOperationSdivKeyword_2_0_7() { return cOperationSdivKeyword_2_0_7; }

		//"fdiv"
		public Keyword getOperationFdivKeyword_2_0_8() { return cOperationFdivKeyword_2_0_8; }

		//"urem"
		public Keyword getOperationUremKeyword_2_0_9() { return cOperationUremKeyword_2_0_9; }

		//"srem"
		public Keyword getOperationSremKeyword_2_0_10() { return cOperationSremKeyword_2_0_10; }

		//"frem"
		public Keyword getOperationFremKeyword_2_0_11() { return cOperationFremKeyword_2_0_11; }

		//(("nsw" | "nuw") ("nuw" | "nsw")?)?
		public Group getGroup_3() { return cGroup_3; }

		//"nsw" | "nuw"
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }

		//"nsw"
		public Keyword getNswKeyword_3_0_0() { return cNswKeyword_3_0_0; }

		//"nuw"
		public Keyword getNuwKeyword_3_0_1() { return cNuwKeyword_3_0_1; }

		//("nuw" | "nsw")?
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }

		//"nuw"
		public Keyword getNuwKeyword_3_1_0() { return cNuwKeyword_3_1_0; }

		//"nsw"
		public Keyword getNswKeyword_3_1_1() { return cNswKeyword_3_1_1; }

		//optype=TypeUse
		public Assignment getOptypeAssignment_4() { return cOptypeAssignment_4; }

		//TypeUse
		public RuleCall getOptypeTypeUseParserRuleCall_4_0() { return cOptypeTypeUseParserRuleCall_4_0; }

		//value1=Value
		public Assignment getValue1Assignment_5() { return cValue1Assignment_5; }

		//Value
		public RuleCall getValue1ValueParserRuleCall_5_0() { return cValue1ValueParserRuleCall_5_0; }

		//","
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }

		//value2=Value
		public Assignment getValue2Assignment_7() { return cValue2Assignment_7; }

		//Value
		public RuleCall getValue2ValueParserRuleCall_7_0() { return cValue2ValueParserRuleCall_7_0; }
	}

	public class LogicOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cResultAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cResultAddressParserRuleCall_0_0 = (RuleCall)cResultAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cOperationAlternatives_2_0 = (Alternatives)cOperationAssignment_2.eContents().get(0);
		private final Keyword cOperationShlKeyword_2_0_0 = (Keyword)cOperationAlternatives_2_0.eContents().get(0);
		private final Keyword cOperationLshrKeyword_2_0_1 = (Keyword)cOperationAlternatives_2_0.eContents().get(1);
		private final Keyword cOperationAshrKeyword_2_0_2 = (Keyword)cOperationAlternatives_2_0.eContents().get(2);
		private final Keyword cOperationAndKeyword_2_0_3 = (Keyword)cOperationAlternatives_2_0.eContents().get(3);
		private final Keyword cOperationOrKeyword_2_0_4 = (Keyword)cOperationAlternatives_2_0.eContents().get(4);
		private final Keyword cOperationXorKeyword_2_0_5 = (Keyword)cOperationAlternatives_2_0.eContents().get(5);
		private final Assignment cOptypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOptypeTypeUseParserRuleCall_3_0 = (RuleCall)cOptypeAssignment_3.eContents().get(0);
		private final Assignment cValue1Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValue1ValueParserRuleCall_4_0 = (RuleCall)cValue1Assignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cValue2Assignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cValue2ValueParserRuleCall_6_0 = (RuleCall)cValue2Assignment_6.eContents().get(0);
		
		//LogicOperation:
		//	result=Address "=" operation=("shl" | "lshr" | "ashr" | "and" | "or" | "xor") optype=TypeUse value1=Value ","
		//	value2=Value;
		public ParserRule getRule() { return rule; }

		//result=Address "=" operation=("shl" | "lshr" | "ashr" | "and" | "or" | "xor") optype=TypeUse value1=Value ","
		//value2=Value
		public Group getGroup() { return cGroup; }

		//result=Address
		public Assignment getResultAssignment_0() { return cResultAssignment_0; }

		//Address
		public RuleCall getResultAddressParserRuleCall_0_0() { return cResultAddressParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//operation=("shl" | "lshr" | "ashr" | "and" | "or" | "xor")
		public Assignment getOperationAssignment_2() { return cOperationAssignment_2; }

		//"shl" | "lshr" | "ashr" | "and" | "or" | "xor"
		public Alternatives getOperationAlternatives_2_0() { return cOperationAlternatives_2_0; }

		//"shl"
		public Keyword getOperationShlKeyword_2_0_0() { return cOperationShlKeyword_2_0_0; }

		//"lshr"
		public Keyword getOperationLshrKeyword_2_0_1() { return cOperationLshrKeyword_2_0_1; }

		//"ashr"
		public Keyword getOperationAshrKeyword_2_0_2() { return cOperationAshrKeyword_2_0_2; }

		//"and"
		public Keyword getOperationAndKeyword_2_0_3() { return cOperationAndKeyword_2_0_3; }

		//"or"
		public Keyword getOperationOrKeyword_2_0_4() { return cOperationOrKeyword_2_0_4; }

		//"xor"
		public Keyword getOperationXorKeyword_2_0_5() { return cOperationXorKeyword_2_0_5; }

		//optype=TypeUse
		public Assignment getOptypeAssignment_3() { return cOptypeAssignment_3; }

		//TypeUse
		public RuleCall getOptypeTypeUseParserRuleCall_3_0() { return cOptypeTypeUseParserRuleCall_3_0; }

		//value1=Value
		public Assignment getValue1Assignment_4() { return cValue1Assignment_4; }

		//Value
		public RuleCall getValue1ValueParserRuleCall_4_0() { return cValue1ValueParserRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//value2=Value
		public Assignment getValue2Assignment_6() { return cValue2Assignment_6; }

		//Value
		public RuleCall getValue2ValueParserRuleCall_6_0() { return cValue2ValueParserRuleCall_6_0; }
	}

	public class CastElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Cast");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cResultAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cResultAddressParserRuleCall_0_0 = (RuleCall)cResultAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperationCAST_OPTerminalRuleCall_2_0 = (RuleCall)cOperationAssignment_2.eContents().get(0);
		private final Assignment cFromAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cFromAlternatives_3_0 = (Alternatives)cFromAssignment_3.eContents().get(0);
		private final RuleCall cFromTypeUseParserRuleCall_3_0_0 = (RuleCall)cFromAlternatives_3_0.eContents().get(0);
		private final RuleCall cFromAggregate_TypeParserRuleCall_3_0_1 = (RuleCall)cFromAlternatives_3_0.eContents().get(1);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueValueParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		private final Keyword cToKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cToAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cToTypeUseParserRuleCall_6_0 = (RuleCall)cToAssignment_6.eContents().get(0);
		
		//Cast:
		//	result=Address "=" operation=CAST_OP from=(TypeUse | Aggregate_Type) value=Value "to" to=TypeUse;
		public ParserRule getRule() { return rule; }

		//result=Address "=" operation=CAST_OP from=(TypeUse | Aggregate_Type) value=Value "to" to=TypeUse
		public Group getGroup() { return cGroup; }

		//result=Address
		public Assignment getResultAssignment_0() { return cResultAssignment_0; }

		//Address
		public RuleCall getResultAddressParserRuleCall_0_0() { return cResultAddressParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//operation=CAST_OP
		public Assignment getOperationAssignment_2() { return cOperationAssignment_2; }

		//CAST_OP
		public RuleCall getOperationCAST_OPTerminalRuleCall_2_0() { return cOperationCAST_OPTerminalRuleCall_2_0; }

		//from=(TypeUse | Aggregate_Type)
		public Assignment getFromAssignment_3() { return cFromAssignment_3; }

		//TypeUse | Aggregate_Type
		public Alternatives getFromAlternatives_3_0() { return cFromAlternatives_3_0; }

		//TypeUse
		public RuleCall getFromTypeUseParserRuleCall_3_0_0() { return cFromTypeUseParserRuleCall_3_0_0; }

		//Aggregate_Type
		public RuleCall getFromAggregate_TypeParserRuleCall_3_0_1() { return cFromAggregate_TypeParserRuleCall_3_0_1; }

		//value=Value
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }

		//Value
		public RuleCall getValueValueParserRuleCall_4_0() { return cValueValueParserRuleCall_4_0; }

		//"to"
		public Keyword getToKeyword_5() { return cToKeyword_5; }

		//to=TypeUse
		public Assignment getToAssignment_6() { return cToAssignment_6; }

		//TypeUse
		public RuleCall getToTypeUseParserRuleCall_6_0() { return cToTypeUseParserRuleCall_6_0; }
	}

	public class NestedCastElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NestedCast");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperationCAST_OPTerminalRuleCall_0_0 = (RuleCall)cOperationAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFromAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cFromAlternatives_2_0 = (Alternatives)cFromAssignment_2.eContents().get(0);
		private final RuleCall cFromTypeUseParserRuleCall_2_0_0 = (RuleCall)cFromAlternatives_2_0.eContents().get(0);
		private final RuleCall cFromAggregate_TypeParserRuleCall_2_0_1 = (RuleCall)cFromAlternatives_2_0.eContents().get(1);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueValueParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cToAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cToTypeUseParserRuleCall_5_0 = (RuleCall)cToAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//NestedCast:
		//	operation=CAST_OP "(" from=(TypeUse | Aggregate_Type) value=Value "to" to=TypeUse ")";
		public ParserRule getRule() { return rule; }

		//operation=CAST_OP "(" from=(TypeUse | Aggregate_Type) value=Value "to" to=TypeUse ")"
		public Group getGroup() { return cGroup; }

		//operation=CAST_OP
		public Assignment getOperationAssignment_0() { return cOperationAssignment_0; }

		//CAST_OP
		public RuleCall getOperationCAST_OPTerminalRuleCall_0_0() { return cOperationCAST_OPTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//from=(TypeUse | Aggregate_Type)
		public Assignment getFromAssignment_2() { return cFromAssignment_2; }

		//TypeUse | Aggregate_Type
		public Alternatives getFromAlternatives_2_0() { return cFromAlternatives_2_0; }

		//TypeUse
		public RuleCall getFromTypeUseParserRuleCall_2_0_0() { return cFromTypeUseParserRuleCall_2_0_0; }

		//Aggregate_Type
		public RuleCall getFromAggregate_TypeParserRuleCall_2_0_1() { return cFromAggregate_TypeParserRuleCall_2_0_1; }

		//value=Value
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//Value
		public RuleCall getValueValueParserRuleCall_3_0() { return cValueValueParserRuleCall_3_0; }

		//"to"
		public Keyword getToKeyword_4() { return cToKeyword_4; }

		//to=TypeUse
		public Assignment getToAssignment_5() { return cToAssignment_5; }

		//TypeUse
		public RuleCall getToTypeUseParserRuleCall_5_0() { return cToTypeUseParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class MetaArgValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MetaArgValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArgMETADATATerminalRuleCall_0_0 = (RuleCall)cArgAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cValueAlternatives_1_0 = (Alternatives)cValueAssignment_1.eContents().get(0);
		private final RuleCall cValueMETADATATerminalRuleCall_1_0_0 = (RuleCall)cValueAlternatives_1_0.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cValueAlternatives_1_0.eContents().get(1);
		
		//MetaArgValue:
		//	arg=METADATA value=(METADATA | STRING);
		public ParserRule getRule() { return rule; }

		//arg=METADATA value=(METADATA | STRING)
		public Group getGroup() { return cGroup; }

		//arg=METADATA
		public Assignment getArgAssignment_0() { return cArgAssignment_0; }

		//METADATA
		public RuleCall getArgMETADATATerminalRuleCall_0_0() { return cArgMETADATATerminalRuleCall_0_0; }

		//value=(METADATA | STRING)
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//METADATA | STRING
		public Alternatives getValueAlternatives_1_0() { return cValueAlternatives_1_0; }

		//METADATA
		public RuleCall getValueMETADATATerminalRuleCall_1_0_0() { return cValueMETADATATerminalRuleCall_1_0_0; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0_1() { return cValueSTRINGTerminalRuleCall_1_0_1; }
	}

	public class MetaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Meta");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cMetadataKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cMetaAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cMetaMETADATATerminalRuleCall_0_1_0 = (RuleCall)cMetaAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cArgAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cArgPredefinedParserRuleCall_1_0_0 = (RuleCall)cArgAssignment_1_0.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		
		//Meta:
		//	"metadata" meta=METADATA | arg=Predefined? value=Value;
		public ParserRule getRule() { return rule; }

		//"metadata" meta=METADATA | arg=Predefined? value=Value
		public Alternatives getAlternatives() { return cAlternatives; }

		//"metadata" meta=METADATA
		public Group getGroup_0() { return cGroup_0; }

		//"metadata"
		public Keyword getMetadataKeyword_0_0() { return cMetadataKeyword_0_0; }

		//meta=METADATA
		public Assignment getMetaAssignment_0_1() { return cMetaAssignment_0_1; }

		//METADATA
		public RuleCall getMetaMETADATATerminalRuleCall_0_1_0() { return cMetaMETADATATerminalRuleCall_0_1_0; }

		//arg=Predefined? value=Value
		public Group getGroup_1() { return cGroup_1; }

		//arg=Predefined?
		public Assignment getArgAssignment_1_0() { return cArgAssignment_1_0; }

		//Predefined
		public RuleCall getArgPredefinedParserRuleCall_1_0_0() { return cArgPredefinedParserRuleCall_1_0_0; }

		//value=Value
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//Value
		public RuleCall getValueValueParserRuleCall_1_1_0() { return cValueValueParserRuleCall_1_1_0; }
	}

	public class MetadataValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MetadataValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNodeIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNodeIdMETADATATerminalRuleCall_0_0 = (RuleCall)cNodeIdAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cMetadataKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final Keyword cExclamationMarkLeftCurlyBracketKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Assignment cValuesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValuesMetaParserRuleCall_4_0 = (RuleCall)cValuesAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cValuesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cValuesMetaParserRuleCall_5_1_0 = (RuleCall)cValuesAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//MetadataValue:
		//	nodeId=METADATA "=" "metadata"? ("!" "{" | "!{") values+=Meta ("," values+=Meta)* "}";
		public ParserRule getRule() { return rule; }

		//nodeId=METADATA "=" "metadata"? ("!" "{" | "!{") values+=Meta ("," values+=Meta)* "}"
		public Group getGroup() { return cGroup; }

		//nodeId=METADATA
		public Assignment getNodeIdAssignment_0() { return cNodeIdAssignment_0; }

		//METADATA
		public RuleCall getNodeIdMETADATATerminalRuleCall_0_0() { return cNodeIdMETADATATerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"metadata"?
		public Keyword getMetadataKeyword_2() { return cMetadataKeyword_2; }

		//"!" "{" | "!{"
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//"!" "{"
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_3_0_0() { return cExclamationMarkKeyword_3_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0_1() { return cLeftCurlyBracketKeyword_3_0_1; }

		//"!{"
		public Keyword getExclamationMarkLeftCurlyBracketKeyword_3_1() { return cExclamationMarkLeftCurlyBracketKeyword_3_1; }

		//values+=Meta
		public Assignment getValuesAssignment_4() { return cValuesAssignment_4; }

		//Meta
		public RuleCall getValuesMetaParserRuleCall_4_0() { return cValuesMetaParserRuleCall_4_0; }

		//("," values+=Meta)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//values+=Meta
		public Assignment getValuesAssignment_5_1() { return cValuesAssignment_5_1; }

		//Meta
		public RuleCall getValuesMetaParserRuleCall_5_1_0() { return cValuesMetaParserRuleCall_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class GetElementPtrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GetElementPtr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cResultAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cResultAddressParserRuleCall_0_0 = (RuleCall)cResultAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cGetelementptrKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cInboundsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cAggerateAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cAggerateParameterParserRuleCall_4_0_0 = (RuleCall)cAggerateAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cIndTypesAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cIndTypesTypeUseParserRuleCall_4_1_1_0 = (RuleCall)cIndTypesAssignment_4_1_1.eContents().get(0);
		private final Assignment cIndiziesAssignment_4_1_2 = (Assignment)cGroup_4_1.eContents().get(2);
		private final RuleCall cIndiziesValueParserRuleCall_4_1_2_0 = (RuleCall)cIndiziesAssignment_4_1_2.eContents().get(0);
		
		//GetElementPtr:
		//	result=Address "=" "getelementptr" "inbounds"? (aggerate=Parameter ("," indTypes+=TypeUse indizies+=Value)*);
		public ParserRule getRule() { return rule; }

		//result=Address "=" "getelementptr" "inbounds"? (aggerate=Parameter ("," indTypes+=TypeUse indizies+=Value)*)
		public Group getGroup() { return cGroup; }

		//result=Address
		public Assignment getResultAssignment_0() { return cResultAssignment_0; }

		//Address
		public RuleCall getResultAddressParserRuleCall_0_0() { return cResultAddressParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"getelementptr"
		public Keyword getGetelementptrKeyword_2() { return cGetelementptrKeyword_2; }

		//"inbounds"?
		public Keyword getInboundsKeyword_3() { return cInboundsKeyword_3; }

		//aggerate=Parameter ("," indTypes+=TypeUse indizies+=Value)*
		public Group getGroup_4() { return cGroup_4; }

		//aggerate=Parameter
		public Assignment getAggerateAssignment_4_0() { return cAggerateAssignment_4_0; }

		//Parameter
		public RuleCall getAggerateParameterParserRuleCall_4_0_0() { return cAggerateParameterParserRuleCall_4_0_0; }

		//("," indTypes+=TypeUse indizies+=Value)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//indTypes+=TypeUse
		public Assignment getIndTypesAssignment_4_1_1() { return cIndTypesAssignment_4_1_1; }

		//TypeUse
		public RuleCall getIndTypesTypeUseParserRuleCall_4_1_1_0() { return cIndTypesTypeUseParserRuleCall_4_1_1_0; }

		//indizies+=Value
		public Assignment getIndiziesAssignment_4_1_2() { return cIndiziesAssignment_4_1_2; }

		//Value
		public RuleCall getIndiziesValueParserRuleCall_4_1_2_0() { return cIndiziesValueParserRuleCall_4_1_2_0; }
	}

	public class NestedGetElementPtrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NestedGetElementPtr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGetelementptrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cInboundsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAggerateAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAggerateParameterParserRuleCall_2_1_0 = (RuleCall)cAggerateAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cIndTypesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cIndTypesTypeUseParserRuleCall_2_2_1_0 = (RuleCall)cIndTypesAssignment_2_2_1.eContents().get(0);
		private final Assignment cIndiziesAssignment_2_2_2 = (Assignment)cGroup_2_2.eContents().get(2);
		private final RuleCall cIndiziesValueParserRuleCall_2_2_2_0 = (RuleCall)cIndiziesAssignment_2_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//NestedGetElementPtr:
		//	"getelementptr" "inbounds"? ("(" aggerate=Parameter ("," indTypes+=TypeUse indizies+=Value)* ")");
		public ParserRule getRule() { return rule; }

		//"getelementptr" "inbounds"? ("(" aggerate=Parameter ("," indTypes+=TypeUse indizies+=Value)* ")")
		public Group getGroup() { return cGroup; }

		//"getelementptr"
		public Keyword getGetelementptrKeyword_0() { return cGetelementptrKeyword_0; }

		//"inbounds"?
		public Keyword getInboundsKeyword_1() { return cInboundsKeyword_1; }

		//"(" aggerate=Parameter ("," indTypes+=TypeUse indizies+=Value)* ")"
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//aggerate=Parameter
		public Assignment getAggerateAssignment_2_1() { return cAggerateAssignment_2_1; }

		//Parameter
		public RuleCall getAggerateParameterParserRuleCall_2_1_0() { return cAggerateParameterParserRuleCall_2_1_0; }

		//("," indTypes+=TypeUse indizies+=Value)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//indTypes+=TypeUse
		public Assignment getIndTypesAssignment_2_2_1() { return cIndTypesAssignment_2_2_1; }

		//TypeUse
		public RuleCall getIndTypesTypeUseParserRuleCall_2_2_1_0() { return cIndTypesTypeUseParserRuleCall_2_2_1_0; }

		//indizies+=Value
		public Assignment getIndiziesAssignment_2_2_2() { return cIndiziesAssignment_2_2_2; }

		//Value
		public RuleCall getIndiziesValueParserRuleCall_2_2_2_0() { return cIndiziesValueParserRuleCall_2_2_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}

	public class FenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Fence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFenceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSinglethreadKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOrderingAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOrderingATOMIC_ORDERINGTerminalRuleCall_2_0 = (RuleCall)cOrderingAssignment_2.eContents().get(0);
		
		//Fence:
		//	"fence" "singlethread"? ordering=ATOMIC_ORDERING;
		public ParserRule getRule() { return rule; }

		//"fence" "singlethread"? ordering=ATOMIC_ORDERING
		public Group getGroup() { return cGroup; }

		//"fence"
		public Keyword getFenceKeyword_0() { return cFenceKeyword_0; }

		//"singlethread"?
		public Keyword getSinglethreadKeyword_1() { return cSinglethreadKeyword_1; }

		//ordering=ATOMIC_ORDERING
		public Assignment getOrderingAssignment_2() { return cOrderingAssignment_2; }

		//ATOMIC_ORDERING
		public RuleCall getOrderingATOMIC_ORDERINGTerminalRuleCall_2_0() { return cOrderingATOMIC_ORDERINGTerminalRuleCall_2_0; }
	}

	public class CmpXchgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CmpXchg");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cResultAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cResultAddressParserRuleCall_0_0 = (RuleCall)cResultAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cCmpxchgKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVolatileAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cVolatileVolatileKeyword_3_0 = (Keyword)cVolatileAssignment_3.eContents().get(0);
		private final Assignment cAddressAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAddressParameterParserRuleCall_4_0 = (RuleCall)cAddressAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cValueAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cValueParameterParserRuleCall_6_0 = (RuleCall)cValueAssignment_6.eContents().get(0);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cNewValueAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cNewValueParameterParserRuleCall_8_0 = (RuleCall)cNewValueAssignment_8.eContents().get(0);
		private final Keyword cSinglethreadKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cOrderingAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cOrderingATOMIC_ORDERINGTerminalRuleCall_10_0 = (RuleCall)cOrderingAssignment_10.eContents().get(0);
		
		//CmpXchg:
		//	result=Address "=" "cmpxchg" volatile?="volatile"? address=Parameter "," value=Parameter "," newValue=Parameter
		//	"singlethread"? ordering=ATOMIC_ORDERING;
		public ParserRule getRule() { return rule; }

		//result=Address "=" "cmpxchg" volatile?="volatile"? address=Parameter "," value=Parameter "," newValue=Parameter
		//"singlethread"? ordering=ATOMIC_ORDERING
		public Group getGroup() { return cGroup; }

		//result=Address
		public Assignment getResultAssignment_0() { return cResultAssignment_0; }

		//Address
		public RuleCall getResultAddressParserRuleCall_0_0() { return cResultAddressParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"cmpxchg"
		public Keyword getCmpxchgKeyword_2() { return cCmpxchgKeyword_2; }

		//volatile?="volatile"?
		public Assignment getVolatileAssignment_3() { return cVolatileAssignment_3; }

		//"volatile"
		public Keyword getVolatileVolatileKeyword_3_0() { return cVolatileVolatileKeyword_3_0; }

		//address=Parameter
		public Assignment getAddressAssignment_4() { return cAddressAssignment_4; }

		//Parameter
		public RuleCall getAddressParameterParserRuleCall_4_0() { return cAddressParameterParserRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//value=Parameter
		public Assignment getValueAssignment_6() { return cValueAssignment_6; }

		//Parameter
		public RuleCall getValueParameterParserRuleCall_6_0() { return cValueParameterParserRuleCall_6_0; }

		//","
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }

		//newValue=Parameter
		public Assignment getNewValueAssignment_8() { return cNewValueAssignment_8; }

		//Parameter
		public RuleCall getNewValueParameterParserRuleCall_8_0() { return cNewValueParameterParserRuleCall_8_0; }

		//"singlethread"?
		public Keyword getSinglethreadKeyword_9() { return cSinglethreadKeyword_9; }

		//ordering=ATOMIC_ORDERING
		public Assignment getOrderingAssignment_10() { return cOrderingAssignment_10; }

		//ATOMIC_ORDERING
		public RuleCall getOrderingATOMIC_ORDERINGTerminalRuleCall_10_0() { return cOrderingATOMIC_ORDERINGTerminalRuleCall_10_0; }
	}

	public class AtomicRMWElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtomicRMW");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cResultAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cResultAddressParserRuleCall_0_0 = (RuleCall)cResultAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAtomicrmwKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVolatileAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cVolatileVolatileKeyword_3_0 = (Keyword)cVolatileAssignment_3.eContents().get(0);
		private final Assignment cOperationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOperationBIN_OPTerminalRuleCall_4_0 = (RuleCall)cOperationAssignment_4.eContents().get(0);
		private final Assignment cAddressAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAddressParameterParserRuleCall_5_0 = (RuleCall)cAddressAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cArgumentAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cArgumentParameterParserRuleCall_7_0 = (RuleCall)cArgumentAssignment_7.eContents().get(0);
		private final Keyword cSinglethreadKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cOrderingAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cOrderingATOMIC_ORDERINGTerminalRuleCall_9_0 = (RuleCall)cOrderingAssignment_9.eContents().get(0);
		
		//AtomicRMW:
		//	result=Address "=" "atomicrmw" volatile?="volatile"? operation=BIN_OP address=Parameter "," argument=Parameter
		//	"singlethread"? ordering=ATOMIC_ORDERING;
		public ParserRule getRule() { return rule; }

		//result=Address "=" "atomicrmw" volatile?="volatile"? operation=BIN_OP address=Parameter "," argument=Parameter
		//"singlethread"? ordering=ATOMIC_ORDERING
		public Group getGroup() { return cGroup; }

		//result=Address
		public Assignment getResultAssignment_0() { return cResultAssignment_0; }

		//Address
		public RuleCall getResultAddressParserRuleCall_0_0() { return cResultAddressParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"atomicrmw"
		public Keyword getAtomicrmwKeyword_2() { return cAtomicrmwKeyword_2; }

		//volatile?="volatile"?
		public Assignment getVolatileAssignment_3() { return cVolatileAssignment_3; }

		//"volatile"
		public Keyword getVolatileVolatileKeyword_3_0() { return cVolatileVolatileKeyword_3_0; }

		//operation=BIN_OP
		public Assignment getOperationAssignment_4() { return cOperationAssignment_4; }

		//BIN_OP
		public RuleCall getOperationBIN_OPTerminalRuleCall_4_0() { return cOperationBIN_OPTerminalRuleCall_4_0; }

		//address=Parameter
		public Assignment getAddressAssignment_5() { return cAddressAssignment_5; }

		//Parameter
		public RuleCall getAddressParameterParserRuleCall_5_0() { return cAddressParameterParserRuleCall_5_0; }

		//","
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }

		//argument=Parameter
		public Assignment getArgumentAssignment_7() { return cArgumentAssignment_7; }

		//Parameter
		public RuleCall getArgumentParameterParserRuleCall_7_0() { return cArgumentParameterParserRuleCall_7_0; }

		//"singlethread"?
		public Keyword getSinglethreadKeyword_8() { return cSinglethreadKeyword_8; }

		//ordering=ATOMIC_ORDERING
		public Assignment getOrderingAssignment_9() { return cOrderingAssignment_9; }

		//ATOMIC_ORDERING
		public RuleCall getOrderingATOMIC_ORDERINGTerminalRuleCall_9_0() { return cOrderingATOMIC_ORDERINGTerminalRuleCall_9_0; }
	}

	public class LoadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Load");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cResultAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cResultAddressParserRuleCall_0_0_0 = (RuleCall)cResultAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Alternatives cAlternatives_0_2 = (Alternatives)cGroup_0.eContents().get(2);
		private final Group cGroup_0_2_0 = (Group)cAlternatives_0_2.eContents().get(0);
		private final Assignment cVolatileAssignment_0_2_0_0 = (Assignment)cGroup_0_2_0.eContents().get(0);
		private final Keyword cVolatileVolatileKeyword_0_2_0_0_0 = (Keyword)cVolatileAssignment_0_2_0_0.eContents().get(0);
		private final Keyword cLoadKeyword_0_2_0_1 = (Keyword)cGroup_0_2_0.eContents().get(1);
		private final Group cGroup_0_2_1 = (Group)cAlternatives_0_2.eContents().get(1);
		private final Keyword cLoadKeyword_0_2_1_0 = (Keyword)cGroup_0_2_1.eContents().get(0);
		private final Assignment cVolatileAssignment_0_2_1_1 = (Assignment)cGroup_0_2_1.eContents().get(1);
		private final Keyword cVolatileVolatileKeyword_0_2_1_1_0 = (Keyword)cVolatileAssignment_0_2_1_1.eContents().get(0);
		private final Assignment cAddressAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cAddressParameterParserRuleCall_0_3_0 = (RuleCall)cAddressAssignment_0_3.eContents().get(0);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final Keyword cCommaKeyword_0_4_0 = (Keyword)cGroup_0_4.eContents().get(0);
		private final Keyword cAlignKeyword_0_4_1 = (Keyword)cGroup_0_4.eContents().get(1);
		private final Assignment cAlignAssignment_0_4_2 = (Assignment)cGroup_0_4.eContents().get(2);
		private final RuleCall cAlignNUMBERParserRuleCall_0_4_2_0 = (RuleCall)cAlignAssignment_0_4_2.eContents().get(0);
		private final Group cGroup_0_5 = (Group)cGroup_0.eContents().get(5);
		private final Keyword cCommaKeyword_0_5_0 = (Keyword)cGroup_0_5.eContents().get(0);
		private final Assignment cMetaAssignment_0_5_1 = (Assignment)cGroup_0_5.eContents().get(1);
		private final RuleCall cMetaMetaArgValueParserRuleCall_0_5_1_0 = (RuleCall)cMetaAssignment_0_5_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cResultAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cResultAddressParserRuleCall_1_0_0 = (RuleCall)cResultAssignment_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLoadKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cAtomicAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final Keyword cAtomicAtomicKeyword_1_3_0 = (Keyword)cAtomicAssignment_1_3.eContents().get(0);
		private final Assignment cVolatileAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final Keyword cVolatileVolatileKeyword_1_4_0 = (Keyword)cVolatileAssignment_1_4.eContents().get(0);
		private final Assignment cAddressAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cAddressParameterParserRuleCall_1_5_0 = (RuleCall)cAddressAssignment_1_5.eContents().get(0);
		private final Keyword cSinglethreadKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Assignment cOrderingAssignment_1_7 = (Assignment)cGroup_1.eContents().get(7);
		private final RuleCall cOrderingATOMIC_ORDERINGTerminalRuleCall_1_7_0 = (RuleCall)cOrderingAssignment_1_7.eContents().get(0);
		private final Group cGroup_1_8 = (Group)cGroup_1.eContents().get(8);
		private final Keyword cCommaKeyword_1_8_0 = (Keyword)cGroup_1_8.eContents().get(0);
		private final Keyword cAlignKeyword_1_8_1 = (Keyword)cGroup_1_8.eContents().get(1);
		private final Assignment cAlignAssignment_1_8_2 = (Assignment)cGroup_1_8.eContents().get(2);
		private final RuleCall cAlignNUMBERParserRuleCall_1_8_2_0 = (RuleCall)cAlignAssignment_1_8_2.eContents().get(0);
		
		//Load:
		//	result=Address "=" (volatile?="volatile" "load" | "load" volatile?="volatile"?) address=Parameter ("," "align"
		//	align=NUMBER)? ("," meta+=MetaArgValue)* | result=Address "=" "load" atomic?="atomic" volatile?="volatile"?
		//	address=Parameter "singlethread"? ordering=ATOMIC_ORDERING ("," "align" align=NUMBER)?;
		public ParserRule getRule() { return rule; }

		//result=Address "=" (volatile?="volatile" "load" | "load" volatile?="volatile"?) address=Parameter ("," "align"
		//align=NUMBER)? ("," meta+=MetaArgValue)* | result=Address "=" "load" atomic?="atomic" volatile?="volatile"?
		//address=Parameter "singlethread"? ordering=ATOMIC_ORDERING ("," "align" align=NUMBER)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//result=Address "=" (volatile?="volatile" "load" | "load" volatile?="volatile"?) address=Parameter ("," "align"
		//align=NUMBER)? ("," meta+=MetaArgValue)*
		public Group getGroup_0() { return cGroup_0; }

		//result=Address
		public Assignment getResultAssignment_0_0() { return cResultAssignment_0_0; }

		//Address
		public RuleCall getResultAddressParserRuleCall_0_0_0() { return cResultAddressParserRuleCall_0_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }

		//volatile?="volatile" "load" | "load" volatile?="volatile"?
		public Alternatives getAlternatives_0_2() { return cAlternatives_0_2; }

		//volatile?="volatile" "load"
		public Group getGroup_0_2_0() { return cGroup_0_2_0; }

		//volatile?="volatile"
		public Assignment getVolatileAssignment_0_2_0_0() { return cVolatileAssignment_0_2_0_0; }

		//"volatile"
		public Keyword getVolatileVolatileKeyword_0_2_0_0_0() { return cVolatileVolatileKeyword_0_2_0_0_0; }

		//"load"
		public Keyword getLoadKeyword_0_2_0_1() { return cLoadKeyword_0_2_0_1; }

		//"load" volatile?="volatile"?
		public Group getGroup_0_2_1() { return cGroup_0_2_1; }

		//"load"
		public Keyword getLoadKeyword_0_2_1_0() { return cLoadKeyword_0_2_1_0; }

		//volatile?="volatile"?
		public Assignment getVolatileAssignment_0_2_1_1() { return cVolatileAssignment_0_2_1_1; }

		//"volatile"
		public Keyword getVolatileVolatileKeyword_0_2_1_1_0() { return cVolatileVolatileKeyword_0_2_1_1_0; }

		//address=Parameter
		public Assignment getAddressAssignment_0_3() { return cAddressAssignment_0_3; }

		//Parameter
		public RuleCall getAddressParameterParserRuleCall_0_3_0() { return cAddressParameterParserRuleCall_0_3_0; }

		//("," "align" align=NUMBER)?
		public Group getGroup_0_4() { return cGroup_0_4; }

		//","
		public Keyword getCommaKeyword_0_4_0() { return cCommaKeyword_0_4_0; }

		//"align"
		public Keyword getAlignKeyword_0_4_1() { return cAlignKeyword_0_4_1; }

		//align=NUMBER
		public Assignment getAlignAssignment_0_4_2() { return cAlignAssignment_0_4_2; }

		//NUMBER
		public RuleCall getAlignNUMBERParserRuleCall_0_4_2_0() { return cAlignNUMBERParserRuleCall_0_4_2_0; }

		//("," meta+=MetaArgValue)*
		public Group getGroup_0_5() { return cGroup_0_5; }

		//","
		public Keyword getCommaKeyword_0_5_0() { return cCommaKeyword_0_5_0; }

		//meta+=MetaArgValue
		public Assignment getMetaAssignment_0_5_1() { return cMetaAssignment_0_5_1; }

		//MetaArgValue
		public RuleCall getMetaMetaArgValueParserRuleCall_0_5_1_0() { return cMetaMetaArgValueParserRuleCall_0_5_1_0; }

		//result=Address "=" "load" atomic?="atomic" volatile?="volatile"? address=Parameter "singlethread"?
		//ordering=ATOMIC_ORDERING ("," "align" align=NUMBER)?
		public Group getGroup_1() { return cGroup_1; }

		//result=Address
		public Assignment getResultAssignment_1_0() { return cResultAssignment_1_0; }

		//Address
		public RuleCall getResultAddressParserRuleCall_1_0_0() { return cResultAddressParserRuleCall_1_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }

		//"load"
		public Keyword getLoadKeyword_1_2() { return cLoadKeyword_1_2; }

		//atomic?="atomic"
		public Assignment getAtomicAssignment_1_3() { return cAtomicAssignment_1_3; }

		//"atomic"
		public Keyword getAtomicAtomicKeyword_1_3_0() { return cAtomicAtomicKeyword_1_3_0; }

		//volatile?="volatile"?
		public Assignment getVolatileAssignment_1_4() { return cVolatileAssignment_1_4; }

		//"volatile"
		public Keyword getVolatileVolatileKeyword_1_4_0() { return cVolatileVolatileKeyword_1_4_0; }

		//address=Parameter
		public Assignment getAddressAssignment_1_5() { return cAddressAssignment_1_5; }

		//Parameter
		public RuleCall getAddressParameterParserRuleCall_1_5_0() { return cAddressParameterParserRuleCall_1_5_0; }

		//"singlethread"?
		public Keyword getSinglethreadKeyword_1_6() { return cSinglethreadKeyword_1_6; }

		//ordering=ATOMIC_ORDERING
		public Assignment getOrderingAssignment_1_7() { return cOrderingAssignment_1_7; }

		//ATOMIC_ORDERING
		public RuleCall getOrderingATOMIC_ORDERINGTerminalRuleCall_1_7_0() { return cOrderingATOMIC_ORDERINGTerminalRuleCall_1_7_0; }

		//("," "align" align=NUMBER)?
		public Group getGroup_1_8() { return cGroup_1_8; }

		//","
		public Keyword getCommaKeyword_1_8_0() { return cCommaKeyword_1_8_0; }

		//"align"
		public Keyword getAlignKeyword_1_8_1() { return cAlignKeyword_1_8_1; }

		//align=NUMBER
		public Assignment getAlignAssignment_1_8_2() { return cAlignAssignment_1_8_2; }

		//NUMBER
		public RuleCall getAlignNUMBERParserRuleCall_1_8_2_0() { return cAlignNUMBERParserRuleCall_1_8_2_0; }
	}

	public class StoreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Store");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Group cGroup_0_0_0 = (Group)cAlternatives_0_0.eContents().get(0);
		private final Assignment cVolatileAssignment_0_0_0_0 = (Assignment)cGroup_0_0_0.eContents().get(0);
		private final Keyword cVolatileVolatileKeyword_0_0_0_0_0 = (Keyword)cVolatileAssignment_0_0_0_0.eContents().get(0);
		private final Keyword cStoreKeyword_0_0_0_1 = (Keyword)cGroup_0_0_0.eContents().get(1);
		private final Group cGroup_0_0_1 = (Group)cAlternatives_0_0.eContents().get(1);
		private final Keyword cStoreKeyword_0_0_1_0 = (Keyword)cGroup_0_0_1.eContents().get(0);
		private final Assignment cVolatileAssignment_0_0_1_1 = (Assignment)cGroup_0_0_1.eContents().get(1);
		private final Keyword cVolatileVolatileKeyword_0_0_1_1_0 = (Keyword)cVolatileAssignment_0_0_1_1.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueParameterParserRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Keyword cCommaKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cTargetAddressAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cTargetAddressParameterParserRuleCall_0_3_0 = (RuleCall)cTargetAddressAssignment_0_3.eContents().get(0);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final Keyword cCommaKeyword_0_4_0 = (Keyword)cGroup_0_4.eContents().get(0);
		private final Keyword cAlignKeyword_0_4_1 = (Keyword)cGroup_0_4.eContents().get(1);
		private final Assignment cAlignAssignment_0_4_2 = (Assignment)cGroup_0_4.eContents().get(2);
		private final RuleCall cAlignNUMBERParserRuleCall_0_4_2_0 = (RuleCall)cAlignAssignment_0_4_2.eContents().get(0);
		private final Group cGroup_0_5 = (Group)cGroup_0.eContents().get(5);
		private final Keyword cCommaKeyword_0_5_0 = (Keyword)cGroup_0_5.eContents().get(0);
		private final Assignment cMetaAssignment_0_5_1 = (Assignment)cGroup_0_5.eContents().get(1);
		private final RuleCall cMetaMetaArgValueParserRuleCall_0_5_1_0 = (RuleCall)cMetaAssignment_0_5_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cStoreKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAtomicAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cAtomicAtomicKeyword_1_1_0 = (Keyword)cAtomicAssignment_1_1.eContents().get(0);
		private final Assignment cVolatileAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Keyword cVolatileVolatileKeyword_1_2_0 = (Keyword)cVolatileAssignment_1_2.eContents().get(0);
		private final Assignment cValueAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cValueParameterParserRuleCall_1_3_0 = (RuleCall)cValueAssignment_1_3.eContents().get(0);
		private final Keyword cCommaKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cTargetAddressAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cTargetAddressParameterParserRuleCall_1_5_0 = (RuleCall)cTargetAddressAssignment_1_5.eContents().get(0);
		private final Keyword cSinglethreadKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Assignment cOrderingAssignment_1_7 = (Assignment)cGroup_1.eContents().get(7);
		private final RuleCall cOrderingATOMIC_ORDERINGTerminalRuleCall_1_7_0 = (RuleCall)cOrderingAssignment_1_7.eContents().get(0);
		private final Group cGroup_1_8 = (Group)cGroup_1.eContents().get(8);
		private final Keyword cCommaKeyword_1_8_0 = (Keyword)cGroup_1_8.eContents().get(0);
		private final Keyword cAlignKeyword_1_8_1 = (Keyword)cGroup_1_8.eContents().get(1);
		private final Assignment cAlignAssignment_1_8_2 = (Assignment)cGroup_1_8.eContents().get(2);
		private final RuleCall cAlignNUMBERParserRuleCall_1_8_2_0 = (RuleCall)cAlignAssignment_1_8_2.eContents().get(0);
		
		//Store:
		//	(volatile?="volatile" "store" | "store" volatile?="volatile"?) value=Parameter "," targetAddress=Parameter (","
		//	"align" align=NUMBER)? ("," meta+=MetaArgValue)* | "store" atomic?="atomic" volatile?="volatile"? value=Parameter ","
		//	targetAddress=Parameter "singlethread"? ordering=ATOMIC_ORDERING ("," "align" align=NUMBER)?;
		public ParserRule getRule() { return rule; }

		//(volatile?="volatile" "store" | "store" volatile?="volatile"?) value=Parameter "," targetAddress=Parameter ("," "align"
		//align=NUMBER)? ("," meta+=MetaArgValue)* | "store" atomic?="atomic" volatile?="volatile"? value=Parameter ","
		//targetAddress=Parameter "singlethread"? ordering=ATOMIC_ORDERING ("," "align" align=NUMBER)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//(volatile?="volatile" "store" | "store" volatile?="volatile"?) value=Parameter "," targetAddress=Parameter ("," "align"
		//align=NUMBER)? ("," meta+=MetaArgValue)*
		public Group getGroup_0() { return cGroup_0; }

		//volatile?="volatile" "store" | "store" volatile?="volatile"?
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }

		//volatile?="volatile" "store"
		public Group getGroup_0_0_0() { return cGroup_0_0_0; }

		//volatile?="volatile"
		public Assignment getVolatileAssignment_0_0_0_0() { return cVolatileAssignment_0_0_0_0; }

		//"volatile"
		public Keyword getVolatileVolatileKeyword_0_0_0_0_0() { return cVolatileVolatileKeyword_0_0_0_0_0; }

		//"store"
		public Keyword getStoreKeyword_0_0_0_1() { return cStoreKeyword_0_0_0_1; }

		//"store" volatile?="volatile"?
		public Group getGroup_0_0_1() { return cGroup_0_0_1; }

		//"store"
		public Keyword getStoreKeyword_0_0_1_0() { return cStoreKeyword_0_0_1_0; }

		//volatile?="volatile"?
		public Assignment getVolatileAssignment_0_0_1_1() { return cVolatileAssignment_0_0_1_1; }

		//"volatile"
		public Keyword getVolatileVolatileKeyword_0_0_1_1_0() { return cVolatileVolatileKeyword_0_0_1_1_0; }

		//value=Parameter
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }

		//Parameter
		public RuleCall getValueParameterParserRuleCall_0_1_0() { return cValueParameterParserRuleCall_0_1_0; }

		//","
		public Keyword getCommaKeyword_0_2() { return cCommaKeyword_0_2; }

		//targetAddress=Parameter
		public Assignment getTargetAddressAssignment_0_3() { return cTargetAddressAssignment_0_3; }

		//Parameter
		public RuleCall getTargetAddressParameterParserRuleCall_0_3_0() { return cTargetAddressParameterParserRuleCall_0_3_0; }

		//("," "align" align=NUMBER)?
		public Group getGroup_0_4() { return cGroup_0_4; }

		//","
		public Keyword getCommaKeyword_0_4_0() { return cCommaKeyword_0_4_0; }

		//"align"
		public Keyword getAlignKeyword_0_4_1() { return cAlignKeyword_0_4_1; }

		//align=NUMBER
		public Assignment getAlignAssignment_0_4_2() { return cAlignAssignment_0_4_2; }

		//NUMBER
		public RuleCall getAlignNUMBERParserRuleCall_0_4_2_0() { return cAlignNUMBERParserRuleCall_0_4_2_0; }

		//("," meta+=MetaArgValue)*
		public Group getGroup_0_5() { return cGroup_0_5; }

		//","
		public Keyword getCommaKeyword_0_5_0() { return cCommaKeyword_0_5_0; }

		//meta+=MetaArgValue
		public Assignment getMetaAssignment_0_5_1() { return cMetaAssignment_0_5_1; }

		//MetaArgValue
		public RuleCall getMetaMetaArgValueParserRuleCall_0_5_1_0() { return cMetaMetaArgValueParserRuleCall_0_5_1_0; }

		//"store" atomic?="atomic" volatile?="volatile"? value=Parameter "," targetAddress=Parameter "singlethread"?
		//ordering=ATOMIC_ORDERING ("," "align" align=NUMBER)?
		public Group getGroup_1() { return cGroup_1; }

		//"store"
		public Keyword getStoreKeyword_1_0() { return cStoreKeyword_1_0; }

		//atomic?="atomic"
		public Assignment getAtomicAssignment_1_1() { return cAtomicAssignment_1_1; }

		//"atomic"
		public Keyword getAtomicAtomicKeyword_1_1_0() { return cAtomicAtomicKeyword_1_1_0; }

		//volatile?="volatile"?
		public Assignment getVolatileAssignment_1_2() { return cVolatileAssignment_1_2; }

		//"volatile"
		public Keyword getVolatileVolatileKeyword_1_2_0() { return cVolatileVolatileKeyword_1_2_0; }

		//value=Parameter
		public Assignment getValueAssignment_1_3() { return cValueAssignment_1_3; }

		//Parameter
		public RuleCall getValueParameterParserRuleCall_1_3_0() { return cValueParameterParserRuleCall_1_3_0; }

		//","
		public Keyword getCommaKeyword_1_4() { return cCommaKeyword_1_4; }

		//targetAddress=Parameter
		public Assignment getTargetAddressAssignment_1_5() { return cTargetAddressAssignment_1_5; }

		//Parameter
		public RuleCall getTargetAddressParameterParserRuleCall_1_5_0() { return cTargetAddressParameterParserRuleCall_1_5_0; }

		//"singlethread"?
		public Keyword getSinglethreadKeyword_1_6() { return cSinglethreadKeyword_1_6; }

		//ordering=ATOMIC_ORDERING
		public Assignment getOrderingAssignment_1_7() { return cOrderingAssignment_1_7; }

		//ATOMIC_ORDERING
		public RuleCall getOrderingATOMIC_ORDERINGTerminalRuleCall_1_7_0() { return cOrderingATOMIC_ORDERINGTerminalRuleCall_1_7_0; }

		//("," "align" align=NUMBER)?
		public Group getGroup_1_8() { return cGroup_1_8; }

		//","
		public Keyword getCommaKeyword_1_8_0() { return cCommaKeyword_1_8_0; }

		//"align"
		public Keyword getAlignKeyword_1_8_1() { return cAlignKeyword_1_8_1; }

		//align=NUMBER
		public Assignment getAlignAssignment_1_8_2() { return cAlignAssignment_1_8_2; }

		//NUMBER
		public RuleCall getAlignNUMBERParserRuleCall_1_8_2_0() { return cAlignNUMBERParserRuleCall_1_8_2_0; }
	}

	public class CallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Call");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cResultAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cResultAddressParserRuleCall_0_0_0 = (RuleCall)cResultAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cTailKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cCallKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cCallingConvParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cRETURN_ATTRIBUTESTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cFunctionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFunctionParameterParserRuleCall_5_0 = (RuleCall)cFunctionAssignment_5.eContents().get(0);
		private final Assignment cPListAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPListParameterListParserRuleCall_6_0 = (RuleCall)cPListAssignment_6.eContents().get(0);
		private final RuleCall cFUNCTION_ATTRIBUTESParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCommaKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cSrclocKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final RuleCall cNUMBERParserRuleCall_8_3 = (RuleCall)cGroup_8.eContents().get(3);
		
		////FIXME: no support for call of functions with a function as a result type
		//Call:
		//	(result=Address "=")? "tail"? "call" CallingConv? RETURN_ATTRIBUTES? function= //(('asm' 'sideeffect'? STRING ',' STRING) 
		//	Parameter pList=ParameterList FUNCTION_ATTRIBUTES* ("," "!srcloc" "!" NUMBER)*;
		public ParserRule getRule() { return rule; }

		//(result=Address "=")? "tail"? "call" CallingConv? RETURN_ATTRIBUTES? function= //(('asm' 'sideeffect'? STRING ',' STRING) 
		//Parameter pList=ParameterList FUNCTION_ATTRIBUTES* ("," "!srcloc" "!" NUMBER)*
		public Group getGroup() { return cGroup; }

		//(result=Address "=")?
		public Group getGroup_0() { return cGroup_0; }

		//result=Address
		public Assignment getResultAssignment_0_0() { return cResultAssignment_0_0; }

		//Address
		public RuleCall getResultAddressParserRuleCall_0_0_0() { return cResultAddressParserRuleCall_0_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }

		//"tail"?
		public Keyword getTailKeyword_1() { return cTailKeyword_1; }

		//"call"
		public Keyword getCallKeyword_2() { return cCallKeyword_2; }

		//CallingConv?
		public RuleCall getCallingConvParserRuleCall_3() { return cCallingConvParserRuleCall_3; }

		//RETURN_ATTRIBUTES?
		public RuleCall getRETURN_ATTRIBUTESTerminalRuleCall_4() { return cRETURN_ATTRIBUTESTerminalRuleCall_4; }

		//function= //(('asm' 'sideeffect'? STRING ',' STRING) 
		//Parameter
		public Assignment getFunctionAssignment_5() { return cFunctionAssignment_5; }

		////(('asm' 'sideeffect'? STRING ',' STRING) 
		//Parameter
		public RuleCall getFunctionParameterParserRuleCall_5_0() { return cFunctionParameterParserRuleCall_5_0; }

		//pList=ParameterList
		public Assignment getPListAssignment_6() { return cPListAssignment_6; }

		//ParameterList
		public RuleCall getPListParameterListParserRuleCall_6_0() { return cPListParameterListParserRuleCall_6_0; }

		//FUNCTION_ATTRIBUTES*
		public RuleCall getFUNCTION_ATTRIBUTESParserRuleCall_7() { return cFUNCTION_ATTRIBUTESParserRuleCall_7; }

		//("," "!srcloc" "!" NUMBER)*
		public Group getGroup_8() { return cGroup_8; }

		//","
		public Keyword getCommaKeyword_8_0() { return cCommaKeyword_8_0; }

		//"!srcloc"
		public Keyword getSrclocKeyword_8_1() { return cSrclocKeyword_8_1; }

		//"!"
		public Keyword getExclamationMarkKeyword_8_2() { return cExclamationMarkKeyword_8_2; }

		//NUMBER
		public RuleCall getNUMBERParserRuleCall_8_3() { return cNUMBERParserRuleCall_8_3; }
	}

	public class AllocElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Alloc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cResultAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cResultAddressParserRuleCall_0_0 = (RuleCall)cResultAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAllocaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeUseParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cNumOfElementsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cNumOfElementsParameterParserRuleCall_4_1_0 = (RuleCall)cNumOfElementsAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cAlignKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cAlignAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cAlignNUMBERParserRuleCall_5_2_0 = (RuleCall)cAlignAssignment_5_2.eContents().get(0);
		
		//Alloc:
		//	result=Address "=" "alloca" type=TypeUse ("," numOfElements=Parameter)? ("," "align" align=NUMBER)?;
		public ParserRule getRule() { return rule; }

		//result=Address "=" "alloca" type=TypeUse ("," numOfElements=Parameter)? ("," "align" align=NUMBER)?
		public Group getGroup() { return cGroup; }

		//result=Address
		public Assignment getResultAssignment_0() { return cResultAssignment_0; }

		//Address
		public RuleCall getResultAddressParserRuleCall_0_0() { return cResultAddressParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"alloca"
		public Keyword getAllocaKeyword_2() { return cAllocaKeyword_2; }

		//type=TypeUse
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//TypeUse
		public RuleCall getTypeTypeUseParserRuleCall_3_0() { return cTypeTypeUseParserRuleCall_3_0; }

		//("," numOfElements=Parameter)?
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//numOfElements=Parameter
		public Assignment getNumOfElementsAssignment_4_1() { return cNumOfElementsAssignment_4_1; }

		//Parameter
		public RuleCall getNumOfElementsParameterParserRuleCall_4_1_0() { return cNumOfElementsParameterParserRuleCall_4_1_0; }

		//("," "align" align=NUMBER)?
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//"align"
		public Keyword getAlignKeyword_5_1() { return cAlignKeyword_5_1; }

		//align=NUMBER
		public Assignment getAlignAssignment_5_2() { return cAlignAssignment_5_2; }

		//NUMBER
		public RuleCall getAlignNUMBERParserRuleCall_5_2_0() { return cAlignNUMBERParserRuleCall_5_2_0; }
	}

	public class PhiCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PhiCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueValueParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLabelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLabelVALID_IDTerminalRuleCall_2_0 = (RuleCall)cLabelAssignment_2.eContents().get(0);
		
		//PhiCase:
		//	value=Value "," label=VALID_ID;
		public ParserRule getRule() { return rule; }

		//value=Value "," label=VALID_ID
		public Group getGroup() { return cGroup; }

		//value=Value
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//Value
		public RuleCall getValueValueParserRuleCall_0_0() { return cValueValueParserRuleCall_0_0; }

		//","
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }

		//label=VALID_ID
		public Assignment getLabelAssignment_2() { return cLabelAssignment_2; }

		//VALID_ID
		public RuleCall getLabelVALID_IDTerminalRuleCall_2_0() { return cLabelVALID_IDTerminalRuleCall_2_0; }
	}

	public class PhiElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Phi");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cResultAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cResultAddressParserRuleCall_0_0 = (RuleCall)cResultAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cPhiKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeUseParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCasesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCasesPhiCaseParserRuleCall_5_0 = (RuleCall)cCasesAssignment_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cCasesAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cCasesPhiCaseParserRuleCall_7_2_0 = (RuleCall)cCasesAssignment_7_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		
		//Phi:
		//	result=Address "=" "phi" type=TypeUse "[" cases+=PhiCase "]" ("," "[" cases+=PhiCase "]")*;
		public ParserRule getRule() { return rule; }

		//result=Address "=" "phi" type=TypeUse "[" cases+=PhiCase "]" ("," "[" cases+=PhiCase "]")*
		public Group getGroup() { return cGroup; }

		//result=Address
		public Assignment getResultAssignment_0() { return cResultAssignment_0; }

		//Address
		public RuleCall getResultAddressParserRuleCall_0_0() { return cResultAddressParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"phi"
		public Keyword getPhiKeyword_2() { return cPhiKeyword_2; }

		//type=TypeUse
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//TypeUse
		public RuleCall getTypeTypeUseParserRuleCall_3_0() { return cTypeTypeUseParserRuleCall_3_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }

		//cases+=PhiCase
		public Assignment getCasesAssignment_5() { return cCasesAssignment_5; }

		//PhiCase
		public RuleCall getCasesPhiCaseParserRuleCall_5_0() { return cCasesPhiCaseParserRuleCall_5_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }

		//("," "[" cases+=PhiCase "]")*
		public Group getGroup_7() { return cGroup_7; }

		//","
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_7_1() { return cLeftSquareBracketKeyword_7_1; }

		//cases+=PhiCase
		public Assignment getCasesAssignment_7_2() { return cCasesAssignment_7_2; }

		//PhiCase
		public RuleCall getCasesPhiCaseParserRuleCall_7_2_0() { return cCasesPhiCaseParserRuleCall_7_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_7_3() { return cRightSquareBracketKeyword_7_3; }
	}

	public class LandingPadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LandingPad");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cResultAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cResultAddressParserRuleCall_0_0 = (RuleCall)cResultAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLandingpadKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStructAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStructStructureParserRuleCall_3_0 = (RuleCall)cStructAssignment_3.eContents().get(0);
		private final Keyword cPersonalityKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPersonalitytypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPersonalitytypeTypeUseParserRuleCall_5_0 = (RuleCall)cPersonalitytypeAssignment_5.eContents().get(0);
		private final Assignment cPersonalityvalueAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPersonalityvalueValueParserRuleCall_6_0 = (RuleCall)cPersonalityvalueAssignment_6.eContents().get(0);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Group cGroup_7_0 = (Group)cAlternatives_7.eContents().get(0);
		private final Keyword cCleanupKeyword_7_0_0 = (Keyword)cGroup_7_0.eContents().get(0);
		private final Assignment cClauseAssignment_7_0_1 = (Assignment)cGroup_7_0.eContents().get(1);
		private final RuleCall cClauseClauseParserRuleCall_7_0_1_0 = (RuleCall)cClauseAssignment_7_0_1.eContents().get(0);
		private final Assignment cClauseAssignment_7_1 = (Assignment)cAlternatives_7.eContents().get(1);
		private final RuleCall cClauseClauseParserRuleCall_7_1_0 = (RuleCall)cClauseAssignment_7_1.eContents().get(0);
		
		//LandingPad:
		//	result=Address "=" "landingpad" struct=Structure "personality" personalitytype=TypeUse personalityvalue=Value
		//	("cleanup" clause+=Clause* | clause+=Clause+);
		public ParserRule getRule() { return rule; }

		//result=Address "=" "landingpad" struct=Structure "personality" personalitytype=TypeUse personalityvalue=Value ("cleanup"
		//clause+=Clause* | clause+=Clause+)
		public Group getGroup() { return cGroup; }

		//result=Address
		public Assignment getResultAssignment_0() { return cResultAssignment_0; }

		//Address
		public RuleCall getResultAddressParserRuleCall_0_0() { return cResultAddressParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"landingpad"
		public Keyword getLandingpadKeyword_2() { return cLandingpadKeyword_2; }

		//struct=Structure
		public Assignment getStructAssignment_3() { return cStructAssignment_3; }

		//Structure
		public RuleCall getStructStructureParserRuleCall_3_0() { return cStructStructureParserRuleCall_3_0; }

		//"personality"
		public Keyword getPersonalityKeyword_4() { return cPersonalityKeyword_4; }

		//personalitytype=TypeUse
		public Assignment getPersonalitytypeAssignment_5() { return cPersonalitytypeAssignment_5; }

		//TypeUse
		public RuleCall getPersonalitytypeTypeUseParserRuleCall_5_0() { return cPersonalitytypeTypeUseParserRuleCall_5_0; }

		//personalityvalue=Value
		public Assignment getPersonalityvalueAssignment_6() { return cPersonalityvalueAssignment_6; }

		//Value
		public RuleCall getPersonalityvalueValueParserRuleCall_6_0() { return cPersonalityvalueValueParserRuleCall_6_0; }

		//"cleanup" clause+=Clause* | clause+=Clause+
		public Alternatives getAlternatives_7() { return cAlternatives_7; }

		//"cleanup" clause+=Clause*
		public Group getGroup_7_0() { return cGroup_7_0; }

		//"cleanup"
		public Keyword getCleanupKeyword_7_0_0() { return cCleanupKeyword_7_0_0; }

		//clause+=Clause*
		public Assignment getClauseAssignment_7_0_1() { return cClauseAssignment_7_0_1; }

		//Clause
		public RuleCall getClauseClauseParserRuleCall_7_0_1_0() { return cClauseClauseParserRuleCall_7_0_1_0; }

		//clause+=Clause+
		public Assignment getClauseAssignment_7_1() { return cClauseAssignment_7_1; }

		//Clause
		public RuleCall getClauseClauseParserRuleCall_7_1_0() { return cClauseClauseParserRuleCall_7_1_0; }
	}

	public class ClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Clause");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cCatchKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTypeTypeUseParserRuleCall_0_1_0 = (RuleCall)cTypeAssignment_0_1.eContents().get(0);
		private final Assignment cValueAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_0_2_0 = (RuleCall)cValueAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFilterKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFilterarrayAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFilterarrayArrayParserRuleCall_1_1_0 = (RuleCall)cFilterarrayAssignment_1_1.eContents().get(0);
		private final Assignment cConstantAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cConstantValueParserRuleCall_1_2_0 = (RuleCall)cConstantAssignment_1_2.eContents().get(0);
		
		//Clause:
		//	"catch" type=TypeUse value=Value | "filter" filterarray=Array constant=Value;
		public ParserRule getRule() { return rule; }

		//"catch" type=TypeUse value=Value | "filter" filterarray=Array constant=Value
		public Alternatives getAlternatives() { return cAlternatives; }

		//"catch" type=TypeUse value=Value
		public Group getGroup_0() { return cGroup_0; }

		//"catch"
		public Keyword getCatchKeyword_0_0() { return cCatchKeyword_0_0; }

		//type=TypeUse
		public Assignment getTypeAssignment_0_1() { return cTypeAssignment_0_1; }

		//TypeUse
		public RuleCall getTypeTypeUseParserRuleCall_0_1_0() { return cTypeTypeUseParserRuleCall_0_1_0; }

		//value=Value
		public Assignment getValueAssignment_0_2() { return cValueAssignment_0_2; }

		//Value
		public RuleCall getValueValueParserRuleCall_0_2_0() { return cValueValueParserRuleCall_0_2_0; }

		//"filter" filterarray=Array constant=Value
		public Group getGroup_1() { return cGroup_1; }

		//"filter"
		public Keyword getFilterKeyword_1_0() { return cFilterKeyword_1_0; }

		//filterarray=Array
		public Assignment getFilterarrayAssignment_1_1() { return cFilterarrayAssignment_1_1; }

		//Array
		public RuleCall getFilterarrayArrayParserRuleCall_1_1_0() { return cFilterarrayArrayParserRuleCall_1_1_0; }

		//constant=Value
		public Assignment getConstantAssignment_1_2() { return cConstantAssignment_1_2; }

		//Value
		public RuleCall getConstantValueParserRuleCall_1_2_0() { return cConstantValueParserRuleCall_1_2_0; }
	}

	public class SelectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Select");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cResultAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cResultAddressParserRuleCall_0_0 = (RuleCall)cResultAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSelectKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionParameterParserRuleCall_3_0 = (RuleCall)cConditionAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTrueValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTrueValueParameterParserRuleCall_5_0 = (RuleCall)cTrueValueAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cElseValueAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cElseValueParameterParserRuleCall_7_0 = (RuleCall)cElseValueAssignment_7.eContents().get(0);
		
		//Select:
		//	result=Address "=" "select" condition=Parameter "," trueValue=Parameter "," elseValue=Parameter;
		public ParserRule getRule() { return rule; }

		//result=Address "=" "select" condition=Parameter "," trueValue=Parameter "," elseValue=Parameter
		public Group getGroup() { return cGroup; }

		//result=Address
		public Assignment getResultAssignment_0() { return cResultAssignment_0; }

		//Address
		public RuleCall getResultAddressParserRuleCall_0_0() { return cResultAddressParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"select"
		public Keyword getSelectKeyword_2() { return cSelectKeyword_2; }

		//condition=Parameter
		public Assignment getConditionAssignment_3() { return cConditionAssignment_3; }

		//Parameter
		public RuleCall getConditionParameterParserRuleCall_3_0() { return cConditionParameterParserRuleCall_3_0; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//trueValue=Parameter
		public Assignment getTrueValueAssignment_5() { return cTrueValueAssignment_5; }

		//Parameter
		public RuleCall getTrueValueParameterParserRuleCall_5_0() { return cTrueValueParameterParserRuleCall_5_0; }

		//","
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }

		//elseValue=Parameter
		public Assignment getElseValueAssignment_7() { return cElseValueAssignment_7; }

		//Parameter
		public RuleCall getElseValueParameterParserRuleCall_7_0() { return cElseValueParameterParserRuleCall_7_0; }
	}

	public class VariableAttributeAccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableAttributeAccess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cResultAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cResultAddressParserRuleCall_0_0 = (RuleCall)cResultAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cVa_argKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVaListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVaListParameterParserRuleCall_3_0 = (RuleCall)cVaListAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cATypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cATypeTypeUseParserRuleCall_5_0 = (RuleCall)cATypeAssignment_5.eContents().get(0);
		
		//VariableAttributeAccess:
		//	result=Address "=" "va_arg" vaList=Parameter "," aType=TypeUse;
		public ParserRule getRule() { return rule; }

		//result=Address "=" "va_arg" vaList=Parameter "," aType=TypeUse
		public Group getGroup() { return cGroup; }

		//result=Address
		public Assignment getResultAssignment_0() { return cResultAssignment_0; }

		//Address
		public RuleCall getResultAddressParserRuleCall_0_0() { return cResultAddressParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"va_arg"
		public Keyword getVa_argKeyword_2() { return cVa_argKeyword_2; }

		//vaList=Parameter
		public Assignment getVaListAssignment_3() { return cVaListAssignment_3; }

		//Parameter
		public RuleCall getVaListParameterParserRuleCall_3_0() { return cVaListParameterParserRuleCall_3_0; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//aType=TypeUse
		public Assignment getATypeAssignment_5() { return cATypeAssignment_5; }

		//TypeUse
		public RuleCall getATypeTypeUseParserRuleCall_5_0() { return cATypeTypeUseParserRuleCall_5_0; }
	}

	public class ExtractValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExtractValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cResultAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cResultAddressParserRuleCall_0_0 = (RuleCall)cResultAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cExtractvalueKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAggerateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAggerateParameterParserRuleCall_3_0 = (RuleCall)cAggerateAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cIndexAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cIndexNUMBERParserRuleCall_4_1_0 = (RuleCall)cIndexAssignment_4_1.eContents().get(0);
		
		////FIXME TODO
		////...Value for structs and arrays 
		//ExtractValue:
		//	result=Address "=" "extractvalue" aggerate=Parameter ("," index+=NUMBER)+;
		public ParserRule getRule() { return rule; }

		//result=Address "=" "extractvalue" aggerate=Parameter ("," index+=NUMBER)+
		public Group getGroup() { return cGroup; }

		//result=Address
		public Assignment getResultAssignment_0() { return cResultAssignment_0; }

		//Address
		public RuleCall getResultAddressParserRuleCall_0_0() { return cResultAddressParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"extractvalue"
		public Keyword getExtractvalueKeyword_2() { return cExtractvalueKeyword_2; }

		//aggerate=Parameter
		public Assignment getAggerateAssignment_3() { return cAggerateAssignment_3; }

		//Parameter
		public RuleCall getAggerateParameterParserRuleCall_3_0() { return cAggerateParameterParserRuleCall_3_0; }

		//("," index+=NUMBER)+
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//index+=NUMBER
		public Assignment getIndexAssignment_4_1() { return cIndexAssignment_4_1; }

		//NUMBER
		public RuleCall getIndexNUMBERParserRuleCall_4_1_0() { return cIndexNUMBERParserRuleCall_4_1_0; }
	}

	public class InsertValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InsertValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cResultAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cResultAddressParserRuleCall_0_0 = (RuleCall)cResultAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cInsertvalueKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAggerateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAggerateParameterParserRuleCall_3_0 = (RuleCall)cAggerateAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValueParameterParserRuleCall_5_0 = (RuleCall)cValueAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cIndexAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cIndexNUMBERParserRuleCall_6_1_0 = (RuleCall)cIndexAssignment_6_1.eContents().get(0);
		
		//InsertValue:
		//	result=Address "=" "insertvalue" aggerate=Parameter "," value=Parameter ("," index+=NUMBER)+;
		public ParserRule getRule() { return rule; }

		//result=Address "=" "insertvalue" aggerate=Parameter "," value=Parameter ("," index+=NUMBER)+
		public Group getGroup() { return cGroup; }

		//result=Address
		public Assignment getResultAssignment_0() { return cResultAssignment_0; }

		//Address
		public RuleCall getResultAddressParserRuleCall_0_0() { return cResultAddressParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"insertvalue"
		public Keyword getInsertvalueKeyword_2() { return cInsertvalueKeyword_2; }

		//aggerate=Parameter
		public Assignment getAggerateAssignment_3() { return cAggerateAssignment_3; }

		//Parameter
		public RuleCall getAggerateParameterParserRuleCall_3_0() { return cAggerateParameterParserRuleCall_3_0; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//value=Parameter
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }

		//Parameter
		public RuleCall getValueParameterParserRuleCall_5_0() { return cValueParameterParserRuleCall_5_0; }

		//("," index+=NUMBER)+
		public Group getGroup_6() { return cGroup_6; }

		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }

		//index+=NUMBER
		public Assignment getIndexAssignment_6_1() { return cIndexAssignment_6_1; }

		//NUMBER
		public RuleCall getIndexNUMBERParserRuleCall_6_1_0() { return cIndexNUMBERParserRuleCall_6_1_0; }
	}

	public class ExtractElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExtractElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cResultAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cResultAddressParserRuleCall_0_0 = (RuleCall)cResultAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cExtractelementKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVectorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVectorParameterParserRuleCall_3_0 = (RuleCall)cVectorAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cIndexAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cIndexParameterParserRuleCall_5_0 = (RuleCall)cIndexAssignment_5.eContents().get(0);
		
		////...Element for vectors
		//ExtractElement:
		//	result=Address "=" "extractelement" vector=Parameter "," index=Parameter;
		public ParserRule getRule() { return rule; }

		//result=Address "=" "extractelement" vector=Parameter "," index=Parameter
		public Group getGroup() { return cGroup; }

		//result=Address
		public Assignment getResultAssignment_0() { return cResultAssignment_0; }

		//Address
		public RuleCall getResultAddressParserRuleCall_0_0() { return cResultAddressParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"extractelement"
		public Keyword getExtractelementKeyword_2() { return cExtractelementKeyword_2; }

		//vector=Parameter
		public Assignment getVectorAssignment_3() { return cVectorAssignment_3; }

		//Parameter
		public RuleCall getVectorParameterParserRuleCall_3_0() { return cVectorParameterParserRuleCall_3_0; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//index=Parameter
		public Assignment getIndexAssignment_5() { return cIndexAssignment_5; }

		//Parameter
		public RuleCall getIndexParameterParserRuleCall_5_0() { return cIndexParameterParserRuleCall_5_0; }
	}

	public class InsertElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InsertElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cResultAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cResultAddressParserRuleCall_0_0 = (RuleCall)cResultAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cInsertelementKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVectorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVectorParameterParserRuleCall_3_0 = (RuleCall)cVectorAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValueParameterParserRuleCall_5_0 = (RuleCall)cValueAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cIndexAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cIndexParameterParserRuleCall_7_0 = (RuleCall)cIndexAssignment_7.eContents().get(0);
		
		//InsertElement:
		//	result=Address "=" "insertelement" vector=Parameter "," value=Parameter "," index=Parameter;
		public ParserRule getRule() { return rule; }

		//result=Address "=" "insertelement" vector=Parameter "," value=Parameter "," index=Parameter
		public Group getGroup() { return cGroup; }

		//result=Address
		public Assignment getResultAssignment_0() { return cResultAssignment_0; }

		//Address
		public RuleCall getResultAddressParserRuleCall_0_0() { return cResultAddressParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"insertelement"
		public Keyword getInsertelementKeyword_2() { return cInsertelementKeyword_2; }

		//vector=Parameter
		public Assignment getVectorAssignment_3() { return cVectorAssignment_3; }

		//Parameter
		public RuleCall getVectorParameterParserRuleCall_3_0() { return cVectorParameterParserRuleCall_3_0; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//value=Parameter
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }

		//Parameter
		public RuleCall getValueParameterParserRuleCall_5_0() { return cValueParameterParserRuleCall_5_0; }

		//","
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }

		//index=Parameter
		public Assignment getIndexAssignment_7() { return cIndexAssignment_7; }

		//Parameter
		public RuleCall getIndexParameterParserRuleCall_7_0() { return cIndexParameterParserRuleCall_7_0; }
	}

	public class ShuffleVectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShuffleVector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cResultAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cResultAddressParserRuleCall_0_0 = (RuleCall)cResultAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cShufflevectorKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValue1Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValue1ParameterParserRuleCall_3_0 = (RuleCall)cValue1Assignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValue2Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValue2ParameterParserRuleCall_5_0 = (RuleCall)cValue2Assignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cMaskAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cMaskParameterParserRuleCall_7_0 = (RuleCall)cMaskAssignment_7.eContents().get(0);
		
		//ShuffleVector:
		//	result=Address "=" "shufflevector" value1=Parameter "," value2=Parameter "," mask=Parameter;
		public ParserRule getRule() { return rule; }

		//result=Address "=" "shufflevector" value1=Parameter "," value2=Parameter "," mask=Parameter
		public Group getGroup() { return cGroup; }

		//result=Address
		public Assignment getResultAssignment_0() { return cResultAssignment_0; }

		//Address
		public RuleCall getResultAddressParserRuleCall_0_0() { return cResultAddressParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"shufflevector"
		public Keyword getShufflevectorKeyword_2() { return cShufflevectorKeyword_2; }

		//value1=Parameter
		public Assignment getValue1Assignment_3() { return cValue1Assignment_3; }

		//Parameter
		public RuleCall getValue1ParameterParserRuleCall_3_0() { return cValue1ParameterParserRuleCall_3_0; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//value2=Parameter
		public Assignment getValue2Assignment_5() { return cValue2Assignment_5; }

		//Parameter
		public RuleCall getValue2ParameterParserRuleCall_5_0() { return cValue2ParameterParserRuleCall_5_0; }

		//","
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }

		//mask=Parameter
		public Assignment getMaskAssignment_7() { return cMaskAssignment_7; }

		//Parameter
		public RuleCall getMaskParameterParserRuleCall_7_0() { return cMaskParameterParserRuleCall_7_0; }
	}

	public class CompareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Compare");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cResultAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cResultAddressParserRuleCall_0_0 = (RuleCall)cResultAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Keyword cIcmpKeyword_2_0_0 = (Keyword)cAlternatives_2_0.eContents().get(0);
		private final Keyword cFcmpKeyword_2_0_1 = (Keyword)cAlternatives_2_0.eContents().get(1);
		private final Assignment cCondAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cCondAlternatives_2_1_0 = (Alternatives)cCondAssignment_2_1.eContents().get(0);
		private final RuleCall cCondI_PREDICATESTerminalRuleCall_2_1_0_0 = (RuleCall)cCondAlternatives_2_1_0.eContents().get(0);
		private final RuleCall cCondF_PREDICATESTerminalRuleCall_2_1_0_1 = (RuleCall)cCondAlternatives_2_1_0.eContents().get(1);
		private final RuleCall cCondBOOLTerminalRuleCall_2_1_0_2 = (RuleCall)cCondAlternatives_2_1_0.eContents().get(2);
		private final Assignment cOpTypeAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cOpTypeTypeUseParserRuleCall_2_2_0 = (RuleCall)cOpTypeAssignment_2_2.eContents().get(0);
		private final Assignment cOperand1Assignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cOperand1ValueParserRuleCall_2_3_0 = (RuleCall)cOperand1Assignment_2_3.eContents().get(0);
		private final Keyword cCommaKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Assignment cOperand2Assignment_2_5 = (Assignment)cGroup_2.eContents().get(5);
		private final RuleCall cOperand2ValueParserRuleCall_2_5_0 = (RuleCall)cOperand2Assignment_2_5.eContents().get(0);
		
		//Compare:
		//	result=Address "=" (("icmp" | "fcmp") cond=(I_PREDICATES | F_PREDICATES | BOOL) opType=TypeUse operand1=Value ","
		//	operand2=Value);
		public ParserRule getRule() { return rule; }

		//result=Address "=" (("icmp" | "fcmp") cond=(I_PREDICATES | F_PREDICATES | BOOL) opType=TypeUse operand1=Value ","
		//operand2=Value)
		public Group getGroup() { return cGroup; }

		//result=Address
		public Assignment getResultAssignment_0() { return cResultAssignment_0; }

		//Address
		public RuleCall getResultAddressParserRuleCall_0_0() { return cResultAddressParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//("icmp" | "fcmp") cond=(I_PREDICATES | F_PREDICATES | BOOL) opType=TypeUse operand1=Value "," operand2=Value
		public Group getGroup_2() { return cGroup_2; }

		//"icmp" | "fcmp"
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }

		//"icmp"
		public Keyword getIcmpKeyword_2_0_0() { return cIcmpKeyword_2_0_0; }

		//"fcmp"
		public Keyword getFcmpKeyword_2_0_1() { return cFcmpKeyword_2_0_1; }

		//cond=(I_PREDICATES | F_PREDICATES | BOOL)
		public Assignment getCondAssignment_2_1() { return cCondAssignment_2_1; }

		//I_PREDICATES | F_PREDICATES | BOOL
		public Alternatives getCondAlternatives_2_1_0() { return cCondAlternatives_2_1_0; }

		//I_PREDICATES
		public RuleCall getCondI_PREDICATESTerminalRuleCall_2_1_0_0() { return cCondI_PREDICATESTerminalRuleCall_2_1_0_0; }

		//F_PREDICATES
		public RuleCall getCondF_PREDICATESTerminalRuleCall_2_1_0_1() { return cCondF_PREDICATESTerminalRuleCall_2_1_0_1; }

		//BOOL
		public RuleCall getCondBOOLTerminalRuleCall_2_1_0_2() { return cCondBOOLTerminalRuleCall_2_1_0_2; }

		//opType=TypeUse
		public Assignment getOpTypeAssignment_2_2() { return cOpTypeAssignment_2_2; }

		//TypeUse
		public RuleCall getOpTypeTypeUseParserRuleCall_2_2_0() { return cOpTypeTypeUseParserRuleCall_2_2_0; }

		//operand1=Value
		public Assignment getOperand1Assignment_2_3() { return cOperand1Assignment_2_3; }

		//Value
		public RuleCall getOperand1ValueParserRuleCall_2_3_0() { return cOperand1ValueParserRuleCall_2_3_0; }

		//","
		public Keyword getCommaKeyword_2_4() { return cCommaKeyword_2_4; }

		//operand2=Value
		public Assignment getOperand2Assignment_2_5() { return cOperand2Assignment_2_5; }

		//Value
		public RuleCall getOperand2ValueParserRuleCall_2_5_0() { return cOperand2ValueParserRuleCall_2_5_0; }
	}

	public class IndirectBranchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IndirectBranch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIndirectbrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTargetParameterParserRuleCall_1_0 = (RuleCall)cTargetAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLabelKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cPotTargetLabelsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cPotTargetLabelsVALID_IDTerminalRuleCall_4_1_0 = (RuleCall)cPotTargetLabelsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Keyword cLabelKeyword_4_2_1 = (Keyword)cGroup_4_2.eContents().get(1);
		private final Assignment cPotTargetLabelsAssignment_4_2_2 = (Assignment)cGroup_4_2.eContents().get(2);
		private final RuleCall cPotTargetLabelsVALID_IDTerminalRuleCall_4_2_2_0 = (RuleCall)cPotTargetLabelsAssignment_4_2_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//IndirectBranch:
		//	"indirectbr" target=Parameter "," "[" ("label" potTargetLabels+=VALID_ID ("," "label" potTargetLabels+=VALID_ID)*)?
		//	"]";
		public ParserRule getRule() { return rule; }

		//"indirectbr" target=Parameter "," "[" ("label" potTargetLabels+=VALID_ID ("," "label" potTargetLabels+=VALID_ID)*)? "]"
		public Group getGroup() { return cGroup; }

		//"indirectbr"
		public Keyword getIndirectbrKeyword_0() { return cIndirectbrKeyword_0; }

		//target=Parameter
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }

		//Parameter
		public RuleCall getTargetParameterParserRuleCall_1_0() { return cTargetParameterParserRuleCall_1_0; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }

		//("label" potTargetLabels+=VALID_ID ("," "label" potTargetLabels+=VALID_ID)*)?
		public Group getGroup_4() { return cGroup_4; }

		//"label"
		public Keyword getLabelKeyword_4_0() { return cLabelKeyword_4_0; }

		//potTargetLabels+=VALID_ID
		public Assignment getPotTargetLabelsAssignment_4_1() { return cPotTargetLabelsAssignment_4_1; }

		//VALID_ID
		public RuleCall getPotTargetLabelsVALID_IDTerminalRuleCall_4_1_0() { return cPotTargetLabelsVALID_IDTerminalRuleCall_4_1_0; }

		//("," "label" potTargetLabels+=VALID_ID)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//"label"
		public Keyword getLabelKeyword_4_2_1() { return cLabelKeyword_4_2_1; }

		//potTargetLabels+=VALID_ID
		public Assignment getPotTargetLabelsAssignment_4_2_2() { return cPotTargetLabelsAssignment_4_2_2; }

		//VALID_ID
		public RuleCall getPotTargetLabelsVALID_IDTerminalRuleCall_4_2_2_0() { return cPotTargetLabelsVALID_IDTerminalRuleCall_4_2_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}

	public class SwitchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Switch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwitchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCaseValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCaseValueParameterParserRuleCall_1_0 = (RuleCall)cCaseValueAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLabelKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDefaultCaseAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDefaultCaseVALID_IDTerminalRuleCall_4_0 = (RuleCall)cDefaultCaseAssignment_4.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cCasesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCasesSwitchCaseParserRuleCall_6_0 = (RuleCall)cCasesAssignment_6.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Switch:
		//	"switch" caseValue=Parameter "," "label" defaultCase=VALID_ID "[" cases+=SwitchCase* "]";
		public ParserRule getRule() { return rule; }

		//"switch" caseValue=Parameter "," "label" defaultCase=VALID_ID "[" cases+=SwitchCase* "]"
		public Group getGroup() { return cGroup; }

		//"switch"
		public Keyword getSwitchKeyword_0() { return cSwitchKeyword_0; }

		//caseValue=Parameter
		public Assignment getCaseValueAssignment_1() { return cCaseValueAssignment_1; }

		//Parameter
		public RuleCall getCaseValueParameterParserRuleCall_1_0() { return cCaseValueParameterParserRuleCall_1_0; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//"label"
		public Keyword getLabelKeyword_3() { return cLabelKeyword_3; }

		//defaultCase=VALID_ID
		public Assignment getDefaultCaseAssignment_4() { return cDefaultCaseAssignment_4; }

		//VALID_ID
		public RuleCall getDefaultCaseVALID_IDTerminalRuleCall_4_0() { return cDefaultCaseVALID_IDTerminalRuleCall_4_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_5() { return cLeftSquareBracketKeyword_5; }

		//cases+=SwitchCase*
		public Assignment getCasesAssignment_6() { return cCasesAssignment_6; }

		//SwitchCase
		public RuleCall getCasesSwitchCaseParserRuleCall_6_0() { return cCasesSwitchCaseParserRuleCall_6_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_7() { return cRightSquareBracketKeyword_7; }
	}

	public class SwitchCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SwitchCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCaseValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCaseValueParameterParserRuleCall_0_0 = (RuleCall)cCaseValueAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLabelKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDestinationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDestinationVALID_IDTerminalRuleCall_3_0 = (RuleCall)cDestinationAssignment_3.eContents().get(0);
		
		//SwitchCase:
		//	caseValue=Parameter "," "label" destination=VALID_ID;
		public ParserRule getRule() { return rule; }

		//caseValue=Parameter "," "label" destination=VALID_ID
		public Group getGroup() { return cGroup; }

		//caseValue=Parameter
		public Assignment getCaseValueAssignment_0() { return cCaseValueAssignment_0; }

		//Parameter
		public RuleCall getCaseValueParameterParserRuleCall_0_0() { return cCaseValueParameterParserRuleCall_0_0; }

		//","
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }

		//"label"
		public Keyword getLabelKeyword_2() { return cLabelKeyword_2; }

		//destination=VALID_ID
		public Assignment getDestinationAssignment_3() { return cDestinationAssignment_3; }

		//VALID_ID
		public RuleCall getDestinationVALID_IDTerminalRuleCall_3_0() { return cDestinationVALID_IDTerminalRuleCall_3_0; }
	}

	public class InvokeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Invoke");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInvokeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cCallingConvParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cRETURN_ATTRIBUTESTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cReturnTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cReturnTypeTypeUseParserRuleCall_3_0 = (RuleCall)cReturnTypeAssignment_3.eContents().get(0);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameAddressParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Assignment cPListAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPListParameterListParserRuleCall_5_0 = (RuleCall)cPListAssignment_5.eContents().get(0);
		private final RuleCall cFUNCTION_ATTRIBUTESParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Keyword cToKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLabelKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cTargetLabelAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cTargetLabelVALID_IDTerminalRuleCall_9_0 = (RuleCall)cTargetLabelAssignment_9.eContents().get(0);
		private final Keyword cUnwindKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cLabelKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cUnwindTargetLabelAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cUnwindTargetLabelVALID_IDTerminalRuleCall_12_0 = (RuleCall)cUnwindTargetLabelAssignment_12.eContents().get(0);
		
		//Invoke:
		//	"invoke" CallingConv? RETURN_ATTRIBUTES? returnType=TypeUse name=Address pList=ParameterList FUNCTION_ATTRIBUTES*
		//	"to" "label" targetLabel=VALID_ID "unwind" "label" unwindTargetLabel=VALID_ID;
		public ParserRule getRule() { return rule; }

		//"invoke" CallingConv? RETURN_ATTRIBUTES? returnType=TypeUse name=Address pList=ParameterList FUNCTION_ATTRIBUTES* "to"
		//"label" targetLabel=VALID_ID "unwind" "label" unwindTargetLabel=VALID_ID
		public Group getGroup() { return cGroup; }

		//"invoke"
		public Keyword getInvokeKeyword_0() { return cInvokeKeyword_0; }

		//CallingConv?
		public RuleCall getCallingConvParserRuleCall_1() { return cCallingConvParserRuleCall_1; }

		//RETURN_ATTRIBUTES?
		public RuleCall getRETURN_ATTRIBUTESTerminalRuleCall_2() { return cRETURN_ATTRIBUTESTerminalRuleCall_2; }

		//returnType=TypeUse
		public Assignment getReturnTypeAssignment_3() { return cReturnTypeAssignment_3; }

		//TypeUse
		public RuleCall getReturnTypeTypeUseParserRuleCall_3_0() { return cReturnTypeTypeUseParserRuleCall_3_0; }

		//name=Address
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//Address
		public RuleCall getNameAddressParserRuleCall_4_0() { return cNameAddressParserRuleCall_4_0; }

		//pList=ParameterList
		public Assignment getPListAssignment_5() { return cPListAssignment_5; }

		//ParameterList
		public RuleCall getPListParameterListParserRuleCall_5_0() { return cPListParameterListParserRuleCall_5_0; }

		//FUNCTION_ATTRIBUTES*
		public RuleCall getFUNCTION_ATTRIBUTESParserRuleCall_6() { return cFUNCTION_ATTRIBUTESParserRuleCall_6; }

		//"to"
		public Keyword getToKeyword_7() { return cToKeyword_7; }

		//"label"
		public Keyword getLabelKeyword_8() { return cLabelKeyword_8; }

		//targetLabel=VALID_ID
		public Assignment getTargetLabelAssignment_9() { return cTargetLabelAssignment_9; }

		//VALID_ID
		public RuleCall getTargetLabelVALID_IDTerminalRuleCall_9_0() { return cTargetLabelVALID_IDTerminalRuleCall_9_0; }

		//"unwind"
		public Keyword getUnwindKeyword_10() { return cUnwindKeyword_10; }

		//"label"
		public Keyword getLabelKeyword_11() { return cLabelKeyword_11; }

		//unwindTargetLabel=VALID_ID
		public Assignment getUnwindTargetLabelAssignment_12() { return cUnwindTargetLabelAssignment_12; }

		//VALID_ID
		public RuleCall getUnwindTargetLabelVALID_IDTerminalRuleCall_12_0() { return cUnwindTargetLabelVALID_IDTerminalRuleCall_12_0; }
	}

	public class ResumeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Resume");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cResumeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeStructureParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Resume:
		//	"resume" type=Structure value=Value;
		public ParserRule getRule() { return rule; }

		//"resume" type=Structure value=Value
		public Group getGroup() { return cGroup; }

		//"resume"
		public Keyword getResumeKeyword_0() { return cResumeKeyword_0; }

		//type=Structure
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//Structure
		public RuleCall getTypeStructureParserRuleCall_1_0() { return cTypeStructureParserRuleCall_1_0; }

		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }
	}

	public class UnreachableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Unreachable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnreachableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cUnreachableKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Unreachable:
		//	{Unreachable} "unreachable";
		public ParserRule getRule() { return rule; }

		//{Unreachable} "unreachable"
		public Group getGroup() { return cGroup; }

		//{Unreachable}
		public Action getUnreachableAction_0() { return cUnreachableAction_0; }

		//"unreachable"
		public Keyword getUnreachableKeyword_1() { return cUnreachableKeyword_1; }
	}

	public class ReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Return");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueParameterParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cDbgKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final RuleCall cNUMBERParserRuleCall_2_3 = (RuleCall)cGroup_2.eContents().get(3);
		
		//Return:
		//	"ret" value=Parameter ("," "!dbg" "!" NUMBER)?;
		public ParserRule getRule() { return rule; }

		//"ret" value=Parameter ("," "!dbg" "!" NUMBER)?
		public Group getGroup() { return cGroup; }

		//"ret"
		public Keyword getRetKeyword_0() { return cRetKeyword_0; }

		//value=Parameter
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//Parameter
		public RuleCall getValueParameterParserRuleCall_1_0() { return cValueParameterParserRuleCall_1_0; }

		//("," "!dbg" "!" NUMBER)?
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//"!dbg"
		public Keyword getDbgKeyword_2_1() { return cDbgKeyword_2_1; }

		//"!"
		public Keyword getExclamationMarkKeyword_2_2() { return cExclamationMarkKeyword_2_2; }

		//NUMBER
		public RuleCall getNUMBERParserRuleCall_2_3() { return cNUMBERParserRuleCall_2_3; }
	}

	public class BranchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Branch");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cBrKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLabelKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cDestinationAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cDestinationVALID_IDTerminalRuleCall_0_2_0 = (RuleCall)cDestinationAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cBrKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINT_TYPETerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cConditionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cConditionValueParserRuleCall_1_2_0 = (RuleCall)cConditionAssignment_1_2.eContents().get(0);
		private final Keyword cCommaKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cLabelKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cDestinationAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cDestinationVALID_IDTerminalRuleCall_1_5_0 = (RuleCall)cDestinationAssignment_1_5.eContents().get(0);
		private final Keyword cCommaKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Keyword cLabelKeyword_1_7 = (Keyword)cGroup_1.eContents().get(7);
		private final Assignment cElseDestinationAssignment_1_8 = (Assignment)cGroup_1.eContents().get(8);
		private final RuleCall cElseDestinationVALID_IDTerminalRuleCall_1_8_0 = (RuleCall)cElseDestinationAssignment_1_8.eContents().get(0);
		
		//Branch:
		//	"br" "label" destination=VALID_ID | "br" INT_TYPE condition=Value "," "label" destination=VALID_ID "," "label"
		//	elseDestination=VALID_ID;
		public ParserRule getRule() { return rule; }

		//"br" "label" destination=VALID_ID | "br" INT_TYPE condition=Value "," "label" destination=VALID_ID "," "label"
		//elseDestination=VALID_ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//"br" "label" destination=VALID_ID
		public Group getGroup_0() { return cGroup_0; }

		//"br"
		public Keyword getBrKeyword_0_0() { return cBrKeyword_0_0; }

		//"label"
		public Keyword getLabelKeyword_0_1() { return cLabelKeyword_0_1; }

		//destination=VALID_ID
		public Assignment getDestinationAssignment_0_2() { return cDestinationAssignment_0_2; }

		//VALID_ID
		public RuleCall getDestinationVALID_IDTerminalRuleCall_0_2_0() { return cDestinationVALID_IDTerminalRuleCall_0_2_0; }

		//"br" INT_TYPE condition=Value "," "label" destination=VALID_ID "," "label" elseDestination=VALID_ID
		public Group getGroup_1() { return cGroup_1; }

		//"br"
		public Keyword getBrKeyword_1_0() { return cBrKeyword_1_0; }

		//INT_TYPE
		public RuleCall getINT_TYPETerminalRuleCall_1_1() { return cINT_TYPETerminalRuleCall_1_1; }

		//condition=Value
		public Assignment getConditionAssignment_1_2() { return cConditionAssignment_1_2; }

		//Value
		public RuleCall getConditionValueParserRuleCall_1_2_0() { return cConditionValueParserRuleCall_1_2_0; }

		//","
		public Keyword getCommaKeyword_1_3() { return cCommaKeyword_1_3; }

		//"label"
		public Keyword getLabelKeyword_1_4() { return cLabelKeyword_1_4; }

		//destination=VALID_ID
		public Assignment getDestinationAssignment_1_5() { return cDestinationAssignment_1_5; }

		//VALID_ID
		public RuleCall getDestinationVALID_IDTerminalRuleCall_1_5_0() { return cDestinationVALID_IDTerminalRuleCall_1_5_0; }

		//","
		public Keyword getCommaKeyword_1_6() { return cCommaKeyword_1_6; }

		//"label"
		public Keyword getLabelKeyword_1_7() { return cLabelKeyword_1_7; }

		//elseDestination=VALID_ID
		public Assignment getElseDestinationAssignment_1_8() { return cElseDestinationAssignment_1_8; }

		//VALID_ID
		public RuleCall getElseDestinationVALID_IDTerminalRuleCall_1_8_0() { return cElseDestinationVALID_IDTerminalRuleCall_1_8_0; }
	}
	
	
	private final LLVMElements pLLVM;
	private final NUMBERElements pNUMBER;
	private final TerminalRule tVALID_ID;
	private final TerminalRule tINT_TYPE;
	private final TerminalRule tBOOL;
	private final TerminalRule tPRIMITIVE_VALUE;
	private final TerminalRule tFLOATING_POINT_TYPE;
	private final TerminalRule tINITIALIZER;
	private final TerminalRule tSTRING;
	private final TerminalRule tUNKNOWN_TYPE;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tPOINTER;
	private final TerminalRule tMETADATA;
	private final TerminalRule tF_PREDICATES;
	private final TerminalRule tATOMIC_ORDERING;
	private final TerminalRule tBIN_OP;
	private final TerminalRule tRETURN_ATTRIBUTES;
	private final CallingConvElements pCallingConv;
	private final FUNCTION_ATTRIBUTESElements pFUNCTION_ATTRIBUTES;
	private final TerminalRule tCAST_OP;
	private final TerminalRule tI_PREDICATES;
	private final TerminalRule tVISIBILITY;
	private final TerminalRule tLINKAGE;
	private final TerminalRule tALIAS_LINKAGE;
	private final KEYWORDSElements pKEYWORDS;
	private final LABEL_IDElements pLABEL_ID;
	private final AbstractElementElements pAbstractElement;
	private final TopLevelEntityElements pTopLevelEntity;
	private final MainLevelEntityElements pMainLevelEntity;
	private final TypeDefinitionElements pTypeDefinition;
	private final GlobalDefinitionElements pGlobalDefinition;
	private final FunctionDefinitionElements pFunctionDefinition;
	private final AliasDefinitionElements pAliasDefinition;
	private final TypeUseElements pTypeUse;
	private final AddressUseElements pAddressUse;
	private final AddressElements pAddress;
	private final PredefinedElements pPredefined;
	private final VectorElements pVector;
	private final ArrayElements pArray;
	private final Aggregate_TypeElements pAggregate_Type;
	private final ConstantElements pConstant;
	private final PrimitiveValueElements pPrimitiveValue;
	private final ValueElements pValue;
	private final ValueStructElements pValueStruct;
	private final StructureElements pStructure;
	private final ParameterElements pParameter;
	private final ParameterListElements pParameterList;
	private final FunctionParameterElements pFunctionParameter;
	private final FunctionParameterListElements pFunctionParameterList;
	private final FunctionBodyElements pFunctionBody;
	private final InstructionElements pInstruction;
	private final BasicBlockElements pBasicBlock;
	private final ArithmeticOperationElements pArithmeticOperation;
	private final LogicOperationElements pLogicOperation;
	private final CastElements pCast;
	private final NestedCastElements pNestedCast;
	private final MetaArgValueElements pMetaArgValue;
	private final MetaElements pMeta;
	private final MetadataValueElements pMetadataValue;
	private final GetElementPtrElements pGetElementPtr;
	private final NestedGetElementPtrElements pNestedGetElementPtr;
	private final FenceElements pFence;
	private final CmpXchgElements pCmpXchg;
	private final AtomicRMWElements pAtomicRMW;
	private final LoadElements pLoad;
	private final StoreElements pStore;
	private final CallElements pCall;
	private final AllocElements pAlloc;
	private final PhiCaseElements pPhiCase;
	private final PhiElements pPhi;
	private final LandingPadElements pLandingPad;
	private final ClauseElements pClause;
	private final SelectElements pSelect;
	private final VariableAttributeAccessElements pVariableAttributeAccess;
	private final ExtractValueElements pExtractValue;
	private final InsertValueElements pInsertValue;
	private final ExtractElementElements pExtractElement;
	private final InsertElementElements pInsertElement;
	private final ShuffleVectorElements pShuffleVector;
	private final CompareElements pCompare;
	private final IndirectBranchElements pIndirectBranch;
	private final SwitchElements pSwitch;
	private final SwitchCaseElements pSwitchCase;
	private final InvokeElements pInvoke;
	private final ResumeElements pResume;
	private final UnreachableElements pUnreachable;
	private final ReturnElements pReturn;
	private final BranchElements pBranch;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public LLVMGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pLLVM = new LLVMElements();
		this.pNUMBER = new NUMBERElements();
		this.tVALID_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "VALID_ID");
		this.tINT_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT_TYPE");
		this.tBOOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOL");
		this.tPRIMITIVE_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PRIMITIVE_VALUE");
		this.tFLOATING_POINT_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOATING_POINT_TYPE");
		this.tINITIALIZER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INITIALIZER");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING");
		this.tUNKNOWN_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UNKNOWN_TYPE");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT");
		this.tPOINTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "POINTER");
		this.tMETADATA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "METADATA");
		this.tF_PREDICATES = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "F_PREDICATES");
		this.tATOMIC_ORDERING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ATOMIC_ORDERING");
		this.tBIN_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BIN_OP");
		this.tRETURN_ATTRIBUTES = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RETURN_ATTRIBUTES");
		this.pCallingConv = new CallingConvElements();
		this.pFUNCTION_ATTRIBUTES = new FUNCTION_ATTRIBUTESElements();
		this.tCAST_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CAST_OP");
		this.tI_PREDICATES = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "I_PREDICATES");
		this.tVISIBILITY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "VISIBILITY");
		this.tLINKAGE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LINKAGE");
		this.tALIAS_LINKAGE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ALIAS_LINKAGE");
		this.pKEYWORDS = new KEYWORDSElements();
		this.pLABEL_ID = new LABEL_IDElements();
		this.pAbstractElement = new AbstractElementElements();
		this.pTopLevelEntity = new TopLevelEntityElements();
		this.pMainLevelEntity = new MainLevelEntityElements();
		this.pTypeDefinition = new TypeDefinitionElements();
		this.pGlobalDefinition = new GlobalDefinitionElements();
		this.pFunctionDefinition = new FunctionDefinitionElements();
		this.pAliasDefinition = new AliasDefinitionElements();
		this.pTypeUse = new TypeUseElements();
		this.pAddressUse = new AddressUseElements();
		this.pAddress = new AddressElements();
		this.pPredefined = new PredefinedElements();
		this.pVector = new VectorElements();
		this.pArray = new ArrayElements();
		this.pAggregate_Type = new Aggregate_TypeElements();
		this.pConstant = new ConstantElements();
		this.pPrimitiveValue = new PrimitiveValueElements();
		this.pValue = new ValueElements();
		this.pValueStruct = new ValueStructElements();
		this.pStructure = new StructureElements();
		this.pParameter = new ParameterElements();
		this.pParameterList = new ParameterListElements();
		this.pFunctionParameter = new FunctionParameterElements();
		this.pFunctionParameterList = new FunctionParameterListElements();
		this.pFunctionBody = new FunctionBodyElements();
		this.pInstruction = new InstructionElements();
		this.pBasicBlock = new BasicBlockElements();
		this.pArithmeticOperation = new ArithmeticOperationElements();
		this.pLogicOperation = new LogicOperationElements();
		this.pCast = new CastElements();
		this.pNestedCast = new NestedCastElements();
		this.pMetaArgValue = new MetaArgValueElements();
		this.pMeta = new MetaElements();
		this.pMetadataValue = new MetadataValueElements();
		this.pGetElementPtr = new GetElementPtrElements();
		this.pNestedGetElementPtr = new NestedGetElementPtrElements();
		this.pFence = new FenceElements();
		this.pCmpXchg = new CmpXchgElements();
		this.pAtomicRMW = new AtomicRMWElements();
		this.pLoad = new LoadElements();
		this.pStore = new StoreElements();
		this.pCall = new CallElements();
		this.pAlloc = new AllocElements();
		this.pPhiCase = new PhiCaseElements();
		this.pPhi = new PhiElements();
		this.pLandingPad = new LandingPadElements();
		this.pClause = new ClauseElements();
		this.pSelect = new SelectElements();
		this.pVariableAttributeAccess = new VariableAttributeAccessElements();
		this.pExtractValue = new ExtractValueElements();
		this.pInsertValue = new InsertValueElements();
		this.pExtractElement = new ExtractElementElements();
		this.pInsertElement = new InsertElementElements();
		this.pShuffleVector = new ShuffleVectorElements();
		this.pCompare = new CompareElements();
		this.pIndirectBranch = new IndirectBranchElements();
		this.pSwitch = new SwitchElements();
		this.pSwitchCase = new SwitchCaseElements();
		this.pInvoke = new InvokeElements();
		this.pResume = new ResumeElements();
		this.pUnreachable = new UnreachableElements();
		this.pReturn = new ReturnElements();
		this.pBranch = new BranchElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.upb.llvm_parser.LLVM".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//LLVM:
	//	elements+=AbstractElement*;
	public LLVMElements getLLVMAccess() {
		return pLLVM;
	}
	
	public ParserRule getLLVMRule() {
		return getLLVMAccess().getRule();
	}

	//NUMBER returns EBigDecimal:
	//	"-"? INT ("." INT)?;
	public NUMBERElements getNUMBERAccess() {
		return pNUMBER;
	}
	
	public ParserRule getNUMBERRule() {
		return getNUMBERAccess().getRule();
	}

	////| ('(' VALID_ID POINTER? ')')		frisst doch nur pointer weg
	////	('.' 
	////		(
	////			(
	////				('a'..'z' | 'A'..'Z' | '_' | '0'..'9')+
	////			) 
	////			| 
	////			(
	////				'(' ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')+ POINTER? ')'
	////			)
	////		)
	////	)*
	//terminal VALID_ID:
	//	("%" | "@") (("a".."z" | "A".."Z" | "_" | "." | "0".."9")+ //(ID | '_' | '.')+
	//	| STRING);
	public TerminalRule getVALID_IDRule() {
		return tVALID_ID;
	} 

	//terminal INT_TYPE:
	//	"i" "0".."9"+ POINTER?;
	public TerminalRule getINT_TYPERule() {
		return tINT_TYPE;
	} 

	//terminal BOOL:
	//	"true" | "false";
	public TerminalRule getBOOLRule() {
		return tBOOL;
	} 

	//terminal PRIMITIVE_VALUE:
	//	"void" | "null" | "label" | "undef" | "...";
	public TerminalRule getPRIMITIVE_VALUERule() {
		return tPRIMITIVE_VALUE;
	} 

	//terminal FLOATING_POINT_TYPE:
	//	"half" | "float" | "double" | "x86_fp80" | "fp128" | "ppc_fp128";
	public TerminalRule getFLOATING_POINT_TYPERule() {
		return tFLOATING_POINT_TYPE;
	} 

	//terminal INITIALIZER:
	//	"zeroinitializer";
	public TerminalRule getINITIALIZERRule() {
		return tINITIALIZER;
	} 

	//terminal STRING:
	//	"c"? "\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "0" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "c"? "\'"
	//	("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "0" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	} 

	//terminal UNKNOWN_TYPE:
	//	"(...)" POINTER?;
	public TerminalRule getUNKNOWN_TYPERule() {
		return tUNKNOWN_TYPE;
	} 

	//terminal SL_COMMENT:
	//	";" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	} 

	//terminal POINTER:
	//	"*"+;
	public TerminalRule getPOINTERRule() {
		return tPOINTER;
	} 

	//terminal METADATA:
	//	"!" ("a".."z" | "A".."Z" | "_" | "0".."9")+ | "!\""->"\"";
	public TerminalRule getMETADATARule() {
		return tMETADATA;
	} 

	////Key Words
	//terminal F_PREDICATES:
	//	"oeq" | "ogt" | "oge" | "olt" | "ole" | "one" | "ord" | "ueq" | "ugt" | "uge" | "ult" | "ule" | "une" | "uno";
	public TerminalRule getF_PREDICATESRule() {
		return tF_PREDICATES;
	} 

	//terminal ATOMIC_ORDERING:
	//	"unordered" | "monotonic" | "aquire" | "release" | "acq_rel" | "seq_cst";
	public TerminalRule getATOMIC_ORDERINGRule() {
		return tATOMIC_ORDERING;
	} 

	//terminal BIN_OP:
	//	"xchg" | "add" | "sub" | "and" | "nand" | "or" | "xor" | "max" | "min" | "umax" | "umin";
	public TerminalRule getBIN_OPRule() {
		return tBIN_OP;
	} 

	//terminal RETURN_ATTRIBUTES:
	//	"zeroext" | "signext" | "inreg" | "byval" | "sret" | "noalias" | "nocapture" | "nest";
	public TerminalRule getRETURN_ATTRIBUTESRule() {
		return tRETURN_ATTRIBUTES;
	} 

	//CallingConv:
	//	"ccc" | "fastcc" | "coldcc" | "x86_stdcallcc" | "x86_fastcallcc" | "x86_thiscallcc" | "arm_apcscc" | "arm_aapcscc" |
	//	"arm_aapcs_vfpcc" | "msp430_intrcc" | "ptx_kernel" | "ptx_device" | "spir_func" | "spir_kernel" | "cc" "<" NUMBER ">"
	//	NUMBER;
	public CallingConvElements getCallingConvAccess() {
		return pCallingConv;
	}
	
	public ParserRule getCallingConvRule() {
		return getCallingConvAccess().getRule();
	}

	//FUNCTION_ATTRIBUTES:
	//	"address_safety" | "alignstack" "(" "<" NUMBER ">" ")" | "alwaysinline" | "nonlazybind" | "inlinehint" | "naked" |
	//	"noimplicitfloat" | "noinline" | "noredzone" | "noreturn" | "nounwind" | "optsize" | "readnone" | "readonly" |
	//	"returns_twice" | "ssp" | "sspreq" | "uwtable";
	public FUNCTION_ATTRIBUTESElements getFUNCTION_ATTRIBUTESAccess() {
		return pFUNCTION_ATTRIBUTES;
	}
	
	public ParserRule getFUNCTION_ATTRIBUTESRule() {
		return getFUNCTION_ATTRIBUTESAccess().getRule();
	}

	//terminal CAST_OP:
	//	"trunc" | "zext" | "sext" | "fptrunc" | "fpext" | "fptoui" | "fptosi" | "uitofp" | "sitofp" | "ptrtoint" | "inttoptr"
	//	| "bitcast";
	public TerminalRule getCAST_OPRule() {
		return tCAST_OP;
	} 

	//terminal I_PREDICATES:
	//	"eq" | "ne" | "ugt" | "uge" | "ult" | "ule" | "sgt" | "sge" | "slt" | "sle";
	public TerminalRule getI_PREDICATESRule() {
		return tI_PREDICATES;
	} 

	//terminal VISIBILITY:
	//	"default" | "hidden" | "protected";
	public TerminalRule getVISIBILITYRule() {
		return tVISIBILITY;
	} 

	//terminal LINKAGE:
	//	"private" | "linker_private" | "linker_private_weak" | "available_externally" | "linkonce" | "common" | "appending" |
	//	"extern_weak" | "linkonce_odr" | "linkonce_odr_auto_hide" | "dllimport" | "dllexport";
	public TerminalRule getLINKAGERule() {
		return tLINKAGE;
	} 

	//terminal ALIAS_LINKAGE:
	//	"external" | "internal" | "weak" | "weak_odr";
	public TerminalRule getALIAS_LINKAGERule() {
		return tALIAS_LINKAGE;
	} 

	//KEYWORDS:
	//	ALIAS_LINKAGE | ATOMIC_ORDERING | BIN_OP | RETURN_ATTRIBUTES | CAST_OP | I_PREDICATES | VISIBILITY | LINKAGE;
	public KEYWORDSElements getKEYWORDSAccess() {
		return pKEYWORDS;
	}
	
	public ParserRule getKEYWORDSRule() {
		return getKEYWORDSAccess().getRule();
	}

	//LABEL_ID:
	//	(KEYWORDS | INT_TYPE | ID | BOOL | "catch" | "invoke" | "resume" | "switch") ("." (KEYWORDS | INT_TYPE | ID | BOOL |
	//	"catch" | "invoke" | "resume" | "switch"))*;
	public LABEL_IDElements getLABEL_IDAccess() {
		return pLABEL_ID;
	}
	
	public ParserRule getLABEL_IDRule() {
		return getLABEL_IDAccess().getRule();
	}

	//AbstractElement:
	//	TopLevelEntity SL_COMMENT? | MainLevelEntity SL_COMMENT?;
	public AbstractElementElements getAbstractElementAccess() {
		return pAbstractElement;
	}
	
	public ParserRule getAbstractElementRule() {
		return getAbstractElementAccess().getRule();
	}

	//TopLevelEntity:
	//	"module" "asm" module=STRING | "target" ("datalayout" | "triple") "=" target=STRING | "deplibs" "=" "[" libs+=STRING
	//	("," libs+=STRING)* "]";
	public TopLevelEntityElements getTopLevelEntityAccess() {
		return pTopLevelEntity;
	}
	
	public ParserRule getTopLevelEntityRule() {
		return getTopLevelEntityAccess().getRule();
	}

	/// *
	// * This rule is used to devide the Function Definitions form the Variable Definitions.
	// * / MainLevelEntity:
	//	TypeDefinition | GlobalDefinition | FunctionDefinition | AliasDefinition | MetadataValue;
	public MainLevelEntityElements getMainLevelEntityAccess() {
		return pMainLevelEntity;
	}
	
	public ParserRule getMainLevelEntityRule() {
		return getMainLevelEntityAccess().getRule();
	}

	//TypeDefinition:
	//	address=Address "=" ("type" (struct=Structure | "opaque"));
	public TypeDefinitionElements getTypeDefinitionAccess() {
		return pTypeDefinition;
	}
	
	public ParserRule getTypeDefinitionRule() {
		return getTypeDefinitionAccess().getRule();
	}

	//GlobalDefinition:
	//	address=Address "=" (LINKAGE | ALIAS_LINKAGE | "global" | "unnamed_addr" | "constant")* value=Parameter ("," "align"
	//	align=NUMBER)?;
	public GlobalDefinitionElements getGlobalDefinitionAccess() {
		return pGlobalDefinition;
	}
	
	public ParserRule getGlobalDefinitionRule() {
		return getGlobalDefinitionAccess().getRule();
	}

	//FunctionDefinition:
	//	"define" (LINKAGE | ALIAS_LINKAGE)? VISIBILITY? CallingConv? RETURN_ATTRIBUTES? returnType=TypeUse address=Address
	//	("()" | "(" parameter=FunctionParameterList? ")") "unnamed_addr"? FUNCTION_ATTRIBUTES* ("section " STRING)? ("align"
	//	align=NUMBER)? body=FunctionBody | "declare" (LINKAGE | ALIAS_LINKAGE)? VISIBILITY? CallingConv? RETURN_ATTRIBUTES?
	//	returnType=TypeUse address=Address ("()" | "(" parameter=FunctionParameterList? ")") "unnamed_addr"?
	//	FUNCTION_ATTRIBUTES* ("section " STRING)? ("align" align=NUMBER)?;
	public FunctionDefinitionElements getFunctionDefinitionAccess() {
		return pFunctionDefinition;
	}
	
	public ParserRule getFunctionDefinitionRule() {
		return getFunctionDefinitionAccess().getRule();
	}

	//AliasDefinition:
	//	address=Address "=" "alias" ALIAS_LINKAGE? VISIBILITY? aliastype=TypeUse aliasvalue=Value aliasee=TypeUse;
	public AliasDefinitionElements getAliasDefinitionAccess() {
		return pAliasDefinition;
	}
	
	public ParserRule getAliasDefinitionRule() {
		return getAliasDefinitionAccess().getRule();
	}

	//TypeUse:
	//	(Predefined | AddressUse) functionInput=UNKNOWN_TYPE?;
	public TypeUseElements getTypeUseAccess() {
		return pTypeUse;
	}
	
	public ParserRule getTypeUseRule() {
		return getTypeUseAccess().getRule();
	}

	//AddressUse:
	//	address=[Address|VALID_ID] pointer=POINTER?;
	public AddressUseElements getAddressUseAccess() {
		return pAddressUse;
	}
	
	public ParserRule getAddressUseRule() {
		return getAddressUseAccess().getRule();
	}

	//Address:
	//	name=VALID_ID;
	public AddressElements getAddressAccess() {
		return pAddress;
	}
	
	public ParserRule getAddressRule() {
		return getAddressAccess().getRule();
	}

	//Predefined:
	//	type=(PRIMITIVE_VALUE | INT_TYPE | FLOATING_POINT_TYPE) pointer=POINTER?;
	public PredefinedElements getPredefinedAccess() {
		return pPredefined;
	}
	
	public ParserRule getPredefinedRule() {
		return getPredefinedAccess().getRule();
	}

	//Vector:
	//	"<" length=NUMBER "x" type=TypeUse ">";
	public VectorElements getVectorAccess() {
		return pVector;
	}
	
	public ParserRule getVectorRule() {
		return getVectorAccess().getRule();
	}

	//Array:
	//	{Array} ("[" length=NUMBER "x" type=(TypeUse | Aggregate_Type) "]" | "[]" | "[" "]") POINTER?;
	public ArrayElements getArrayAccess() {
		return pArray;
	}
	
	public ParserRule getArrayRule() {
		return getArrayAccess().getRule();
	}

	//Aggregate_Type:
	//	Structure | Array | Vector;
	public Aggregate_TypeElements getAggregate_TypeAccess() {
		return pAggregate_Type;
	}
	
	public ParserRule getAggregate_TypeRule() {
		return getAggregate_TypeAccess().getRule();
	}

	//Constant:
	//	value=NUMBER;
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	//PrimitiveValue:
	//	value=(STRING | PRIMITIVE_VALUE | INITIALIZER | BOOL);
	public PrimitiveValueElements getPrimitiveValueAccess() {
		return pPrimitiveValue;
	}
	
	public ParserRule getPrimitiveValueRule() {
		return getPrimitiveValueAccess().getRule();
	}

	//Value:
	//	NestedCast | NestedGetElementPtr | Constant | AddressUse | PrimitiveValue | ValueStruct;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//ValueStruct:
	//	"{" values+=Parameter ("," values+=Parameter)* "}";
	public ValueStructElements getValueStructAccess() {
		return pValueStruct;
	}
	
	public ParserRule getValueStructRule() {
		return getValueStructAccess().getRule();
	}

	//Structure:
	//	{Structure} "{" (types+=(TypeUse | Aggregate_Type) ("," types+=(TypeUse | Aggregate_Type))*)? "}" POINTER?;
	public StructureElements getStructureAccess() {
		return pStructure;
	}
	
	public ParserRule getStructureRule() {
		return getStructureAccess().getRule();
	}

	//Parameter:
	//	type=(TypeUse | Aggregate_Type) (RETURN_ATTRIBUTES+ value=Value | value=Value? RETURN_ATTRIBUTES*);
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//ParameterList:
	//	{ParameterList} ("()" | "(" (params+=Parameter ("," params+=Parameter)*)? ")");
	public ParameterListElements getParameterListAccess() {
		return pParameterList;
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}

	//FunctionParameter:
	//	type=TypeUse RETURN_ATTRIBUTES* value=Address?;
	public FunctionParameterElements getFunctionParameterAccess() {
		return pFunctionParameter;
	}
	
	public ParserRule getFunctionParameterRule() {
		return getFunctionParameterAccess().getRule();
	}

	//FunctionParameterList:
	//	{FunctionParameterList} params+=FunctionParameter ("," params+=FunctionParameter)*;
	public FunctionParameterListElements getFunctionParameterListAccess() {
		return pFunctionParameterList;
	}
	
	public ParserRule getFunctionParameterListRule() {
		return getFunctionParameterListAccess().getRule();
	}

	//FunctionBody:
	//	meta+=MetadataValue* "{" blocks+=BasicBlock+ "}";
	public FunctionBodyElements getFunctionBodyAccess() {
		return pFunctionBody;
	}
	
	public ParserRule getFunctionBodyRule() {
		return getFunctionBodyAccess().getRule();
	}

	//Instruction:
	//	Store | Load | GetElementPtr | Alloc | CmpXchg | AtomicRMW | Fence | Return | Branch | Switch | IndirectBranch |
	//	Invoke | Resume | Unreachable | LogicOperation | ArithmeticOperation | Compare | Cast | ShuffleVector | InsertElement
	//	| ExtractElement | InsertValue | ExtractValue | Phi | Select | Call | VariableAttributeAccess | LandingPad;
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}

	//BasicBlock:
	//	(label=LABEL_ID ":") instructions+=Instruction+;
	public BasicBlockElements getBasicBlockAccess() {
		return pBasicBlock;
	}
	
	public ParserRule getBasicBlockRule() {
		return getBasicBlockAccess().getRule();
	}

	//ArithmeticOperation:
	//	result=Address "=" operation=("add" | "fadd" | "sub" | "fsub" | "mul" | "fmul" | "udiv" | "sdiv" | "fdiv" | "urem" |
	//	"srem" | "frem") (("nsw" | "nuw") ("nuw" | "nsw")?)? optype=TypeUse value1=Value "," value2=Value;
	public ArithmeticOperationElements getArithmeticOperationAccess() {
		return pArithmeticOperation;
	}
	
	public ParserRule getArithmeticOperationRule() {
		return getArithmeticOperationAccess().getRule();
	}

	//LogicOperation:
	//	result=Address "=" operation=("shl" | "lshr" | "ashr" | "and" | "or" | "xor") optype=TypeUse value1=Value ","
	//	value2=Value;
	public LogicOperationElements getLogicOperationAccess() {
		return pLogicOperation;
	}
	
	public ParserRule getLogicOperationRule() {
		return getLogicOperationAccess().getRule();
	}

	//Cast:
	//	result=Address "=" operation=CAST_OP from=(TypeUse | Aggregate_Type) value=Value "to" to=TypeUse;
	public CastElements getCastAccess() {
		return pCast;
	}
	
	public ParserRule getCastRule() {
		return getCastAccess().getRule();
	}

	//NestedCast:
	//	operation=CAST_OP "(" from=(TypeUse | Aggregate_Type) value=Value "to" to=TypeUse ")";
	public NestedCastElements getNestedCastAccess() {
		return pNestedCast;
	}
	
	public ParserRule getNestedCastRule() {
		return getNestedCastAccess().getRule();
	}

	//MetaArgValue:
	//	arg=METADATA value=(METADATA | STRING);
	public MetaArgValueElements getMetaArgValueAccess() {
		return pMetaArgValue;
	}
	
	public ParserRule getMetaArgValueRule() {
		return getMetaArgValueAccess().getRule();
	}

	//Meta:
	//	"metadata" meta=METADATA | arg=Predefined? value=Value;
	public MetaElements getMetaAccess() {
		return pMeta;
	}
	
	public ParserRule getMetaRule() {
		return getMetaAccess().getRule();
	}

	//MetadataValue:
	//	nodeId=METADATA "=" "metadata"? ("!" "{" | "!{") values+=Meta ("," values+=Meta)* "}";
	public MetadataValueElements getMetadataValueAccess() {
		return pMetadataValue;
	}
	
	public ParserRule getMetadataValueRule() {
		return getMetadataValueAccess().getRule();
	}

	//GetElementPtr:
	//	result=Address "=" "getelementptr" "inbounds"? (aggerate=Parameter ("," indTypes+=TypeUse indizies+=Value)*);
	public GetElementPtrElements getGetElementPtrAccess() {
		return pGetElementPtr;
	}
	
	public ParserRule getGetElementPtrRule() {
		return getGetElementPtrAccess().getRule();
	}

	//NestedGetElementPtr:
	//	"getelementptr" "inbounds"? ("(" aggerate=Parameter ("," indTypes+=TypeUse indizies+=Value)* ")");
	public NestedGetElementPtrElements getNestedGetElementPtrAccess() {
		return pNestedGetElementPtr;
	}
	
	public ParserRule getNestedGetElementPtrRule() {
		return getNestedGetElementPtrAccess().getRule();
	}

	//Fence:
	//	"fence" "singlethread"? ordering=ATOMIC_ORDERING;
	public FenceElements getFenceAccess() {
		return pFence;
	}
	
	public ParserRule getFenceRule() {
		return getFenceAccess().getRule();
	}

	//CmpXchg:
	//	result=Address "=" "cmpxchg" volatile?="volatile"? address=Parameter "," value=Parameter "," newValue=Parameter
	//	"singlethread"? ordering=ATOMIC_ORDERING;
	public CmpXchgElements getCmpXchgAccess() {
		return pCmpXchg;
	}
	
	public ParserRule getCmpXchgRule() {
		return getCmpXchgAccess().getRule();
	}

	//AtomicRMW:
	//	result=Address "=" "atomicrmw" volatile?="volatile"? operation=BIN_OP address=Parameter "," argument=Parameter
	//	"singlethread"? ordering=ATOMIC_ORDERING;
	public AtomicRMWElements getAtomicRMWAccess() {
		return pAtomicRMW;
	}
	
	public ParserRule getAtomicRMWRule() {
		return getAtomicRMWAccess().getRule();
	}

	//Load:
	//	result=Address "=" (volatile?="volatile" "load" | "load" volatile?="volatile"?) address=Parameter ("," "align"
	//	align=NUMBER)? ("," meta+=MetaArgValue)* | result=Address "=" "load" atomic?="atomic" volatile?="volatile"?
	//	address=Parameter "singlethread"? ordering=ATOMIC_ORDERING ("," "align" align=NUMBER)?;
	public LoadElements getLoadAccess() {
		return pLoad;
	}
	
	public ParserRule getLoadRule() {
		return getLoadAccess().getRule();
	}

	//Store:
	//	(volatile?="volatile" "store" | "store" volatile?="volatile"?) value=Parameter "," targetAddress=Parameter (","
	//	"align" align=NUMBER)? ("," meta+=MetaArgValue)* | "store" atomic?="atomic" volatile?="volatile"? value=Parameter ","
	//	targetAddress=Parameter "singlethread"? ordering=ATOMIC_ORDERING ("," "align" align=NUMBER)?;
	public StoreElements getStoreAccess() {
		return pStore;
	}
	
	public ParserRule getStoreRule() {
		return getStoreAccess().getRule();
	}

	////FIXME: no support for call of functions with a function as a result type
	//Call:
	//	(result=Address "=")? "tail"? "call" CallingConv? RETURN_ATTRIBUTES? function= //(('asm' 'sideeffect'? STRING ',' STRING) 
	//	Parameter pList=ParameterList FUNCTION_ATTRIBUTES* ("," "!srcloc" "!" NUMBER)*;
	public CallElements getCallAccess() {
		return pCall;
	}
	
	public ParserRule getCallRule() {
		return getCallAccess().getRule();
	}

	//Alloc:
	//	result=Address "=" "alloca" type=TypeUse ("," numOfElements=Parameter)? ("," "align" align=NUMBER)?;
	public AllocElements getAllocAccess() {
		return pAlloc;
	}
	
	public ParserRule getAllocRule() {
		return getAllocAccess().getRule();
	}

	//PhiCase:
	//	value=Value "," label=VALID_ID;
	public PhiCaseElements getPhiCaseAccess() {
		return pPhiCase;
	}
	
	public ParserRule getPhiCaseRule() {
		return getPhiCaseAccess().getRule();
	}

	//Phi:
	//	result=Address "=" "phi" type=TypeUse "[" cases+=PhiCase "]" ("," "[" cases+=PhiCase "]")*;
	public PhiElements getPhiAccess() {
		return pPhi;
	}
	
	public ParserRule getPhiRule() {
		return getPhiAccess().getRule();
	}

	//LandingPad:
	//	result=Address "=" "landingpad" struct=Structure "personality" personalitytype=TypeUse personalityvalue=Value
	//	("cleanup" clause+=Clause* | clause+=Clause+);
	public LandingPadElements getLandingPadAccess() {
		return pLandingPad;
	}
	
	public ParserRule getLandingPadRule() {
		return getLandingPadAccess().getRule();
	}

	//Clause:
	//	"catch" type=TypeUse value=Value | "filter" filterarray=Array constant=Value;
	public ClauseElements getClauseAccess() {
		return pClause;
	}
	
	public ParserRule getClauseRule() {
		return getClauseAccess().getRule();
	}

	//Select:
	//	result=Address "=" "select" condition=Parameter "," trueValue=Parameter "," elseValue=Parameter;
	public SelectElements getSelectAccess() {
		return pSelect;
	}
	
	public ParserRule getSelectRule() {
		return getSelectAccess().getRule();
	}

	//VariableAttributeAccess:
	//	result=Address "=" "va_arg" vaList=Parameter "," aType=TypeUse;
	public VariableAttributeAccessElements getVariableAttributeAccessAccess() {
		return pVariableAttributeAccess;
	}
	
	public ParserRule getVariableAttributeAccessRule() {
		return getVariableAttributeAccessAccess().getRule();
	}

	////FIXME TODO
	////...Value for structs and arrays 
	//ExtractValue:
	//	result=Address "=" "extractvalue" aggerate=Parameter ("," index+=NUMBER)+;
	public ExtractValueElements getExtractValueAccess() {
		return pExtractValue;
	}
	
	public ParserRule getExtractValueRule() {
		return getExtractValueAccess().getRule();
	}

	//InsertValue:
	//	result=Address "=" "insertvalue" aggerate=Parameter "," value=Parameter ("," index+=NUMBER)+;
	public InsertValueElements getInsertValueAccess() {
		return pInsertValue;
	}
	
	public ParserRule getInsertValueRule() {
		return getInsertValueAccess().getRule();
	}

	////...Element for vectors
	//ExtractElement:
	//	result=Address "=" "extractelement" vector=Parameter "," index=Parameter;
	public ExtractElementElements getExtractElementAccess() {
		return pExtractElement;
	}
	
	public ParserRule getExtractElementRule() {
		return getExtractElementAccess().getRule();
	}

	//InsertElement:
	//	result=Address "=" "insertelement" vector=Parameter "," value=Parameter "," index=Parameter;
	public InsertElementElements getInsertElementAccess() {
		return pInsertElement;
	}
	
	public ParserRule getInsertElementRule() {
		return getInsertElementAccess().getRule();
	}

	//ShuffleVector:
	//	result=Address "=" "shufflevector" value1=Parameter "," value2=Parameter "," mask=Parameter;
	public ShuffleVectorElements getShuffleVectorAccess() {
		return pShuffleVector;
	}
	
	public ParserRule getShuffleVectorRule() {
		return getShuffleVectorAccess().getRule();
	}

	//Compare:
	//	result=Address "=" (("icmp" | "fcmp") cond=(I_PREDICATES | F_PREDICATES | BOOL) opType=TypeUse operand1=Value ","
	//	operand2=Value);
	public CompareElements getCompareAccess() {
		return pCompare;
	}
	
	public ParserRule getCompareRule() {
		return getCompareAccess().getRule();
	}

	//IndirectBranch:
	//	"indirectbr" target=Parameter "," "[" ("label" potTargetLabels+=VALID_ID ("," "label" potTargetLabels+=VALID_ID)*)?
	//	"]";
	public IndirectBranchElements getIndirectBranchAccess() {
		return pIndirectBranch;
	}
	
	public ParserRule getIndirectBranchRule() {
		return getIndirectBranchAccess().getRule();
	}

	//Switch:
	//	"switch" caseValue=Parameter "," "label" defaultCase=VALID_ID "[" cases+=SwitchCase* "]";
	public SwitchElements getSwitchAccess() {
		return pSwitch;
	}
	
	public ParserRule getSwitchRule() {
		return getSwitchAccess().getRule();
	}

	//SwitchCase:
	//	caseValue=Parameter "," "label" destination=VALID_ID;
	public SwitchCaseElements getSwitchCaseAccess() {
		return pSwitchCase;
	}
	
	public ParserRule getSwitchCaseRule() {
		return getSwitchCaseAccess().getRule();
	}

	//Invoke:
	//	"invoke" CallingConv? RETURN_ATTRIBUTES? returnType=TypeUse name=Address pList=ParameterList FUNCTION_ATTRIBUTES*
	//	"to" "label" targetLabel=VALID_ID "unwind" "label" unwindTargetLabel=VALID_ID;
	public InvokeElements getInvokeAccess() {
		return pInvoke;
	}
	
	public ParserRule getInvokeRule() {
		return getInvokeAccess().getRule();
	}

	//Resume:
	//	"resume" type=Structure value=Value;
	public ResumeElements getResumeAccess() {
		return pResume;
	}
	
	public ParserRule getResumeRule() {
		return getResumeAccess().getRule();
	}

	//Unreachable:
	//	{Unreachable} "unreachable";
	public UnreachableElements getUnreachableAccess() {
		return pUnreachable;
	}
	
	public ParserRule getUnreachableRule() {
		return getUnreachableAccess().getRule();
	}

	//Return:
	//	"ret" value=Parameter ("," "!dbg" "!" NUMBER)?;
	public ReturnElements getReturnAccess() {
		return pReturn;
	}
	
	public ParserRule getReturnRule() {
		return getReturnAccess().getRule();
	}

	//Branch:
	//	"br" "label" destination=VALID_ID | "br" INT_TYPE condition=Value "," "label" destination=VALID_ID "," "label"
	//	elseDestination=VALID_ID;
	public BranchElements getBranchAccess() {
		return pBranch;
	}
	
	public ParserRule getBranchRule() {
		return getBranchAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
