grammar de.upb.llvm_parser.LLVM with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore"
generate llvm "http://www.upb.de/llvm_parser/llvm"

LLVM:
	elements+=AbstractElement*;

NUMBER returns EBigDecimal:
	'-'? INT ('.' INT)?;

terminal VALID_ID:
	(
		(
			('%' | '@') 
			(
				(
					('a'..'z' | 'A'..'Z' | '_' | '.' | '0'..'9')+
					//(ID | '_' | '.')+
				) 
				| STRING
			)
		) 
		//| ('(' VALID_ID POINTER? ')')		frisst doch nur pointer weg
	)
	
//	('.' 
//		(
//			(
//				('a'..'z' | 'A'..'Z' | '_' | '0'..'9')+
//			) 
//			| 
//			(
//				'(' ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')+ POINTER? ')'
//			)
//		)
//	)*
	;

terminal INT_TYPE:
	'i' ('0'..'9')+ POINTER?;
	
terminal BOOL:
	'true' | 'false'
;
	
terminal PRIMITIVE_VALUE:
		'void' | 'null' | 'label' | 'undef' | '...' ;
		

		
terminal FLOATING_POINT_TYPE:
	'half' | 'float' | 'double' | 'x86_fp80' | 'fp128' | 'ppc_fp128';
	

terminal INITIALIZER:
	'zeroinitializer';

terminal STRING:
	'c'?'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '0' | '"' | "'" | '\\') | !('\\' | '"'))* '"' |
	'c'?"'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '0' | '"' | "'" | '\\') | !('\\' | "'"))* "'";

terminal UNKNOWN_TYPE:
	'(...)' POINTER?;

terminal SL_COMMENT:
	';' !('\n' | '\r')* ('\r'? '\n')?;

terminal POINTER:
	'*'+;
	
terminal METADATA:
	'!'('a'..'z' | 'A'..'Z' | '_' | '0'..'9')+ 
	| '!"' -> '"'
;
	
//Key Words
terminal F_PREDICATES:
	'oeq' | 'ogt' | 'oge' | 'olt' | 'ole' | 'one' | 'ord' |
	'ueq' | 'ugt' | 'uge' | 'ult' | 'ule' | 'une' | 'uno' ;
	
terminal ATOMIC_ORDERING:
	'unordered' | 'monotonic' | 'aquire' | 'release' | 'acq_rel' | 'seq_cst';

terminal BIN_OP:
	('xchg' | 'add' | 'sub' | 'and' | 'nand' | 'or' | 'xor' | 'max' | 'min' | 'umax' | 'umin');

terminal RETURN_ATTRIBUTES:
	'zeroext' | 'signext' | 'inreg' | 'byval' | 'sret' | 'noalias' | 'nocapture' | 'nest';

CallingConv:
	'ccc' | 'fastcc' | 'coldcc' | 'x86_stdcallcc' | 'x86_fastcallcc' | 'x86_thiscallcc' | 'arm_apcscc' | 'arm_aapcscc' |
	'arm_aapcs_vfpcc' | 'msp430_intrcc' | 'ptx_kernel' | 'ptx_device' | 'spir_func' | 'spir_kernel' | 'cc' '<' NUMBER '>'
	NUMBER;

FUNCTION_ATTRIBUTES:
	'address_safety' | 'alignstack' '(' '<' NUMBER '>' ')' | 'alwaysinline' | 'nonlazybind' | 'inlinehint' | 'naked' |
	'noimplicitfloat' | 'noinline' | 'noredzone' | 'noreturn' | 'nounwind' | 'optsize' | 'readnone' | 'readonly' |
	'returns_twice' | 'ssp' | 'sspreq' | 'uwtable';

terminal CAST_OP:
	'trunc' | 'zext' | 'sext' | 'fptrunc' | 'fpext' | 'fptoui' | 'fptosi' | 'uitofp' | 'sitofp' | 'ptrtoint' | 'inttoptr'
	| 'bitcast';

terminal I_PREDICATES:
	'eq' | 'ne' | 'ugt' | 'uge' | 'ult' | 'ule' | 'sgt' | 'sge' | 'slt' | 'sle';


terminal VISIBILITY:
	'default' | 'hidden' | 'protected';

terminal LINKAGE:
	'private' | 'linker_private' | 'linker_private_weak' | 'available_externally' | 'linkonce' | 'common' | 'appending' |
	'extern_weak' | 'linkonce_odr' | 'linkonce_odr_auto_hide' | 'dllimport' | 'dllexport' ;

terminal ALIAS_LINKAGE:
	'external' | 'internal' | 'weak' | 'weak_odr';

KEYWORDS:
	ALIAS_LINKAGE | ATOMIC_ORDERING | BIN_OP | RETURN_ATTRIBUTES | CAST_OP | I_PREDICATES | VISIBILITY | LINKAGE 
;

LABEL_ID:
	(KEYWORDS | INT_TYPE|ID|BOOL  | 'catch' | 'invoke' | 'resume' | 'switch') ('.' (KEYWORDS|INT_TYPE|ID|BOOL | 'catch' | 'invoke' | 'resume' | 'switch'))*;
	


AbstractElement:
	TopLevelEntity SL_COMMENT? |
	MainLevelEntity SL_COMMENT?;

TopLevelEntity:
	'module' 'asm' module=STRING |
	'target' ('datalayout' | 'triple') '=' target=STRING |
	'deplibs' '=' '[' libs+=STRING (',' libs+=STRING)* ']';

	/*
 * This rule is used to devide the Function Definitions form the Variable Definitions.
 */
MainLevelEntity:
	TypeDefinition
	| GlobalDefinition
	| FunctionDefinition
	| AliasDefinition
	| MetadataValue
	;

TypeDefinition:
	(address=Address '=' (('type' (struct=Structure | 'opaque'))));

GlobalDefinition:
	address=Address '=' (LINKAGE | ALIAS_LINKAGE | 'global' | 'unnamed_addr' | 'constant')* value=Parameter (',' 'align' align = NUMBER)?;

FunctionDefinition:
	('define' (LINKAGE| ALIAS_LINKAGE)? VISIBILITY? CallingConv? RETURN_ATTRIBUTES? returnType=TypeUse
	address=Address ('()' | '(' parameter=FunctionParameterList? ')') 'unnamed_addr'? FUNCTION_ATTRIBUTES* ('section ' STRING)? ('align' align = NUMBER)?
	body=FunctionBody) 
	| 
	('declare' (LINKAGE| ALIAS_LINKAGE)? VISIBILITY? CallingConv? RETURN_ATTRIBUTES? returnType=TypeUse
	address=Address ('()' | '(' parameter=FunctionParameterList? ')') 'unnamed_addr'? FUNCTION_ATTRIBUTES* ('section ' STRING)? ('align' align = NUMBER)?)
;

AliasDefinition:
	address=Address '=' 'alias' ALIAS_LINKAGE? VISIBILITY? aliastype=TypeUse aliasvalue=Value aliasee=(TypeUse);



TypeUse:
	(Predefined | AddressUse) functionInput=UNKNOWN_TYPE?	
;

AddressUse:
	address=[Address|VALID_ID] (pointer=POINTER)?
	;

Address:
	name=VALID_ID;

Predefined:
	type=(PRIMITIVE_VALUE | INT_TYPE | FLOATING_POINT_TYPE) (pointer=POINTER)?
	;




Vector:
	'<' length=NUMBER 'x' type=TypeUse '>';

Array:
	{Array} ('[' length=NUMBER 'x' type=(TypeUse|Aggregate_Type) ']' | '[]' | '[' ']') POINTER?;

Aggregate_Type:
	Structure | Array | Vector;

Constant:
	value = NUMBER;
	
PrimitiveValue:
	value = (STRING| PRIMITIVE_VALUE | INITIALIZER | BOOL);

Value:
	 NestedCast | NestedGetElementPtr | Constant | AddressUse | PrimitiveValue | ValueStruct;

ValueStruct:
	'{' values+=Parameter (',' values+=Parameter)* '}';

Structure:
	{Structure} '{' (types+=(TypeUse|Aggregate_Type) (',' types+=(TypeUse|Aggregate_Type))*)? '}' POINTER?;


Parameter:
	type = (TypeUse | Aggregate_Type) (RETURN_ATTRIBUTES+ value = Value | value = Value? RETURN_ATTRIBUTES*)
;

ParameterList:
	{ParameterList}
	('()' | '('	((params+=Parameter (',' params+=Parameter)*)?) ')');

FunctionParameter:
	type = TypeUse RETURN_ATTRIBUTES* (value = Address)?
;

FunctionParameterList:
	{FunctionParameterList} 
	params+=FunctionParameter (',' params+=FunctionParameter)* 
;


FunctionBody:
	meta+=MetadataValue*
	'{' blocks+=BasicBlock+ '}'
	;
Instruction:
	Store |  Load | GetElementPtr | Alloc | CmpXchg | AtomicRMW    
	| Fence | Return | Branch | Switch | IndirectBranch | Invoke | Resume | Unreachable 
	| LogicOperation | ArithmeticOperation | Compare 
	| Cast | ShuffleVector | InsertElement | ExtractElement | InsertValue | ExtractValue  
	| Phi | Select | Call | VariableAttributeAccess | LandingPad
;
BasicBlock:
	(label=LABEL_ID ':')
	(instructions+= Instruction)+
;


ArithmeticOperation:
	result=Address '=' operation = ('add' | 'fadd' | 'sub' | 'fsub' | 'mul' | 'fmul' | 'udiv' | 'sdiv' | 'fdiv' | 'urem' | 'srem' | 'frem') (('nsw' |
	'nuw') ('nuw' | 'nsw')?)?
	optype=TypeUse value1=Value ',' value2=Value;

LogicOperation:
	result=Address '=' operation = ('shl' | 'lshr' | 'ashr' | 'and' | 'or' | 'xor') optype=TypeUse value1=Value ',' value2=Value;

Cast:
	result=Address '=' operation = CAST_OP from=(TypeUse|Aggregate_Type) value=Value 'to' to=TypeUse;

NestedCast: 
	operation = CAST_OP '(' from=(TypeUse|Aggregate_Type) value=Value 'to' to=TypeUse ')' 
;

MetaArgValue:
	arg=METADATA value=(METADATA|STRING)
;
Meta:
	'metadata' meta=(METADATA) | arg=Predefined? value=Value
;

MetadataValue:
	nodeId=METADATA	'=' 
	'metadata'? ('!' '{' | '!{')  values+=Meta (',' values+=Meta)* '}'
; 


GetElementPtr:
	result=Address '=' 'getelementptr' 'inbounds'? 
		(aggerate=Parameter (',' indTypes+=TypeUse indizies+=Value)*)
;
NestedGetElementPtr:
	'getelementptr' 'inbounds'? 
		('(' aggerate=Parameter (',' indTypes+=TypeUse indizies+=Value)*')')
;



Fence:
	'fence' 'singlethread'? ordering=ATOMIC_ORDERING;

CmpXchg:
	result=Address '=' 'cmpxchg' (volatile?='volatile')? address=Parameter ',' value=Parameter',' newValue=Parameter 'singlethread'? ordering=ATOMIC_ORDERING;

AtomicRMW:
	result=Address '=' 'atomicrmw' (volatile?='volatile')? operation = BIN_OP address=Parameter ',' argument=Parameter 'singlethread'? ordering=ATOMIC_ORDERING;

Load:
	result=Address '=' ( volatile?='volatile' 'load'  | 'load' (volatile?='volatile')?) address=Parameter (',' 'align' align = NUMBER)?  (',' meta+=MetaArgValue)* 
	|
	result=Address '=' 'load' atomic?='atomic' (volatile?='volatile'?)? address=Parameter 'singlethread'? ordering=ATOMIC_ORDERING (',' 'align' align = NUMBER)?;

Store:
	(volatile?='volatile' 'store' | 'store' (volatile?='volatile')?) value=Parameter ',' targetAddress=Parameter  (',' 'align' align = NUMBER)? (',' meta+=MetaArgValue)*     
	|
	'store' atomic?='atomic' (volatile?='volatile')? value=Parameter ',' targetAddress=Parameter 'singlethread'? ordering=ATOMIC_ORDERING (',' 'align' align = NUMBER)?;

//FIXME: no support for call of functions with a function as a result type
Call:
	(result=Address '=')? 'tail'? 'call' CallingConv? RETURN_ATTRIBUTES? 
	function=Parameter //(('asm' 'sideeffect'? STRING ',' STRING) 
	pList=ParameterList FUNCTION_ATTRIBUTES* (',' '!srcloc' '!' NUMBER)*;

Alloc:
	result=Address '=' 'alloca' type=TypeUse (',' numOfElements=Parameter)? (',' 'align' align = NUMBER)?;

PhiCase:
	value= Value ',' label = VALID_ID
;

Phi:
	result=Address '=' 'phi' type=TypeUse '[' cases+=PhiCase ']' (',' '[' cases+=PhiCase ']')*;

LandingPad:
	result=Address '=' 'landingpad' struct=Structure 'personality' personalitytype=TypeUse
	personalityvalue=Value ('cleanup' clause+=Clause* | clause+=Clause+);

Clause:
	'catch' type=TypeUse value=Value 
	| 'filter' filterarray=Array (constant=Value);

Select:
	result=Address '=' 'select' condition=Parameter ',' trueValue=Parameter ',' elseValue=Parameter;

VariableAttributeAccess:
	result=Address '=' 'va_arg' vaList= Parameter',' aType=TypeUse;


//FIXME TODO

//...Value for structs and arrays 
ExtractValue:
	result=Address '=' 'extractvalue' aggerate=Parameter (',' index+=NUMBER)+;

InsertValue:
	result=Address '=' 'insertvalue' aggerate=Parameter',' value=Parameter (',' index+=NUMBER)+;

//...Element for vectors
ExtractElement:
	result=Address '=' 'extractelement'vector=Parameter ',' index=Parameter
;

InsertElement:
	result=Address '=' 'insertelement' vector=Parameter ',' value=Parameter ',' index=Parameter
;


ShuffleVector:
	result=Address '=' 'shufflevector' value1=Parameter ',' value2=Parameter ',' mask=Parameter;

Compare:
	result=Address '=' (('icmp' | 'fcmp') cond = (I_PREDICATES | F_PREDICATES| BOOL) opType=TypeUse operand1=Value ',' operand2=Value);

IndirectBranch:
	'indirectbr' target=Parameter ',' '[' ('label' potTargetLabels+=VALID_ID (',' 'label' potTargetLabels+=VALID_ID)*)? ']';

Switch:
	'switch' caseValue=Parameter ',' 'label' defaultCase=VALID_ID '[' (cases+= SwitchCase)* ']';
	
SwitchCase:
	caseValue = Parameter ',' 'label' destination=VALID_ID
;

Invoke:
	'invoke' CallingConv? RETURN_ATTRIBUTES? returnType=TypeUse name=Address pList=ParameterList
	FUNCTION_ATTRIBUTES* 'to' 'label' targetLabel=VALID_ID 'unwind' 'label' unwindTargetLabel=VALID_ID;

Resume:
	'resume' type=Structure value=Value;

Unreachable:
	{Unreachable} 'unreachable';

Return:
	'ret' value=Parameter (',' '!dbg' '!' NUMBER)?
;

Branch:
	('br' 'label' destination=VALID_ID) | 
	('br' INT_TYPE condition=Value ',' 'label'	destination=VALID_ID	',' 'label' elseDestination=VALID_ID);

