grammar de.upb.llvm_parser.LLVM with org.eclipse.xtext.common.Terminals

generate lLVM "http://www.upb.de/llvm_parser/LLVM"

LLVM:
	elements+=AbstractElement*;

terminal SL_COMMENT:
	';' !('\n' | '\r')* ('\r'? '\n')?;

AbstractElement:
	{AbstractElement} TopLevelEntity SL_COMMENT? | MainLevelEntity SL_COMMENT?;

TypeAndValue:
	type=VAR_TYPE value=Type;

Type:
	(StructType | VAR_TYPE )+ ;

terminal VAR_TYPE:
	('@' | '%') ('a'..'z' | '$' | '_' | 'A'..'Z' | '.')+ (('a'..'z' | '$' | '_' | 'A'..'Z' | '0'..'9')*('*')*)?;

LocalVar:
	name=Type '=' ('type' Type| instr=Instruction);
 
StructType:
	'{' (VAR_TYPE (',' VAR_TYPE)*)? '}' |
	'<' '{' (VAR_TYPE (',' VAR_TYPE)*)? '}' '>';

GetElementPtr:
	'getelementptr' 'inbounds'? pointer+=TypeAndValue (',' params+=TypeAndValue)*;

ExtractValue:
	'extractvalue' aggregate=TypeAndValue (',' index+=INT)+;

InsertValue:
	'insertvalue' aggregate=TypeAndValue ',' value=TypeAndValue (',' index+=INT)+;

Fence:
	'fence' 'singlethread'? ordering=AtomicOrdering;

AtomicOrdering:
	'unordered' | 'monotonic' | 'aquire' | 'release' | 'acq_rel' | 'seq_cst';

CmpXchg:
	'cmpxchg' 'volatile'? adress=TypeAndValue ',' compare_val=TypeAndValue ',' new_val=TypeAndValue 'singlethread'?
	ordering=AtomicOrdering;

AtomicRMW:
	'atomicrmw' 'volatile'? BinOp adress=TypeAndValue ',' value=TypeAndValue 'singlethread'? ordering=AtomicOrdering;

BinOp:
	'xchg' | 'add' | 'sub' | 'and' | 'nand' | 'or' | 'xor' | 'max' | 'min' | 'umax' | 'umin';

Load:
	'load' 'volatile'? adress=TypeAndValue (',' align=Alignment)? (',' '!nontemporal' '!' index=INT)? |
	'load' 'atomic' 'volatile'? adress=TypeAndValue 'singlethread'? ordering=AtomicOrdering (',' 'align' index=INT)?;

Store:
	'store' 'volatile'? value=TypeAndValue ',' adress=TypeAndValue (',' 'align' INT)? |
	'store' 'atomic' 'volatile'? value=TypeAndValue ',' adress=TypeAndValue 'singlethread'? ordering=AtomicOrdering (','
	'align' index=INT)?;

Call:
	'tail'? 'call' CallingConv? ReturnAttributes? pointer=TypeAndValue plist=ParameterList FunctionAttributes?;

ReturnAttributes:
	'zeroext' | 'signext' | 'inreg' | 'byval' | 'sret' | 'noalias' | 'nocapture' | 'nest';

Alloc:
	'alloca' type=Type (',' numElements=TypeAndValue)? (',' Alignment)?;

CallingConv:
	'ccc' | 'fastcc' | 'coldcc' | 'x86_stdcallcc' | 'x86_fastcallcc' | 'x86_thiscallcc' | 'arm_apcscc' |
	'arm_aapcscc' | 'arm_aapcs_vfpcc' | 'msp430_intrcc' | 'ptx_kernel' | 'ptx_device' | 'spir_func' | 'spir_kernel' |
	'cc' '<' INT '>' | INT;

FunctionAttributes:
	'address_safety' | 'alignstack''(''<'INT'>'')' | 'alwaysinline' | 'nonlazybind' | 'inlinehint' | 'naked' | 'noimplicitfloat' |
	'noinline' |
	'noredzone' | 'noreturn' | 'nounwind' | 'optsize' | 'readnone' | 'readonly' | 'returns_twice' | 'ssp' | 'sspreq' |
	'uwtable';

ParameterList:
	{ParameterList} '(' (')' | params+=TypeAndValue (',' params+=TypeAndValue)* ')');

PHI:
	'phi' Type '[' values+=ValuePair ']' (',' '[' values+=ValuePair ']')*;

ValuePair:
	'%'? value1=ID ',' '%'? value2=ID;

LandingPad:
	'landingpad' type=Type 'personality' personality=TypeAndValue ('cleanup' clause+=Clause* | clause+=Clause+);

Clause:
	'catch' TypeAndValue |
	'filter' filter+=TypeAndValue (',' filter+=TypeAndValue)*;

Select:
	'select' condition=TypeAndValue ',' val1=TypeAndValue ',' val2=TypeAndValue;

VA_Arg:
	'va_arg' list=TypeAndValue ',' argType=Type;

ExtractElement:
	'extractelement' vector=TypeAndValue ',' index=TypeAndValue;

InsertElement:
	'insertelement' vector=TypeAndValue ',' scalar=TypeAndValue ',' index=TypeAndValue;

ShuffleVector:
	'shufflevector' vector1=TypeAndValue ',' vector2=TypeAndValue ',' mask=TypeAndValue;

Cast:
	CastType value=TypeAndValue 'to' castto=Type;

CastType:
	'trunc' | 'zext' | 'sext' | 'fptrunc' | 'fpext' | 'fptoui' | 'fptosi' | 'uitofp' | 'sitofp' | 'ptrtoint' | 'inttoptr'
	| 'bitcast';

Compare:
	'icmp' IPredicates Type ValuePair |
	'fcmp' FPredicates Type ValuePair;

IPredicates:
	'eq' | 'ne' | 'ugt' | 'uge' | 'ult' | 'ule' | 'sgt' | 'sge' | 'slt' | 'sle';

FPredicates:
	'false' | 'oeq' | 'ogt' | 'oge' | 'olt' | 'ole' | 'one' | 'ord' |
	'ueq' | 'ugt' | 'uge' | 'ult' | 'ule' | 'une' | 'uno' | 'true';

ArithmeticOP:
	'add' | 'fadd' | 'sub' | 'fsub' | 'mul' | 'fmul' | 'udiv' | 'sdiv' | 'fdiv' | 'urem' | 'srem' | 'frem';

LogicalOP:
	'shl' | 'lshr' | 'ashr' | 'and' | 'or' | 'xor';

Arithmetic:
	ArithmeticOP Type ValuePair;

Logical:
	LogicalOP Type ValuePair;

Instruction:
	Switch | IndirectBranch | Branch | Return | Load | Store | Fence | GetElementPtr | Logical | Arithmetic | Compare |
	Cast | ShuffleVector | InsertElement | ExtractElement | Invoke | Resume | InsertValue | ExtractValue | Alloc |
	CmpXchg | AtomicRMW | PHI | Select | Call | VA_Arg | LandingPad;

IndirectBranch:
	'indirectbr' adress=TypeAndValue ',' '[' (lList=LabelList)? ']';

LabelList:
	(labels+=TypeAndValue)+;

Switch:
	'switch' value=TypeAndValue ',' default=TypeAndValue '[' (jTable=JumpTable)? ']';

JumpTable:
	(values+=TypeAndValue ',' destinations+=TypeAndValue)+;

Invoke:
	'invoke' CallingConv? ReturnAttributes? function=TypeAndValue pList=ParameterList FunctionAttributes? 'to'
	to=TypeAndValue 'unwind' unwind=TypeAndValue;

Resume:
	'resume' TypeAndValue;

Return:
	{Return} 'ret' 'void' (',' '!dbg' '!' INT)? | 'ret' value=TypeAndValue (',' '!dbg' '!' INT)?;

Branch:
	'br' destination=TypeAndValue | 'br' cond=TypeAndValue ',' labelTrue=TypeAndValue ',' labelFalse=TypeAndValue;

FunctionBody:
	'{' blocks+=BasicBlock+ '}';

BasicBlock:
	{BasicBlock} name=LabelStr? instructions+=Instruction*;

LabelStr:
	name=ID ':';

FunctionHeader:
	('declare' | 'define') Linkage? Visibility? CallingConv? ReturnAttributes? UnNammedAddr? returnType=Type
	name=GlobalName pList=ParameterList
	FunctionAttributes? ('section ' STRING)? Alignment?;

GlobalName:
	'@' name=ID;

UnNammedAddr:
	adress=INT;

Visibility:
	'default' | 'hidden' | 'protected';

Linkage:
	'private' | 'linker_private' | 'linker_private_weak' | 'available_externally' | 'linkonce' | 'common' |
	'appending' | 'extern_weak' | 'linkonce_odr' | 'linkonce_odr_auto_hide' | 'dllimport' | 'dllexport' | AliasLinkage;

AliasLinkage:
	'external' | 'internal' | 'weak' | 'weak_odr';

MetadataValue:
	'!' INT | '!{' STRING '}' | "!" STRING;

TopLevelEntity:
	'module' 'asm' STRING |
	'target' 'triple' '=' STRING |
	'target' 'datalayout' '=' STRING |
	'deplibs' '=' '[' ']' |
	'deplibs' '=' '[' STRING (',' STRING)* ']';

MainLevelEntity:
	FunctionHeader | LocalVar;

Alignment:
	'align' INT //must be a power of 2
;