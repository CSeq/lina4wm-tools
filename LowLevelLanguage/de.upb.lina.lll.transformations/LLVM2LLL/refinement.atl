-- @nsURI MM=http://www.upb.de/lina/lll
-- @atlcompiler atl2010


module refinement;
create OUT: MM refining IN: MM;

helper def: getInstructions(input: MM!Instruction): OrderedSet(MM!Instruction) =
	input.refImmediateComposite().instructions;

rule BranchCompare {
	from
		b: MM!ConditionalBranch (
			(b.oclIsTypeOf(MM!ConditionalBranch))and
			b.condition.oclIsUndefined()
		)
	to
		c: MM!ConditionalBranch (
			condition <- if b.instructionResult.name = 'true' then
					MM!"expressions::BooleanValue".newInstance().refSetValue('value',
							true)
				else
					if b.instructionResult.name = 'false' then
						MM!"expressions::BooleanValue".newInstance().refSetValue('value',
								false)
					else
						if thisModule.getBranchLC(b).expression.
								oclIsTypeOf(MM!"expressions::Variable") then
							MM!"expressions::Variable".newInstance().
									refSetValue('varName', thisModule.getBranchLC(b).
									expression.varName)
						else
							thisModule.getBranchLC(b).expression
						endif
					endif
				endif

		)
}

-- This Helper would be helpful, but LLL-Instruction->parameters cant contain
-- expressions-Variable
--helper def: EhasNU(input :MM!"expressions::Variable"): Boolean =
--	not MM!LocalComputation.allInstances() -> select(i |
-- i.parameters.indexOf(input)).isEmpty();
--helper def: VhasNU(input :String, instr: MM!Instruction): Boolean =
--	not MM!LocalComputation.allInstances() -> select(i | i.parameters.includes()and
-- i.function=instr.function).isEmpty();
helper def: getBranchLC(input: MM!ConditionalBranch): MM!Instruction =
	thisModule.getInstructions(input) -> select(ea | ea.oclIsTypeOf(MM!LocalComputation))
			-> select(i | i.instructionResult.name = input.instructionResult.name).
			debug().first();

--
rule DropLC {
	from
		input: MM!LocalComputation (
			input.expression.oclIsUndefined() or input.refImmediateComposite().
					oclIsUndefined()
		)
	to
}

-- LAZY RULES ARE NOT SUPPORTED FOR REFINING MODE ...  ATL SDK - ATLAS Transformation
-- Language SDK
-- Version: 3.3.1.v201209061455	org.eclipse.m2m.atl.sdk.feature.group	Eclipse
-- Modeling Project
---- Select Branch that is only target of a jump once.
--rule DeleteBranch {
--	from
--		b: MM!Goto (
--			thisModule.iTargetA().count(b) + thisModule.iTargetB().count(b) +
-- 			thisModule.iTargetC().count(b) = 1
--		)
--	to
--

--}


rule DeleteNoUse {
	from
		ex: MM!"expressions::Expression" (
			ex.refImmediateComposite().oclIsTypeOf(MM!Program)
		)
	to
}


helper def: iTargetA(): Set(MM!Instruction) =
	MM!Goto.allInstances() -> select(goto | goto.target.instruction.oclIsTypeOf(MM!Goto))
			-> collect(i | i.target.instruction);

helper def: iTargetB(): Set(MM!Instruction) =
	MM!ConditionalBranch.allInstances() -> select(cb1 | cb1.target.instruction.
			oclIsTypeOf(MM!Goto)) -> collect(i | i.target.instruction);

helper def: iTargetC(): Set(MM!Instruction) =
	MM!ConditionalBranch.allInstances() -> select(cb2 | cb2.elseTarget.instruction.
			oclIsTypeOf(MM!Goto)) -> collect(i | i.target.instruction);
