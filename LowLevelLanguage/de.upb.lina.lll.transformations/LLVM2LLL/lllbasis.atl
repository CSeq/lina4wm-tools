-- @nsURI LLL=http://www.upb.de/lina/lll
-- @nsURI LLVM=de.upb.llvm_parser.llvm.LlvmPackage
-- @atlcompiler atl2010


module lllbasis;
create lll: LLL from llvm: LLVM;

--create lll: LLL,expr : EXPR from llvm: LLVM;

--****************************************--
--                                        --
--                 Helpers                --
--                                        --
--****************************************--
helper def: stringcut(input: String, char: String): String =
	if input.lastIndexOf(char) > -1 then
		input.substring(input.lastIndexOf(char) + 2, input.size())
	else
		input
	endif;

helper def: getValue(inValue: LLVM!Value): OclAny =
	if (inValue.oclIsTypeOf(LLVM!Constant)) then
		thisModule.createConstant(inValue)
	else
		if (inValue.oclIsTypeOf(LLVM!NonConstantValue)) then
			thisModule.createNonConstantValue(inValue)
		else
			thisModule.createValue(inValue)
		endif
	endif;

helper def: getType(inType: LLVM!TypeUse): OclAny =
	if (inType.oclIsUndefined()) then
		OclUndefined
	else
		if (inType.oclIsTypeOf(LLVM!Address)) then
			if inType.name.endsWith('*') then
				thisModule.createAddress__Pointer(inType)
			else
				thisModule.createAddress__ComplexType(inType)
			endif
		else
			if (inType.oclIsTypeOf(LLVM!Predefined)) then
				if inType.type.startsWith('i') then
					thisModule.createPredefinedInteger(inType)
				else
					if inType.type = 'void' then
						OclUndefined
					else
						OclUndefined.debug('no i.., no void')
					endif
				endif
			else
				if inType.oclIsTypeOf(LLVM!AddressUse) then
					LLL!ComplexType.allInstances() -> select(c | c.name = thisModule.
							stringcut(thisModule.stringcut(inType.address.name, '%'),
							'@')).first()
				else
					OclUndefined.debug('No AddressUse')
				endif
			endif
		endif
	endif;

helper def: numberReg(input: String): String =
	if input.regexReplaceAll('[0-9]+', '').size()>0 then input else 'v' + input endif;

helper def: getVariable(input: String): LLL!"lll::Variable" =
	LLL!"lll::Variable".allInstances() -> select(v | v.name = thisModule.
			numberReg(thisModule.stringcut(thisModule.stringcut(input, '%'), '@'))) ->
			first();

helper def: getConstant(input: String): LLL!Constant =
	LLL!Constant.allInstances() -> select(c | c.value = thisModule.numberReg(thisModule.
			stringcut(thisModule.stringcut(input, '%'), '@'))) -> first();

helper def: getAExpr(input: LLVM!ArithmeticOperation): LLL!"expressions::AExpression" =
	if input.operation = 'add' or input.operation = 'fadd' then
		thisModule.getPlus(input)
	else
		if input.operation = 'sub' or input.operation = 'fsub' then
			thisModule.getMinus(input)
		else
			if input.operation = 'mul' or input.operation = 'fmul' then
				thisModule.getMulti(input)
			else
				if input.operation = 'udiv' or input.operation = 'sdiv' or input.
						operation = 'fdiv' then
					thisModule.getDiv(input)
				else
					OclUndefined
				endif
			endif
		endif
	endif;

helper def: getLExpr(input: LLVM!LogicOperation): LLL!"expressions::LExpression" =
	if input.operation = 'and' then
		thisModule.getAnd(input)
	else
		if input.operation = 'or' then
			thisModule.getOr(input)
		else
			if input.operation = 'xor' then
				thisModule.getXor(input)
			else
				OclUndefined --NOT SUPPORTED BY LLL: shl, ashr, lshr
				
			endif
		endif
	endif;

lazy rule getAnd {
	from
		input: LLVM!LogicOperation
	to
		outAExpr: LLL!"expressions::And" (
			left <- thisModule.getExValue(input.value1),
			right <- thisModule.getExValue(input.value2)
		)
}

lazy rule getXor {
	from
		input: LLVM!LogicOperation
	to
		outAExpr: LLL!"expressions::Xor" (
			left <- thisModule.getExValue(input.value1),
			right <- thisModule.getExValue(input.value2)
		)
}

lazy rule getOr {
	from
		input: LLVM!LogicOperation
	to
		outAExpr: LLL!"expressions::Or" (
			left <- thisModule.getExValue(input.value1),
			right <- thisModule.getExValue(input.value2)
		)
}

lazy rule getNot {
	from
		input: LLL!"expressions::LExpression"
	to
		outAExpr: LLL!"expressions::Not" (
			not <- input
		)
}

helper def: getExValue(input: LLVM!Value): LLL!"expressions::AExpression" =
	if (input.oclIsTypeOf(LLVM!Constant)) then
		LLL!"expressions::NumberValue".newInstance().refSetValue('numValue', input.value)
	else
		if (input.oclIsTypeOf(LLVM!NonConstantValue)) then
			LLL!"expressions::Variable".newInstance().refSetValue('varName', thisModule.
					numberReg(thisModule.stringcut(thisModule.stringcut(input.name, '%'),
					'@')))
		else
			LLL!"expressions::Variable".newInstance().refSetValue('varName', thisModule.
					numberReg(thisModule.stringcut(thisModule.stringcut(input.name, '%'),
					'@')))
		endif
	endif;

lazy rule getPlus {
	from
		input: LLVM!ArithmeticOperation
	to
		outAExpr: LLL!"expressions::Plus" (
			left <- thisModule.getExValue(input.value1),
			right <- thisModule.getExValue(input.value2)
		)
}

lazy rule getMinus {
	from
		input: LLVM!ArithmeticOperation
	to
		outAExpr: LLL!"expressions::Minus" (
			left <- thisModule.getExValue(input.value1),
			right <- thisModule.getExValue(input.value2)
		)
}

lazy rule getMul {
	from
		input: LLVM!ArithmeticOperation
	to
		outAExpr: LLL!"expressions::Mul" (
			left <- thisModule.getExValue(input.value1),
			right <- thisModule.getExValue(input.value2)
		)
}

lazy rule getDiv {
	from
		input: LLVM!ArithmeticOperation
	to
		outAExpr: LLL!"expressions::Div" (
			left <- thisModule.getExValue(input.value1),
			right <- thisModule.getExValue(input.value2)
		)
}

helper def: getCExpr(input: LLVM!Compare): LLL!"expressions::CExpression" =
	if input.pred = 'eq' or input.pred = 'oeq' or input.pred = 'ueq' then
		thisModule.getEqual(input)
	else
		if input.pred = 'ne' or input.pred = 'one' or input.pred = 'une' then
			thisModule.getNotEqual(input)
		else
			if input.pred = 'ugt' or input.pred = 'ogt' or input.pred = 'sgt' then
				thisModule.getGreaterThen(input)
			else
				if input.pred = 'uge' or input.pred = 'sge' or input.pred = 'oge' then
					thisModule.getGreaterEqual(input)
				else
					if input.pred = 'ult' or input.pred = 'olt' or input.pred = 'slt' then
						thisModule.getLessThen(input)
					else
						if input.pred = 'ule' or input.pred = 'sle' or input.pred = 'ole'
								then
							thisModule.getLessEqual(input)
						else
							if input.pred = 'false' then
								thisModule.getFalse()
							else
								if input.pred = 'true' then
									thisModule.getTrue()
								else
									OclUndefined --unorderd and orderd not coverd
									
								endif
							endif
						endif
					endif
				endif
			endif
		endif
	endif;

lazy rule getEqual {
	from
		input: LLVM!Compare
	to
		outCExpr: LLL!"expressions::Equal" (
			left <- thisModule.getExValue(input.value1),
			right <- thisModule.getExValue(input.value2)
		)
}

lazy rule getNotEqual {
	from
		input: LLVM!Compare
	to
		outCExpr: LLL!"expressions::Unequal" (
			left <- thisModule.getExValue(input.value1),
			right <- thisModule.getExValue(input.value2)
		)
}

lazy rule getGreaterThen {
	from
		input: LLVM!Compare
	to
		outCExpr: LLL!"expressions::Greater" (
			left <- thisModule.getExValue(input.value1),
			right <- thisModule.getExValue(input.value2)
		)
}

lazy rule getGreaterEqual {
	from
		input: LLVM!Compare
	to
		outCExpr: LLL!"expressions::GreaterOrEqual" (
			left <- thisModule.getExValue(input.value1),
			right <- thisModule.getExValue(input.value2)
		)
}

lazy rule getLessThen {
	from
		input: LLVM!Compare
	to
		outCExpr: LLL!"expressions::Less" (
			left <- thisModule.getExValue(input.value1),
			right <- thisModule.getExValue(input.value2)
		)
}

lazy rule getLessEqual {
	from
		input: LLVM!Compare
	to
		outCExpr: LLL!"expressions::LessOrEqual" (
			left <- thisModule.getExValue(input.value1),
			right <- thisModule.getExValue(input.value2)
		)
}

lazy rule getTrue {
	from
		input: LLVM!Compare
	to
		outCExpr: LLL!"expressions::BooleanValue" (
			value <- true
		)
}

lazy rule getFalse {
	from
		input: LLVM!Compare
	to
		outCExpr: LLL!"expressions::BooleanValue" (
			value <- false
		)
}

--****************************************--
--                                        --
--                  Form                  --
--                                        --
--****************************************--
rule TypeDefinition2TypeDefinition {
	from
		gType: LLVM!TypeDefinition
	to
		outT: LLL!ComplexType (
			name <- thisModule.stringcut(thisModule.stringcut(gType.address.name, '%'),
					'@')
		)
}

rule LLVM2Program {
	from
		in_llvm: LLVM!LLVM
	using {
		lllfunctions: Set(LLVM!FunctionDefinition) = in_llvm.elements -> select(t | t.
				oclIsTypeOf(LLVM!FunctionDefinition));
		globals: Set(LLVM!GlobalDefinition) = in_llvm.elements -> select(g | g.
				oclIsTypeOf(LLVM!GlobalDefinition));
	}
	to
		program: LLL!Program (
			functions <- lllfunctions -> collect(fun | thisModule.resolveTemp(fun,
					'lllfunction')),
			globalVariables <- globals -> collect(g | thisModule.resolveTemp(g, 'outV'))
		)
}

rule LLVMFunctions2Functions {
	from
		inFunction: LLVM!FunctionDefinition
	using {
		fBody: LLVM!FunctionBody = inFunction.body;
		fBlocks: Sequence(LLVM!BasicBlock) = if fBody.oclIsUndefined() then
			OclUndefined
		else
			fBody.blocks -> collect(t | t) -> flatten()
		endif;
		inst: OrderedSet(LLVM!Instruction) = if fBlocks.oclIsUndefined() then
			OclUndefined
		else
			fBlocks -> collect(b | b.instructions.append(b.terminator)).flatten()
		endif;
	}
	to
		lllfunction: LLL!Function (
			name <- inFunction.address.name,
			instructions <- if inst.oclIsUndefined() then
					OclUndefined
				else
					inst -> collect(i | thisModule.resolveTemp(i, 'outI'))
				endif,
			labels <- if fBlocks.oclIsUndefined() then
					OclUndefined
				else
					fBlocks -> collect(b | thisModule.
							BasicBlockLabel2FunctionInstructionLabel(b, lllfunction))
				endif,
			localVariablesOrValues <- if fBlocks.oclIsUndefined() then
					OclUndefined
				else
					fBlocks -> collect(b | b.instructions -> collect(iu | if iu.
							oclIsTypeOf(LLVM!InstructionUse) then
									thisModule.resolveTemp(iu, 'intReg')
								else
									OclUndefined
								endif)).excluding(OclUndefined)
				endif,
			inputParameters <- if inFunction.pl.oclIsUndefined() then
					OclUndefined
				else
					inFunction.pl.variables -> collect(i | thisModule.getValue(i).
							refSetValue('type', thisModule.getType(inFunction.pl.types.
							at(inFunction.pl.variables.indexOf(i)))))
				endif,
			returnType <- if inFunction.returnType.oclIsUndefined() then
					OclUndefined
				else
					thisModule.getType(inFunction.returnType)
				endif
		)
}

rule GlobalDefinition2GlobalVariables {
	from
		global: LLVM!GlobalDefinition
	to
		outV: LLL!"lll::Variable" (
			name <- thisModule.stringcut(thisModule.stringcut(global.adress.name, '%'),
					'@'),
			type <- if global.type.oclIsTypeOf(LLVM!Array) then
					OclUndefined
				else
					thisModule.getType(global.type)
				endif
		)
}

rule BasicBlockLabel2FunctionInstructionLabel(block: LLVM!BasicBlock, lllfunction:
		LLL!Function) {
	to
		bbLabel: LLL!Label (
			function <- lllfunction,
			instruction <- thisModule.resolveTemp(
				if block.instructions.first().oclIsUndefined()
				then block.terminator
				else block.instructions.first() endif
				, 'outI'),
			name <- block.label
		)
	do {
		bbLabel; 
	}
}

--****************************************--
--                                        --
--                 Values                 --
--                                        --
--****************************************--
lazy rule createConstant {
	from
		con: LLVM!Constant
	to
		outV: LLL!Constant (
			value <- con.value.toString()
		)
}

lazy rule createNonConstantValue {
	from
		ncv: LLVM!NonConstantValue
	to
		outV: LLL!"lll::Variable" (
			name <- thisModule.numberReg(thisModule.stringcut(thisModule.stringcut(ncv.
					name, '%'), '@'))
		)
}

lazy rule createValue {
	from
		value: LLVM!Value (
			not value.oclIsTypeOf(LLVM!Constant) and not value.
					oclIsTypeOf(LLVM!NonConstantValue) and not value.name.oclIsUndefined()
		)
	to
		outV: LLL!"lll::Variable" (
			name <- thisModule.numberReg(thisModule.stringcut(thisModule.stringcut(value.
					name, '%'), '@'))
		)
}

--****************************************--
--                                        --
--                  Type                  --
--                                        --
--****************************************--
lazy rule createPredefinedInteger {
	from
		predef: LLVM!Predefined (
			predef.type.startsWith('i')
		)
	to
		outT: LLL!SimpleType (
			type <- if predef.type.endsWith('*') then #pointer else if predef.type = 'i1'
					then #bool else #int endif endif
		)
}

lazy rule createAddress__ComplexType {
	from
		address: LLVM!Address (
			not address.name.endsWith('*')
		)
	to
		outT: LLL!ComplexType (
			name <- thisModule.numberReg(thisModule.stringcut(thisModule.
					stringcut(address.name, '%'), '@'))
		)
}

lazy rule createAddress__Pointer {
	from
		address: LLVM!Address (
			address.name.endsWith('*')
		)
	to
		outT: LLL!SimpleType (
			type <-  #pointer
		)
}

--****************************************--
--                                        --
--              Instructions              --
--                                        --
--****************************************--
rule LoadRegister2Load {
	from
		insUse: LLVM!InstructionUse (
			insUse.instruction.oclIsTypeOf(LLVM!Load)
		)
	to
		outI: LLL!MemoryInstruction (
			instructionType <- #Load,
			parameters <- thisModule.getValue(insUse.instruction.adress).
					refSetValue('type', thisModule.getType(insUse.instruction.
					adresstype)),
			instructionResult <- intReg
		),
		intReg: LLL!"lll::Variable" (
			name <- thisModule.numberReg(thisModule.stringcut(thisModule.stringcut(insUse.
					reg_or_var, '%'), '@'))
		)
}

rule AllocRegister2Alloc {
	from
		insUse: LLVM!InstructionUse (
			insUse.instruction.oclIsTypeOf(LLVM!Alloc)
		)
	to
		outI: LLL!MemoryInstruction (
			instructionType <- #Alloca,
			parameters <- if insUse.instruction.numelementsvalue.oclIsUndefined() then
					thisModule.createAllocaParam(insUse.instruction)
				else
					thisModule.getValue(insUse.instruction.numelementsvalue).
							refSetValue('type', thisModule.getType(insUse.instruction.
							type))
				endif,
			instructionResult <- intReg
		),
		intReg: LLL!"lll::Variable" (
			name <- thisModule.numberReg(thisModule.stringcut(thisModule.stringcut(insUse.
					reg_or_var, '%'), '@'))
		)
}

-- TODO Expression for this Instruction
rule PhiRegister2LC {
	from
		insUse: LLVM!InstructionUse (
			insUse.instruction.oclIsTypeOf(LLVM!Phi)
		)
	to
		outI: LLL!LocalComputation (
			parameters <- OrderedSet{thisModule.getValue(insUse.instruction.firstclass.
					first()).refSetValue('type', thisModule.getType(insUse.instruction.
					type)),
						thisModule.getValue(insUse.instruction.values.first()),
						thisModule.getValue(insUse.instruction.firstclass.at(2)),
						thisModule.getValue(insUse.instruction.values.at(2))},
			instructionResult <- intReg
		),
		intReg: LLL!"lll::Variable" (
			name <- thisModule.numberReg(thisModule.stringcut(thisModule.stringcut(insUse.
					reg_or_var, '%'), '@'))
		)
}

rule CompareRegister2LC {
	from
		insUse: LLVM!InstructionUse (
			insUse.instruction.oclIsTypeOf(LLVM!Compare)
		)
	to
		outI: LLL!LocalComputation (
			expression <- thisModule.getCExpr(insUse.instruction),
			instructionResult <- intReg
		),
		intReg: LLL!"lll::Variable" (
			name <- thisModule.numberReg(thisModule.stringcut(thisModule.stringcut(insUse.
					reg_or_var, '%'), '@'))
		)
}

rule CmpXchgRegister2CmpXchg {
	from
		insUse: LLVM!InstructionUse (
			insUse.instruction.oclIsTypeOf(LLVM!CmpXchg)
		)
	to
		outI: LLL!MemoryInstruction (
			instructionType <- #CompareAndSwap,
			parameters <- OrderedSet{thisModule.getValue(insUse.instruction.adress).
					refSetValue('type', thisModule.getType(insUse.instruction.
					adresstype)),
						thisModule.getValue(insUse.instruction.comparevalue).
								refSetValue('type', thisModule.getType(insUse.instruction.
								comparetype)),
						thisModule.getValue(insUse.instruction.newvalue).
								refSetValue('type', thisModule.getType(insUse.instruction.
								newtype))},
			instructionResult <- intReg
		),
		intReg: LLL!"lll::Variable" (
			name <- thisModule.numberReg(thisModule.stringcut(thisModule.stringcut(insUse.
					reg_or_var, '%'), '@'))
		)
}

rule GetElementPointerRegister2GetElementPointer {
	from
		insUse: LLVM!InstructionUse (
			insUse.instruction.oclIsTypeOf(LLVM!GetElementPtr) or insUse.instruction.
					oclIsTypeOf(LLVM!NestedGetElementPtr)
		)
	to
		outI: LLL!MemoryInstruction (
			instructionType <- #GetElementPointer,
			parameters <- insUse.instruction.indizies -> collect(i | thisModule.
					getValue(i)).asOrderedSet().append(thisModule.getValue(insUse.instruction.aggregatename)),
			instructionResult <- intReg
		),
		intReg: LLL!"lll::Variable" (
			name <- thisModule.numberReg(thisModule.stringcut(thisModule.stringcut(insUse.
					reg_or_var, '%'), '@'))
		)
}

rule CallRegister2FunctionCall {
	from
		insUse: LLVM!InstructionUse (
			insUse.instruction.oclIsTypeOf(LLVM!Call)
		)
	to
		outI: LLL!FunctionCall (
			invokedFunction <- LLL!Function.allInstances() -> select(i | i.name = insUse.
					instruction.adress.name).first(),
			instructionResult <- intReg
		),
		intReg: LLL!"lll::Variable" (
			name <- thisModule.numberReg(thisModule.stringcut(thisModule.stringcut(insUse.
					reg_or_var, '%'), '@'))
		)
}

rule ArithmeticUse2LC {
	from
		insUse: LLVM!InstructionUse (
			insUse.instruction.oclIsTypeOf(LLVM!ArithmeticOperation)
		)
	to
		outI: LLL!LocalComputation (
			expression <- thisModule.getAExpr(insUse.instruction),
			instructionResult <- intReg
		),
		intReg: LLL!"lll::Variable" (
			name <- thisModule.numberReg(thisModule.stringcut(thisModule.stringcut(insUse.
					reg_or_var, '%'), '@'))
		)
}

rule LogicalUse2LC {
	from
		insUse: LLVM!InstructionUse (
			insUse.instruction.oclIsTypeOf(LLVM!LogicOperation)
		)
	to
		outI: LLL!LocalComputation (
			expression <- thisModule.getLExpr(insUse.instruction),
			instructionResult <- intReg
		),
		intReg: LLL!"lll::Variable" (
			name <- thisModule.numberReg(thisModule.stringcut(thisModule.stringcut(insUse.
					reg_or_var, '%'), '@'))
		)
}

rule LLVMStore2Store {
	from
		instruction: LLVM!Store
	to
		outI: LLL!MemoryInstruction (
			instructionType <- #Store,
			parameters <- OrderedSet{thisModule.getValue(instruction.newvalue).
					refSetValue('type', thisModule.getType(instruction.newtype)),
						thisModule.getValue(instruction.adress).refSetValue('type',
								thisModule.getType(instruction.adresstype))}
		)
}

rule LLVMFence2Fence {
	from
		instruction: LLVM!Fence
	to
		outI: LLL!MemoryInstruction (
			instructionType <- #Fence
		)
}

lazy rule createAllocaParam {
	from
		instruction: LLVM!Alloc
	to
		intParam: LLL!Constant (
			type <- thisModule.getType(instruction.type),
			value <- if instruction.numelementsvalue.oclIsUndefined() then
					'1'
				else
					thisModule.getValue(instruction.numelementsvalue)
				endif
		)
}

rule Cast2LC {
	from
		insUse: LLVM!InstructionUse (
			insUse.instruction.oclIsTypeOf(LLVM!Cast)
		)
	to
		outI: LLL!LocalComputation (
			expression <- expr,
			instructionResult <- intReg
		),
		expr: LLL!"expressions::Variable" (
			varName <- thisModule.numberReg(thisModule.stringcut(thisModule.stringcut(insUse.instruction.value.name, '%'), '@'))
		),
		intReg: LLL!"lll::Variable" (
			name <- thisModule.numberReg(thisModule.stringcut(thisModule.stringcut(insUse.
					reg_or_var, '%'), '@'))
		)
}

rule LLVMBranch2ConditionBranch {
	from
		instruction: LLVM!Branch (
			instruction.destination.oclIsUndefined()
		)
	to
		outI: LLL!ConditionalBranch (
			elseTarget <- LLL!Label.allInstances() -> select(i | i.name = thisModule.
					stringcut(instruction.labelFalse.name, '%') and i.function.
					instructions.includes(thisModule.resolveTemp(instruction, 'outI'))).
					first(),
			target <- LLL!Label.allInstances() -> select(i | i.name = thisModule.
					stringcut(instruction.labelTrue.name, '%') and i.function.
					instructions.includes(thisModule.resolveTemp(instruction, 'outI'))).
					first(),
			instructionResult <- thisModule.getValue(instruction.condvalue)
		)
}

rule LLVMGoto2Goto {
	from
		instruction: LLVM!Branch (
			not instruction.destination.oclIsUndefined()
		)
	to
		outI: LLL!Goto (
			target <- LLL!Label.allInstances() -> select(i | (i.name = thisModule.
					stringcut(instruction.destination.name, '%'))and i.function.
					instructions.includes(thisModule.resolveTemp(instruction, 'outI'))).
					first()
		)
}

rule LLVMReturn2ReturnWoValue {
	from
		instruction: LLVM!Return (
			instruction.returnvalue.oclIsUndefined()
		)
	to
		outI: LLL!Return (
		)
}

rule LLVMReturn2ReturnWValue {
	from
		instruction: LLVM!Return (
			not instruction.returnvalue.oclIsUndefined()
		)
	to
		outI: LLL!Return (
			parameters <- thisModule.getValue(instruction.returnvalue).
					refSetValue('type', thisModule.getType(instruction.returntype))
		)
}

rule LPad2LC {
	from
		insUse: LLVM!InstructionUse (
			insUse.instruction.oclIsTypeOf(LLVM!LandingPad)
		)
	to
		outI: LLL!LocalComputation (
			instructionResult <- intReg,
			expression <- expr
		),
		expr: LLL!"expressions::StringValue" (
			strValue <- 'landingpad ' + thisModule.numberReg(thisModule.
					stringcut(thisModule.stringcut(insUse.reg_or_var, '%'), '@'))
		),
		intReg: LLL!"lll::Variable" (
			name <- thisModule.numberReg(thisModule.stringcut(thisModule.stringcut(insUse.
					reg_or_var, '%'), '@'))
		)
}

rule InsertValue2LC {
	from
		insUse: LLVM!InstructionUse (
			insUse.instruction.oclIsTypeOf(LLVM!InsertValue)
		)
	to
		outI: LLL!LocalComputation (
			instructionResult <- intReg,
			expression <- expr
		),
		expr: LLL!"expressions::Equal" (
			left <- leftex,
			right <- rightex
		),
		leftex: LLL!"expressions::Variable" (
			varName <- (thisModule.numberReg(thisModule.stringcut(thisModule.
					stringcut(insUse.instruction.value.name, '%'), '@')) + '.' + insUse.
					instruction.index.toString())
		),
		rightex: LLL!"expressions::Variable" (
			varName <- thisModule.numberReg(thisModule.stringcut(thisModule.
					stringcut(insUse.instruction.insertvalue.name, '%'), '@'))
		),
		intReg: LLL!"lll::Variable" (
			name <- thisModule.numberReg(thisModule.stringcut(thisModule.stringcut(insUse.
					reg_or_var, '%'), '@'))
		)
}

rule ExtractValue2LC {
	from
		insUse: LLVM!InstructionUse (
			insUse.instruction.oclIsTypeOf(LLVM!ExtractValue)
		)
	to
		outI: LLL!LocalComputation (
			instructionResult <- intReg,
			expression <- expr
		),
		expr: LLL!"expressions::Variable" (
			varName <- (thisModule.numberReg(thisModule.stringcut(thisModule.
					stringcut(insUse.instruction.value.name, '%'), '@')) + '.' + insUse.
					instruction.index.toString())
		),
		intReg: LLL!"lll::Variable" (
			name <- thisModule.numberReg(thisModule.stringcut(thisModule.stringcut(insUse.
					reg_or_var, '%'), '@'))
		)
}
