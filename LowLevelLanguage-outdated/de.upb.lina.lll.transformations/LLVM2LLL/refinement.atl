-- @nsURI MM=http://www.upb.de/lina/lll
-- @atlcompiler atl2010

-- LAZY RULES ARE NOT SUPPORTED FOR REFINING MODE ...  ATL SDK - ATLAS Transformation
-- Language SDK
-- Version: 3.3.1.v201209061455	org.eclipse.m2m.atl.sdk.feature.group	Eclipse
-- Modeling Project

-- ALSO NOT SUPPORTED: Iterativ constrains like 'using' and called rules.

-- 1. Refinement
-- Muss mind. 2 mal ausgeführt werden.

-- 1. Iteration:
-- Set Condition of a Conditional Branch

-- 2. Iteration:
-- Eventually remove the Instruction, thats responsible for the Condition of the Conditional Branch 
	
module refinement;
create OUT: MM refining IN: MM;

-- This Helper just collect all Instructions of the Function, the input-Instruction is contained 
helper def: getInstructions(input: MM!Instruction): OrderedSet(MM!Instruction) =
	input.refImmediateComposite().instructions;

-- Selects the Instruction, that is responsible for the Condition of a Conditional Branch
helper def: getBranchLC(input: MM!ConditionalBranch): MM!Instruction =
	thisModule.getInstructions(input) -> select(ea | ea.oclIsTypeOf(MM!LocalComputation))
			-> select(i | i.instructionResult.name = input.instructionResult.name).
			debug().first();


rule BranchCompare {
	-- Es werden die Conditional Branches ausgewählt, deren Conditions nicht gesetzt sind. 
	-- Und diese wird ersetzt durch eine, deren Condition gesetzt ist.
	from
		b: MM!ConditionalBranch (
			(b.oclIsTypeOf(MM!ConditionalBranch))and
			b.condition.oclIsUndefined()
		)
	to
		c: MM!ConditionalBranch (
			condition <- if b.instructionResult.name = 'true' then -- br true
					MM!"expressions::BooleanValue".newInstance().refSetValue('value',
							true)
				else
					if b.instructionResult.name = 'false' then -- br false
						MM!"expressions::BooleanValue".newInstance().refSetValue('value',
								false)
					else -- Hier wird unterschieden ob es sich um eine CompareInstruction oder einen Cast handelt.
						if thisModule.getBranchLC(b).expression.
								oclIsTypeOf(MM!"expressions::Variable") then
							MM!"expressions::Variable".newInstance().
									refSetValue('varName', thisModule.getBranchLC(b).
									expression.varName)
						else
							thisModule.getBranchLC(b).expression
						endif
					endif
				endif
		)
}

-- LocalComputaions, die keine Expression haben oder nirgends contained sind werden entfernt
rule DropLC {
	from
		input: MM!LocalComputation (
			input.expression.oclIsUndefined() or input.refImmediateComposite().
					oclIsUndefined()
		)
	to
		drop
}

-- Expressions, die nirgends contained ist werden entfernt
rule DeleteNoUse {
	from
		ex: MM!"expressions::Expression" (
			ex.refImmediateComposite().oclIsTypeOf(MM!Program)
		)
	to
		drop
}