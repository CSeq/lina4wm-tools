[comment encoding = UTF-8 /]
[module GenerateOperationalPromelaModel('http://www.upb.de/lina/cfg/controlflow', 'http://www.upb.de/lina/cfg/gendata', 'http://www.upb.de/llvm_parser/llvm', 'http://www.eclipse.org/emf/2002/Ecore')]


[template public generateModel(genData : GeneratorData, fileName: String) post (trim())]   
[comment @main/]
[file ( fileName  , false, 'UTF-8')]
[genStartOfFile()/]
[genData.genGlobalVars()/]
[buildStandards(genData)/]
//------------- functions ------------------
[for (cfg: ControlFlowDiagram | genData.cfgs)]
[cfg.genFunctionHead(genData)/]
[genLocalVarDeclarations(cfg, genData)/]
[cfg.transitions->first().instruction.eContainer(FunctionDefinition).generateFunction(genData)/]
ret: skip;
}

[/for]

//------------- process template -------------
[genProcessTemplates(genData)/]
[/file]
[/template]


[template public generateFunction(f : FunctionDefinition, genData:  GeneratorData)]
[let b:  FunctionBody = f._body]
[if (not( b.oclIsUndefined()))]
skip;
[for (block : BasicBlock | b.blocks)]
[generateBlock(block, genData)/]
[/for]
[/if]
[/let]
[/template]

[template public generateBlock(block: BasicBlock, genData: GeneratorData)]
[block.label.escape()/]: 
[for (i : Instruction | block.instructions)]
 [i.genInstruction(genData)/]
[/for]
[/template]

[template public genStartOfFile(c: OclAny)]
#define MEM_SIZE 10	//size of memory
#define BUFF_SIZE 3 	//size of Buffer 
#define null 0
#define I32  0 		// = {0};
#define PTR 0
short memUse = 1; 	//shows to the next free cell in memory

//#include "sc.pml"
#include "tso.pml"
//#include "pso.pml"

chan channelT1 = ['['/]0[']'/] of {mtype, short, short, short};
chan channelT2 = ['['/]0[']'/] of {mtype, short, short, short};
[/template]

[template public genProcessTemplates(c: OclAny, genData: GeneratorData)]

//Stubs
proctype process1(chan ch){
	//TODO: empty stub
}

proctype process2(chan ch){
	//TODO: empty stub
}


init{
atomic{
	//initialize global variables or allocate memory space here, if necessary
	[genGlobalVariableAllocation(genData)/]
	run bufferProcess(channelT1); //obsolete for SC, remove line when SC is chosen
	run bufferProcess(channelT2); //obsolete for SC, remove line when SC is chosen
	run process1(channelT1);
	run process2(channelT2);
	}
}
[/template]


[query public escape(s : EString) : String = 
s.substituteAll('.', '').substituteAll('%', '')
/]

[template public genFunctionHead(cfg: ControlFlowDiagram, genData: GeneratorData)]
[for (mapping: OldToNewCfgNameMapping | genData.oldToNewCfgName)][if (mapping.key.equalsIgnoreCase(cfg.name))]
[if(not mapping.key.replaceAll('@_','').replaceAll('@','').equalsIgnoreCase(mapping.value))]//function was renamed from: [mapping.key/][/if]
inline [mapping.value/]([genParams(cfg, genData)/][/if][/for]){
[/template]


[template public genGlobalVars(genData: GeneratorData)]
[let mappings: OrderedSet(FilterToAddressMapping) = genData.filteredAddresses->select(m | m.key.equalsIgnoreCase('globals') and m.value->size() > 0)]
[for (aMapping: AddressMapping | mappings.value)]
short [aMapping.name/] = [genValueInitialization(aMapping, genData) /]
[/for]
[/let]
[/template]

[query public genValueInitialization(aMapping : AddressMapping, genData: GeneratorData) : String =
let gDefs : OrderedSet(GlobalDefinition) = genData.program.elements->filter(GlobalDefinition)->select(df | df.address = aMapping.adresses->first()) in
let gDef : GlobalDefinition  = gDefs->first() in 
if gDef.value.oclIsTypeOf(Parameter) then
	if gDef.value.oclAsType(Parameter).type.oclIsTypeOf(Array) then
	'0; //Array: please, check initialization in the init process'
	else if gDef.value.oclAsType(Parameter).type.oclIsTypeOf(Structure) then
			'0; //Structure: please, check initialization in the init process'
		else
			gDef.value.oclAsType(Parameter).value.valueToString(genData) + ';'
		endif
	endif
else if gDef.value.oclIsTypeOf(Predefined) then
		gDef.value.oclAsType(Predefined).type + '' + gDef.value.oclAsType(Predefined).pointer + ';//needs attention'
	else 
		''
	endif
endif
/]

[template public genGlobalVariableAllocation(genData: GeneratorData)]
[let mappings: OrderedSet(FilterToAddressMapping) = genData.filteredAddresses->select(m | m.key.equalsIgnoreCase('globals') and m.value->size() > 0)]
[for (aMapping: AddressMapping | mappings.value)]
alloca([genAllocationSize(aMapping, genData)/], [aMapping.name/]);
[/for]
[/let]
[/template]

[query public genAllocationSize(aMapping : AddressMapping, genData: GeneratorData) : String =
let gDefs : OrderedSet(GlobalDefinition) = genData.program.elements->filter(GlobalDefinition)->select(df | df.address = aMapping.adresses->first()) in
let gDef : GlobalDefinition  = gDefs->first() in 
if gDef.value.oclIsTypeOf(Parameter) then
	if gDef.value.oclAsType(Parameter).type.oclIsTypeOf(Array) or gDef.value.oclAsType(Parameter).type.oclIsTypeOf(Structure) then
		determineSize(gDef.value.oclAsType(Parameter).type)
	else '1'
	endif
else 
	'1'
endif
/]

[query public determineSize(t: EObject) : Integer = 
if t.oclIsTypeOf(Array) then
if determineSize(t.oclAsType(Array).type) = 1 then  
	t.oclAsType(Array).length
else
	t.oclAsType(Array).length * determineSize(t.oclAsType(Array).type) 
endif 
else if t.oclIsTypeOf(Structure) then  
		t.oclAsType(Structure).types->collect(type | determineSize(type))->sum()
	else
		1 
endif
endif
/]



[template public genParams(cfg: ControlFlowDiagram, genData: GeneratorData)]
[genListOfVars(genData, 'func-params:'+cfg.name)/]
[/template]

[template public genLocalVarDeclarations(cfg: ControlFlowDiagram, genData: GeneratorData)]
[for (mapping: FilterToAddressMapping | genData.filteredAddresses)][if(mapping.key.equalsIgnoreCase('func-declare:'+cfg.name))][if(mapping.value->size() > 0)]short [genListOfVars(genData, 'func-declare:'+cfg.name)/];[/if][/if][/for]
[/template]

[template public genListOfVars(genData: GeneratorData, key: EString)]
[for (mapping: FilterToAddressMapping | genData.filteredAddresses)][if(mapping.key.equalsIgnoreCase(key))][for(aMapping: AddressMapping | mapping.value)][aMapping.name/][if(mapping.value->last() <> aMapping)], [/if][/for][/if][/for]
[/template]

[template public buildStandards(genData: GeneratorData)]

[for(func: String | genData.transformationSpecificKeys)][if (func.equalsIgnoreCase('getelementptr'))]
//pointer computation 
inline getelementptr(type, instance, offset, targetRegister)
{
	atomic{
	//simplified version of what llvm does.
	//we don't need the type as long as we assume our memory to hold only values/pointers etc of equal length. 
	//In this case, the offset directly correspond to adding it to instance address. 
	assert(offset <= type); //offset shouldn't be greater than the type range
	targetRegister = instance + offset;
	}
}
[/if]
[/for]
//memory allocation
inline alloca(type, targetRegister)
{
	atomic{
	targetRegister = memUse;
	memUse = memUse + type + 1;
	assert(memUse < MEM_SIZE);
	}
}
[for(func: String | genData.transformationSpecificKeys)][if (func.equalsIgnoreCase('cas'))]
//atomic compare and swap instruction 
inline cas(adr, old, new, result)
{
	atomic{
	//in LLVM result is usually a tuple (memory['['/]adr[']'/], successFlag)
	//we assume it to be just a loaded value
	result = memory['['/]adr[']'/];
	if 	:: memory['['/]adr[']'/] == old -> memory['['/]adr[']'/] = new; 
		:: else -> skip;
	fi;
	}
}
[/if]
[/for]
[/template]



[comment SINGLE INSTRUCTION TRANSLATION /]




[template public genInstruction(e : Instruction, genData: GeneratorData)]
[comment this is the fall back template/]
// NOT SUPPORTED: [e.eClass().name/]
[/template]

[template public genInstruction(e : ArithmeticOperation, genData: GeneratorData)]
[e.arithmeticInstr(genData)/]
[/template]

[query public arithmeticInstr(e : ArithmeticOperation, genData: GeneratorData) : String = 
e.result.addressToString(genData) + ' = ' + e.value1.valueToString(genData) + ' ' 
+ e.operation.arithmeticOp() + ' ' + e.value2.valueToString(genData) + '; '
/]

[query public arithmeticOp(s : EString) : String = 
if s.equalsIgnoreCase('add') then
	'+'
else if s.equalsIgnoreCase('sub') or s.equalsIgnoreCase('ashr') then
	'-'
else if s.equalsIgnoreCase('mul') then
	'*'
else if s.equalsIgnoreCase('udiv') or s.equalsIgnoreCase('sdiv') then
	'/'
else if s.equalsIgnoreCase('urem') or s.equalsIgnoreCase('srem') then
	'%'
else
	'// UNHANDLED'
endif
endif
endif
endif
endif
/]


[template public genInstruction(e : Branch, genData: GeneratorData)]
[if (e.elseDestination.oclIsUndefined())]
[genPhi(e, e.destination, genData)/]  goto [e.destination.escape()/];
[else]
if 
	:: [e.condition.valueToString(genData)/] -> [genPhi(e, e.destination, genData)/] goto [escape(e.destination)/];
	:: ![e.condition.valueToString(genData)/] -> [genPhi(e, e.elseDestination, genData)/] goto [escape(e.elseDestination)/];
fi;
[/if]
[/template]

[template public genPhi (e: Branch, dest: String, genData: GeneratorData)]
[for (mapping: PhiMapping | genData.phiMappings)]
	[if (mapping.blockLabelToUse.equalsIgnoreCase(e.eContainer().oclAsType(BasicBlock).label) 
	and (mapping.transition.instruction = e)
	and (mapping.phi->select(p | p.eContainer().oclAsType(BasicBlock).label.equalsIgnoreCase(dest.replaceAll('%', ''))))->notEmpty())]
	[genPhiCases(mapping, genData)/]
	[/if]
[/for]
[/template]

[template public genPhiCases (m: PhiMapping, genData: GeneratorData)]
[for (phi: Phi | m.phi)][phi.result.addressToString(genData)/] = [for(case: PhiCase | phi.cases)][if(case.label.replaceAll('%', '').equalsIgnoreCase(m.blockLabelToUse))][case.value.valueToString(genData)/][/if][/for];[/for]
[/template]

[template public genInstruction(e : Phi, genData: GeneratorData)]
// phi instruction replaced by assignments before  the goto to this block 
[/template]

[template public genInstruction(e : Return, genData: GeneratorData)]
[e.value.getTypeName(genData).returnInstr(e.value, genData)/]
[/template]

[query public returnInstr(s : String, v : EObject, genData: GeneratorData) : String =
if s.equalsIgnoreCase('void') then 
	'goto ret;'
else if v.oclIsTypeOf(PrimitiveValue) then
	'returnvalue = ' + v.oclAsType(PrimitiveValue).value + '; \ngoto ret;'
else if v.oclIsTypeOf(Parameter) then
	'returnvalue = ' + v.oclAsType(Parameter).value.valueToString(genData) + '; \ngoto ret;'
else
	'// UNHANDLED'
endif
endif
endif
/]

[template public genInstruction(e : LogicOperation, genData: GeneratorData)]
[e.result.addressToString(genData)/] = [e.value1.valueToString(genData)/] [e.operation.logicOp()/] [e.value2.valueToString(genData)/]; 
[/template]

[query public logicOp(s : EString) : String = 
if s.equalsIgnoreCase('shl') then
	'<<'
else if s.equalsIgnoreCase('lshr') or s.equalsIgnoreCase('ashr') then
	'>>'
else if s.equalsIgnoreCase('and') then
	'&'
else if s.equalsIgnoreCase('or') then
	'|'
else if s.equalsIgnoreCase('xor') then
	'^'
else
	'// UNHANDLED'
endif
endif
endif
endif
endif
/]


[template public genInstruction(e : Cast, genData : GeneratorData)]
[e.result.addressToString(genData)/] = [e.value.valueToString(genData)/]; 
[/template]

[template public genInstruction(e : NestedCast, genData : GeneratorData)]
// TODO: Instruction (nested cast);
[/template]




[template public genInstruction(e : CmpXchg, genData : GeneratorData)]
cas([e.address.value.valueToString(genData)/], [e.value.value.valueToString(genData)/], [e.newValue.value.valueToString(genData)/], [e.result.addressToString(genData)/]); 
[/template]

[template public genInstruction(e : AtomicRMW, genData : GeneratorData)]
atomic{[e.result.addressToString(genData)/] = [e.address.value.valueToString(genData)/]; [e.genAtomicRMWOperation(genData)/]} 
[/template]

[query public genAtomicRMWOperation(c : AtomicRMW, genData: GeneratorData) : String = 
if 	c.operation.equalsIgnoreCase('xchg') then
	c.address.value.valueToString(genData) + ' = ' + c.argument.value.valueToString(genData) + ';'
else if c.operation.equalsIgnoreCase('add') then
	c.address.value.valueToString(genData) + ' = ' + c.address.value.valueToString(genData) + ' + ' + c.argument.value.valueToString(genData) + ';'
else if c.operation.equalsIgnoreCase('sub') then
	c.address.value.valueToString(genData) + ' = ' + c.address.value.valueToString(genData) + ' - ' + c.argument.value.valueToString(genData) + ';'
else if c.operation.equalsIgnoreCase('and') then
	c.address.value.valueToString(genData) + ' = ' + c.address.value.valueToString(genData) + ' & ' + c.argument.value.valueToString(genData) + ';'
else if c.operation.equalsIgnoreCase('nand') then
	c.address.value.valueToString(genData) + ' = ' + '!(' +  c.address.value.valueToString(genData) + ' & ' + c.argument.value.valueToString(genData) + ')' +';'
else if c.operation.equalsIgnoreCase('or') then
	c.address.value.valueToString(genData) + ' = ' + '(' +  c.address.value.valueToString(genData) + ' | ' + c.argument.value.valueToString(genData) + ')' +';'
else if c.operation.equalsIgnoreCase('xor') then
	c.address.value.valueToString(genData) + ' = ' + '(' +  c.address.value.valueToString(genData) + ' ^ ' + c.argument.value.valueToString(genData) + ')' +';'
else if c.operation.equalsIgnoreCase('max') then
	c.address.value.valueToString(genData) + ' = ' + c.address.value.valueToString(genData) + '>' + c.argument.value.valueToString(genData) + ' -> ' + c.address.value.valueToString(genData) + ' : ' + c.argument.value.valueToString(genData) + ';'
else if c.operation.equalsIgnoreCase('min') then
	c.address.value.valueToString(genData) + ' = ' + c.address.value.valueToString(genData) + '<' + c.argument.value.valueToString(genData) + ' -> ' + c.address.value.valueToString(genData) + ' : ' + c.argument.value.valueToString(genData) + ';'
else if c.operation.equalsIgnoreCase('umax') then
	c.address.value.valueToString(genData) + ' = ' + c.address.value.valueToString(genData) + '>' + c.argument.value.valueToString(genData) + ' -> ' + c.address.value.valueToString(genData) + ' : ' + c.argument.value.valueToString(genData) + ' TODO, umax;'
else if c.operation.equalsIgnoreCase('umin') then
	c.address.value.valueToString(genData) + ' = ' + c.address.value.valueToString(genData) + '<' + c.argument.value.valueToString(genData) + ' -> ' + c.address.value.valueToString(genData) + ' : ' + c.argument.value.valueToString(genData) + ' TODO umin;'

else
	'ERROR: unknown operation'
endif
endif
endif
endif
endif
endif
endif
endif
endif
endif
endif
/]


[template public genInstruction(e : Load,  genData : GeneratorData)]
read([e.address.value.valueToString(genData)/], [e.result.addressToString(genData)/]); 
[/template]

[template public genInstruction(e : Store,  genData : GeneratorData)]
write([e.targetAddress.value.valueToString(genData)/], [e.value.value.valueToString(genData)/]);
[/template]

[template public genInstruction(e : Fence,  genData : GeneratorData)]
mfence();
[/template]



[template public genInstruction(e : Call,  genData : GeneratorData)]
[e.callFuncName(genData)/]([e.pList.callParams(genData)/][e.callRetParam(genData)/]); 
[/template]

[query public callFuncName(c : Call,  genData : GeneratorData) : String = 
c.function.value.valueToString(genData)
/]

[query public callParams(list : ParameterList,  genData : GeneratorData) : String = 
list.params->iterate(p : Parameter; result : String = '' |
if p.followingSiblings()->size() > 0 then
	result.concat(p.value.valueToString(genData) + ', ')
else
	result.concat(p.value.valueToString(genData))
endif
)
/]

[query public callRetParam(c : Call, genData: GeneratorData) : String = 
if c.pList.params->size() > 0 and not c.result.oclIsUndefined() then
	', ' + c.result.addressToString(genData)
else if c.pList.params->size() = 0 and not c.result.oclIsUndefined() then
	c.result.addressToString(genData)
else
	''
endif
endif
/]

[template public genInstruction(e : Alloc, genData: GeneratorData)]
alloca([e.type.typeSize()/], [e.result.addressToString(genData)/]); 
[/template]


[template public genInstruction(e : Compare, genData: GeneratorData)]
[e.compareInstr(genData)/] 
[/template]

[query public compareInstr(e : Compare, genData: GeneratorData) : String =
	e.result.addressToString(genData) + ' = (' + e.operand1.valueToString(genData) + ' ' 
	+ e.cond.compareOp() + ' ' + e.operand2.valueToString(genData) + ');'
/]

[query public compareOp(s : EString) : String = 
if s.equalsIgnoreCase('eq') then
	'=='
else if s.equalsIgnoreCase('ne') then
	'!='
else if s.equalsIgnoreCase('ugt') or s.equalsIgnoreCase('sgt') then
	'>'
else if s.equalsIgnoreCase('uge') or s.equalsIgnoreCase('sge') then
	'>='
else if s.equalsIgnoreCase('ult') or s.equalsIgnoreCase('slt') then
	'<'
else if s.equalsIgnoreCase('ule') or s.equalsIgnoreCase('sle') then
	'<='
else
	'// UNHANDLED'
endif
endif
endif
endif
endif
endif
/]

[template public genInstruction(e : Select, genData: GeneratorData)]
[e.selectInstr(genData)/] 
[/template]

[query public selectInstr(e : Select, genData: GeneratorData) : String = 
e.result.addressToString(genData) + ' = (' + e.condition.value.valueToString(genData) + ' -> ' +
e.trueValue.value.valueToString(genData) + ' : ' + e.elseValue.value.valueToString(genData) + ');'
/]




[comment NEED REVISION /]
[template public genInstruction(e : GetElementPtr, genData : GeneratorData)]
getelementptr([genAggregateSize(e, genData)/], [e.aggregate.value.valueToString(genData)/], [genPtrOffset(e,genData)/], [e.result.addressToString(genData)/]); [checkForWarnings(e, genData)/]
[/template]

[query public checkForWarnings(e : GetElementPtr, genData: GeneratorData) : String =   
let set : Set(MemorySizeMapping) = genData.memorySizeMappings->select(m | m.instruction = e and not m.warning.equalsIgnoreCase('')) in
if set->isEmpty() then ''
else
'/*' +  set->asSequence()->first().warning + '*/' 
endif
/]

[template public genPtrOffset(e : GetElementPtr, genData : GeneratorData)]
[for (m: MemorySizeMapping | genData.memorySizeMappings)][if (m.instruction=e)][m.offset/][/if][/for]
[/template]

[template public genAggregateSize(e : GetElementPtr, genData : GeneratorData)]
[for (m: MemorySizeMapping | genData.memorySizeMappings)][if (m.instruction=e)][m.completeTypeSize/][/if][/for]
[/template]
[comment NEED REVISION END/]





























[comment ====== Instructions ======/]




[comment ====== Generic Calls ======/]
[template public addressToString(address: Address, genData: GeneratorData)]
[for (am: AddressMapping | genData.addressMappings)][for (a: Address | am.adresses)][if (address = a)][am.name/][/if][/for][/for]
[/template]

[template public valueToString(v : EObject, genData: GeneratorData)]
[if (v.oclIsTypeOf(PrimitiveValue))][if(v.oclAsType(PrimitiveValue).value.equalsIgnoreCase('null'))]-1[else][v.oclAsType(PrimitiveValue).value/][/if][elseif ( v.oclIsTypeOf(IntegerConstant))][v.oclAsType(IntegerConstant).value/][elseif ( v.oclIsTypeOf(DecimalConstant))][v.oclAsType(DecimalConstant).value/] [elseif (v.oclIsTypeOf(AddressUse))][for (am: AddressMapping | genData.addressMappings)][for (a: Address | am.adresses)][if (v.oclAsType(AddressUse).address = a)][am.name/][/if][/for][/for][/if]
[/template]

[template public valueToString(v : Value, genData: GeneratorData)]
[if (v.oclIsTypeOf(PrimitiveValue))][if(v.oclAsType(PrimitiveValue).value.equalsIgnoreCase('null'))]null[else][v.oclAsType(PrimitiveValue).value/][/if][elseif ( v.oclIsTypeOf(IntegerConstant))][v.oclAsType(IntegerConstant).value/][elseif ( v.oclIsTypeOf(DecimalConstant))][v.oclAsType(DecimalConstant).value/] [elseif (v.oclIsTypeOf(AddressUse))][for (am: AddressMapping | genData.addressMappings)][for (a: Address | am.adresses)][if (v.oclAsType(AddressUse).address = a)][am.name/][/if][/for][/for][/if]
[/template]

[template public valueToString(v : NestedGetElementPtr, genData: GeneratorData)]
[valueToString(v.aggregate.value, genData)/] + [valueToString(v.indices->at(2).value, genData)/]
[/template]

[template public genCondition(t: Transition, gD: GeneratorData)]
[for (cm: ConstraintMapping | gD.constraints)][if (t = cm.transition)][if(not cm.condition.equalsIgnoreCase('true'))][cm.condition/] -> [else] [/if][/if][/for]
[/template]


[query public getTypeName(o : EObject, genData: GeneratorData) : String = 
if o.oclIsTypeOf(Predefined) then
	if o.oclAsType(Predefined).type.equalsIgnoreCase('void') then
		'void'
	else if o.oclAsType(Predefined).type.equalsIgnoreCase('i1') then
		'bool'
	else
		'int'
	endif
	endif
else if o.oclIsTypeOf(AddressUse) then
	o.oclAsType(AddressUse).addressUseName(genData)
else if o.oclIsTypeOf(Array) then
	'Array_' + o.oclAsType(Array).arraySize() + 'x' 
	+ o.oclAsType(Array).length
else if o.oclIsTypeOf(PrimitiveValue) then
	if o.oclAsType(PrimitiveValue).value.equalsIgnoreCase('void') then
		'void'
	else '// UNHANDLED TYPE'
	endif
else 
	'// UNHANDLED TYPE'
endif
endif
endif
endif
/]

[query public addressUseName(e : AddressUse, genData: GeneratorData) : String = 
	if e.isPointer() then
		'int'
	else
		e.address.structName(genData)
	endif
/]

[query public isPointer(e : AddressUse) : Boolean = 
	not e.pointer.oclIsUndefined()
/]

[query public arraySize(e : Array) : Integer = 
	(e.length.round() * e.type.typeSize()).round()
/]

[query public typeSize(e : EObject) : Integer = 
if e.oclIsTypeOf(Predefined) then
	1
else if e.oclIsTypeOf(Array) then
	e.oclAsType(Array).arraySize()
else if e.oclIsTypeOf(AddressUse) then
	e.oclAsType(AddressUse).adressUseSize()
else
	-1
endif
endif
endif
 /]

[query public adressUseSize(e : AddressUse) : Integer = 
	if e.isPointer() then
		1
	else if e.isStructure() then
		e.address.ancestors()->at(1).oclAsType(TypeDefinition)
		.struct.structSize()
	else
		-1
	endif
	endif
/]

[query public isStructure(e : AddressUse) : Boolean =
	if not e.address.ancestors()->at(1).oclIsUndefined() then
		e.address.ancestors()->at(1).oclIsTypeOf(TypeDefinition)
	else
		false
	endif
 /]


[query public structSize(e : Structure) : Integer = 
e.types->iterate(o : EObject; size : Integer = 0 | size + o.typeSize()
)
/]

[query public structName(e : Address, genData: GeneratorData) : String = 
e.addressToString(genData)
/]




