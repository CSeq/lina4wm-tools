[comment encoding = UTF-8 /]
[module generateKIVspec('http://www.upb.de/lina/cfg/controlflow', 'http://www.upb.de/lina/cfg/gendata', 'http://www.upb.de/llvm_parser/llvm', 'http://www.eclipse.org/emf/2002/Ecore')]

[template public generateModel(genData : GeneratorData) ]
[comment @main/]

[file ( 'specs/localstate.utf8', false, 'UTF-8')]
data specification
	using [basis(genData)/]ref, PC, PID
	Localstate :=mkls( . .pc : PC; . .pid : PID;
					[for(am: AddressMapping | genData.getFilteredAddresses('all-declare-params')->select(name.equalsIgnoreCase('returnvalue')._not()))]
					. .[am.name/] : [am.type/];
					[/for]);
	variables
		ls : Localstate;
end data specification
[/file]

[file ('specs/PC.utf8', false, 'UTF-8')]
data specification
	PC = N |[for (l : LocationLabel | genData.locationLabels) separator  (' |')] 
		
		[l.name/] [/for];
variables
pc : PC;

end data specification
[/file]

[file ('specs/PID.utf8', false, 'UTF-8')]
specification
	sorts
		PID;
	variables
		p : PID;
end specification
[/file]

[file ('specs/cindex.utf8', false, 'UTF-8')]
data specification
	IJ = [for (cfg : ControlFlowDiagram | genData.cfgs) separator ('|')] [generateCfgLabel(genData, cfg)/]ini [/for];
	CJ = [for (label : TransitionLabel | genData.transitionLabels->select(transition.instruction.oclIsUndefined()._or((transition.instruction.eClass() = Return)._not())))separator ('|')] [label.name/] [/for];
	[let returns : OrderedSet(TransitionLabel) = genData.transitionLabels->select(transition.instruction.oclIsUndefined()._not()._and(transition.instruction.eClass() = Return))]
	[if(returns->size() > 0)]
	RJ = [for (label : TransitionLabel | returns )separator ('|')] [label.name/]ret [/for];
[/if]
variables
		ij : IJ;
		cj : CJ;
[if(returns->size() > 0)]
		rj : RJ;
[/if]
end data specification[/let]
[/file]

[if(input(genData))]
[file ('specs/input.utf8', false, 'UTF-8')]
data specification
	using [basis(genData)/]ref

	input =[for(inpList : InputTypeList | genData.inputTypes)separator('|')] mk[i/]([for(inputType : String | inpList.inputType->asSequence()->select(equalsIgnoreCase(basis(genData))))] . .[inputType/][i/]: [inputType/];[/for][for(inputType : String | inpList.inputType->asSequence()->select(equalsIgnoreCase('ref')))] . .[inputType/][i/]: [inputType/];[/for]) with [for(inputType : String | inpList.inputType)][inputType/][/for]? [/for];
	variables
		inp : input;
end data specification
[/file]
[/if]

[file ('specs/COP.utf8', false, 'UTF-8')]
enrich 	[basis(genData)/]ref-memory,
		localstate,
		cindex[if(input(genData))],
		input[/if] with 

	[generateGlobalConstants(genData)/]
	functions
		INVOP : IJ → [if(input(genData))]input[else][inputType(genData)/][/if] ×  memory ×  Localstate ×  memory ×  Localstate → bool;
		COP : CJ → memory × Localstate × memory × Localstate → bool;
[let returns : OrderedSet(TransitionLabel) = genData.transitionLabels->select(transition.instruction.oclIsUndefined()._not()._and(transition.instruction.eClass() = Return))]
	[if(returns->size() > 0)]
		RETOP : RJ → memory × Localstate × memory × Localstate × [if(genData.addressMappings->select(name.equalsIgnoreCase('returnvalue'))->size()>0)][genData.addressMappings->select(name.equalsIgnoreCase('returnvalue'))->first().type/][else][basis(genData)/][/if] → bool;
	[/if]
	predicates
		LSInit : Localstate × PID;
		GSInit : memory;
	variables
		invop : [if(input(genData))]input[else][inputType(genData)/][/if] × memory × Localstate × memory × Localstate → bool;
		cop : memory × Localstate × memory × Localstate → bool;
	[if(returns->size() > 0)]
		retop : memory × Localstate × memory × Localstate × [if(genData.addressMappings->select(name.equalsIgnoreCase('returnvalue'))->size()>0)][genData.addressMappings->select(name.equalsIgnoreCase('returnvalue'))->first().type/][else][basis(genData)/][/if] → bool;
		[/if]
		mem' : memory;
		ls' : Localstate;
[if(input(genData)._not())]
		inp : [inputType(genData)/];
[/if][if(returns->size() > 0)]
		return : [if(genData.addressMappings->select(name.equalsIgnoreCase('returnvalue'))->size()>0)][genData.addressMappings->select(name.equalsIgnoreCase('returnvalue'))->first().type/][else][basis(genData)/][/if];
[/if][/let]
	axioms

	LSInit : ⊦ LSInit(ls, p) ↔ ls .pc = N ∧ ls .pid = p;
	used for : s, ls;

	[for (cfg : ControlFlowDiagram | genData.cfgs)] 
;; 	[generateCfgLabel(genData, cfg)/] reflects function [cfg.name/]
	[generateCfgLabel(genData, cfg)/]ini :
	⊦ INVOP([generateCfgLabel(genData, cfg)/]ini)(inp, mem, ls, mem', ls') ↔ ls .pc = N [if(input(genData))]∧ [for(am : AddressMapping | genData.getFilteredAddresses('func-params:' + cfg.name))][if(am.name.equalsIgnoreCase('returnvalue')._not())][am.type/][/if][/for]?(inp) [/if]∧ ls' = ls .pc:= [generateStartPC(genData, cfg)/] [generateFunctionParameter(cfg, genData)/]∧ mem' = mem; 
	used for : s, ls;

	[/for]
	[for (label : TransitionLabel | genData.transitionLabels->select(transition.instruction.oclIsUndefined()._or((transition.instruction.eClass() = Return)._not())))]
;;	[label.transition.createComment()/]
	[label.name/] :
	⊦ COP([label.name/])(mem, ls, mem', ls') ↔ ls .pc = [genData.generatePrevPC(genData, label.transition)/] ∧ [label.transition.transformTransition(genData)/];
	used for : s, ls;

	[/for]
	[for (label : TransitionLabel | genData.transitionLabels->select(transition.instruction.oclIsUndefined()._not()._and(transition.instruction.eClass() = Return)))]
;;	[label.transition.createComment()/]
	[label.name/]ret :
	⊦ RETOP([label.name/]ret)(mem, ls, mem', ls', return) ↔ ls .pc = [genData.generatePrevPC(genData, label.transition)/] ∧ ls' = ls .pc:= N[generateReturn(genData, label.transition.instruction.oclAsType(Return))/] ∧ mem' = mem;
	used for : s, ls;
	
	[/for]
end enrich
		
[/file]

[/template]

[query private input(genData : GeneratorData) : Boolean = 
if genData.transformationSpecificKeys->indexOf('INPUT_NEEDED').oclIsUndefined() then false else true endif/]

[template private inputType(genData : GeneratorData)]
[if(genData.transformationSpecificKeys->indexOf('INPUT_REF').oclIsUndefined())][basis(genData)/][else]ref[/if]
[/template]

[template private generateFunctionParameter(cfg: ControlFlowDiagram, genData : GeneratorData)]
[for(am : AddressMapping | genData.getFilteredAddresses('func-params:' + cfg.name)->select(type.equalsIgnoreCase('ref'))->select(name.equalsIgnoreCase('returnvalue')._not()))].[am.name/]:= inp [if(input(genData))].[am.type/][i/] [/if][/for]
[for(am : AddressMapping | genData.getFilteredAddresses('func-params:' + cfg.name)->select(type.equalsIgnoreCase(basis(genData)))->select(name.equalsIgnoreCase('returnvalue')._not()))].[am.name/]:=[if(genData.transformationSpecificKeys->indexOf('INPUT_REF').oclIsUndefined()._not() and input(genData)._not())] inp .v [else] inp [/if][if(input(genData))].[am.type/][i/] [/if][/for]
[/template]

[template private generateGlobalConstants(genData : GeneratorData)]
[if(genData.getFilteredAddresses('globals')->size() > 0)]
constants
[for(am : AddressMapping| genData.getFilteredAddresses('globals'))]
	[am.name/] : [am.type/];
[/for][/if]
[/template]

[template private generatePrevPC(genData: GeneratorData, transition: Transition)]
[for (label : LocationLabel | genData.locationLabels)][if(label.controlFlowLocation = transition.source)][label.name/][/if][/for]
[/template]

[template private generateNextPC(genData: GeneratorData, transition: Transition)]
[for (label : LocationLabel | genData.locationLabels)][if(label.controlFlowLocation = transition.target)][label.name/][/if][/for]
[/template]

[template private generateCfgLabel(genData : GeneratorData, cfg : ControlFlowDiagram)]
[for(mapping : OldToNewCfgNameMapping |genData.oldToNewCfgName)][if(mapping.key.equalsIgnoreCase(cfg.name))][mapping.value/][/if][/for]
[/template]

[template private generateStartPC(genData : GeneratorData, cfg : ControlFlowDiagram)]
[for (l : ControlFlowLocation | cfg.locations)]
[if (l = cfg.start)][for (label : LocationLabel | genData.locationLabels)][if (l = label.controlFlowLocation)][label.name/][/if][/for][/if][/for]
[/template]

[template private basis(genData : GeneratorData)]
[for(basis: String | genData.transformationSpecificKeys)][if (basis.equalsIgnoreCase('INT'))]int[/if][if (basis.equalsIgnoreCase('NAT'))]nat[/if][/for]
[/template]

[template private genPhiInstruction(t : Transition, genData : GeneratorData)]
[for(map : PhiMapping| genData.phiMappings)][if(map.transition = t)][for(phi : Phi | map.phi)] .[phi.result.addressToString(genData)/]:= [for(case : PhiCase|phi.cases)][if(case.label.replace('%', '').equalsIgnoreCase(map.blockLabelToUse))][for (am: AddressMapping | genData.addressMappings)][for (a: Address | am.adresses)]
[if (phi.result = a)][if(am.type.equalsIgnoreCase('ref'))][castToRef(case.value, genData)/][else][possiblyAddLS(case.value, genData)/][case.value.valueToString(genData)/][/if][/if][/for][/for][/if][/for][/for][/if][/for]
[/template]


[comment ====== Transitions ======/]
[template private transformTransition(t: Transition, genData: GeneratorData)]
[let pc : String = generateNextPC(genData, t)]
[if((t.instruction.oclIsUndefined() or t.instruction.oclIsKindOf(Select) or t.instruction.oclIsTypeOf(CompareInt) or t.instruction.oclIsTypeOf(CmpXchg))._not())]ls' = ls .pc:= [pc/][/if][if (t.instruction.oclIsUndefined()._not())][t.instruction.genLsPart(t,genData)/][/if][if(t.instruction.oclIsTypeOf(CmpXchg)._not())][t.genPhiInstruction(genData)/][/if][t.instruction.genMemPart(t,genData)/][/let]
[/template]

[comment === WriteDefChainTransition ====/]
[template private transformTransition(t : WriteDefChainTransition, genData : GeneratorData)]
ls' = ls .pc:= [generateNextPC(genData, t)/][if(t.copyAddress.oclIsUndefined()._not())][transformCopyAddress(t, genData)/][/if][if(t.copyValue.oclIsUndefined()._not())][transformCopyValue(t, genData)/][/if] ∧ mem' = mem
[/template]

[template private transformCopyAddress(t : WriteDefChainTransition, genData : GeneratorData)]
 .[t.copyAddress.addressToString(genData)/]:= ls.[valueToString(t.instruction.oclAsType(Store).targetAddress.value, genData)/]
[/template]

[template private transformCopyValue(t : WriteDefChainTransition, genData : GeneratorData)]
 .[t.copyValue.addressToString(genData)/]:= ls.[valueToString(t.instruction.oclAsType(Store).value.value, genData)/]
[/template]

[comment === Flush ====/]
[template private transformTransition(t: FlushTransition, genData: GeneratorData)]
[let flushed : AddressValuePair = getFlushedAvp(t)]
ls' = ls .pc:= [generateNextPC(genData, t)/] ∧ mem' = mem['[ '/][flushed.address.value.castFromRef(genData)/] ,[flushed.values->first().value.castToRef(genData)/][']'/][/let]
[/template]

[query public getFlushedAvp(t: FlushTransition) : AddressValuePair = invoke('de.upb.lina.cfg.tools.GraphUtility','getFlushedAddressValuePair(de.upb.lina.cfg.controlflow.FlushTransition)', Sequence{t})/]

[comment === EarlyReadTransition ====/]
[template private transformTransition(t : EarlyReadTransition, genData: GeneratorData)]
ls' = ls .pc:= [generateNextPC(genData, t)/] .[t.instruction.oclAsType(Load).result.addressToString(genData)/]:= [findValueForEarlyReadExpression(t, genData)/] ∧ mem' = mem
[/template]

[template private findValueForEarlyReadExpression(t : EarlyReadTransition, genData : GeneratorData)]
[for (avp: AddressValuePair | t.source.buffer.addressValuePairs)][if(t.assignmentExpression.equalsIgnoreCase(avp.values->first().value.name(genData)))][let v : Value = avp.values->first().value][possiblyAddLS(v, genData)/][v.valueToString(genData)/][/let][/if][/for]
[/template]

[query private name(v : Value, genData: GeneratorData) : String = 
if(v.oclIsTypeOf(AddressUse)) then 
v.oclAsType(AddressUse).address.name
else if(v.oclIsKindOf(Constant)) then
v.oclAsType(Constant).getValueFromConstant()
else if(v.oclIsTypeOf(PrimitiveValue)) then
v.oclAsType(PrimitiveValue).value
else
''
endif
endif
endif
/]

[comment === Return ====/]
[template private generateReturn(genData : GeneratorData, ret : Return)]
[if(ret.value.oclIsTypeOf(Parameter))] ∧ return = [if(genData.addressMappings->select(name.equalsIgnoreCase('returnvalue'))->first().type.equalsIgnoreCase('ref'))][castToRef(ret.value.oclAsType(Parameter).value, genData)/][else][possiblyAddLS(ret.value.oclAsType(Parameter).value, genData)/][ret.value.oclAsType(Parameter).value.valueToString(genData)/][/if][else]
[if(ret.value.oclAsType(PrimitiveValue).value.equalsIgnoreCase('void')._not())] ∧ return = [ret.value.oclAsType(PrimitiveValue).valueToString(genData)/][/if][/if]
[/template]

[comment ====== Instructions ======/]
[template private genLsPart(e : Instruction, t: Transition, genData : GeneratorData)]
[comment Abstract/]
[/template]

[template private genMemPart(e : Instruction, t: Transition, genData : GeneratorData)]
 ∧ mem' = mem
[/template]

[template private genLsPart(e : ArithmeticOperation, t: Transition, genData : GeneratorData)]
[e.arithmeticInstr(e, genData)/]
[/template]

[query private arithmeticInstr(e : ArithmeticOperation, genData: GeneratorData) : String = 
' .' + e.result.addressToString(genData) + ':= ( ' 
+ possiblyAddLS(e.value1, genData)
+ e.value1.valueToString(genData)
+ ' '
+ e.operation.arithmeticOp() + ' ' 
+ possiblyAddLS(e.value2, genData) 
+ e.value2.valueToString(genData) 
+ ')'
/]

[query private arithmeticOp(s : EString) : String = 
if s.equalsIgnoreCase('add') then
	'+'
else if s.equalsIgnoreCase('sub') or s.equalsIgnoreCase('ashr') then
	'-'
else if s.equalsIgnoreCase('mul') then
	'*'
else if s.equalsIgnoreCase('sdiv') or s.equalsIgnoreCase('udiv') then
	'/'
else
	'NEEDS ATTENTION'
endif
endif
endif
endif
/]

[template private genLsPart(e : Load, t : Transition, genData : GeneratorData)]
 .[e.result.addressToString(genData)/]:= mem['['/][e.address.value.castFromRef(genData)/][']'/][for (am1: AddressMapping | genData.addressMappings)]
[for (a: Address | am1.adresses)]
[if (e.result = a)][if(am1.type.equalsIgnoreCase('ref')._not())] .v[/if][/if][/for][/for]
[/template]

[template private genLsPart(e : CompareInt, t : Transition, genData : GeneratorData)]
[let pc : String = generateNextPC(genData, t)][let op1 : String = e.operand1.valueToString(genData)][let op2 : String = e.operand2.valueToString(genData)][let res : String = e.result.addressToString(genData)]
[if(e.cond.equalsIgnoreCase('eq'))]([compareTypecorrect(e.operand1, e.operand2, genData)/] ⊃ ls' = ls .pc:= [pc/] .[res/]:= [possiblyCastToRef('1',e.result, genData)/] ; ls' = ls .pc:= [pc/] .[res/]:= [possiblyCastToRef('0',e.result, genData)/])[else]
[if(e.cond.equalsIgnoreCase('ne'))]([compareTypecorrect(e.operand1, e.operand2, genData)/] ⊃ ls' = ls .pc:= [pc/] .[res/]:= [possiblyCastToRef('0',e.result, genData)/] ; ls' = ls .pc:= [pc/] .[res/]:= [possiblyCastToRef('1',e.result, genData)/])[else]
[if(e.cond.equalsIgnoreCase('uge')._or(e.cond.equalsIgnoreCase('sge')))]([e.operand1.castFromRef(genData)/] ≥ [e.operand2.castFromRef(genData)/] ⊃ ls' = ls .pc:= [pc/] .[res/]:= [possiblyCastToRef('1',e.result, genData)/] ; ls' = ls .pc:= [pc/] .[res/]:= [possiblyCastToRef('0',e.result, genData)/])[else]
[if(e.cond.equalsIgnoreCase('ugt')._or(e.cond.equalsIgnoreCase('sgt')))]([e.operand1.castFromRef(genData)/] ≤ [e.operand2.castFromRef(genData)/] ⊃ ls' = ls .pc:= [pc/] .[res/]:= [possiblyCastToRef('0',e.result, genData)/] ; ls' = ls .pc:= [pc/] .[res/]:= [possiblyCastToRef('1',e.result, genData)/])[else]
[if(e.cond.equalsIgnoreCase('ult')._or(e.cond.equalsIgnoreCase('slt')))]([e.operand1.castFromRef(genData)/] ≥ [e.operand2.castFromRef(genData)/] ⊃ ls' = ls .pc:= [pc/] .[res/]:= [possiblyCastToRef('0',e.result, genData)/] ; ls' = ls .pc:= [pc/] .[res/]:= [possiblyCastToRef('1',e.result, genData)/])[else]
[if(e.cond.equalsIgnoreCase('ule')._or(e.cond.equalsIgnoreCase('sle')))]([e.operand1.castFromRef(genData)/] ≤ [e.operand2.castFromRef(genData)/] ⊃ ls' = ls .pc:= [pc/] .[res/]:= [possiblyCastToRef('1',e.result, genData)/] ; ls' = ls .pc:= [pc/] .[res/]:= [possiblyCastToRef('0',e.result, genData)/])[/if][/if][/if][/if][/if][/if]
[/let][/let][/let][/let]
[/template]

[template private genLsPart(e : CmpXchg, t: Transition, genData : GeneratorData)]
[let res : String = e.result.addressToString(genData)][let adr : String = e.address.value.valueToString(genData)][let pc : String = generateNextPC(genData, t)]
( mem['['/][e.address.value.castFromRef(genData)/][']'/] = [e.value.value.castToRef(genData)/] ⊃ (ls' = ls .pc:= [pc/] .[res/]:= [possiblyCastToRef('1',e.result, genData)/][genPhiInstruction(t, genData)/] ∧ mem' = mem['['/][e.address.value.castFromRef(genData)/], [e.newValue.value.castToRef(genData)/][']'/]) ; (ls' = ls .pc:= [pc/] .[res/]:= [possiblyCastToRef('0',e.result, genData)/][genPhiInstruction(t, genData)/] ∧ mem' = mem))[/let]
[/let][/let]
[/template]

[template private genMemPart(e : CmpXchg, t: Transition, genData: GeneratorData)]
[/template]

[template private genLsPart(e : AtomicRMW, t: Transition, genData: GeneratorData)]
 .[e.result.addressToString(genData)/]:= mem['['/][e.address.value.castFromRef(genData)/][']'/] .v
[/template]

[template private genMemPart(e: AtomicRMW, t: Transition, genData : GeneratorData)]
[let adr : String = e.address.value.castFromRef(genData)][let arg : String = e.argument.value.valueToString(genData)][let res : String = e.result.addressToString(genData)]
[if(e.operation.equalsIgnoreCase('xchg'))] ∧ mem' = mem['[ '/][adr/], [e.argument.value.castToRef(genData)/][']'/][else]
[if(e.operation.equalsIgnoreCase('add'))] ∧ mem' = mem['[ '/][adr/], ⌜(mem['['/][adr/][']'/] .v) + [possiblyAddLS(e.argument.value, genData)/][arg/]⌝[']'/][else]
[if(e.operation.equalsIgnoreCase('sub'))] ∧ mem' = mem['[ '/][adr/], ⌜(mem['['/][adr/][']'/] .v) - [possiblyAddLS(e.argument.value, genData)/][arg/]⌝[']'/][else]
[if(e.operation.equalsIgnoreCase('max')._or(e.operation.equalsIgnoreCase('umax')))] ∧ (mem['['/][adr/][']'/] > [e.argument.value.castToRef(genData)/] ⊃ mem' = mem ; mem' = mem['[ '/][adr/], [e.argument.value.castToRef(genData)/][']'/])[else]
[if(e.operation.equalsIgnoreCase('min')._or(e.operation.equalsIgnoreCase('umin')))] ∧ (mem['['/][adr/][']'/] < [e.argument.value.castFromRef(genData)/] ⊃ mem' = mem ; mem' = mem['[ '/][adr/], [e.argument.value.castToRef(genData)/][']'/])[else]
unsupported operation
[/if][/if][/if][/if][/if][/let][/let][/let]
[/template]

[template private genMemPart(e: Branch, t: Transition, genData : GeneratorData)]
[if(e.condition.oclIsUndefined()._not())] ∧ [for(ct : ConstraintMapping | genData.constraints)][if(ct.transition = t)][if(ct.condition.contains('!')._not())][possiblyAddLS(e.condition, genData)/][e.condition.valueToString(genData)/] = 1[else][possiblyAddLS(e.condition, genData)/][e.condition.valueToString(genData)/] = 0[/if][/if][/for][/if]
[/template]

[template private genLsPart(e : GetElementPtr, t: Transition, genData: GeneratorData)]
 .[e.result.addressToString(genData)/]:= [for(mm : MemorySizeMapping | genData.memorySizeMappings)][if(mm.instruction = e)][let offset : EInt = mm.offset][possiblyCastToRef('('+ e.aggregate.value.castFromRef(genData) +' + '+ offset + ')', e.result, genData)/][/let][/if][/for]
[/template]

[template private genLsPart(e : Cast, t: Transition, genData: GeneratorData)]
 .[e.result.addressToString(genData)/]:= [for (amRes: AddressMapping | genData.addressMappings)]
[for (ad: Address | amRes.adresses)]
[if (e.result = ad)][e.value.getTypeOfCast(amRes.type, genData)/][/if][/for][/for]
[/template]

[template private getTypeOfCast(v: Value, resultType : String, genData : GeneratorData)]
[if (v.oclIsTypeOf(PrimitiveValue))][v.oclAsType(PrimitiveValue).value.transformBooleanToNumber()/]
[elseif ( v.oclIsKindOf(Constant))][v.oclAsType(Constant).getValueFromConstant()/] 
[elseif (v.oclIsTypeOf(AddressUse))]
[for (am: AddressMapping | genData.addressMappings)]
[for (a: Address | am.adresses)]
[if (v.oclAsType(AddressUse).address = a)][if (resultType.equalsIgnoreCase(genData.basis()) and am.type.equalsIgnoreCase('ref'))][v.castFromRef(genData)/][elseif(resultType.equalsIgnoreCase('ref') and am.type.equalsIgnoreCase(genData.basis()))]
[v.castToRef(genData)/][else][possiblyAddLS(v, genData)/][v.valueToString(genData)/][/if][/if][/for][/for][/if]
[/template]

[template private genLsPart(e : Select, t : Transition, genData : GeneratorData)]
[let pc : String = generateNextPC(genData, t)]
([possiblyAddLS(e.condition.value, genData)/][e.condition.value.valueToString(genData)/] = 1 ⊃ ls' = ls .pc:= [pc/] .[e.result.addressToString(genData)/]:= [possiblyAddLS(e.trueValue.value, genData)/][e.trueValue.value.valueToString(genData)/] ; ls' = ls .pc:= [pc/] .[e.result.addressToString(genData)/]:= [possiblyAddLS(e.elseValue.value, genData)/][e.elseValue.value.valueToString(genData)/])
[/let]
[/template]

[template private genLsPart(e : Switch, t : Transition, genData : GeneratorData)]
 ∧[let cond : String = t.oclAsType(GuardedTransition).condition.substitute('[', '').substitute(']', '').trim()]
[for (case : SwitchCase | e.cases) separator (' ∧')] [possiblyAddLS(e.caseValue.value, genData)/][e.caseValue.value.valueToString(genData)/][if(case.caseValue.value.valueToString(genData).trim().equalsIgnoreCase(cond))] = [cond/][else] ≠ [case.caseValue.value.valueToString(genData).trim()/][/if][/for][/let]
[/template]

[template private genNestedCast(cast : NestedCast, genData : GeneratorData)]
[if(extractType(cast.from).contains('*'))][getTypeOfCast(cast.value, 'ref', genData)/][else][getTypeOfCast(cast.value, genData.basis(), genData)/][/if]
[/template]

[comment ====== General Calls ======/]
[template private possiblyCastToRef(s : String, address : Address, genData : GeneratorData)]
[for (am: AddressMapping | genData.addressMappings)][for (a: Address | am.adresses)][if (address = a)][if(am.type.equalsIgnoreCase('ref'))]⌜[s/]⌝[else][s/][/if][/if][/for][/for]
[/template]

[template private addressToString(address: Address, genData: GeneratorData)]
[for (am: AddressMapping | genData.addressMappings)][for (a: Address | am.adresses)][if (address = a)][am.name/][/if][/for][/for]
[/template]

[template private possiblyZeroBeforeMinus(s : EInt)]
[if(s < 0)](0 - [s.abs()/])[else][s/][/if]
[/template]

[template private valueToString(v : Value, genData: GeneratorData)]
[if (v.oclIsTypeOf(PrimitiveValue))][v.oclAsType(PrimitiveValue).value.transformBooleanToNumber()/][elseif ( v.oclIsKindOf(Constant))]
[v.oclAsType(Constant).getValueFromConstant()/] [elseif (v.oclIsTypeOf(AddressUse))]
[for (am: AddressMapping | genData.addressMappings)][for (a: Address | am.adresses)][if (v.oclAsType(AddressUse).address = a)][am.name.transformBooleanToNumber()/][/if][/for][/for][elseif(v.oclIsKindOf(NestedGetElementPtr))]
[genNestedGetElemPtr(v.oclAsType(NestedGetElementPtr), genData)/][elseif(v.oclIsKindOf(NestedCast))]
[genNestedCast(v.oclAsType(NestedCast), genData)/][/if]
[/template]

[template private possiblyAddLS(v : Value, genData: GeneratorData)]
[if(v.oclIsTypeOf(AddressUse))]
[for(am : AddressMapping | genData.getFilteredAddresses('all-declare-params'))][for(a: Address | am.adresses)][if(a = v.oclAsType(AddressUse).address)]ls .[/if][/for][/for][/if]
[/template]

[template private transformBooleanToNumber(b : String)]
[if(b.equalsIgnoreCase('true'))]1[elseif (b.equalsIgnoreCase('false'))]0[else][b/][/if]
[/template]

[template public castToRef(v : Value, genData : GeneratorData)]
[if (v.oclIsTypeOf(PrimitiveValue))][if(v.oclAsType(PrimitiveValue).value.equalsIgnoreCase('null'))]null[else]⌜[possiblyAddLS(v, genData)/][v.valueToString(genData)/]⌝[/if][elseif ( v.oclIsKindOf(Constant))]
⌜[v.oclAsType(Constant).getValueFromConstant()/]⌝[elseif (v.oclIsTypeOf(AddressUse))]
[for (am: AddressMapping | genData.addressMappings)]
[for (a: Address | am.adresses)]
[if (v.oclAsType(AddressUse).address = a)][if (am.type.equalsIgnoreCase(genData.basis()))]⌜ [possiblyAddLS(v, genData)/][am.name.transformBooleanToNumber()/]⌝[else][possiblyAddLS(v, genData)/][am.name.transformBooleanToNumber()/][/if][/if][/for][/for][elseif (v.oclIsTypeOf(NestedGetElementPtr))][genNestedGetElemPtr(v.oclAsType(NestedGetElementPtr), genData)/][elseif (v.oclIsTypeOf(NestedCast))][genNestedCast(v.oclAsType(NestedCast), genData)/][/if]
[/template]

[template public castFromRef(v : Value, genData : GeneratorData)]
[if (v.oclIsTypeOf(PrimitiveValue))][possiblyAddLS(v, genData)/][v.oclAsType(PrimitiveValue).value.transformBooleanToNumber()/]
[elseif ( v.oclIsKindOf(Constant))][v.oclAsType(Constant).getValueFromConstant()/] 
[elseif (v.oclIsTypeOf(AddressUse))]
[for (am: AddressMapping | genData.addressMappings)]
[for (a: Address | am.adresses)]
[if (v.oclAsType(AddressUse).address = a)][if (am.type.equalsIgnoreCase('ref'))][possiblyAddLS(v, genData)/][am.name.transformBooleanToNumber()/] .v[else][possiblyAddLS(v, genData)/][am.name.transformBooleanToNumber()/][/if][/if][/for][/for][elseif (v.oclIsTypeOf(NestedGetElementPtr))][genNestedGetElemPtr(v.oclAsType(NestedGetElementPtr), genData)/][elseif (v.oclIsTypeOf(NestedCast))][genNestedCast(v.oclAsType(NestedCast), genData)/][/if]
[/template]

[template private genNestedGetElemPtr(nestedPtr : NestedGetElementPtr, genData : GeneratorData)]
([nestedPtr.aggregate.value.castFromRef(genData)/][for(mm : MemorySizeMapping | genData.memorySizeMappings)][if(mm.instruction = nestedPtr)] + [mm.offset/][/if][/for])
[/template]

[template private compareTypecorrect(v1 : Value, v2 : Value, genData : GeneratorData)]
[let ls1 : String = possiblyAddLS(v1, genData)][let ls2 : String = possiblyAddLS(v2, genData)]
[if(v1.oclIsTypeOf(AddressUse) or v2.oclIsTypeOf(AddressUse))]
	[if(v1.oclIsTypeOf(AddressUse))]
		[for (am1: AddressMapping | genData.addressMappings)]
		[for (a: Address | am1.adresses)]
		[if (v1.oclAsType(AddressUse).address = a)]
			[if(v2.oclIsTypeOf(AddressUse))]
				[for (am2: AddressMapping | genData.addressMappings)]
				[for (a: Address | am2.adresses)]
					[if (v2.oclAsType(AddressUse).address = a)]
					[if(am1.type.equalsIgnoreCase(genData.basis()) and am2.type.equalsIgnoreCase('ref'))]⌜[ls1/][am1.name/]⌝ = [ls2/][am2.name/][else]
					[if(am1.type.equalsIgnoreCase('ref') and am2.type.equalsIgnoreCase(genData.basis()))][ls1/][am1.name/] = ⌜[ls2/][am2.name/]⌝[else][ls1/][am1.name/] = [ls2/][am2.name/]
					[/if][/if][/if]
				[/for][/for]
			[else]
				[if(v2.oclIsTypeOf(PrimitiveValue) and am1.type.equalsIgnoreCase('ref'))][ls1/][am1.name/] = [if(v2.oclAsType(PrimitiveValue).value.equalsIgnoreCase('null'))]null[else]⌜[ls2/][v2.valueToString(genData)/]⌝[/if][else]
				[if(v2.oclIsKindOf(Constant) and am1.type.equalsIgnoreCase('ref'))][ls1/][am1.name/] = ⌜[v2.oclAsType(Constant).getValueFromConstant()/]⌝[else][ls1/][v1.valueToString(genData)/] = [ls2/][v2.valueToString(genData)/]
				[/if][/if]
			[/if]
		[/if]
		[/for]
		[/for]
	[elseif(v2.oclIsTypeOf(AddressUse))]
		[for (am2: AddressMapping | genData.addressMappings)]
		[for (a: Address | am2.adresses)]
		[if (v2.oclAsType(AddressUse).address = a)]
			[if(v1.oclIsTypeOf(PrimitiveValue) and am2.type.equalsIgnoreCase('ref'))][if(v1.oclAsType(PrimitiveValue).value.equalsIgnoreCase('null'))]null[else]⌜[ls1/][v1.valueToString(genData)/]⌝[/if] = [ls2/][am2.name/][else]
			[if(v1.oclIsKindOf(Constant) and am2.type.equalsIgnoreCase('ref'))]⌜[v1.oclAsType(Constant).getValueFromConstant()/]⌝ = [ls2/][am2.name/][else][ls1/][v1.valueToString(genData)/] = [ls2/][v2.valueToString(genData)/]
			[/if][/if]
		[/if][/for][/for]
	[else][ls1/][v1.valueToString(genData)/] = [ls2/][v2.valueToString(genData)/][/if]
[else][ls1/][v1.valueToString(genData)/] = [ls2/][v2.valueToString(genData)/][/if]
[/let][/let]
[/template]

[template public getValueFromConstant(c : Constant)]
[if (c.oclIsTypeOf(IntegerConstant))][c.oclAsType(IntegerConstant).value.possiblyZeroBeforeMinus()/][else][c.oclAsType(DecimalConstant).value/][/if]
[/template]

[template private createComment(t : Transition)]
[let l : Load = t.instruction]
[l.result.name/] = load [l.address.displayParameter()/][if(l.align.oclIsUndefined()._not())], align [l.align/][/if][for(m : MetaArgValue | l.meta)], [m.arg/] [m.value/][/for][elselet s : Store = t.instruction]
store [s.value.displayParameter()/], [s.targetAddress.displayParameter()/][if(s.align.oclIsUndefined()._not())], align [s.align/][/if][for(m : MetaArgValue | s.meta)], [m.arg/] [m.value/][/for][elselet s : GetElementPtr = t.instruction]
[s.result.name/] = getelementptr [s.aggregate.displayParameter()/][for(index : Parameter | s.indices)], [index.displayParameter()/][/for][elselet s : Alloc = t.instruction]
[s.result.name/] = alloca [s.type.extractType()/][if(s.numOfElements.oclIsUndefined()._not())], [s.numOfElements.displayParameter()/][/if][if(s.align.oclIsUndefined()._not())], align [s.align/][/if][elselet s : CmpXchg = t.instruction]
[s.result.name/] = cmpxchg [if(s.volatile)]volatile [/if][s.address.displayParameter()/], [s.value.displayParameter()/], [s.newValue.displayParameter()/] [s.ordering/][elselet s : AtomicRMW = t.instruction]
[s.result.name/] = atomicrmw [if(s.volatile)]volatile [/if][s.operation/] [s.address.displayParameter()/], [s.argument.displayParameter()/] [s.ordering/][elselet s : Fence = t.instruction]
fence [s.ordering/][elselet s : Return = t.instruction]
ret [if(s.value.oclIsTypeOf(Parameter))][s.value.oclAsType(Parameter).displayParameter()/][else][s.value.oclAsType(PrimitiveValue).value/][/if][elselet s : Branch = t.instruction]
br [if(s.condition.oclIsUndefined()._not())][s.condition.extractValue()/], [/if]label [s.destination/][if(s.elseDestination.oclIsUndefined()._not())], label [s.elseDestination/][/if][elselet s : Switch = t.instruction]
switch [s.caseValue.displayParameter()/], label [s.defaultCase/] ['['/] [for(case : SwitchCase | s.cases)][case.caseValue.displayParameter()/], label [case.destination/] [/for][']'/][elselet s : IndirectBranch = t.instruction]
indirectbr [s.target.displayParameter()/], ['['/][for(target : EString | s.potTargetLabels)separator(', ')]label [target/][/for][']'/]
	NEEDS ATTENTION ![elselet s : Invoke = t.instruction]
invoke [s.returnType.extractType()/] [s.name.name/] ([if(s.pList.oclIsUndefined()._not())][for(param : Parameter | s.pList.params)separator(', ')][param.displayParameter()/][/for][/if]) to label [s.targetLabel/] unwind label [s.unwindTargetLabel/]
	NEEDS ATTENTION ![elselet s : Resume = t.instruction]
resume [s.type.extractType()/] [s.value.extractValue()/]
	NEEDS ATTENTION ![elselet s : LogicOperation = t.instruction]
[s.result.name/] = [s.operation/] [s.optype.extractType()/] [s.value1.extractValue()/], [s.value2.extractValue()/]
	NEEDS ATTENTION ![elselet s : ArithmeticOperation = t.instruction]
[s.result.name/] = [s.operation/] [s.optype.extractType()/] [s.value1.extractValue()/], [s.value2.extractValue()/][elselet s : Compare = t.instruction]
[s.result.name/] = [if(s.oclIsTypeOf(CompareInt))]icmp[else]fcmp[/if] [s.cond/] [s.opType.extractType()/] [s.operand1.extractValue()/], [s.operand2.extractValue()/][elselet s : Cast = t.instruction]
[s.result.name/] = [s.operation/] [s.from.extractType()/] [s.value.extractValue()/] to [s.to.extractType()/][elselet s : ShuffleVector = t.instruction]
[s.result.name/] = shufflevector [s.value1.displayParameter()/], [s.value2.displayParameter()/], [s.mask.displayParameter()/]
	NEEDS ATTENTION ![elselet s : InsertElement = t.instruction]
[s.result.name/] = insertelement [s.vector.displayParameter()/], [s.value.displayParameter()/], [s.index.displayParameter()/]
	NEEDS ATTENTION ![elselet s : ExtractElement = t.instruction]
[s.result.name/] = extractelement [s.vector.displayParameter()/], [s.index.displayParameter()/]
	NEEDS ATTENTION ![elselet s : InsertValue = t.instruction]
[s.result.name/] = insertvalue [s.aggerate.displayParameter()/], [s.value.displayParameter()/][for(i : EInt | s.index)separator(', ')][i/][/for]
	NEEDS ATTENTION ![elselet s : ExtractValue = t.instruction]
[s.result.name/] = extractvalue [s.aggerate.displayParameter()/][for(i : EInt | s.index)separator(', ')][i/][/for]
	NEEDS ATTENTION ![elselet s : Phi = t.instruction]
[s.result.name/] = phi [s.type.extractType()/] [for(case : PhiCase | s.cases)]['['/][case.value.extractType()/], [case.label/][']'/][/for][elselet s : Select = t.instruction]
[s.result.name/] = select [s.condition.displayParameter()/], [s.trueValue.displayParameter()/], [s.elseValue.displayParameter()/][elselet s : Call = t.instruction]
[if(s.result.oclIsUndefined()._not())][s.result.name/] = [/if]call [s.function.displayParameter()/] ([if(s.pList.oclIsUndefined()._not())][for(param : Parameter | s.pList.params)separator(', ')][param.displayParameter()/][/for][/if])
	NEEDS ATTENTION ![elselet s : VariableAttributeAccess = t.instruction]
[s.result.name/] = va_arg [s.vaList.displayParameter()/], [s.aType.extractType()/]
	NEEDS ATTENTION ![elselet s : LandingPad = t.instruction]
[s.result.name/] = landingpad [s.struct.extractType()/] personality [s.personalitytype.extractType()/] [s.personalityvalue.extractValue()/]
	NEEDS ATTENTION ![else]
[if(t.instruction.oclIsUndefined()._not())][t.instruction.eClass().name/]
	NEEDS ATTENTION ![else][t.eClass().name/][/if][/let]
[/template]

[template private displayParameter(param : Parameter)]
[param.type.extractType()/] [param.value.extractValue()/]
[/template]

[template public extractType(type : EObject)]
[let type : Predefined = type]
[type.type/][if(type.pointer.oclIsUndefined()._not())][type.pointer/][/if][elselet type : AddressUse = type]
[type.address.name/] [if(type.pointer.oclIsUndefined()._not())][type.pointer/][/if][elselet type : FunctionType = type]
[type.returnType.extractType()/]([if(type.parameter.oclIsUndefined()._not())][for(t : FunctionParameter | type.parameter.params)separator(', ')][t.type.extractType()/] [if(t.value.oclIsUndefined()._not())][t.value.name/][/if][/for][/if])[if(type.pointer.oclIsUndefined()._not())][type.pointer/][/if][elselet struct : Structure = type]
{[for(type : EObject | struct.types)separator(', ')][type.extractType()/][/for]}[if(struct.pointer.oclIsUndefined()._not())][struct.pointer/][/if][elselet type : Array = type]
['['/][if(type.length.oclIsUndefined()._not())][type.length/] x [extractType(type.type)/][/if][']'/][if(type.pointer.oclIsUndefined()._not())][type.pointer/][/if][elselet type : Vector = type]
<[type.length/] x [extractType(type.type.oclAsType(EObject))/]>;[/let]
[/template]

[template extractValue(v : Value)]
[let value : AddressUse = v]
[value.address.name/][elselet value : PrimitiveValue = v]
[value.value/][elselet value : IntegerConstant = v]
[value.value/][elselet value : NestedGetElementPtr = v]
getelementptr [value.aggregate.displayParameter()/][for(index : Parameter | value.indices)], [index.displayParameter()/][/for][elselet value : NestedCast = v]
[value.operation/]([value.from.extractType()/] [value.value.extractValue()/] to [value.to.extractType()/])[/let]
[/template]